	COMPILATION LISTING OF SEGMENT inst_length_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1600.5 mst Mon
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 /****^  HISTORY COMMENTS:
       15*  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
       16*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
       17*     Added format control comment to make the source more readable.
       18*                                                   END HISTORY COMMENTS */
       19 
       20 
       21 /* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */
       22 
       23 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       24 
       25 inst_length_:
       26   procedure (ip, special) returns (fixed bin);
       27 
       28   /* given a ptr to an instruction (ip) - return the number of words that must be
       29*   moved to relocate the instruction.  Note special handling of an "xec" off
       30*   pl1_operators
       31*
       32*   Issue Unresolved - Seems to assume that all "xec" are xec7s of pl1_operators
       33*   This may not be true for COBOL and for sure its false for ALM.  Does it need
       34*   a "language_type" parameter?
       35*
       36**/
       37 
       38   dcl (
       39       ip			pointer,	/* to instruction */
       40       special		fixed bin
       41       )			parameter;/* if non-EIS, nonzero means special modifiers;
       42*						   if EIS, then number of EIS-type descriptors */
       43   dcl pop			pointer;	/* to instruction in pl1 operators */
       44   dcl op_index		fixed bin;/* op code, used as index into op_mnemonic */
       45 
       46   dcl 1 instruction_overlay	based aligned,
       47 				/* for picking out op code */
       48        2 tag		bit (3) unaligned,
       49        2 offset		fixed bin (14) unaligned,
       50        2 opcode		bit (10) unaligned;
       51 
       52   dcl pl1_operators_$operator_table
       53 			external;
       54 
       55 
       56   dcl (addr, addrel, fixed)	builtin;
       57 				/* find out length of the instruction */
       58   op_index = fixed (ip -> instruction_overlay.opcode, 10, 0);
       59 				/* get instruction_overlay.opcode */
       60 
       61   /* There is one degenerate case:  that of an xec of an eis instruction in the operators.
       62*   The descriptors follow the xec, so its lenght must be adjusted.  */
       63 
       64   if op_mnemonic_$op_mnemonic (op_index).opcode = "xec " then do;
       65       pop = addrel (addr (pl1_operators_$operator_table), ip -> offset);
       66       op_index = fixed (pop -> instruction_overlay.opcode, 10, 0);
       67     end;
       68 
       69   special = op_mnemonic_$op_mnemonic (op_index).num_desc;
       70   return (op_mnemonic_$op_mnemonic (op_index).num_words);
       71 
  1     1 /* BEGIN INCLUDE FILE ... op_mnemonic_format.incl.pl1
  1     2*
  1     3*   James R. Davis 20 May 79 */
  1     4 
  1     5 dcl 1 op_mnemonic_$op_mnemonic (0:1023) external static aligned,
  1     6       2 opcode char (6) unal,
  1     7       2 dtype  fixed bin (2) unal,	/* 0 = alpha, 1 = bit, 2 = numeric */
  1     8       2 num_desc fixed bin (5) unal,
  1     9       2 num_words fixed bin (8) unal;
  1    10 
  1    11 dcl  modifier (0:63) char (3) aligned int static options (constant) init (
  1    12      " ", "au", "qu", "du", "ic", "al", "ql", "dl",
  1    13      "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7",
  1    14      "*", "au*", "qu*", "...", "ic*", "al*", "ql*", "...",
  1    15      "x0*", "x1*", "x2*", "x3*", "x4*", "x5*", "x6*", "x7*",
  1    16      "f", "itp", "...", "its", "sd", "scr", "f2", "f3",
  1    17      "ci", "i", "sc", "ad", "di", "dic", "id", "idc",
  1    18      "*n", "*au", "*qu", "*du", "*ic", "*al", "*ql", "*dl",
  1    19      "*x0", "*x1", "*x2", "*x3", "*x4", "*x5", "*x6", "*x7");
  1    20 
  1    21 /* Note: if num_words = 1, then num_desc is a flag
  1    22*   if non0, the tag field of the instruction is to be interpreted specially
  1    23*   for example, stba or stca
  1    24**/
  1    25 /* END INCLUDE FILE op_mnemonic_format.incl.pl1 */
       72 
       73 
       74   end inst_length_;
       75 
       76 
       77 
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1342.0  inst_length_.pl1                  >special_ldd>install>MR12.2-1184>inst_length_.pl1
72           1    11/26/79  1320.6  op_mnemonic_format.incl.pl1       >ldd>include>op_mnemonic_format.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 56 ref 65
addrel                                                 builtin function         dcl 56 ref 65
fixed                                                  builtin function         dcl 56 ref 58 66
instruction_overlay                    based           structure                level 1 dcl 46
ip                                     parameter       pointer                  dcl 38 ref 25 58 65
num_desc                  1(21) 000012 external static fixed bin(5,0)           array level 2 packed packed unaligned dcl 1-5 ref 69
num_words                 1(27) 000012 external static fixed bin(8,0)           array level 2 packed packed unaligned dcl 1-5 ref 70
offset                    0(03)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 46 ref 65
op_index                        000102 automatic       fixed bin(17,0)          dcl 44 set ref 58* 64 66* 69 70
op_mnemonic_$op_mnemonic        000012 external static structure                array level 1 dcl 1-5
opcode                    0(18)        based           bit(10)                  level 2 in structure "instruction_overlay" packed
                                                                                  packed unaligned dcl 46 in procedure
                                                                                  "inst_length_" ref 58 66
opcode                          000012 external static char(6)                  array level 2 in structure
                                                                                  "op_mnemonic_$op_mnemonic" packed packed unaligned
                                                                                  dcl 1-5 in procedure "inst_length_" ref 64
pl1_operators_$operator_table   000010 external static fixed bin(17,0)          dcl 52 set ref 65
pop                             000100 automatic       pointer                  dcl 43 set ref 65* 66
special                                parameter       fixed bin(17,0)          dcl 38 set ref 25 69*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
modifier                               internal static char(3)                  initial array dcl 1-11

NAME DECLARED BY EXPLICIT CONTEXT.
inst_length_                    000007 constant        entry                    external dcl 25

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       142         156      67         152
Length       344      67        14         151      52           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
inst_length_                         70 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
inst_length_             000100 pop                         inst_length_
                         000102 op_index                    inst_length_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return_mac          ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
op_mnemonic_$op_mnemonic      pl1_operators_$operator_table




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 000003        58 000014        64 000022        65 000036        66 000045        67 000051        69 000052
     70 000062


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
