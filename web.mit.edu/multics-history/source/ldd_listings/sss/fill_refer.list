	COMPILATION LISTING OF SEGMENT fill_refer
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1825.72_Fri_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 fill_refer: proc(pp,qq,copy) returns(ptr);
       12 
       13 dcl	(pp,qq) ptr,
       14 	copy bit(1) aligned;
       15 
       16 dcl	(i,n) fixed bin(15),
       17 	(p,q) ptr,
       18 	null builtin;
       19 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       20 
  7     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  7     2 
  7     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  7     4 
  7     5 dcl (	block_node		initial("000000001"b),
  7     6 	statement_node		initial("000000010"b),
  7     7 	operator_node		initial("000000011"b),
  7     8 	reference_node		initial("000000100"b),
  7     9 	token_node		initial("000000101"b),
  7    10 	symbol_node		initial("000000110"b),
  7    11 	context_node		initial("000000111"b),
  7    12 	array_node		initial("000001000"b),
  7    13 	bound_node		initial("000001001"b),
  7    14 	format_value_node		initial("000001010"b),
  7    15 	list_node			initial("000001011"b),
  7    16 	default_node		initial("000001100"b),
  7    17 	machine_state_node		initial("000001101"b),
  7    18 	source_node		initial("000001110"b),
  7    19 	label_node		initial("000001111"b),
  7    20 	cross_reference_node	initial("000010000"b),
  7    21 	sf_par_node		initial("000010001"b),
  7    22 	temporary_node		initial("000010010"b),
  7    23 	label_array_element_node	initial("000010011"b),
  7    24 	by_name_agg_node		initial("000010100"b))
  7    25 				bit(9) internal static aligned options(constant);
  7    26 
  7    27 dcl	1 node			based aligned,
  7    28 	2 type			unal bit(9),
  7    29 	2 source_id		unal structure,
  7    30 	  3 file_number		bit(8),
  7    31 	  3 line_number		bit(14),
  7    32 	  3 statement_number	bit(5);
  7    33 
  7    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       21 
  8     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  8     2 
  8     3 dcl	1 reference		based aligned,
  8     4 	2 node_type		bit(9) unaligned,
  8     5 	2 array_ref		bit(1) unaligned,
  8     6 	2 varying_ref		bit(1) unaligned,
  8     7 	2 shared			bit(1) unaligned,
  8     8 	2 put_data_sw		bit(1) unaligned,
  8     9 	2 processed		bit(1) unaligned,
  8    10 	2 units			fixed(3) unaligned,
  8    11 	2 ref_count		fixed(17) unaligned,
  8    12 	2 c_offset		fixed(24),
  8    13 	2 c_length		fixed(24),
  8    14 	2 symbol			ptr unaligned,
  8    15 	2 qualifier		ptr unaligned,
  8    16 	2 offset			ptr unaligned,
  8    17 	2 length			ptr unaligned,
  8    18 	2 subscript_list		ptr unaligned,
  8    19 						/* these fields are used by the 645 code generator */
  8    20 	2 address			structure unaligned,
  8    21 	  3 base			bit(3),
  8    22 	  3 offset		bit(15),
  8    23 	  3 op			bit(9),
  8    24 	  3 no_address		bit(1),
  8    25 	  3 inhibit		bit(1),
  8    26 	  3 ext_base		bit(1),
  8    27 	  3 tag			bit(6),
  8    28 	2 info			structure unaligned,
  8    29 	  3 address_in		structure,
  8    30 	    4 b			dimension(0:7) bit(1),
  8    31 	    4 storage		bit(1),
  8    32 	  3 value_in		structure,
  8    33 	    4 a			bit(1),
  8    34 	    4 q			bit(1),
  8    35 	    4 aq			bit(1),
  8    36 	    4 string_aq		bit(1),
  8    37 	    4 complex_aq		bit(1),
  8    38 	    4 decimal_aq		bit(1),
  8    39 	    4 b			dimension(0:7) bit(1),
  8    40 	    4 storage		bit(1),
  8    41 	    4 indicators		bit(1),
  8    42 	    4 x			dimension(0:7) bit(1),
  8    43 	  3 other			structure,
  8    44 	    4 big_offset		bit(1),
  8    45 	    4 big_length		bit(1),
  8    46 	    4 modword_in_offset	bit(1),
  8    47 	2 data_type		fixed(5) unaligned,
  8    48 	2 bits			structure unaligned,
  8    49 	  3 padded_ref		bit(1),
  8    50 	  3 aligned_ref		bit(1),
  8    51 	  3 long_ref		bit(1),
  8    52 	  3 forward_ref		bit(1),
  8    53 	  3 ic_ref		bit(1),
  8    54 	  3 temp_ref		bit(1),
  8    55 	  3 defined_ref		bit(1),
  8    56 	  3 evaluated		bit(1),
  8    57 	  3 allocate		bit(1),
  8    58 	  3 allocated		bit(1),
  8    59 	  3 aliasable		bit(1),
  8    60 	  3 even			bit(1),
  8    61 	  3 perm_address		bit(1),
  8    62 	  3 aggregate		bit(1),
  8    63 	  3 hit_zero		bit(1),
  8    64 	  3 dont_save		bit(1),
  8    65 	  3 fo_in_qual		bit(1),
  8    66 	  3 hard_to_load		bit(1),
  8    67 	2 relocation		bit(12) unaligned,
  8    68 	2 more_bits		structure unaligned,
  8    69 	  3 substr		bit(1),
  8    70 	  3 padded_for_store_ref	bit(1),
  8    71 	  3 aligned_for_store_ref	bit(1),
  8    72 	  3 mbz			bit(15),
  8    73 	2 store_ins		bit(18) unaligned;
  8    74 
  8    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       22 
  9     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  9     2 
  9     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  9     4 
  9     5 /* format: style3 */
  9     6 dcl	1 operator	based aligned,
  9     7 	  2 node_type	bit (9) unaligned,
  9     8 	  2 op_code	bit (9) unaligned,
  9     9 	  2 shared	bit (1) unaligned,
  9    10 	  2 processed	bit (1) unaligned,
  9    11 	  2 optimized	bit (1) unaligned,
  9    12 	  2 number	fixed (14) unaligned,
  9    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  9    14 
  9    15 dcl	max_number_of_operands
  9    16 			fixed bin (15) int static options (constant) initial (32767);
  9    17 
  9    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       23 
 10     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 10     2 
 10     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 10     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 10     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 10     6 /* Modified: 26 July 82 BIM wordno, segno */
 10     7 
 10     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 10     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 10    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 10    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 10    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 10    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 10    14 
 10    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 10    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 10    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 10    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 10    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 10    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 10    21 
 10    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 10    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 10    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 10    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 10    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 10    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 10    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 10    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 10    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 10    31 
 10    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 10    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 10    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 10    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 10    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 10    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 10    38 
 10    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 10    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 10    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 10    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 10    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 10    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 10    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 10    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 10    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 10    48 
 10    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 10    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 10    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 10    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 10    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 10    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 10    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 10    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 10    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 10    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 10    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 10    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 10    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 10    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 10    63 
 10    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 10    65*						   opnd(2) <- opnd(3) / 36		*/
 10    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 10    67*						   opnd(2) <- opnd(3) / 4		*/
 10    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 10    69*						   opnd(2) <- opnd(3) / 2		*/
 10    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 10    71 
 10    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 10    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 10    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 10    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 10    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 10    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 10    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 10    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 10    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 10    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 10    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 10    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 10    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 10    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 10    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 10    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 10    88 
 10    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 10    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 10    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 10    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 10    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 10    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 10    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 10    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 10    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 10    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 10    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 10   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 10   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 10   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 10   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 10   104 
 10   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 10   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 10   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 10   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 10   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 10   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 10   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 10   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 10   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 10   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 10   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 10   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 10   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 10   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 10   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 10   120 
 10   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 10   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 10   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 10   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 10   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 10   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 10   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 10   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 10   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 10   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 10   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 10   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 10   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 10   134 
 10   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 10   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 10   137 
 10   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 10   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 10   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 10   141*						   opnd(2) is the file name
 10   142*						   opnd(3) is the block	*/
 10   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 10   144*						   opnd(2) is the file name	*/
 10   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 10   146*						   opnd(2) is the file name */
 10   147 
 10   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 10   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 10   150*						   opnd(3) is old value, (4) is new value. */
 10   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 10   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 10   153 
 10   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 10   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 10   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 10   157*						   opnd(5) is the list */
 10   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 10   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 10   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 10   161 
 10   162 	r_parn		initial("011110001"b),	/* format op code			*/
 10   163 	l_parn		initial("011110010"b),
 10   164 	r_format		initial("011110011"b),
 10   165 	c_format		initial("011110100"b),
 10   166 	f_format		initial("011110101"b),
 10   167 	e_format		initial("011110110"b),
 10   168 	b_format		initial("011110111"b),
 10   169 	a_format		initial("011111000"b),
 10   170 	x_format		initial("011111001"b),
 10   171 	skip_format	initial("011111010"b),
 10   172 	column_format	initial("011111011"b),
 10   173 	page_format	initial("011111100"b),
 10   174 	line_format	initial("011111101"b),
 10   175 	picture_format	initial("011111110"b),
 10   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 10   177 
 10   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 10   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 10   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 10   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 10   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 10   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 10   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 10   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 10   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 10   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 10   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 10   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 10   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 10   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 10   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 10   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 10   194 
 10   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 10   196 /* They are processed by the semantic translator.						*/
 10   197 
 10   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 10   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 10   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 10   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 10   202 						/* opnd(3) is skip, opnd(4) is list	*/
 10   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 10   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 10   205 						/* opnd(3) is skip,opnd(4) is line	*/
 10   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 10   207 	open_file		initial("100011001"b),
 10   208 	close_file	initial("100011010"b),
 10   209 	read_file		initial("100011011"b),
 10   210 	write_file	initial("100011100"b),
 10   211 	locate_file	initial("100011101"b),
 10   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 10   213 						/* opnd(2) is control variable ref	*/
 10   214 						/* opnd(3) is specification operator	*/
 10   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 10   216 						/* repeat opnd(4) while opnd(5)	*/
 10   217 						/* opnd(6) is next specification	*/
 10   218 
 10   219 	rewrite_file	initial("100100000"b),
 10   220 	delete_file	initial("100100001"b),
 10   221 	unlock_file	initial("100100010"b),
 10   222 	lock_file		initial("100100011"b),
 10   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 10   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 10   225 	nop		initial("100100111"b),	/* no-op */
 10   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 10   227 
 10   228 /* These operators are produced by the semantic translator in processing the math
 10   229*   builtin functions and are used as input to the code generator			*/
 10   230 
 10   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 10   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 10   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 10   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 10   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 10   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 10   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 10   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 10   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 10   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 10   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 10   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 10   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 10   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 10   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 10   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 10   247 
 10   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 10   249 
 10   250 			bit(9) aligned internal static options(constant);
 10   251 
 10   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       24 
       25 
       26 	p = pp;
       27 	if p = null then return(null);
       28 
       29 	q = qq;
       30 
       31 	if p -> node.type = reference_node
       32 	then do;
       33 	     p -> reference.qualifier = fill_refer((p -> reference.qualifier),q,copy);
       34 	     p -> reference.offset = fill_refer((p -> reference.offset),q,copy);
       35 	     p -> reference.length = fill_refer((p -> reference.length),q,copy);
       36 	     return(p);
       37 	     end;
       38 
       39 	if p ->node.type = operator_node
       40 	then do;
       41 	     if p -> op_code = refer
       42 	     then do;
       43 		p = p -> operand(2);
       44 		if p -> node.type = token_node then p = create_reference(p);
       45 
       46 		if q -> node.type = reference_node
       47 		then if q -> reference.shared
       48 		      & q -> reference.qualifier = null
       49 		      & q -> reference.offset = null
       50 		      & q -> reference.length = null
       51 		     then do;
       52 			p -> reference.qualifier = q;
       53 			return(p);
       54 			end;
       55 
       56 		if copy then q = copy_expression((q));
       57 		p -> reference.qualifier = q;
       58 		return(p);
       59 		end;
       60 
       61 	     do i = 1 to p -> operator.number;
       62 		p -> operand(i) = fill_refer((p -> operand(i)),q,copy);
       63 		end;
       64 
       65 	     return(p);
       66 	     end;
       67 
       68 	return(p);
       69 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1825.7  fill_refer.pl1                    >udd>sm>ds>w>ml>fill_refer.pl1
20           1    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
1-307        2    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
21           7    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
22           8    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
23           9    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
24          10    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
copy                                   parameter       bit(1)                   dcl 13 set ref 11 33* 34* 35* 56 62*
copy_expression                 000010 constant        entry                    external dcl 1-94 ref 56
create_reference                000012 constant        entry                    external dcl 1-158 ref 44
i                               000100 automatic       fixed bin(15,0)          dcl 16 set ref 61* 62 62*
length                    6            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 35*
                                                                                  35 46
node                                   based           structure                level 1 dcl 7-27
null                                                   builtin function         dcl 16 ref 27 27 46 46 46
number                    0(21)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 9-6 ref 61
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 34*
                                                                                  34 46
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 9-6 ref 41
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 9-6 set
                                                                                  ref 43 62* 62
operator                               based           structure                level 1 dcl 9-6
operator_node                          constant        bit(9)                   initial dcl 7-5 ref 39
p                               000102 automatic       pointer                  dcl 16 set ref 26* 27 31 33 33 34 34 35 35 36 39 41
                                                                                  43* 43 44 44* 44* 52 53 57 58 61 62 62 65 68
pp                                     parameter       pointer                  dcl 13 ref 11 26
q                               000104 automatic       pointer                  dcl 16 set ref 29* 33* 34* 35* 46 46 46 46 46 52 56*
                                                                                  56 57 62*
qq                                     parameter       pointer                  dcl 13 ref 11 29
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 33*
                                                                                  33 46 52* 57*
refer                                  constant        bit(9)                   initial dcl 10-8 ref 41
reference                              based           structure                level 1 dcl 8-3
reference_node                         constant        bit(9)                   initial dcl 7-5 ref 31 46
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 8-3 ref 46
token_node                             constant        bit(9)                   initial dcl 7-5 ref 44
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 7-27 ref 31 39
                                                                                  44 46

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 10-8
abs_fun                                internal static bit(9)                   initial dcl 10-8
acos_fun                               internal static bit(9)                   initial dcl 10-8
acosd_fun                              internal static bit(9)                   initial dcl 10-8
add                                    internal static bit(9)                   initial dcl 10-8
addbitno_fun                           internal static bit(9)                   initial dcl 10-8
addcharno_fun                          internal static bit(9)                   initial dcl 10-8
addr_fun                               internal static bit(9)                   initial dcl 10-8
addr_fun_bits                          internal static bit(9)                   initial dcl 10-8
addrel_fun                             internal static bit(9)                   initial dcl 10-8
adjust_count                    000000 constant        entry                    external dcl 1-20
allocation_fun                         internal static bit(9)                   initial dcl 10-8
allot_auto                             internal static bit(9)                   initial dcl 10-8
allot_based                            internal static bit(9)                   initial dcl 10-8
allot_ctl                              internal static bit(9)                   initial dcl 10-8
allot_var                              internal static bit(9)                   initial dcl 10-8
and_bits                               internal static bit(9)                   initial dcl 10-8
array_node                             internal static bit(9)                   initial dcl 7-5
asin_fun                               internal static bit(9)                   initial dcl 10-8
asind_fun                              internal static bit(9)                   initial dcl 10-8
assign                                 internal static bit(9)                   initial dcl 10-8
assign_by_name                         internal static bit(9)                   initial dcl 10-8
assign_round                           internal static bit(9)                   initial dcl 10-8
assign_size_ck                         internal static bit(9)                   initial dcl 10-8
assign_zero                            internal static bit(9)                   initial dcl 10-8
atan_fun                               internal static bit(9)                   initial dcl 10-8
atand_fun                              internal static bit(9)                   initial dcl 10-8
b_format                               internal static bit(9)                   initial dcl 10-8
baseno_fun                             internal static bit(9)                   initial dcl 10-8
baseptr_fun                            internal static bit(9)                   initial dcl 10-8
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
bit_pointer                            internal static bit(9)                   initial dcl 10-8
bit_to_char                            internal static bit(9)                   initial dcl 10-8
bit_to_word                            internal static bit(9)                   initial dcl 10-8
bitno_fun                              internal static bit(9)                   initial dcl 10-8
block_node                             internal static bit(9)                   initial dcl 7-5
bn_format                              internal static bit(9)                   initial dcl 10-8
bool_fun                               internal static bit(9)                   initial dcl 10-8
bound_ck                               internal static bit(9)                   initial dcl 10-8
bound_node                             internal static bit(9)                   initial dcl 7-5
by_name_agg_node                       internal static bit(9)                   initial dcl 7-5
byte_fun                               internal static bit(9)                   initial dcl 10-8
c_format                               internal static bit(9)                   initial dcl 10-8
cat_string                             internal static bit(9)                   initial dcl 10-8
ceil_fun                               internal static bit(9)                   initial dcl 10-8
char_to_word                           internal static bit(9)                   initial dcl 10-8
charno_fun                             internal static bit(9)                   initial dcl 10-8
clock_fun                              internal static bit(9)                   initial dcl 10-8
close_file                             internal static bit(9)                   initial dcl 10-8
codeptr_fun                            internal static bit(9)                   initial dcl 10-8
column_format                          internal static bit(9)                   initial dcl 10-8
compare_expression              000000 constant        entry                    external dcl 1-48
complex_fun                            internal static bit(9)                   initial dcl 10-8
conjg_fun                              internal static bit(9)                   initial dcl 10-8
constant_length                 000000 constant        entry                    external dcl 1-54
context_node                           internal static bit(9)                   initial dcl 7-5
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_string                            internal static bit(9)                   initial dcl 10-8
copy_unique_expression          000000 constant        entry                    external dcl 1-103
copy_words                             internal static bit(9)                   initial dcl 10-8
cos_fun                                internal static bit(9)                   initial dcl 10-8
cosd_fun                               internal static bit(9)                   initial dcl 10-8
create_array                    000000 constant        entry                    external dcl 1-108
create_block                    000000 constant        entry                    external dcl 1-112
create_bound                    000000 constant        entry                    external dcl 1-118
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_label                    000000 constant        entry                    external dcl 1-140
create_list                     000000 constant        entry                    external dcl 1-147
create_operator                 000000 constant        entry                    external dcl 1-152
create_statement                000000 constant        entry                    external dcl 1-163
create_statement$prologue       000000 constant        entry                    external dcl 1-171
create_storage                  000000 constant        entry                    external dcl 1-179
create_symbol                   000000 constant        entry                    external dcl 1-184
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
cross_reference_node                   internal static bit(9)                   initial dcl 7-5
decbin                          000000 constant        entry                    external dcl 1-206
declare_constant                000000 constant        entry                    external dcl 1-211
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_constant$integer        000000 constant        entry                    external dcl 1-234
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_integer                 000000 constant        entry                    external dcl 1-269
declare_picture                 000000 constant        entry                    external dcl 1-274
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
default_node                           internal static bit(9)                   initial dcl 7-5
delete_file                            internal static bit(9)                   initial dcl 10-8
desc_size                              internal static bit(9)                   initial dcl 10-8
digit_to_bit                           internal static bit(9)                   initial dcl 10-8
div                                    internal static bit(9)                   initial dcl 10-8
do_fun                                 internal static bit(9)                   initial dcl 10-8
do_spec                                internal static bit(9)                   initial dcl 10-8
e_format                               internal static bit(9)                   initial dcl 10-8
empty_area                             internal static bit(9)                   initial dcl 10-8
enable_on                              internal static bit(9)                   initial dcl 10-8
environmentptr_fun                     internal static bit(9)                   initial dcl 10-8
equal                                  internal static bit(9)                   initial dcl 10-8
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_                          000000 constant        entry                    external dcl 1-324
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
error_$no_text                  000000 constant        entry                    external dcl 1-334
ex_prologue                            internal static bit(9)                   initial dcl 10-8
exp                                    internal static bit(9)                   initial dcl 10-8
exp_fun                                internal static bit(9)                   initial dcl 10-8
f_format                               internal static bit(9)                   initial dcl 10-8
floor_fun                              internal static bit(9)                   initial dcl 10-8
format_value_node                      internal static bit(9)                   initial dcl 7-5
fortran_read                           internal static bit(9)                   initial dcl 10-8
fortran_write                          internal static bit(9)                   initial dcl 10-8
free_based                             internal static bit(9)                   initial dcl 10-8
free_ctl                               internal static bit(9)                   initial dcl 10-8
free_node                       000000 constant        entry                    external dcl 1-345
free_var                               internal static bit(9)                   initial dcl 10-8
ftn_file_manip                         internal static bit(9)                   initial dcl 10-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 10-8
get_array_size                  000000 constant        entry                    external dcl 1-348
get_data_trans                         internal static bit(9)                   initial dcl 10-8
get_edit_trans                         internal static bit(9)                   initial dcl 10-8
get_file                               internal static bit(9)                   initial dcl 10-8
get_list_trans                         internal static bit(9)                   initial dcl 10-8
get_size                        000000 constant        entry                    external dcl 1-352
get_string                             internal static bit(9)                   initial dcl 10-8
greater_or_equal                       internal static bit(9)                   initial dcl 10-8
greater_than                           internal static bit(9)                   initial dcl 10-8
half_to_word                           internal static bit(9)                   initial dcl 10-8
imag_fun                               internal static bit(9)                   initial dcl 10-8
index_after_fun                        internal static bit(9)                   initial dcl 10-8
index_before_fun                       internal static bit(9)                   initial dcl 10-8
index_fun                              internal static bit(9)                   initial dcl 10-8
index_rev_fun                          internal static bit(9)                   initial dcl 10-8
join                                   internal static bit(9)                   initial dcl 10-8
jump                                   internal static bit(9)                   initial dcl 10-8
jump_false                             internal static bit(9)                   initial dcl 10-8
jump_if_eq                             internal static bit(9)                   initial dcl 10-8
jump_if_ge                             internal static bit(9)                   initial dcl 10-8
jump_if_gt                             internal static bit(9)                   initial dcl 10-8
jump_if_le                             internal static bit(9)                   initial dcl 10-8
jump_if_lt                             internal static bit(9)                   initial dcl 10-8
jump_if_ne                             internal static bit(9)                   initial dcl 10-8
jump_true                              internal static bit(9)                   initial dcl 10-8
l_parn                                 internal static bit(9)                   initial dcl 10-8
label_array_element_node               internal static bit(9)                   initial dcl 7-5
label_node                             internal static bit(9)                   initial dcl 7-5
length_fun                             internal static bit(9)                   initial dcl 10-8
less_or_equal                          internal static bit(9)                   initial dcl 10-8
less_than                              internal static bit(9)                   initial dcl 10-8
line_format                            internal static bit(9)                   initial dcl 10-8
list_node                              internal static bit(9)                   initial dcl 7-5
locate_file                            internal static bit(9)                   initial dcl 10-8
lock_file                              internal static bit(9)                   initial dcl 10-8
lock_fun                               internal static bit(9)                   initial dcl 10-8
log10_fun                              internal static bit(9)                   initial dcl 10-8
log2_fun                               internal static bit(9)                   initial dcl 10-8
log_fun                                internal static bit(9)                   initial dcl 10-8
loop                                   internal static bit(9)                   initial dcl 10-8
machine_state_node                     internal static bit(9)                   initial dcl 7-5
make_desc                              internal static bit(9)                   initial dcl 10-8
max_fun                                internal static bit(9)                   initial dcl 10-8
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 9-15
merge_attributes                000000 constant        entry                    external dcl 1-355
min_fun                                internal static bit(9)                   initial dcl 10-8
mod_bit                                internal static bit(9)                   initial dcl 10-8
mod_byte                               internal static bit(9)                   initial dcl 10-8
mod_fun                                internal static bit(9)                   initial dcl 10-8
mod_half                               internal static bit(9)                   initial dcl 10-8
mod_word                               internal static bit(9)                   initial dcl 10-8
mult                                   internal static bit(9)                   initial dcl 10-8
n                                      automatic       fixed bin(15,0)          dcl 16
negate                                 internal static bit(9)                   initial dcl 10-8
nop                                    internal static bit(9)                   initial dcl 10-8
not_bits                               internal static bit(9)                   initial dcl 10-8
not_equal                              internal static bit(9)                   initial dcl 10-8
off_fun                                internal static bit(9)                   initial dcl 10-8
open_file                              internal static bit(9)                   initial dcl 10-8
optimizer                       000000 constant        entry                    external dcl 1-361
or_bits                                internal static bit(9)                   initial dcl 10-8
pack                                   internal static bit(9)                   initial dcl 10-8
page_format                            internal static bit(9)                   initial dcl 10-8
param_desc_ptr                         internal static bit(9)                   initial dcl 10-8
param_ptr                              internal static bit(9)                   initial dcl 10-8
parse_error                     000000 constant        entry                    external dcl 1-364
parse_error$no_text             000000 constant        entry                    external dcl 1-368
picture_format                         internal static bit(9)                   initial dcl 10-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 1-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 1-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 10-8
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 1-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
prefix_plus                            internal static bit(9)                   initial dcl 10-8
ptr_fun                                internal static bit(9)                   initial dcl 10-8
put_control                            internal static bit(9)                   initial dcl 10-8
put_data_trans                         internal static bit(9)                   initial dcl 10-8
put_edit_trans                         internal static bit(9)                   initial dcl 10-8
put_field                              internal static bit(9)                   initial dcl 10-8
put_field_chk                          internal static bit(9)                   initial dcl 10-8
put_file                               internal static bit(9)                   initial dcl 10-8
put_list_trans                         internal static bit(9)                   initial dcl 10-8
put_string                             internal static bit(9)                   initial dcl 10-8
r_format                               internal static bit(9)                   initial dcl 10-8
r_parn                                 internal static bit(9)                   initial dcl 10-8
range_ck                               internal static bit(9)                   initial dcl 10-8
rank_fun                               internal static bit(9)                   initial dcl 10-8
read_file                              internal static bit(9)                   initial dcl 10-8
real_fun                               internal static bit(9)                   initial dcl 10-8
record_io                              internal static bit(9)                   initial dcl 10-8
refer_extent                    000000 constant        entry                    external dcl 1-426
rel_fun                                internal static bit(9)                   initial dcl 10-8
repeat_fun                             internal static bit(9)                   initial dcl 10-8
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
return_bits                            internal static bit(9)                   initial dcl 10-8
return_string                          internal static bit(9)                   initial dcl 10-8
return_value                           internal static bit(9)                   initial dcl 10-8
return_words                           internal static bit(9)                   initial dcl 10-8
reverse_fun                            internal static bit(9)                   initial dcl 10-8
revert_on                              internal static bit(9)                   initial dcl 10-8
rewrite_file                           internal static bit(9)                   initial dcl 10-8
round_fun                              internal static bit(9)                   initial dcl 10-8
search_fun                             internal static bit(9)                   initial dcl 10-8
search_rev_fun                         internal static bit(9)                   initial dcl 10-8
segno_fun                              internal static bit(9)                   initial dcl 10-8
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
setbitno_fun                           internal static bit(9)                   initial dcl 10-8
setcharno_fun                          internal static bit(9)                   initial dcl 10-8
sf_par_node                            internal static bit(9)                   initial dcl 7-5
share_expression                000000 constant        entry                    external dcl 1-454
sign_fun                               internal static bit(9)                   initial dcl 10-8
signal_on                              internal static bit(9)                   initial dcl 10-8
sin_fun                                internal static bit(9)                   initial dcl 10-8
sind_fun                               internal static bit(9)                   initial dcl 10-8
skip_format                            internal static bit(9)                   initial dcl 10-8
source_node                            internal static bit(9)                   initial dcl 7-5
sqrt_fun                               internal static bit(9)                   initial dcl 10-8
stack_ptr                              internal static bit(9)                   initial dcl 10-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 10-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 10-8
stacq_fun                              internal static bit(9)                   initial dcl 10-8
statement_node                         internal static bit(9)                   initial dcl 7-5
std_arg_list                           internal static bit(9)                   initial dcl 10-8
std_call                               internal static bit(9)                   initial dcl 10-8
std_entry                              internal static bit(9)                   initial dcl 10-8
std_return                             internal static bit(9)                   initial dcl 10-8
stop                                   internal static bit(9)                   initial dcl 10-8
stream_prep                            internal static bit(9)                   initial dcl 10-8
sub                                    internal static bit(9)                   initial dcl 10-8
symbol_node                            internal static bit(9)                   initial dcl 7-5
tan_fun                                internal static bit(9)                   initial dcl 10-8
tand_fun                               internal static bit(9)                   initial dcl 10-8
temporary_node                         internal static bit(9)                   initial dcl 7-5
terminate_trans                        internal static bit(9)                   initial dcl 10-8
token_to_binary                 000000 constant        entry                    external dcl 1-459
translate_fun                          internal static bit(9)                   initial dcl 10-8
trunc_fun                              internal static bit(9)                   initial dcl 10-8
unlock_file                            internal static bit(9)                   initial dcl 10-8
unpack                                 internal static bit(9)                   initial dcl 10-8
vclock_fun                             internal static bit(9)                   initial dcl 10-8
verify_fun                             internal static bit(9)                   initial dcl 10-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 10-8
verify_rev_fun                         internal static bit(9)                   initial dcl 10-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 10-8
word_to_mod2                           internal static bit(9)                   initial dcl 10-8
word_to_mod4                           internal static bit(9)                   initial dcl 10-8
word_to_mod8                           internal static bit(9)                   initial dcl 10-8
wordno_fun                             internal static bit(9)                   initial dcl 10-8
write_file                             internal static bit(9)                   initial dcl 10-8
x_format                               internal static bit(9)                   initial dcl 10-8
xor_bits                               internal static bit(9)                   initial dcl 10-8

NAME DECLARED BY EXPLICIT CONTEXT.
fill_refer                      000015 constant        entry                    external dcl 11 ref 33 34 35 62

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       344         360     300         354
Length       720     300        14         324      43           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
fill_refer                          106 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
fill_refer               000100 i                           fill_refer
                         000102 p                           fill_refer
                         000104 q                           fill_refer

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_in         call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_reference

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000010        26 000022        27 000026        29 000035        31 000040        33 000045        34 000066
     35 000110        36 000132        39 000135        41 000137        43 000144        44 000146        46 000161
     52 000202        53 000204        56 000207        57 000226        58 000231        61 000234        62 000245
     63 000267        65 000271        68 000275


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
