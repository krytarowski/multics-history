	COMPILATION LISTING OF SEGMENT constant_token
	Compiled by: Multics PL/I Compiler, Release 33c, of October 25, 1990
	Compiled at: ACTC Technologies Inc.          
	Compiled on: 92-04-24_1124.55_Fri_mdt
	    Options: optimize map

        1 /****^  ********************************************
        2*        *                                          *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988 *
        4*        *                                          *
        5*        ******************************************** */
        6 
        7 
        8 /****^  HISTORY COMMENTS:
        9*  1) change(88-01-26,RWaters), approve(88-01-26,MCR7724), audit(88-02-05,Huen),
       10*     install(88-02-16,MR12.2-1024):
       11*     Expand the uses of options (constant) variables.
       12*  2) change(91-01-18,Blackmore), approve(91-01-18,MCR8234),
       13*     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
       14*     Add 'token_lookup' procedure to allow scoping rules to be followed during
       15*     resolution of references to constant values.
       16*                                                   END HISTORY COMMENTS */
       17 
       18 constant_token:
       19 	proc (blk_ptr, token_ptr, type_mask, desired_type) returns (bit (9));
       20 
       21 dcl (blk_ptr, token_ptr) pointer parameter;
       22 dcl desired_type bit (9) aligned parameter;
       23 dcl type_mask bit (9) aligned parameter;
       24 
       25 /* This routine is passed a pointer to a token, a mask to check token types
       26*   against a desired token type, and a desired token type.
       27*
       28*   It will check the current token, to see if it is a symbol which is
       29*   static options (constant) initial (...), of a type which is acceptable
       30*   through the mask.  If so, it will change the token pointer to point to
       31*   the token for the constant which initializes this variable, and will
       32*   return the token type of the constant.  This essentially replaces
       33*   constants for use in areas where a variable of any type will be seen
       34*   as a syntax error, even though use of a constant would be wonderful for
       35*   producing understandable and taylorable code. */
       36 
       37 /* Modified: Jan 28,88 by RW to fix 1994 and 2186. */
       38 
       39 
  1     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  1     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  1     3 /* format: style3,idind30 */
  1     4 
  1     5 declare	1 block			aligned based,
  1     6 	  2 node_type		bit (9) unaligned,
  1     7 	  2 source_id		structure unaligned,
  1     8 	    3 file_number		bit (8),
  1     9 	    3 line_number		bit (14),
  1    10 	    3 statement_number	bit (5),
  1    11 	  2 father		ptr unaligned,
  1    12 	  2 brother		ptr unaligned,
  1    13 	  2 son			ptr unaligned,
  1    14 	  2 declaration		ptr unaligned,
  1    15 	  2 end_declaration		ptr unaligned,
  1    16 	  2 default		ptr unaligned,
  1    17 	  2 end_default		ptr unaligned,
  1    18 	  2 context		ptr unaligned,
  1    19 	  2 prologue		ptr unaligned,
  1    20 	  2 end_prologue		ptr unaligned,
  1    21 	  2 main			ptr unaligned,
  1    22 	  2 end_main		ptr unaligned,
  1    23 	  2 return_values		ptr unaligned,
  1    24 	  2 return_count		ptr unaligned,
  1    25 	  2 plio_ps		ptr unaligned,
  1    26 	  2 plio_fa		ptr unaligned,
  1    27 	  2 plio_ffsb		ptr unaligned,
  1    28 	  2 plio_ssl		ptr unaligned,
  1    29 	  2 plio_fab2		ptr unaligned,
  1    30 	  2 block_type		bit (9) unaligned,
  1    31 	  2 prefix		bit (12) unaligned,
  1    32 	  2 like_attribute		bit (1) unaligned,
  1    33 	  2 no_stack		bit (1) unaligned,
  1    34 	  2 get_data		bit (1) unaligned,
  1    35 	  2 flush_at_call		bit (1) unaligned,
  1    36 	  2 processed		bit (1) unaligned,
  1    37 	  2 text_displayed		bit (1) unaligned,
  1    38 	  2 number		fixed bin (9) unsigned unaligned,
  1    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  1    40 	  2 temp_list		ptr,
  1    41 	  2 entry_list		ptr,
  1    42 	  2 o_and_s		ptr,
  1    43 	  2 why_nonquick		aligned,
  1    44 	    3 auto_adjustable_storage bit (1) unaligned,
  1    45 	    3 returns_star_extents	bit (1) unaligned,
  1    46 	    3 stack_extended_by_args	bit (1) unaligned,
  1    47 	    3 invoked_by_format	bit (1) unaligned,
  1    48 	    3 format_statement	bit (1) unaligned,
  1    49 	    3 io_statements		bit (1) unaligned,
  1    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  1    51 	    3 condition_statements	bit (1) unaligned,
  1    52 	    3 no_owner		bit (1) unaligned,
  1    53 	    3 recursive_call	bit (1) unaligned,
  1    54 	    3 options_non_quick	bit (1) unaligned,
  1    55 	    3 options_variable	bit (1) unaligned,
  1    56 	    3 never_referenced	bit (1) unaligned,
  1    57 	    3 pad_nonquick		bit (5) unaligned,
  1    58 	  2 prologue_flag		bit (1) unaligned,
  1    59 	  2 options_main		bit (1) unaligned,
  1    60 	  2 pad			bit (16) unaligned,
  1    61 	  2 number_of_entries	fixed bin (17),
  1    62 	  2 level			fixed bin (17),
  1    63 	  2 last_auto_loc		fixed bin (17),
  1    64 	  2 symbol_block		fixed bin (17),
  1    65 	  2 entry_info		fixed bin (18),
  1    66 	  2 enter			structure unaligned,
  1    67 	    3 start		fixed bin (17),
  1    68 	    3 end			fixed bin (17),
  1    69 	  2 leave			structure unaligned,
  1    70 	    3 start		fixed bin (17),
  1    71 	    3 end			fixed bin (17),
  1    72 	  2 owner			ptr;
  1    73 
  1    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  1    75 
  1    76 /* END INCLUDE FILE ... block.incl.pl1 */
       40 
       41 
  2     1 /* BEGIN INCLUDE FILE ... cross_reference.incl.pl1 */
  2     2 
  2     3 dcl	1 cross_reference		based aligned,
  2     4 	2 node_type		bit(9) unaligned,
  2     5 	2 source_id		structure unaligned,
  2     6 	  3 file_number		bit(8),
  2     7 	  3 line_number		bit(14),
  2     8 	  3 statement_number	bit(5),
  2     9 	2 next			ptr unaligned,
  2    10 	2 ref_type		structure unaligned,
  2    11 	  3 set_reference		bit(1),
  2    12 	  3 pad			bit(35);
  2    13 
  2    14 /* END INCLUDE FILE ... cross_reference.incl.pl1 */
       42 
  3     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  3     2 
  3     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  3     4 
  3     5 
  3     6 dcl	1 list		based aligned,
  3     7 	2 node_type	bit(9) unaligned,
  3     8 	2 reserved	bit(12) unaligned,
  3     9 	2 number		fixed(14) unaligned,
  3    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  3    11 
  3    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  3    13 	                    init(16383);
  3    14 
  3    15 /* END INCLUDE FILE ... list.incl.pl1 */
       43 
  4     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  4     2 
  4     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  4     4 
  4     5 dcl (	block_node		initial("000000001"b),
  4     6 	statement_node		initial("000000010"b),
  4     7 	operator_node		initial("000000011"b),
  4     8 	reference_node		initial("000000100"b),
  4     9 	token_node		initial("000000101"b),
  4    10 	symbol_node		initial("000000110"b),
  4    11 	context_node		initial("000000111"b),
  4    12 	array_node		initial("000001000"b),
  4    13 	bound_node		initial("000001001"b),
  4    14 	format_value_node		initial("000001010"b),
  4    15 	list_node			initial("000001011"b),
  4    16 	default_node		initial("000001100"b),
  4    17 	machine_state_node		initial("000001101"b),
  4    18 	source_node		initial("000001110"b),
  4    19 	label_node		initial("000001111"b),
  4    20 	cross_reference_node	initial("000010000"b),
  4    21 	sf_par_node		initial("000010001"b),
  4    22 	temporary_node		initial("000010010"b),
  4    23 	label_array_element_node	initial("000010011"b),
  4    24 	by_name_agg_node		initial("000010100"b))
  4    25 				bit(9) internal static aligned options(constant);
  4    26 
  4    27 dcl	1 node			based aligned,
  4    28 	2 type			unal bit(9),
  4    29 	2 source_id		unal structure,
  4    30 	  3 file_number		bit(8),
  4    31 	  3 line_number		bit(14),
  4    32 	  3 statement_number	bit(5);
  4    33 
  4    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       44 
       45 
  5     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  5     2 
  5     3 dcl	1 symbol			based aligned,
  5     4 	2 node_type		bit(9) unal,
  5     5 	2 source_id		structure unal,
  5     6 	  3 file_number		bit(8),
  5     7 	  3 line_number		bit(14),
  5     8 	  3 statement_number	bit(5),
  5     9 	2 location		fixed(18) unal unsigned,
  5    10 	2 allocated		bit(1) unal,
  5    11 	2 dcl_type		bit(3) unal,
  5    12 	2 reserved		bit(6) unal,
  5    13 	2 pix			unal,
  5    14 	  3 pic_fixed		bit(1) unal,
  5    15 	  3 pic_float		bit(1) unal,
  5    16 	  3 pic_char		bit(1) unal,
  5    17 	  3 pic_scale		fixed(7) unal,
  5    18 	  3 pic_size		fixed(7) unal,
  5    19 	2 level			fixed(8) unal,
  5    20 	2 boundary		fixed(3) unal,
  5    21 	2 size_units		fixed(3) unal,
  5    22 	2 scale			fixed(7) unal,
  5    23 	2 runtime			bit(18) unal,
  5    24 	2 runtime_offset		bit(18) unal,
  5    25 	2 block_node		ptr unal,
  5    26 	2 token			ptr unal,
  5    27 	2 next			ptr unal,
  5    28 	2 multi_use		ptr unal,
  5    29 	2 cross_references		ptr unal,
  5    30 	2 initial			ptr unal,
  5    31 	2 array			ptr unal,
  5    32 	2 descriptor		ptr unal,
  5    33 	2 equivalence		ptr unal,
  5    34 	2 reference		ptr unal,
  5    35 	2 general			ptr unal,
  5    36 	2 father			ptr unal,
  5    37 	2 brother			ptr unal,
  5    38 	2 son			ptr unal,
  5    39 	2 word_size		ptr unal,
  5    40 	2 bit_size		ptr unal,
  5    41 	2 dcl_size		ptr unal,
  5    42 	2 symtab_size		ptr unal,
  5    43 	2 c_word_size		fixed(24),
  5    44 	2 c_bit_size		fixed(24),
  5    45 	2 c_dcl_size		fixed(24),
  5    46 
  5    47 	2 attributes		structure aligned,
  5    48 	  3 data_type		structure unal,
  5    49 	    4 structure		bit(1) ,
  5    50 	    4 fixed		bit(1),
  5    51 	    4 float		bit(1),
  5    52 	    4 bit			bit(1),
  5    53 	    4 char		bit(1),
  5    54 	    4 ptr			bit(1),
  5    55 	    4 offset		bit(1),
  5    56 	    4 area		bit(1),
  5    57 	    4 label		bit(1),
  5    58 	    4 entry		bit(1),
  5    59 	    4 file		bit(1),
  5    60 	    4 arg_descriptor	bit(1),
  5    61 	    4 storage_block		bit(1),
  5    62 	    4 explicit_packed	bit(1), /* options(packed) */
  5    63 	    4 condition		bit(1),
  5    64 	    4 format		bit(1),
  5    65 	    4 builtin		bit(1),
  5    66 	    4 generic		bit(1),
  5    67 	    4 picture		bit(1),
  5    68 
  5    69 	  3 misc_attributes		structure unal,
  5    70 	    4 dimensioned		bit(1),
  5    71 	    4 initialed		bit(1),
  5    72 	    4 aligned		bit(1),
  5    73 	    4 unaligned		bit(1),
  5    74 	    4 signed		bit(1),
  5    75 	    4 unsigned		bit(1),
  5    76 	    4 precision		bit(1),
  5    77 	    4 varying		bit(1),
  5    78 	    4 local		bit(1),
  5    79 	    4 decimal		bit(1),
  5    80 	    4 binary		bit(1),
  5    81 	    4 real		bit(1),
  5    82 	    4 complex		bit(1),
  5    83 	    4 variable		bit(1),
  5    84 	    4 reducible		bit(1),
  5    85 	    4 irreducible		bit(1),
  5    86 	    4 returns		bit(1),
  5    87 	    4 position		bit(1),
  5    88 	    4 internal		bit(1),
  5    89 	    4 external		bit(1),
  5    90 	    4 like		bit(1),
  5    91 	    4 member		bit(1),
  5    92 	    4 non_varying		bit(1),
  5    93 	    4 options		bit(1),
  5    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  5    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  5    96 
  5    97 	  3 storage_class		structure unal,
  5    98 	    4 auto		bit(1),
  5    99 	    4 based		bit(1),
  5   100 	    4 static		bit(1),
  5   101 	    4 controlled		bit(1),
  5   102 	    4 defined		bit(1),
  5   103 	    4 parameter		bit(1),
  5   104 	    4 param_desc		bit(1),
  5   105 	    4 constant		bit(1),
  5   106 	    4 temporary		bit(1),
  5   107 	    4 return_value		bit(1),
  5   108 
  5   109 	  3 file_attributes		structure unal,
  5   110 	    4 print		bit(1),
  5   111 	    4 input		bit(1),
  5   112 	    4 output		bit(1),
  5   113 	    4 update		bit(1),
  5   114 	    4 stream		bit(1),
  5   115 	    4 reserved_1		bit(1),
  5   116 	    4 record		bit(1),
  5   117 	    4 sequential		bit(1),
  5   118 	    4 direct		bit(1),
  5   119 	    4 interactive		bit(1),		/* env(interactive) */
  5   120 	    4 reserved_2		bit(1),
  5   121 	    4 reserved_3		bit(1),
  5   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  5   123 	    4 keyed		bit(1),
  5   124 	    4 reserved_4		bit(1),
  5   125 	    4 environment		bit(1),
  5   126 
  5   127 	  3 compiler_developed	structure unal,
  5   128 	    4 aliasable		bit(1),
  5   129 	    4 packed		bit(1),
  5   130 	    4 passed_as_arg		bit(1),
  5   131 	    4 allocate		bit(1),
  5   132 	    4 set			bit(1),
  5   133 	    4 exp_extents		bit(1),
  5   134 	    4 refer_extents		bit(1),
  5   135 	    4 star_extents		bit(1),
  5   136 	    4 isub		bit(1),
  5   137 	    4 put_in_symtab		bit(1),
  5   138 	    4 contiguous		bit(1),
  5   139 	    4 put_data		bit(1),
  5   140 	    4 overlayed		bit(1),
  5   141 	    4 error		bit(1),
  5   142 	    4 symtab_processed	bit(1),
  5   143 	    4 overlayed_by_builtin	bit(1),
  5   144 	    4 defaulted		bit(1),
  5   145 	    4 connected		bit(1);
  5   146 
  5   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       46 
       47 
  6     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
  6     2 
  6     3 dcl	1 token			based aligned,
  6     4 	2 node_type		bit(9) unaligned,
  6     5 	2 type			bit(9) unaligned,
  6     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
  6     7 	2 declaration		ptr unaligned,
  6     8 	2 next			ptr unaligned,
  6     9 	2 size			fixed(9),
  6    10 	2 string			char(n refer(token.size));
  6    11 
  6    12 /* END INCLUDE FILE ... token.incl.pl1 */
       48 
  7     1 dcl	pl1_stat_$token_list_ptr ptr external static;		/* pointer to token list	*/
  7     2 dcl	token_list(token_list_length) ptr based(token_list_pointer);
  7     3 dcl	token_list_pointer ptr initial(pl1_stat_$token_list_ptr);	/* for efficiency only */
  7     4 dcl	token_list_length fixed(15) internal static initial(3000) options(constant);
  7     5 
  7     6 dcl	1 pl1_stat_$statement_id	external static,
  7     7 	2 file_number		bit(8),
  7     8 	2 line_number		bit(14),
  7     9 	2 statement_number		bit(5);
  7    10 
  7    11 dcl	1 t_table 		based(token_list(k)) aligned,
  7    12 	2 node_type		bit(9) unaligned,
  7    13 	2 type			bit(9) unaligned,
  7    14 	2 loc			bit(18) unaligned,
  7    15 	2 declaration		ptr unaligned,
  7    16 	2 next			ptr unaligned,
  7    17 	2 size			fixed(9),
  7    18 	2 string			char(n refer(t_table.size));
       49 
       50 
  8     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
  8     2 
  8     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
  8     4 	identifier	initial("100000000"b),
  8     5 	isub		initial("010000000"b),
  8     6 	plus		initial("001000001"b),
  8     7 	minus		initial("001000010"b),
  8     8 	asterisk		initial("001000011"b),
  8     9 	slash		initial("001000100"b),
  8    10 	expon		initial("001000101"b),
  8    11 	not		initial("001000110"b),
  8    12 	and		initial("001000111"b),
  8    13 	or		initial("001001000"b),
  8    14 	cat		initial("001001001"b),
  8    15 	eq		initial("001001010"b),
  8    16 	ne		initial("001001011"b),
  8    17 	lt		initial("001001100"b),
  8    18 	gt		initial("001001101"b),
  8    19 	le		initial("001001110"b),
  8    20 	ge		initial("001001111"b),
  8    21 	ngt		initial("001010000"b),
  8    22 	nlt		initial("001010001"b),
  8    23 	assignment	initial("001010010"b),
  8    24 	colon		initial("001010011"b),
  8    25 	semi_colon	initial("001010100"b),
  8    26 	comma		initial("001010101"b),
  8    27 	period		initial("001010110"b),
  8    28 	arrow		initial("001010111"b),
  8    29 	left_parn		initial("001011000"b),
  8    30 	right_parn	initial("001011001"b),
  8    31 	percent		initial("001011100"b),
  8    32 	bit_string	initial("000100001"b),
  8    33 	char_string	initial("000100010"b),
  8    34 	bin_integer	initial("000110001"b),
  8    35 	dec_integer	initial("000110011"b),
  8    36 	fixed_bin		initial("000110000"b),
  8    37 	fixed_dec		initial("000110010"b),
  8    38 	float_bin		initial("000110100"b),
  8    39 	float_dec		initial("000110110"b),
  8    40 	i_bin_integer	initial("000111001"b),
  8    41 	i_dec_integer	initial("000111011"b),
  8    42 	i_fixed_bin	initial("000111000"b),
  8    43 	i_fixed_dec	initial("000111010"b),
  8    44 	i_float_bin	initial("000111100"b),
  8    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
  8    46 
  8    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
  8    48 	is_isub			initial ("010000000"b),
  8    49 	is_delimiter		initial ("001000000"b),
  8    50 	is_constant		initial ("000100000"b),
  8    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
  8    52 	is_arithmetic_constant	initial ("000110000"b),
  8    53 	is_imaginary_constant	initial ("000111000"b),
  8    54 	is_float_constant		initial ("000110100"b),
  8    55 	is_decimal_constant		initial ("000110010"b),
  8    56 	is_integral_constant 	initial ("000110001"b)
  8    57 	) bit(9) internal static aligned options(constant);
  8    58 
  8    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       51 
       52 
       53 dcl 1 t like token based (token_ptr);
       54 
       55 dcl d ptr;
       56 dcl symp ptr;
       57 dcl 1 sym like symbol based (symp);
       58 
       59 declare   pl1_stat_$table bit (1) aligned external static;
       60 
       61 dcl (null, string) builtin;
       62 
       63 /* If it is a symbol which is
       64*   static options (constant) initialized (), then we will return, not the
       65*   pointer to its token, but the pointer to the initializing token which
       66*   defines its value.  We will also cross-reference this reference, since
       67*   we will no longer see the real token, only its value. */
       68 
       69 	     symp = token_lookup (blk_ptr, token_ptr);
       70 	     if symp = null () then return (t.type);
       71 	     if  sym.node_type ^= symbol_node then
       72 		return (t.type);
       73 
       74 /* It is a symbol, determine if it is allocated in text, initialed, fixed and
       75*   static. */
       76 
       77 	     if sym.initial ^= null () & ^sym.dimensioned then
       78 		if sym.initialed & sym.alloc_in_text & sym.static &
       79 		sym.initial -> list.number = 3
       80 		then do;	/* no expression */
       81 		     if sym.initial -> list.element (3) ^= null () then return (t.type);
       82 		     if (type_mask & sym.initial -> list.element (2) -> t.type) ^= 
       83 			(type_mask & desired_type) then return (t.type);
       84 
       85 /* decimal integer token, update the token pointer. */
       86 
       87 		     token_ptr = sym.initial -> list.element (2);
       88 
       89 /* re-use constant token.  We will now cross-reference this variable, since
       90*   it now disappears from the view of the parser. */
       91 
       92 		     d = create_cross_reference ();
       93 		     d -> cross_reference.next = sym.cross_references;
       94 		     sym.cross_references = d;
       95 		     string (d -> cross_reference.source_id)
       96 			= string (pl1_stat_$statement_id);
       97 		     if pl1_stat_$table then
       98 			sym.allocate, sym.put_in_symtab = "1"b; /* to find it later */
       99 		end;
      100 		return (t.type);
      101 
      102 token_lookup: proc (blk, t_ptr) returns (ptr);
      103 /* Return a pointer to the symbol (or label) represented by the token referred
      104*   to by t_ptr, in the scope of the block pointed to by 'blk'. */
      105 
      106 dcl  (blk, t_ptr, sym_ptr, partial_ptr, b) ptr;
      107 dcl  num_partials	        fixed bin (15);
      108 
      109 /* search for an applicable declaration symbol for which this is a fully
      110*   qualified reference.  Remember any applicable declaration for which this is
      111*   a partially qualified reference.  If two or more applicable declarations can
      112*   be found and this is not a fully qualified reference to any of them, this is
      113*   an ambiguous reference.  If only one applicable declaration can be found,
      114*   this is a valid partially qualified reference to that declaration.
      115*   The search for an applicable declaration begins in the current block and
      116*   continues outward until the first applicable declaration is found.
      117*   After the first applicable declaration is found, all additional searching is
      118*   confined to the block in which the first applicable declaration was found. */
      119 
      120     num_partials = 0;
      121     partial_ptr = null;
      122 
      123     b = blk;
      124     do while (b ^= null);				/* While more blocks to search. */
      125 
      126       sym_ptr = t_ptr -> token.declaration;
      127       do while (sym_ptr ^= null);			/* While more symbols to look at. */
      128 
      129         if sym_ptr -> symbol.block_node = b then
      130 	do;					/* In proper scope. */
      131 	if (sym_ptr -> node.type = label_node)            /* If we have a label or fully qualified */
      132 	     | ^(sym_ptr -> symbol.member) then return(sym_ptr);/* symbol, then we're successful. */
      133 	num_partials = num_partials + 1;		/* Otherwise reference is partially qualified. */
      134 	partial_ptr = sym_ptr;
      135         end;					/* End: In proper scope. */
      136 
      137         sym_ptr = sym_ptr -> symbol.multi_use;
      138       end;					/* End: While more symbols to look at. */
      139 
      140       if num_partials > 0 then b = null; else b = b -> block.father;
      141     end;						/* End: While more blocks to search. */
      142 
      143 /* Here we either have a partially qualified reference, or no reference. */
      144     if num_partials > 1 then partial_ptr = null;            /* Ambiguous reference */
      145     return (partial_ptr);
      146 
      147   end token_lookup;
      148 
      149 defer_constant_token_list:
      150 	entry (blk_ptr, index, stop_type);
      151 
      152 /* accept a list of tokens and defer all indentifiers which represent a
      153*   static options (constant) to refer to the actual constant token, rather
      154*   than the variable. */
      155 
      156 dcl index fixed bin parameter;
      157 dcl stop_type bit (9) aligned parameter;
      158 
      159 dcl k fixed bin;
      160 dcl dummy_type bit (9) aligned;
      161 
      162 	k = index;
      163 	do while (t_table.type ^= semi_colon & t_table.type^=stop_type);
      164 	     if (t_table.type & is_identifier) = identifier then
      165 		dummy_type = constant_token (blk_ptr, token_list (k), is_constant, dec_integer);
      166 	     if (t_table.type & is_delimiter) ^= is_delimiter &
      167 		(token_list (k+1) -> t_table.type & is_identifier) =
      168 		identifier then return;
      169 	     k = k + 1;
      170 	end;
      171 	return;
      172 
  9     1 /****^  *********************************************************
  9     2*        *                                                       *
  9     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  9     4*        *                                                       *
  9     5*        ********************************************************* */
  9     6 
  9     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  9     8 
  9     9 
  9    10 /****^  HISTORY COMMENTS:
  9    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  9    12*     install(89-07-31,MR12.3-1066):	
  9    13*     Removed the obsolete parameter source_line from the dcl of error_().
  9    14*                                                   END HISTORY COMMENTS */
  9    15 
  9    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  9    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  9    18* */
  9    19 
  9    20 declare	adjust_count	entry(pointer);
  9    21 			/* parameter 1:	(input)	any node pointer		*/
  9    22 
  9    23 declare	bindec		entry(fixed bin(31)) reducible
  9    24 			returns(character(12) aligned);
  9    25 			/* parameter 1:	(input)	bin value			*/
  9    26 			/* return:	(output)	character value with blanks	*/
  9    27 
  9    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  9    29 			returns(character(12) aligned varying);
  9    30 			/* parameter 1:	(input)	binary value		*/
  9    31 			/* return:	(output)	char value without blanks	*/
  9    32 
  9    33 declare	binoct		entry(fixed bin(31)) reducible
  9    34 			returns(char(12) aligned);
  9    35 			/* parameter 1:	(input)	binary value		*/
  9    36 			/* return:	(output)	char value with blanks	*/
  9    37 
  9    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  9    39 			returns(char(12) aligned);
  9    40 			/* parameter 1:	(input)	binary value		*/
  9    41 			/* return:	(output)	right-aligned char value	*/
  9    42 
  9    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  9    44 			returns(char(12) varying aligned);
  9    45 			/* parameter 1:	(input)	binary value		*/
  9    46 			/* returns:	(output)	char value without blanks	*/
  9    47 
  9    48 declare	compare_expression	entry(pointer,pointer) reducible
  9    49 			returns(bit(1) aligned);
  9    50 			/* parameter 1:	(input)	any node pointer		*/
  9    51 			/* parameter 2:	(input)	any node pointer		*/
  9    52 			/* return:	(output)	compare bit		*/
  9    53 
  9    54 declare	constant_length	entry (pointer, fixed bin (71))
  9    55 			returns (bit (1) aligned);
  9    56 			/* parameter 1:	(input)	reference node pointer	*/
  9    57 			/* parameter 2:	(input)	value of constant length	*/
  9    58 			/* return:	(output)	"1"b if constant length	*/
  9    59 
  9    60 declare	convert		entry(pointer,bit(36) aligned)
  9    61 			returns(pointer);
  9    62 			/* parameter 1:	(input)	any node pointer		*/
  9    63 			/* parameter 2:	(input)	target type		*/
  9    64 			/* return:	(output)	target value tree pointer	*/
  9    65 
  9    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  9    67 			returns(pointer);
  9    68 			/* parameter 1:	(input)	any node pointer		*/
  9    69 			/* parameter 2:	(input)	target type		*/
  9    70 			/* return:	(output)	target value tree pointer	*/
  9    71 
  9    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  9    73 			returns(pointer);
  9    74 			/* parameter 1:	(input)	any node pointer		*/
  9    75 			/* parameter 2:	(input)	target type		*/
  9    76 			/* return:	(output)	target value tree pointer	*/
  9    77 
  9    78 declare	convert$validate	entry(pointer,pointer);
  9    79 			/* parameter 1:	(input)	source value tree pointer	*/
  9    80 			/* parameter 2:	(input)	target reference node pointer	*/
  9    81 
  9    82 declare	convert$to_target_fb entry(pointer,pointer)
  9    83 			returns(pointer);
  9    84 			/* parameter 1:	(input)	source value tree pointer	*/
  9    85 			/* parameter 2:	(input)	target reference node pointer	*/
  9    86 			/* return:	(output)	target value tree pointer	*/
  9    87 
  9    88 declare	convert$to_target	entry(pointer,pointer)
  9    89 			returns(pointer);
  9    90 			/* parameter 1:	(input)	source value tree pointer	*/
  9    91 			/* parameter 2:	(input)	target reference node pointer	*/
  9    92 			/* return:	(output)	target value tree pointer	*/
  9    93 
  9    94 declare	copy_expression	entry(pointer unaligned)
  9    95 			returns(pointer);
  9    96 			/* parameter 1:	(input)	any node pointer		*/
  9    97 			/* return:	(output)	any node pointer		*/
  9    98 
  9    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  9   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  9   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  9   102 
  9   103 declare	copy_unique_expression entry(pointer)
  9   104 			returns(pointer);
  9   105 			/* parameter 1:	(input)	any node pointer		*/
  9   106 			/* return:	(output)	any node pointer		*/
  9   107 
  9   108 declare	create_array	entry()
  9   109 			returns(pointer);
  9   110 			/* return:	(output)	array node pointer		*/
  9   111 
  9   112 declare	create_block	entry(bit(9) aligned,pointer)
  9   113 			returns(pointer);
  9   114 			/* parameter 1:	(input)	block type		*/
  9   115 			/* parameter 2:	(input)	father block node pointer	*/
  9   116 			/* return:	(output)	block node pointer		*/
  9   117 
  9   118 declare	create_bound	entry()
  9   119 			returns(pointer);
  9   120 			/* return:	(output)	bound node pointer		*/
  9   121 
  9   122 declare	create_context	entry(pointer,pointer)
  9   123 			returns(pointer);
  9   124 			/* parameter 1:	(input)	block node pointer		*/
  9   125 			/* parameter 2:	(input)	token pointer		*/
  9   126 			/* return:	(output)	context node pointer	*/
  9   127 
  9   128 declare	create_cross_reference entry()
  9   129 			returns(pointer);
  9   130 			/* return:	(output)	cross reference node pointer	*/
  9   131 
  9   132 declare	create_default	entry
  9   133 			returns(pointer);
  9   134 			/* return:	(output)	default node pointer	*/
  9   135 
  9   136 declare	create_identifier	entry()
  9   137 			returns(pointer);
  9   138 			/* return:	(output)	token node pointer		*/
  9   139 
  9   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  9   141 			returns(pointer);
  9   142 			/* parameter 1:	(input)	block node pointer		*/
  9   143 			/* parameter 2:	(input)	token node pointer		*/
  9   144 			/* parameter 3:	(input)	declare type		*/
  9   145 			/* return:	(output)	label node pointer		*/
  9   146 
  9   147 declare	create_list	entry(fixed bin(15))
  9   148 			returns(pointer);
  9   149 			/* parameter 1:	(input)	number of list elements	*/
  9   150 			/* return:	(output)	list node pointer		*/
  9   151 
  9   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  9   153 			returns(pointer);
  9   154 			/* parameter 1:	(input)	operator type		*/
  9   155 			/* parameter 2:	(input)	number of operands		*/
  9   156 			/* return:	(output)	operator node pointer	*/
  9   157 
  9   158 declare	create_reference	entry(pointer)
  9   159 			returns(pointer);
  9   160 			/* parameter 1:	(input)	symbol node pointer		*/
  9   161 			/* return:	(output)	reference node pointer	*/
  9   162 
  9   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  9   164 			returns(pointer);
  9   165 			/* parameter 1:	(input)	statement type		*/
  9   166 			/* parameter 2:	(input)	block node pointer		*/
  9   167 			/* parameter 3:	(input)	label node pointer		*/
  9   168 			/* parameter 4:	(input)	conditions		*/
  9   169 			/* return:	(output)	statement node pointer	*/
  9   170 
  9   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  9   172 			returns(pointer);
  9   173 			/* parameter 1:	(input)	statement type		*/
  9   174 			/* parameter 2:	(input)	block node pointer		*/
  9   175 			/* parameter 3:	(input)	label node pointer		*/
  9   176 			/* parameter 4:	(input)	conditions		*/
  9   177 			/* return:	(output)	statement node pointer	*/
  9   178 
  9   179 declare	create_storage	entry(fixed bin(15))
  9   180 			returns(pointer);
  9   181 			/* parameter 1:	(input)	number of words		*/
  9   182 			/* return:	(output)	storage block pointer	*/
  9   183 
  9   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  9   185 			returns(pointer);
  9   186 			/* parameter 1:	(input)	block node pointer		*/
  9   187 			/* parameter 2:	(input)	token node pointer		*/
  9   188 			/* parameter 3:	(input)	declare type		*/
  9   189 			/* return:	(output)	symbol node pointer		*/
  9   190 
  9   191 declare	create_token	entry (character (*), bit (9) aligned)
  9   192 			returns (ptr);
  9   193 			/* parameter 1:	(input)	token string		*/
  9   194 			/* parameter 2:	(input)	token type		*/
  9   195 			/* return:	(output)	token node ptr		*/
  9   196 
  9   197 declare	create_token$init_hash_table entry ();
  9   198 
  9   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  9   200 			returns (ptr);
  9   201 			/* parameter 1:	(input)	token string		*/
  9   202 			/* parameter 2:	(input)	token type		*/
  9   203 			/* parameter 3:	(input)	protected flag		*/
  9   204 			/* return:	(output)	token node ptr		*/
  9   205 
  9   206 declare	decbin		entry(character(*) aligned) reducible
  9   207 			returns(fixed bin(31));
  9   208 			/* parameter 1:	(input)	decimal character string	*/
  9   209 			/* return:	(output)	binary value		*/
  9   210 
  9   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  9   212 			returns(pointer);
  9   213 			/* parameter 1:	(input)	value			*/
  9   214 			/* parameter 2:	(input)	type			*/
  9   215 			/* parameter 3:	(input)	size			*/
  9   216 			/* parameter 4:	(input)	scale			*/
  9   217 			/* return:	(output)	reference node pointer	*/
  9   218 
  9   219 declare	declare_constant$bit entry(bit(*) aligned)
  9   220 			returns(pointer);
  9   221 			/* parameter 1:	(input)	bit			*/
  9   222 			/* return:	(output)	reference node pointer	*/
  9   223 
  9   224 declare	declare_constant$char entry(character(*) aligned)
  9   225 			returns(pointer);
  9   226 			/* parameter 1:	(input)	character			*/
  9   227 			/* return:	(output)	reference node pointer	*/
  9   228 
  9   229 declare	declare_constant$desc entry(bit(*) aligned)
  9   230 			returns(pointer);
  9   231 			/* parameter 1:	(input)	descriptor bit value	*/
  9   232 			/* return:	(output)	reference node pointer	*/
  9   233 
  9   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  9   235 			returns(pointer);
  9   236 			/* parameter 1:	(input)	integer			*/
  9   237 			/* return:	(output)	reference node pointer	*/
  9   238 
  9   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  9   240 			returns(pointer);
  9   241 			/* parameter 1:	(input)	block node pointer		*/
  9   242 			/* parameter 2:	(input)	statement node pointer	*/
  9   243 			/* parameter 3:	(input)	symbol node pointer		*/
  9   244 			/* parameter 4:	(input)	loc pointer		*/
  9   245 			/* parameter 5:	(input)	array descriptor bit
  9   246*						cross_section bit	*/
  9   247 			/* return:	(output)	reference node pointer	*/
  9   248 
  9   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  9   250 			returns(pointer);
  9   251 			/* parameter 1:	(input)	block node pointer	*/
  9   252 			/* parameter 2:	(input)	statement node pointer 	*/
  9   253 			/* parameter 3:	(input)	symbol node pointer	*/
  9   254 			/* parameter 4:	(input)	loc pointer	*/
  9   255 			/* parameter 5:	(input)	array descriptor bit
  9   256*						cross_section bit	*/
  9   257 			/* return:	(output)	reference node pointer	*/
  9   258 
  9   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  9   260 			returns(pointer);
  9   261 			/* parameter 1:	(input)	block node pointer		*/
  9   262 			/* parameter 2:	(input)	statement node pointer	*/
  9   263 			/* parameter 3:	(input)	symbol node pointer		*/
  9   264 			/* parameter 4:	(input)	loc pointer		*/
  9   265 			/* parameter 5:	(input)	array descriptor bit
  9   266*						cross_section bit	*/
  9   267 			/* return:	(output)	reference node pointer	*/
  9   268 
  9   269 declare	declare_integer	entry(pointer)
  9   270 			returns(pointer);
  9   271 			/* parameter 1:	(input)	block node pointer		*/
  9   272 			/* return:	(output)	reference node pointer 	*/
  9   273 
  9   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  9   275 			/* parameter 1:	(input)	picture string		*/
  9   276 			/* parameter 2:	(input)	symbol node pointer		*/
  9   277 			/* parameter 3:	(output)	error code, if any		*/
  9   278 
  9   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  9   280 			returns(pointer);
  9   281 			/* parameter 1:	(input)	picture string		*/
  9   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  9   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  9   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  9   285 			/* return:	(output)	reference node pointer	*/
  9   286 
  9   287 declare	declare_pointer	entry(pointer)
  9   288 			returns(pointer);
  9   289 			/* parameter 1:	(input)	block node pointer		*/
  9   290 			/* return:	(output)	reference node pointer	*/
  9   291 
  9   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  9   293 			returns(pointer);
  9   294 			/* parameter 1:	(input)	type			*/
  9   295 			/* parameter 2:	(input)	precision			*/
  9   296 			/* parameter 3:	(input)	scale			*/
  9   297 			/* parameter 4:	(input)	length			*/
  9   298 			/* return:	(output)	reference node pointer	*/
  9   299 
  9   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  9   301 			returns(char(120) varying);
  9   302 			/* parameter 1:	(input)	node pointer		*/
  9   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  9   304 			/* return:	(output)	source line id		*/
  9   305 
  9   306 declare	decode_source_id	entry(
 10     1 			1 structure unaligned,
 10     2 			  2 /* file_number */	bit(8),
 10     3 			  2 /* line_number */	bit(14),
 10     4 			  2 /* stmt_number */	bit(5),
  9   307 
  9   308 			bit(1) aligned)
  9   309 			returns(char(120) varying);
  9   310 			/* parameter 1:	(input)	source id			*/
  9   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  9   312 			/* return:	(output)	source line id		*/
  9   313 
  9   314 declare	error		entry(fixed bin(15),pointer,pointer);
  9   315 			/* parameter 1:	(input)	error number		*/
  9   316 			/* parameter 2:	(input)	statement node pointer or null*/
  9   317 			/* parameter 3:	(input)	token node pointer 		*/
  9   318 
  9   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  9   320 			/* parameter 1:	(input)	error number		*/
  9   321 			/* parameter 2:	(input)	statement node pointer or null*/
  9   322 			/* parameter 3:	(input)	token node pointer 		*/
  9   323 
  9   324 declare	error_		entry(fixed bin(15),
 11     1 			1 structure unaligned,
 11     2 			  2 /* file_number */	bit(8),
 11     3 			  2 /* line_number */	bit(14),
 11     4 			  2 /* stmt_number */	bit(5),
  9   325 
  9   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  9   327 			/* parameter 1:	(input)	error number		*/
  9   328 			/* parameter 2:	(input)	statement id		*/
  9   329 			/* parameter 3:	(input)	any node pointer		*/
  9   330 			/* parameter 4:	(input)	source segment		*/
  9   331 			/* parameter 5:	(input)	source starting character	*/
  9   332 			/* parameter 6:	(input)	source length		*/
  9   333 
  9   334 declare	error_$no_text	entry(fixed bin(15),
 12     1 			1 structure unaligned,
 12     2 			  2 /* file_number */	bit(8),
 12     3 			  2 /* line_number */	bit(14),
 12     4 			  2 /* stmt_number */	bit(5),
  9   335 
  9   336 			pointer);
  9   337 			/* parameter 1:	(input)	error number		*/
  9   338 			/* parameter 2:	(input)	statement id		*/
  9   339 			/* parameter 3:	(input)	any node pointer		*/
  9   340 
  9   341 declare	error_$initialize_error entry();
  9   342 
  9   343 declare	error_$finish	entry();
  9   344 
  9   345 declare	free_node		entry(pointer);
  9   346 			/* parameter 1:	any node pointer			*/
  9   347 
  9   348 declare	get_array_size	entry(pointer,fixed bin(3));
  9   349 			/* parameter 1:	(input)	symbol node pointer		*/
  9   350 			/* parameter 2:	(input)	units			*/
  9   351 
  9   352 declare	get_size		entry(pointer);
  9   353 			/* parameter 1:	(input)	symbol node pointer		*/
  9   354 
  9   355 declare	merge_attributes	external entry(pointer,pointer)
  9   356 			returns(bit(1) aligned);
  9   357 			/* parameter 1:	(input)	target symbol node pointer */
  9   358 			/* parameter 2:	(input)	source symbol node pointer */
  9   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  9   360 
  9   361 declare	optimizer		entry(pointer);
  9   362 			/* parameter 1:	(input)	root pointer		*/
  9   363 
  9   364 declare	parse_error	entry(fixed bin(15),pointer);
  9   365 			/* parameter 1:	(input)	error number		*/
  9   366 			/* parameter 2:	(input)	any node pointer		*/
  9   367 
  9   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  9   369 			/* parameter 1:	(input)	error number		*/
  9   370 			/* parameter 2:	(input)	any node pointer		*/
  9   371 
  9   372 declare	pl1_error_print$write_out
  9   373 			entry(fixed bin(15),
 13     1 			1 structure unaligned,
 13     2 			  2 /* file_number */	bit(8),
 13     3 			  2 /* line_number */	bit(14),
 13     4 			  2 /* stmt_number */	bit(5),
  9   374 
  9   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  9   376 			/* parameter 1:	(input)	error number		*/
  9   377 			/* parameter 2:	(input)	statement identification	*/
  9   378 			/* parameter 3:	(input)	any node pointer		*/
  9   379 			/* parameter 4:	(input)	source segment		*/
  9   380 			/* parameter 5:	(input)	source character index	*/
  9   381 			/* parameter 6:	(input)	source length		*/
  9   382 			/* parameter 7:	(input)	source line		*/
  9   383 
  9   384 declare	pl1_error_print$listing_segment
  9   385 			entry(fixed bin(15),
 14     1 			1 structure unaligned,
 14     2 			  2 /* file_number */	bit(8),
 14     3 			  2 /* line_number */	bit(14),
 14     4 			  2 /* stmt_number */	bit(5),
  9   386 
  9   387 			pointer);
  9   388 			/* parameter 1:	(input)	error number		*/
  9   389 			/* parameter 2:	(input)	statement identification	*/
  9   390 			/* parameter 3:	(input)	token node pointer		*/
  9   391 
  9   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  9   393 			/* parameter 1:	(input)	string			*/
  9   394 
  9   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  9   396 			/* parameter 1:	(input)	string			*/
  9   397 
  9   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  9   399 			/* parameter 1:	(input)	string			*/
  9   400 			/* parameter 2:	(input)	string length or 0		*/
  9   401 
  9   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  9   403 			/* parameter 1:	(input)	string			*/
  9   404 			/* parameter 2:	(input)	string length or 0		*/
  9   405 
  9   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  9   407 			/* parameter 1:	(input)	string pointer		*/
  9   408 			/* parameter 2:	(input)	string size		*/
  9   409 
  9   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  9   411 			/* parameter 1:	(input)	string pointer		*/
  9   412 			/* parameter 2:	(input)	string length or 0		*/
  9   413 
  9   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  9   415 			/* parameter 1:	(input)	string			*/
  9   416 			/* parameter 2:	(input)	length			*/
  9   417 
  9   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  9   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  9   420 			/* parameter 2:	(input)	line number		*/
  9   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  9   422 			/* parameter 4:	(input)	number of chars to copy	*/
  9   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  9   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  9   425 
  9   426 declare	refer_extent	entry(pointer,pointer);
  9   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  9   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  9   429 
  9   430 declare	reserve$clear	entry()
  9   431 			returns(pointer);
  9   432 			/* return:	(output)	pointer			*/
  9   433 
  9   434 declare	reserve$declare_lib	entry(fixed bin(15))
  9   435 			returns(pointer);
  9   436 			/* parameter 1:	(input)	builtin function number	*/
  9   437 			/* return:	(output)	pointer			*/
  9   438 
  9   439 declare	reserve$read_lib	entry(fixed bin(15))
  9   440 			returns(pointer);
  9   441 			/* parameter 1:	(input)	builtin function number	*/
  9   442 			/* return:	(output)	pointer			*/
  9   443 
  9   444 declare	semantic_translator	entry();
  9   445 
  9   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  9   447 			/* parameter 1:	(input)	error number		*/
  9   448 			/* parameter 2:	(input)	any node pointer		*/
  9   449 
  9   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  9   451 			/* parameter 1:	(input)	error number		*/
  9   452 			/* parameter 2:	(input)	any node pointer		*/
  9   453 
  9   454 declare	share_expression	entry(ptr)
  9   455 			returns(ptr);
  9   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  9   457 			/* return:	(output)	tree pointer or null	*/
  9   458 
  9   459 declare	token_to_binary	entry(ptr) reducible
  9   460 			returns(fixed bin(31));
  9   461 			/* parameter 1:	(input)	token node pointer		*/
  9   462 			/* return:	(output)	converted binary value	*/
  9   463 
  9   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
      173 
      174 	end constant_token;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/24/92  1041.3  constant_token.pl1                >spec>install>MR12.5-1011>constant_token.pl1
40           1    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
42           2    10/25/79  1745.8  cross_reference.incl.pl1          >ldd>incl>cross_reference.incl.pl1
43           3    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
44           4    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
46           5    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
48           6    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
49           7    09/14/77  1805.7  token_list.incl.pl1               >ldd>incl>token_list.incl.pl1
51           8    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
173          9    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
9-307       10    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
9-325       11    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
9-335       12    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
9-374       13    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
9-386       14    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
alloc_in_text            32(08)        based           bit(1)                   level 4 packed packed unaligned dcl 57 ref 77
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 57 set ref 97*
attributes               31            based           structure                level 2 in structure "symbol" dcl 5-3 in procedure
                                                                                  "constant_token"
attributes               31            based           structure                level 2 in structure "sym" dcl 57 in procedure
                                                                                  "constant_token"
b                               000124 automatic       pointer                  dcl 106 set ref 123* 124 129 140* 140* 140
blk                                    parameter       pointer                  dcl 106 ref 102 123
blk_ptr                                parameter       pointer                  dcl 21 set ref 18 69* 149 164*
block                                  based           structure                level 1 dcl 1-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 5-3 ref 129
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 57
create_cross_reference          000016 constant        entry                    external dcl 9-128 ref 92
cross_reference                        based           structure                level 1 dcl 2-3
cross_references         10            based           pointer                  level 2 packed packed unaligned dcl 57 set ref 93
                                                                                  94*
d                               000102 automatic       pointer                  dcl 55 set ref 92* 93 94 95
dec_integer                     000001 constant        bit(9)                   initial dcl 8-3 set ref 164*
declaration               1            based           pointer                  level 2 packed packed unaligned dcl 6-3 ref 126
desired_type                           parameter       bit(9)                   dcl 22 ref 18 82
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 57 ref 77
dummy_type                      000107 automatic       bit(9)                   dcl 160 set ref 164*
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 3-6 ref 81
                                                                                  82 87
father                    1            based           pointer                  level 2 packed packed unaligned dcl 1-5 ref 140
identifier                             constant        bit(9)                   initial dcl 8-3 ref 164 166
index                                  parameter       fixed bin(17,0)          dcl 156 ref 149 162
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 57 ref 77 77 81
                                                                                  82 87
initialed                31(20)        based           bit(1)                   level 4 packed packed unaligned dcl 57 ref 77
is_constant                     000000 constant        bit(9)                   initial dcl 8-47 set ref 164*
is_delimiter                           constant        bit(9)                   initial dcl 8-47 ref 166 166
is_identifier                          constant        bit(9)                   initial dcl 8-47 ref 164 166
k                               000106 automatic       fixed bin(17,0)          dcl 159 set ref 162* 163 163 164 164 166 166 169*
                                                                                  169
label_node                             constant        bit(9)                   initial dcl 4-5 ref 131
list                                   based           structure                level 1 dcl 3-6
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 5-3 ref 131
misc_attributes          31(19)        based           structure                level 3 in structure "sym" packed packed unaligned
                                                                                  dcl 57 in procedure "constant_token"
misc_attributes          31(19)        based           structure                level 3 in structure "symbol" packed packed
                                                                                  unaligned dcl 5-3 in procedure "constant_token"
multi_use                 7            based           pointer                  level 2 packed packed unaligned dcl 5-3 ref 137
next                      1            based           pointer                  level 2 packed packed unaligned dcl 2-3 set ref 93*
node                                   based           structure                level 1 dcl 4-27
node_type                              based           bit(9)                   level 2 packed packed unaligned dcl 57 ref 71
null                                                   builtin function         dcl 61 ref 70 77 81 121 124 127 140 144
num_partials                    000126 automatic       fixed bin(15,0)          dcl 107 set ref 120* 133* 133 140 144
number                    0(21)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 3-6 ref 77
partial_ptr                     000122 automatic       pointer                  dcl 106 set ref 121* 134* 144* 145
pl1_stat_$statement_id          000012 external static structure                level 1 packed packed unaligned dcl 7-6 ref 95
pl1_stat_$table                 000014 external static bit(1)                   dcl 59 ref 97
pl1_stat_$token_list_ptr        000010 external static pointer                  dcl 7-1 ref 7-3
put_in_symtab            33(08)        based           bit(1)                   level 4 packed packed unaligned dcl 57 set ref 97*
semi_colon                             constant        bit(9)                   initial dcl 8-3 ref 163
source_id                 0(09)        based           structure                level 2 packed packed unaligned dcl 2-3 set ref 95*
static                   32(11)        based           bit(1)                   level 4 packed packed unaligned dcl 57 ref 77
stop_type                              parameter       bit(9)                   dcl 157 ref 149 163
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 57
string                                                 builtin function         dcl 61 set ref 95* 95
sym                                    based           structure                level 1 unaligned dcl 57
sym_ptr                         000120 automatic       pointer                  dcl 106 set ref 126* 127 129 131 131 131 134 137*
                                                                                  137
symbol                                 based           structure                level 1 dcl 5-3
symbol_node                            constant        bit(9)                   initial dcl 4-5 ref 71
symp                            000104 automatic       pointer                  dcl 56 set ref 69* 70 71 77 77 77 77 77 77 81 82 87
                                                                                  93 94 97 97
t                                      based           structure                level 1 unaligned dcl 53
t_ptr                                  parameter       pointer                  dcl 106 ref 102 126
t_table                                based           structure                level 1 dcl 7-11
token                                  based           structure                level 1 dcl 6-3
token_list                             based           pointer                  array dcl 7-2 set ref 163 163 164 164* 166 166
token_list_pointer              000100 automatic       pointer                  initial dcl 7-3 set ref 163 163 164 164 166 166 7-3*
token_ptr                              parameter       pointer                  dcl 21 set ref 18 69* 70 71 81 82 87* 100
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 4-27 in procedure "constant_token" ref 131
type                      0(09)        based           bit(9)                   level 2 in structure "t" packed packed unaligned
                                                                                  dcl 53 in procedure "constant_token" ref 70 71 81
                                                                                  82 82 100
type                      0(09)        based           bit(9)                   level 2 in structure "t_table" packed packed
                                                                                  unaligned dcl 7-11 in procedure "constant_token"
                                                                                  ref 163 163 164 166 166
type_mask                              parameter       bit(9)                   dcl 23 ref 18 82 82

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 9-20
and                                    internal static bit(9)                   initial dcl 8-3
array_node                             internal static bit(9)                   initial dcl 4-5
arrow                                  internal static bit(9)                   initial dcl 8-3
assignment                             internal static bit(9)                   initial dcl 8-3
asterisk                               internal static bit(9)                   initial dcl 8-3
bin_integer                            internal static bit(9)                   initial dcl 8-3
binary_to_octal_string          000000 constant        entry                    external dcl 9-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 9-43
bindec                          000000 constant        entry                    external dcl 9-23
bindec$vs                       000000 constant        entry                    external dcl 9-28
binoct                          000000 constant        entry                    external dcl 9-33
bit_string                             internal static bit(9)                   initial dcl 8-3
block_node                             internal static bit(9)                   initial dcl 4-5
bound_node                             internal static bit(9)                   initial dcl 4-5
by_name_agg_node                       internal static bit(9)                   initial dcl 4-5
cat                                    internal static bit(9)                   initial dcl 8-3
char_string                            internal static bit(9)                   initial dcl 8-3
colon                                  internal static bit(9)                   initial dcl 8-3
comma                                  internal static bit(9)                   initial dcl 8-3
compare_expression              000000 constant        entry                    external dcl 9-48
constant_length                 000000 constant        entry                    external dcl 9-54
context_node                           internal static bit(9)                   initial dcl 4-5
convert                         000000 constant        entry                    external dcl 9-60
convert$from_builtin            000000 constant        entry                    external dcl 9-72
convert$to_integer              000000 constant        entry                    external dcl 9-66
convert$to_target               000000 constant        entry                    external dcl 9-88
convert$to_target_fb            000000 constant        entry                    external dcl 9-82
convert$validate                000000 constant        entry                    external dcl 9-78
copy_expression                 000000 constant        entry                    external dcl 9-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 9-99
copy_unique_expression          000000 constant        entry                    external dcl 9-103
create_array                    000000 constant        entry                    external dcl 9-108
create_block                    000000 constant        entry                    external dcl 9-112
create_bound                    000000 constant        entry                    external dcl 9-118
create_context                  000000 constant        entry                    external dcl 9-122
create_default                  000000 constant        entry                    external dcl 9-132
create_identifier               000000 constant        entry                    external dcl 9-136
create_label                    000000 constant        entry                    external dcl 9-140
create_list                     000000 constant        entry                    external dcl 9-147
create_operator                 000000 constant        entry                    external dcl 9-152
create_reference                000000 constant        entry                    external dcl 9-158
create_statement                000000 constant        entry                    external dcl 9-163
create_statement$prologue       000000 constant        entry                    external dcl 9-171
create_storage                  000000 constant        entry                    external dcl 9-179
create_symbol                   000000 constant        entry                    external dcl 9-184
create_token                    000000 constant        entry                    external dcl 9-191
create_token$init_hash_table    000000 constant        entry                    external dcl 9-197
create_token$protected          000000 constant        entry                    external dcl 9-199
cross_reference_node                   internal static bit(9)                   initial dcl 4-5
decbin                          000000 constant        entry                    external dcl 9-206
declare_constant                000000 constant        entry                    external dcl 9-211
declare_constant$bit            000000 constant        entry                    external dcl 9-219
declare_constant$char           000000 constant        entry                    external dcl 9-224
declare_constant$desc           000000 constant        entry                    external dcl 9-229
declare_constant$integer        000000 constant        entry                    external dcl 9-234
declare_descriptor              000000 constant        entry                    external dcl 9-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 9-249
declare_descriptor$param        000000 constant        entry                    external dcl 9-259
declare_integer                 000000 constant        entry                    external dcl 9-269
declare_picture                 000000 constant        entry                    external dcl 9-274
declare_picture_temp            000000 constant        entry                    external dcl 9-279
declare_pointer                 000000 constant        entry                    external dcl 9-287
declare_temporary               000000 constant        entry                    external dcl 9-292
decode_node_id                  000000 constant        entry                    external dcl 9-300
decode_source_id                000000 constant        entry                    external dcl 9-306
default_node                           internal static bit(9)                   initial dcl 4-5
eq                                     internal static bit(9)                   initial dcl 8-3
error                           000000 constant        entry                    external dcl 9-314
error$omit_text                 000000 constant        entry                    external dcl 9-319
error_                          000000 constant        entry                    external dcl 9-324
error_$finish                   000000 constant        entry                    external dcl 9-343
error_$initialize_error         000000 constant        entry                    external dcl 9-341
error_$no_text                  000000 constant        entry                    external dcl 9-334
expon                                  internal static bit(9)                   initial dcl 8-3
fixed_bin                              internal static bit(9)                   initial dcl 8-3
fixed_dec                              internal static bit(9)                   initial dcl 8-3
float_bin                              internal static bit(9)                   initial dcl 8-3
float_dec                              internal static bit(9)                   initial dcl 8-3
format_value_node                      internal static bit(9)                   initial dcl 4-5
free_node                       000000 constant        entry                    external dcl 9-345
ge                                     internal static bit(9)                   initial dcl 8-3
get_array_size                  000000 constant        entry                    external dcl 9-348
get_size                        000000 constant        entry                    external dcl 9-352
gt                                     internal static bit(9)                   initial dcl 8-3
i_bin_integer                          internal static bit(9)                   initial dcl 8-3
i_dec_integer                          internal static bit(9)                   initial dcl 8-3
i_fixed_bin                            internal static bit(9)                   initial dcl 8-3
i_fixed_dec                            internal static bit(9)                   initial dcl 8-3
i_float_bin                            internal static bit(9)                   initial dcl 8-3
i_float_dec                            internal static bit(9)                   initial dcl 8-3
is_arith_constant                      internal static bit(9)                   initial dcl 8-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 8-47
is_decimal_constant                    internal static bit(9)                   initial dcl 8-47
is_float_constant                      internal static bit(9)                   initial dcl 8-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 8-47
is_integral_constant                   internal static bit(9)                   initial dcl 8-47
is_isub                                internal static bit(9)                   initial dcl 8-47
isub                                   internal static bit(9)                   initial dcl 8-3
label_array_element_node               internal static bit(9)                   initial dcl 4-5
le                                     internal static bit(9)                   initial dcl 8-3
left_parn                              internal static bit(9)                   initial dcl 8-3
list_node                              internal static bit(9)                   initial dcl 4-5
lt                                     internal static bit(9)                   initial dcl 8-3
machine_state_node                     internal static bit(9)                   initial dcl 4-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 1-74
max_list_elements                      internal static fixed bin(17,0)          initial dcl 3-12
merge_attributes                000000 constant        entry                    external dcl 9-355
minus                                  internal static bit(9)                   initial dcl 8-3
ne                                     internal static bit(9)                   initial dcl 8-3
ngt                                    internal static bit(9)                   initial dcl 8-3
nlt                                    internal static bit(9)                   initial dcl 8-3
no_token                               internal static bit(9)                   initial dcl 8-3
not                                    internal static bit(9)                   initial dcl 8-3
operator_node                          internal static bit(9)                   initial dcl 4-5
optimizer                       000000 constant        entry                    external dcl 9-361
or                                     internal static bit(9)                   initial dcl 8-3
parse_error                     000000 constant        entry                    external dcl 9-364
parse_error$no_text             000000 constant        entry                    external dcl 9-368
percent                                internal static bit(9)                   initial dcl 8-3
period                                 internal static bit(9)                   initial dcl 8-3
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 9-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 9-372
pl1_print$for_lex               000000 constant        entry                    external dcl 9-418
pl1_print$non_varying           000000 constant        entry                    external dcl 9-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 9-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 9-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 9-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 9-414
pl1_print$varying               000000 constant        entry                    external dcl 9-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 9-395
plus                                   internal static bit(9)                   initial dcl 8-3
refer_extent                    000000 constant        entry                    external dcl 9-426
reference_node                         internal static bit(9)                   initial dcl 4-5
reserve$clear                   000000 constant        entry                    external dcl 9-430
reserve$declare_lib             000000 constant        entry                    external dcl 9-434
reserve$read_lib                000000 constant        entry                    external dcl 9-439
right_parn                             internal static bit(9)                   initial dcl 8-3
semantic_translator             000000 constant        entry                    external dcl 9-444
semantic_translator$abort       000000 constant        entry                    external dcl 9-446
semantic_translator$error       000000 constant        entry                    external dcl 9-450
sf_par_node                            internal static bit(9)                   initial dcl 4-5
share_expression                000000 constant        entry                    external dcl 9-454
slash                                  internal static bit(9)                   initial dcl 8-3
source_node                            internal static bit(9)                   initial dcl 4-5
statement_node                         internal static bit(9)                   initial dcl 4-5
temporary_node                         internal static bit(9)                   initial dcl 4-5
token_list_length                      internal static fixed bin(15,0)          initial dcl 7-4
token_node                             internal static bit(9)                   initial dcl 4-5
token_to_binary                 000000 constant        entry                    external dcl 9-459

NAMES DECLARED BY EXPLICIT CONTEXT.
constant_token                  000040 constant        entry                    external dcl 18 ref 164
defer_constant_token_list       000303 constant        entry                    external dcl 149
token_lookup                    000417 constant        entry                    internal dcl 102 ref 69

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       614         634     515         624
Length      1262     515        20         412      76           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
constant_token                      114 external procedure  is an external procedure.  
token_lookup                            internal procedure  shares stack frame of external procedure constant_token.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
constant_token           000100 token_list_pointer          constant_token
                         000102 d                           constant_token
                         000104 symp                        constant_token
                         000106 k                           constant_token
                         000107 dummy_type                  constant_token
                         000120 sym_ptr                     token_lookup
                         000122 partial_ptr                 token_lookup
                         000124 b                           token_lookup
                         000126 num_partials                token_lookup

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ext_in         call_ext_out        return_mac          signal_op           ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_cross_reference

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$statement_id        pl1_stat_$table               pl1_stat_$token_list_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
 7    3 000025        18 000033        69 000050        70 000063        71 000105        77 000127        81 000153
     82 000175        87 000231        92 000233        93 000242        94 000246        95 000247        97 000253
    100 000261       149 000277       162 000312       163 000315       164 000335       166 000363       169 000407
    170 000410       171 000411       102 000417       120 000421       121 000422       123 000424       124 000427
    126 000434       127 000441       129 000446       131 000453       133 000465       134 000466       137 000467
    138 000471       140 000472       140 000477       141 000502       144 000503       145 000510


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
