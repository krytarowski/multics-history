ASSEMBLY LISTING OF SEGMENT >spec>on>41-21>dm_admin_gate_.alm              
ASSEMBLED ON:	04/24/85  0822.0 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1983 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  "
                                     7  " DESCRIPTION:
                                     8  "
                                     9  "	 This is the administrative gate for the data management system
                                    10  "     (DMS).  Any manager specific entries will have the initials of the
                                    11  "     manager prefixed to the entry's name (e.g., "lm_" for lock_manager_
                                    12  "     entries). General DM inner ring calls will begin with "dm_".
                                    13  "
                                    14  "	 No part one DMS initialization procedure should go through this
                                    15  "     (or any other) gate.  The main transfer vector for a manager should
                                    16  "     directly call the initialization routine as the call MUST come from the
                                    17  "     DM ring of execution.
                                    18  "
                                    19  " HISTORY:
                                    20  " Written by M. Pandolf, 06/08/83.
                                    21  " Modified:
                                    22  " 08/17/83 by M. Pandolf:  to add set_journal_stamps.
                                    23  " 01/03/84 by Lee A. Newcomb:  added lm_copy_data, lm_system_segment_count,
                                    24  "	    and lm_reset_system_meters.
                                    25  " 07/06/84 by Lindsey Spratt:  Added bjm_get_bj_path_from_uid.
                                    26  " 09/17/84 by Matthew Pierret: Added schedule_shutdown.
                                    27  " 09/27/84 by Lindsey Spratt:  Added dm_copy_log.
                                    28  " 10/02/84 by Lee A. Newcomb:  Moved $dm_set_aim_dir to here from
                                    29  "	    dm_daemon_gate_ and added $dm_create_aim_control_seg.
                                    30  " 11/12/84 by Lindsey Spratt:  Renamed set_journal_stamps entry to
                                    31  "	    dm_set_journal_stamps.
                                    32  " 11/22/84 by Lee A. Newcomb:  Removed the obsolete dm_set_aim_dir and
                                    33  "	    dm_create_aim_control_seg entries.
                                    34  " 11/27/84 by Stanford S. Cox: Chg send* to xfer thru dm_firstref_tv_,
                                    35  "	    chg send* to dm_send_= chg *inner_ring_tv_ to =firstref_tv_.
                                    36  " 12/07/84 by Lindsey Spratt:  Changed dm_set_journal_stamps to tra to
                                    37  "	    dm_no_firstref_tv_ instead of dm_firstref_tv_.
                                    38  " 12/18/84 by Steve Herbst: Added entry points dlr_open, etc. for log reading.
                                    39  " 01/16/84 by R. Michael Tague: Removed obsolete dm_send_* entries and added
                                    40  "	    dm_send_new_process_notifies and dm_send_kill_txn.
                                    41  " 02/19/85 by Steve Herbst: Fixed arg counts for dlr_open and dlr_hold_message.
                                    42  " 03/25/85 by S. Cox:  Added lm_copy_fast_data.
                                    43  "
                                    44  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    45  
    000000                          46            name      dm_admin_gate_
                                    47  
                                    48            include   gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    49  
                                    50            gate_info
                                        	use	transfer_vector
    000000  0a   000036 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000036  aa  7 00046 2721 20         .actor:	getlp
    000037  aa  0 00002 3521 20         	eppbp	ap|2,*
    000040  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000041  0a   000055 6000 00         	tze	.return_name	zero length => get name
                                        
    000042  aa   000001 0350 07         	adla	1,dl		include length of acc
    000043  aa  0 00004 4501 20         	stz	ap|4,*
    000044  0a   000070 7000 00         	tsx0	.search_defs
                                        
    000045  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000046  aa   277777 600005          	desc9a	bp|-1(3),al
    000047  aa   300000 000005          	desc9a	bb|0,al
    000050  0a   000100 6010 00         	tnz	.next_def
                                        
    000051  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000052  aa   000022 7710 00         	arl	18
    000053  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000054  aa  7 00044 7101 20         	short_return
                                        
    000055                              .return_name:
    000055  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000056  0a   000070 7000 00         	tsx0	.search_defs
                                        
    000057  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000060  0a   000100 6010 00         	tnz	.next_def
                                        
    000061  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000062  aa   000033 7710 00         	arl	27
    000063  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000064  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000065  aa   300000 200005          	desc9a	bb|0(1),al
    000066  aa   200000 000005          	desc9a	bp|0,al
                                        
    000067  aa  7 00044 7101 20         	short_return
                                        
    000070                              .search_defs:
    000070  aa   000000 6220 00         	eax2	0
    000071  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000072                              .defs_loop:
    000072  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000073  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000074  0a   000100 6010 00         	tnz	.next_def
                                        
    000075  aa  1 00002 2271 12         	ldx7	ab|2,2
    000076  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000077  aa   000000 7100 10         	tra	0,0		test definition
    000100                              .next_def:
    000100  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000101  0a   000072 6010 00         	tnz	.defs_loop
                                        
    000102  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000103  aa   000060 6270 00         .setup:	push
    000104  aa  7 00040 2721 20
    000105  aa  7 00046 2721 20         	getlp
    000106  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000107  0a   000134 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000110  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000111  0a   000134 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000112  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000113  0a   000122 3500 00
    000114  4a  4 00010 3521 20
    000115  aa  6 00040 7531 00
    000116  aa  7 00036 6701 20
    000117  aa  6 00000 1731 00
    000120  aa  6 00040 0731 00
    000121  aa   000000 000000          	oct	0
                                        
                                        	even
    000122                              signal_arglist:
    000122  aa   000002 000004          	zero	2,4
    000123  aa   000002 000000          	zero	2,0
    000124  0a   000130 0000 00         	arg	.gate_errorname
    000125  aa   000000 0000 00         	arg
    000126  0a   000133 0000 00         	arg	.gate_errordesc
    000127  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000130                              .gate_errorname:
    000130  aa  147 141 164 145         	aci	"gate_error"
    000131  aa  137 145 162 162
    000132  aa  157 162 000 000
    000133                              .gate_errordesc:
    000133  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000134                              .no_gate_error:
    000134  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    51  
                                    52  " Before Journal entries:
                                    53  
                                    54  	gate	bjm_get_bj_path_from_uid,bjm_firstref_tv_,get_bj_path_from_uid,4
                        000001          	segdef	bjm_get_bj_path_from_uid
    000001                              bjm_get_bj_path_from_uid:
    000001  0a   000136 7100 00         	tra	bjm_get_bj_path_from_uid.e
    000135  aa   000010 000000          	zero	4*2,0
    000136                              bjm_get_bj_path_from_uid.e:
    000136  0a   000103 7020 00         	tsx2	.setup
    000137  aa   000000 6340 07         	ldi	=0,dl
    000140  4a  4 00012 3521 20         	short_call bjm_firstref_tv_$get_bj_path_from_uid(ap|0)
    000141  aa  7 00036 6701 20
    000142  aa  6 00030 3701 20
    000143  aa  7 00042 7101 20         	return
                                        
                                    55  
                                    56  " Log-reading entries, corresponding to those in log_read_:
                                    57  
                                    58  	gate	dlr_close,dm_no_firstref_tv_,dlr_close,2
                        000002          	segdef	dlr_close
    000002                              dlr_close:
    000002  0a   000145 7100 00         	tra	dlr_close.e
    000144  aa   000004 000000          	zero	2*2,0
    000145                              dlr_close.e:
    000145  0a   000103 7020 00         	tsx2	.setup
    000146  aa   000000 6340 07         	ldi	=0,dl
    000147  4a  4 00014 3521 20         	short_call dm_no_firstref_tv_$dlr_close(ap|0)
    000150  aa  7 00036 6701 20
    000151  aa  6 00030 3701 20
    000152  aa  7 00042 7101 20         	return
                                        
                                    59  
                                    60  	gate	dlr_deregister,dm_no_firstref_tv_,dlr_deregister,4
                        000003          	segdef	dlr_deregister
    000003                              dlr_deregister:
    000003  0a   000154 7100 00         	tra	dlr_deregister.e
    000153  aa   000010 000000          	zero	4*2,0
    000154                              dlr_deregister.e:
    000154  0a   000103 7020 00         	tsx2	.setup
    000155  aa   000000 6340 07         	ldi	=0,dl
    000156  4a  4 00016 3521 20         	short_call dm_no_firstref_tv_$dlr_deregister(ap|0)
    000157  aa  7 00036 6701 20
    000160  aa  6 00030 3701 20
    000161  aa  7 00042 7101 20         	return
                                        
                                    61  
                                    62  	gate	dlr_free_message,dm_no_firstref_tv_,dlr_free_message,2
                        000004          	segdef	dlr_free_message
    000004                              dlr_free_message:
    000004  0a   000163 7100 00         	tra	dlr_free_message.e
    000162  aa   000004 000000          	zero	2*2,0
    000163                              dlr_free_message.e:
    000163  0a   000103 7020 00         	tsx2	.setup
    000164  aa   000000 6340 07         	ldi	=0,dl
    000165  4a  4 00020 3521 20         	short_call dm_no_firstref_tv_$dlr_free_message(ap|0)
    000166  aa  7 00036 6701 20
    000167  aa  6 00030 3701 20
    000170  aa  7 00042 7101 20         	return
                                        
                                    63  
                                    64  	gate	dlr_get_log_uid,dm_no_firstref_tv_,dlr_get_log_uid,3
                        000005          	segdef	dlr_get_log_uid
    000005                              dlr_get_log_uid:
    000005  0a   000172 7100 00         	tra	dlr_get_log_uid.e
    000171  aa   000006 000000          	zero	3*2,0
    000172                              dlr_get_log_uid.e:
    000172  0a   000103 7020 00         	tsx2	.setup
    000173  aa   000000 6340 07         	ldi	=0,dl
    000174  4a  4 00022 3521 20         	short_call dm_no_firstref_tv_$dlr_get_log_uid(ap|0)
    000175  aa  7 00036 6701 20
    000176  aa  6 00030 3701 20
    000177  aa  7 00042 7101 20         	return
                                        
                                    65  
                                    66  	gate	dlr_hold_message,dm_no_firstref_tv_,dlr_hold_message,2
                        000006          	segdef	dlr_hold_message
    000006                              dlr_hold_message:
    000006  0a   000201 7100 00         	tra	dlr_hold_message.e
    000200  aa   000004 000000          	zero	2*2,0
    000201                              dlr_hold_message.e:
    000201  0a   000103 7020 00         	tsx2	.setup
    000202  aa   000000 6340 07         	ldi	=0,dl
    000203  4a  4 00024 3521 20         	short_call dm_no_firstref_tv_$dlr_hold_message(ap|0)
    000204  aa  7 00036 6701 20
    000205  aa  6 00030 3701 20
    000206  aa  7 00042 7101 20         	return
                                        
                                    67  
                                    68  	gate	dlr_next_message,dm_no_firstref_tv_,dlr_next_message,3
                        000007          	segdef	dlr_next_message
    000007                              dlr_next_message:
    000007  0a   000210 7100 00         	tra	dlr_next_message.e
    000207  aa   000006 000000          	zero	3*2,0
    000210                              dlr_next_message.e:
    000210  0a   000103 7020 00         	tsx2	.setup
    000211  aa   000000 6340 07         	ldi	=0,dl
    000212  4a  4 00026 3521 20         	short_call dm_no_firstref_tv_$dlr_next_message(ap|0)
    000213  aa  7 00036 6701 20
    000214  aa  6 00030 3701 20
    000215  aa  7 00042 7101 20         	return
                                        
                                    69  
                                    70  	gate	dlr_open,dm_no_firstref_tv_,dlr_open,5
                        000010          	segdef	dlr_open
    000010                              dlr_open:
    000010  0a   000217 7100 00         	tra	dlr_open.e
    000216  aa   000012 000000          	zero	5*2,0
    000217                              dlr_open.e:
    000217  0a   000103 7020 00         	tsx2	.setup
    000220  aa   000000 6340 07         	ldi	=0,dl
    000221  4a  4 00030 3521 20         	short_call dm_no_firstref_tv_$dlr_open(ap|0)
    000222  aa  7 00036 6701 20
    000223  aa  6 00030 3701 20
    000224  aa  7 00042 7101 20         	return
                                        
                                    71  
                                    72  	gate	dlr_position_sequence,dm_no_firstref_tv_,dlr_position_sequence,5
                        000011          	segdef	dlr_position_sequence
    000011                              dlr_position_sequence:
    000011  0a   000226 7100 00         	tra	dlr_position_sequence.e
    000225  aa   000012 000000          	zero	5*2,0
    000226                              dlr_position_sequence.e:
    000226  0a   000103 7020 00         	tsx2	.setup
    000227  aa   000000 6340 07         	ldi	=0,dl
    000230  4a  4 00032 3521 20         	short_call dm_no_firstref_tv_$dlr_position_sequence(ap|0)
    000231  aa  7 00036 6701 20
    000232  aa  6 00030 3701 20
    000233  aa  7 00042 7101 20         	return
                                        
                                    73  
                                    74  	gate	dlr_position_time,dm_no_firstref_tv_,dlr_position_time,5
                        000012          	segdef	dlr_position_time
    000012                              dlr_position_time:
    000012  0a   000235 7100 00         	tra	dlr_position_time.e
    000234  aa   000012 000000          	zero	5*2,0
    000235                              dlr_position_time.e:
    000235  0a   000103 7020 00         	tsx2	.setup
    000236  aa   000000 6340 07         	ldi	=0,dl
    000237  4a  4 00034 3521 20         	short_call dm_no_firstref_tv_$dlr_position_time(ap|0)
    000240  aa  7 00036 6701 20
    000241  aa  6 00030 3701 20
    000242  aa  7 00042 7101 20         	return
                                        
                                    75  
                                    76  	gate	dlr_prev_message,dm_no_firstref_tv_,dlr_prev_message,3
                        000013          	segdef	dlr_prev_message
    000013                              dlr_prev_message:
    000013  0a   000244 7100 00         	tra	dlr_prev_message.e
    000243  aa   000006 000000          	zero	3*2,0
    000244                              dlr_prev_message.e:
    000244  0a   000103 7020 00         	tsx2	.setup
    000245  aa   000000 6340 07         	ldi	=0,dl
    000246  4a  4 00036 3521 20         	short_call dm_no_firstref_tv_$dlr_prev_message(ap|0)
    000247  aa  7 00036 6701 20
    000250  aa  6 00030 3701 20
    000251  aa  7 00042 7101 20         	return
                                        
                                    77  
                                    78  	gate	dlr_register,dm_no_firstref_tv_,dlr_register,4
                        000014          	segdef	dlr_register
    000014                              dlr_register:
    000014  0a   000253 7100 00         	tra	dlr_register.e
    000252  aa   000010 000000          	zero	4*2,0
    000253                              dlr_register.e:
    000253  0a   000103 7020 00         	tsx2	.setup
    000254  aa   000000 6340 07         	ldi	=0,dl
    000255  4a  4 00040 3521 20         	short_call dm_no_firstref_tv_$dlr_register(ap|0)
    000256  aa  7 00036 6701 20
    000257  aa  6 00030 3701 20
    000260  aa  7 00042 7101 20         	return
                                        
                                    79  
                                    80  	gate	dlr_update,dm_no_firstref_tv_,dlr_update,4
                        000015          	segdef	dlr_update
    000015                              dlr_update:
    000015  0a   000262 7100 00         	tra	dlr_update.e
    000261  aa   000010 000000          	zero	4*2,0
    000262                              dlr_update.e:
    000262  0a   000103 7020 00         	tsx2	.setup
    000263  aa   000000 6340 07         	ldi	=0,dl
    000264  4a  4 00042 3521 20         	short_call dm_no_firstref_tv_$dlr_update(ap|0)
    000265  aa  7 00036 6701 20
    000266  aa  6 00030 3701 20
    000267  aa  7 00042 7101 20         	return
                                        
                                    81  
                                    82  " General DM entries:
                                    83  
                                    84  	gate	dm_copy_log,dm_no_firstref_tv_,copy_log,3
                        000016          	segdef	dm_copy_log
    000016                              dm_copy_log:
    000016  0a   000271 7100 00         	tra	dm_copy_log.e
    000270  aa   000006 000000          	zero	3*2,0
    000271                              dm_copy_log.e:
    000271  0a   000103 7020 00         	tsx2	.setup
    000272  aa   000000 6340 07         	ldi	=0,dl
    000273  4a  4 00044 3521 20         	short_call dm_no_firstref_tv_$copy_log(ap|0)
    000274  aa  7 00036 6701 20
    000275  aa  6 00030 3701 20
    000276  aa  7 00042 7101 20         	return
                                        
                                    85  
                                    86            gate	dm_schedule_shutdown,dm_firstref_tv_,schedule_shutdown,2
                        000017          	segdef	dm_schedule_shutdown
    000017                              dm_schedule_shutdown:
    000017  0a   000300 7100 00         	tra	dm_schedule_shutdown.e
    000277  aa   000004 000000          	zero	2*2,0
    000300                              dm_schedule_shutdown.e:
    000300  0a   000103 7020 00         	tsx2	.setup
    000301  aa   000000 6340 07         	ldi	=0,dl
    000302  4a  4 00046 3521 20         	short_call dm_firstref_tv_$schedule_shutdown(ap|0)
    000303  aa  7 00036 6701 20
    000304  aa  6 00030 3701 20
    000305  aa  7 00042 7101 20         	return
                                        
                                    87  
                                    88            gate      dm_send_adjust_process_id,dm_firstref_tv_,send_adjust_process_id,2
                        000020          	segdef	dm_send_adjust_process_id
    000020                              dm_send_adjust_process_id:
    000020  0a   000307 7100 00         	tra	dm_send_adjust_process_id.e
    000306  aa   000004 000000          	zero	2*2,0
    000307                              dm_send_adjust_process_id.e:
    000307  0a   000103 7020 00         	tsx2	.setup
    000310  aa   000000 6340 07         	ldi	=0,dl
    000311  4a  4 00050 3521 20         	short_call dm_firstref_tv_$send_adjust_process_id(ap|0)
    000312  aa  7 00036 6701 20
    000313  aa  6 00030 3701 20
    000314  aa  7 00042 7101 20         	return
                                        
                                    89  
                                    90            gate      dm_send_adjust_tdt,dm_firstref_tv_,send_adjust_tdt,1
                        000021          	segdef	dm_send_adjust_tdt
    000021                              dm_send_adjust_tdt:
    000021  0a   000316 7100 00         	tra	dm_send_adjust_tdt.e
    000315  aa   000002 000000          	zero	1*2,0
    000316                              dm_send_adjust_tdt.e:
    000316  0a   000103 7020 00         	tsx2	.setup
    000317  aa   000000 6340 07         	ldi	=0,dl
    000320  4a  4 00052 3521 20         	short_call dm_firstref_tv_$send_adjust_tdt(ap|0)
    000321  aa  7 00036 6701 20
    000322  aa  6 00030 3701 20
    000323  aa  7 00042 7101 20         	return
                                        
                                    91  
                                    92            gate      dm_send_adjust_tdt_entry,dm_firstref_tv_,send_adjust_tdt_entry,3
                        000022          	segdef	dm_send_adjust_tdt_entry
    000022                              dm_send_adjust_tdt_entry:
    000022  0a   000325 7100 00         	tra	dm_send_adjust_tdt_entry.e
    000324  aa   000006 000000          	zero	3*2,0
    000325                              dm_send_adjust_tdt_entry.e:
    000325  0a   000103 7020 00         	tsx2	.setup
    000326  aa   000000 6340 07         	ldi	=0,dl
    000327  4a  4 00054 3521 20         	short_call dm_firstref_tv_$send_adjust_tdt_entry(ap|0)
    000330  aa  7 00036 6701 20
    000331  aa  6 00030 3701 20
    000332  aa  7 00042 7101 20         	return
                                        
                                    93  
                                    94            gate      dm_send_adjust_txn,dm_firstref_tv_,send_adjust_txn,3
                        000023          	segdef	dm_send_adjust_txn
    000023                              dm_send_adjust_txn:
    000023  0a   000334 7100 00         	tra	dm_send_adjust_txn.e
    000333  aa   000006 000000          	zero	3*2,0
    000334                              dm_send_adjust_txn.e:
    000334  0a   000103 7020 00         	tsx2	.setup
    000335  aa   000000 6340 07         	ldi	=0,dl
    000336  4a  4 00056 3521 20         	short_call dm_firstref_tv_$send_adjust_txn(ap|0)
    000337  aa  7 00036 6701 20
    000340  aa  6 00030 3701 20
    000341  aa  7 00042 7101 20         	return
                                        
                                    95  
                                    96  	gate	dm_send_kill_txn,dm_firstref_tv_,send_kill_txn,2
                        000024          	segdef	dm_send_kill_txn
    000024                              dm_send_kill_txn:
    000024  0a   000343 7100 00         	tra	dm_send_kill_txn.e
    000342  aa   000004 000000          	zero	2*2,0
    000343                              dm_send_kill_txn.e:
    000343  0a   000103 7020 00         	tsx2	.setup
    000344  aa   000000 6340 07         	ldi	=0,dl
    000345  4a  4 00060 3521 20         	short_call dm_firstref_tv_$send_kill_txn(ap|0)
    000346  aa  7 00036 6701 20
    000347  aa  6 00030 3701 20
    000350  aa  7 00042 7101 20         	return
                                        
                                    97  
                                    98            gate      dm_send_new_proc,dm_firstref_tv_,send_new_proc,1
                        000025          	segdef	dm_send_new_proc
    000025                              dm_send_new_proc:
    000025  0a   000352 7100 00         	tra	dm_send_new_proc.e
    000351  aa   000002 000000          	zero	1*2,0
    000352                              dm_send_new_proc.e:
    000352  0a   000103 7020 00         	tsx2	.setup
    000353  aa   000000 6340 07         	ldi	=0,dl
    000354  4a  4 00062 3521 20         	short_call dm_firstref_tv_$send_new_proc(ap|0)
    000355  aa  7 00036 6701 20
    000356  aa  6 00030 3701 20
    000357  aa  7 00042 7101 20         	return
                                        
                                    99  
                                   100  	gate	dm_send_new_process_notifies,dm_firstref_tv_,send_new_process_notifies,1
                        000026          	segdef	dm_send_new_process_notifies
    000026                              dm_send_new_process_notifies:
    000026  0a   000361 7100 00         	tra	dm_send_new_process_notifies.e
    000360  aa   000002 000000          	zero	1*2,0
    000361                              dm_send_new_process_notifies.e:
    000361  0a   000103 7020 00         	tsx2	.setup
    000362  aa   000000 6340 07         	ldi	=0,dl
    000363  4a  4 00064 3521 20         	short_call dm_firstref_tv_$send_new_process_notifies(ap|0)
    000364  aa  7 00036 6701 20
    000365  aa  6 00030 3701 20
    000366  aa  7 00042 7101 20         	return
                                        
                                   101  
                                   102            gate      dm_send_shutdown,dm_firstref_tv_,send_shutdown,1
                        000027          	segdef	dm_send_shutdown
    000027                              dm_send_shutdown:
    000027  0a   000370 7100 00         	tra	dm_send_shutdown.e
    000367  aa   000002 000000          	zero	1*2,0
    000370                              dm_send_shutdown.e:
    000370  0a   000103 7020 00         	tsx2	.setup
    000371  aa   000000 6340 07         	ldi	=0,dl
    000372  4a  4 00066 3521 20         	short_call dm_firstref_tv_$send_shutdown(ap|0)
    000373  aa  7 00036 6701 20
    000374  aa  6 00030 3701 20
    000375  aa  7 00042 7101 20         	return
                                        
                                   103  
                                   104  	gate	dm_set_journal_stamps,dm_no_firstref_tv_,set_journal_stamps,2
                        000030          	segdef	dm_set_journal_stamps
    000030                              dm_set_journal_stamps:
    000030  0a   000377 7100 00         	tra	dm_set_journal_stamps.e
    000376  aa   000004 000000          	zero	2*2,0
    000377                              dm_set_journal_stamps.e:
    000377  0a   000103 7020 00         	tsx2	.setup
    000400  aa   000000 6340 07         	ldi	=0,dl
    000401  4a  4 00070 3521 20         	short_call dm_no_firstref_tv_$set_journal_stamps(ap|0)
    000402  aa  7 00036 6701 20
    000403  aa  6 00030 3701 20
    000404  aa  7 00042 7101 20         	return
                                        
                                   105  
                                   106  " Lock Manager entries:
                                   107  
                                   108  	gate	lm_copy_data,lm_firstref_tv_,copy_data,2
                        000031          	segdef	lm_copy_data
    000031                              lm_copy_data:
    000031  0a   000406 7100 00         	tra	lm_copy_data.e
    000405  aa   000004 000000          	zero	2*2,0
    000406                              lm_copy_data.e:
    000406  0a   000103 7020 00         	tsx2	.setup
    000407  aa   000000 6340 07         	ldi	=0,dl
    000410  4a  4 00072 3521 20         	short_call lm_firstref_tv_$copy_data(ap|0)
    000411  aa  7 00036 6701 20
    000412  aa  6 00030 3701 20
    000413  aa  7 00042 7101 20         	return
                                        
                                   109  
                                   110  	gate	lm_copy_fast_data,lm_firstref_tv_,copy_fast_data,3
                        000032          	segdef	lm_copy_fast_data
    000032                              lm_copy_fast_data:
    000032  0a   000415 7100 00         	tra	lm_copy_fast_data.e
    000414  aa   000006 000000          	zero	3*2,0
    000415                              lm_copy_fast_data.e:
    000415  0a   000103 7020 00         	tsx2	.setup
    000416  aa   000000 6340 07         	ldi	=0,dl
    000417  4a  4 00074 3521 20         	short_call lm_firstref_tv_$copy_fast_data(ap|0)
    000420  aa  7 00036 6701 20
    000421  aa  6 00030 3701 20
    000422  aa  7 00042 7101 20         	return
                                        
                                   111  
                                   112  	gate	lm_reset_system_meters,lm_firstref_tv_,reset_system_meters,0
                        000033          	segdef	lm_reset_system_meters
    000033                              lm_reset_system_meters:
    000033  0a   000424 7100 00         	tra	lm_reset_system_meters.e
    000423  aa   000000 000000          	zero	0*2,0
    000424                              lm_reset_system_meters.e:
    000424  0a   000103 7020 00         	tsx2	.setup
    000425  aa   000000 6340 07         	ldi	=0,dl
    000426  4a  4 00076 3521 20         	short_call lm_firstref_tv_$reset_system_meters(ap|0)
    000427  aa  7 00036 6701 20
    000430  aa  6 00030 3701 20
    000431  aa  7 00042 7101 20         	return
                                        
                                   113  
                                   114  	gate	lm_system_segment_count,lm_firstref_tv_,system_segment_count,2
                        000034          	segdef	lm_system_segment_count
    000034                              lm_system_segment_count:
    000034  0a   000433 7100 00         	tra	lm_system_segment_count.e
    000432  aa   000004 000000          	zero	2*2,0
    000433                              lm_system_segment_count.e:
    000433  0a   000103 7020 00         	tsx2	.setup
    000434  aa   000000 6340 07         	ldi	=0,dl
    000435  4a  4 00100 3521 20         	short_call lm_firstref_tv_$system_segment_count(ap|0)
    000436  aa  7 00036 6701 20
    000437  aa  6 00030 3701 20
    000440  aa  7 00042 7101 20         	return
                                        
                                   115  
                                   116  
                                   117            end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000442  5a   000003 000000 
    000443  5a   000363 600000 
    000444  aa   000000 000000 
    000445  55   000012 000002 
    000446  5a   000002 400003 
    000447  55   000006 000012 
    000450  aa  016 144 155 137
    000451  aa  141 144 155 151
    000452  aa  156 137 147 141
    000453  aa  164 145 137 000
    000454  55   000023 000003 
    000455  0a   000034 400000 
    000456  55   000015 000003 
    000457  aa  027 154 155 137         lm_system_segment_count
    000460  aa  163 171 163 164
    000461  aa  145 155 137 163
    000462  aa  145 147 155 145
    000463  aa  156 164 137 143
    000464  aa  157 165 156 164
    000465  55   000034 000012 
    000466  0a   000033 400000 
    000467  55   000026 000003 
    000470  aa  026 154 155 137         lm_reset_system_meters
    000471  aa  162 145 163 145
    000472  aa  164 137 163 171
    000473  aa  163 164 145 155
    000474  aa  137 155 145 164
    000475  aa  145 162 163 000
    000476  55   000044 000023 
    000477  0a   000032 400000 
    000500  55   000037 000003 
    000501  aa  021 154 155 137         lm_copy_fast_data
    000502  aa  143 157 160 171
    000503  aa  137 146 141 163
    000504  aa  164 137 144 141
    000505  aa  164 141 000 000
    000506  55   000053 000034 
    000507  0a   000031 400000 
    000510  55   000047 000003 
    000511  aa  014 154 155 137         lm_copy_data
    000512  aa  143 157 160 171
    000513  aa  137 144 141 164
    000514  aa  141 000 000 000
    000515  55   000064 000044 
    000516  0a   000030 400000 
    000517  55   000056 000003 
    000520  aa  025 144 155 137         dm_set_journal_stamps
    000521  aa  163 145 164 137
    000522  aa  152 157 165 162
    000523  aa  156 141 154 137
    000524  aa  163 164 141 155
    000525  aa  160 163 000 000
    000526  55   000074 000053 
    000527  0a   000027 400000 
    000530  55   000067 000003 
    000531  aa  020 144 155 137         dm_send_shutdown
    000532  aa  163 145 156 144
    000533  aa  137 163 150 165
    000534  aa  164 144 157 167
    000535  aa  156 000 000 000
    000536  55   000107 000064 
    000537  0a   000026 400000 
    000540  55   000077 000003 
    000541  aa  034 144 155 137         dm_send_new_process_notifies
    000542  aa  163 145 156 144
    000543  aa  137 156 145 167
    000544  aa  137 160 162 157
    000545  aa  143 145 163 163
    000546  aa  137 156 157 164
    000547  aa  151 146 151 145
    000550  aa  163 000 000 000
    000551  55   000117 000074 
    000552  0a   000025 400000 
    000553  55   000112 000003 
    000554  aa  020 144 155 137         dm_send_new_proc
    000555  aa  163 145 156 144
    000556  aa  137 156 145 167
    000557  aa  137 160 162 157
    000560  aa  143 000 000 000
    000561  55   000127 000107 
    000562  0a   000024 400000 
    000563  55   000122 000003 
    000564  aa  020 144 155 137         dm_send_kill_txn
    000565  aa  163 145 156 144
    000566  aa  137 153 151 154
    000567  aa  154 137 164 170
    000570  aa  156 000 000 000
    000571  55   000137 000117 
    000572  0a   000023 400000 
    000573  55   000132 000003 
    000574  aa  022 144 155 137         dm_send_adjust_txn
    000575  aa  163 145 156 144
    000576  aa  137 141 144 152
    000577  aa  165 163 164 137
    000600  aa  164 170 156 000
    000601  55   000151 000127 
    000602  0a   000022 400000 
    000603  55   000142 000003 
    000604  aa  030 144 155 137         dm_send_adjust_tdt_entry
    000605  aa  163 145 156 144
    000606  aa  137 141 144 152
    000607  aa  165 163 164 137
    000610  aa  164 144 164 137
    000611  aa  145 156 164 162
    000612  aa  171 000 000 000
    000613  55   000161 000137 
    000614  0a   000021 400000 
    000615  55   000154 000003 
    000616  aa  022 144 155 137         dm_send_adjust_tdt
    000617  aa  163 145 156 144
    000620  aa  137 141 144 152
    000621  aa  165 163 164 137
    000622  aa  164 144 164 000
    000623  55   000173 000151 
    000624  0a   000020 400000 
    000625  55   000164 000003 
    000626  aa  031 144 155 137         dm_send_adjust_process_id
    000627  aa  163 145 156 144
    000630  aa  137 141 144 152
    000631  aa  165 163 164 137
    000632  aa  160 162 157 143
    000633  aa  145 163 163 137
    000634  aa  151 144 000 000
    000635  55   000204 000161 
    000636  0a   000017 400000 
    000637  55   000176 000003 
    000640  aa  024 144 155 137         dm_schedule_shutdown
    000641  aa  163 143 150 145
    000642  aa  144 165 154 145
    000643  aa  137 163 150 165
    000644  aa  164 144 157 167
    000645  aa  156 000 000 000
    000646  55   000212 000173 
    000647  0a   000016 400000 
    000650  55   000207 000003 
    000651  aa  013 144 155 137         dm_copy_log
    000652  aa  143 157 160 171
    000653  aa  137 154 157 147
    000654  55   000220 000204 
    000655  0a   000015 400000 
    000656  55   000215 000003 
    000657  aa  012 144 154 162         dlr_update
    000660  aa  137 165 160 144
    000661  aa  141 164 145 000
    000662  55   000227 000212 
    000663  0a   000014 400000 
    000664  55   000223 000003 
    000665  aa  014 144 154 162         dlr_register
    000666  aa  137 162 145 147
    000667  aa  151 163 164 145
    000670  aa  162 000 000 000
    000671  55   000237 000220 
    000672  0a   000013 400000 
    000673  55   000232 000003 
    000674  aa  020 144 154 162         dlr_prev_message
    000675  aa  137 160 162 145
    000676  aa  166 137 155 145
    000677  aa  163 163 141 147
    000700  aa  145 000 000 000
    000701  55   000247 000227 
    000702  0a   000012 400000 
    000703  55   000242 000003 
    000704  aa  021 144 154 162         dlr_position_time
    000705  aa  137 160 157 163
    000706  aa  151 164 151 157
    000707  aa  156 137 164 151
    000710  aa  155 145 000 000
    000711  55   000260 000237 
    000712  0a   000011 400000 
    000713  55   000252 000003 
    000714  aa  025 144 154 162         dlr_position_sequence
    000715  aa  137 160 157 163
    000716  aa  151 164 151 157
    000717  aa  156 137 163 145
    000720  aa  161 165 145 156
    000721  aa  143 145 000 000
    000722  55   000266 000247 
    000723  0a   000010 400000 
    000724  55   000263 000003 
    000725  aa  010 144 154 162         dlr_open
    000726  aa  137 157 160 145
    000727  aa  156 000 000 000
    000730  55   000276 000260 
    000731  0a   000007 400000 
    000732  55   000271 000003 
    000733  aa  020 144 154 162         dlr_next_message
    000734  aa  137 156 145 170
    000735  aa  164 137 155 145
    000736  aa  163 163 141 147
    000737  aa  145 000 000 000
    000740  55   000306 000266 
    000741  0a   000006 400000 
    000742  55   000301 000003 
    000743  aa  020 144 154 162         dlr_hold_message
    000744  aa  137 150 157 154
    000745  aa  144 137 155 145
    000746  aa  163 163 141 147
    000747  aa  145 000 000 000
    000750  55   000315 000276 
    000751  0a   000005 400000 
    000752  55   000311 000003 
    000753  aa  017 144 154 162         dlr_get_log_uid
    000754  aa  137 147 145 164
    000755  aa  137 154 157 147
    000756  aa  137 165 151 144
    000757  55   000325 000306 
    000760  0a   000004 400000 
    000761  55   000320 000003 
    000762  aa  020 144 154 162         dlr_free_message
    000763  aa  137 146 162 145
    000764  aa  145 137 155 145
    000765  aa  163 163 141 147
    000766  aa  145 000 000 000
    000767  55   000334 000315 
    000770  0a   000003 400000 
    000771  55   000330 000003 
    000772  aa  016 144 154 162         dlr_deregister
    000773  aa  137 144 145 162
    000774  aa  145 147 151 163
    000775  aa  164 145 162 000
    000776  55   000342 000325 
    000777  0a   000002 400000 
    001000  55   000337 000003 
    001001  aa  011 144 154 162         dlr_close
    001002  aa  137 143 154 157
    001003  aa  163 145 000 000
    001004  55   000354 000334 
    001005  0a   000001 400000 
    001006  55   000345 000003 
    001007  aa  030 142 152 155         bjm_get_bj_path_from_uid
    001010  aa  137 147 145 164
    001011  aa  137 142 152 137
    001012  aa  160 141 164 150
    001013  aa  137 146 162 157
    001014  aa  155 137 165 151
    001015  aa  144 000 000 000
    001016  55   000002 000342 
    001017  6a   000000 400002 
    001020  55   000357 000003 
    001021  aa  014 163 171 155         symbol_table
    001022  aa  142 157 154 137
    001023  aa  164 141 142 154
    001024  aa  145 000 000 000

DEFINITIONS HASH TABLE

    001025  aa   000000 000065 
    001026  5a   000247 000000 
    001027  aa   000000 000000 
    001030  5a   000074 000000 
    001031  aa   000000 000000 
    001032  aa   000000 000000 
    001033  aa   000000 000000 
    001034  aa   000000 000000 
    001035  5a   000012 000000 
    001036  5a   000161 000000 
    001037  5a   000023 000000 
    001040  5a   000137 000000 
    001041  5a   000227 000000 
    001042  5a   000237 000000 
    001043  5a   000266 000000 
    001044  5a   000276 000000 
    001045  5a   000306 000000 
    001046  5a   000053 000000 
    001047  5a   000315 000000 
    001050  5a   000173 000000 
    001051  5a   000034 000000 
    001052  5a   000220 000000 
    001053  5a   000325 000000 
    001054  5a   000127 000000 
    001055  5a   000151 000000 
    001056  5a   000212 000000 
    001057  5a   000334 000000 
    001060  5a   000064 000000 
    001061  5a   000107 000000 
    001062  5a   000117 000000 
    001063  5a   000044 000000 
    001064  5a   000260 000000 
    001065  5a   000342 000000 
    001066  5a   000354 000000 
    001067  aa   000000 000000 
    001070  aa   000000 000000 
    001071  aa   000000 000000 
    001072  5a   000204 000000 
    001073  aa   000000 000000 
    001074  aa   000000 000000 
    001075  aa   000000 000000 
    001076  aa   000000 000000 
    001077  aa   000000 000000 
    001100  aa   000000 000000 
    001101  aa   000000 000000 
    001102  aa   000000 000000 
    001103  aa   000000 000000 
    001104  aa   000000 000000 
    001105  aa   000000 000000 
    001106  aa   000000 000000 
    001107  aa   000000 000000 
    001110  aa   000000 000000 
    001111  aa   000000 000000 
    001112  aa   000000 000000 

EXTERNAL NAMES

    001113  aa  024 163 171 163         system_segment_count
    001114  aa  164 145 155 137
    001115  aa  163 145 147 155
    001116  aa  145 156 164 137
    001117  aa  143 157 165 156
    001120  aa  164 000 000 000
    001121  aa  023 162 145 163         reset_system_meters
    001122  aa  145 164 137 163
    001123  aa  171 163 164 145
    001124  aa  155 137 155 145
    001125  aa  164 145 162 163
    001126  aa  016 143 157 160         copy_fast_data
    001127  aa  171 137 146 141
    001130  aa  163 164 137 144
    001131  aa  141 164 141 000
    001132  aa  011 143 157 160         copy_data
    001133  aa  171 137 144 141
    001134  aa  164 141 000 000
    001135  aa  017 154 155 137         lm_firstref_tv_
    001136  aa  146 151 162 163
    001137  aa  164 162 145 146
    001140  aa  137 164 166 137
    001141  aa  022 163 145 164         set_journal_stamps
    001142  aa  137 152 157 165
    001143  aa  162 156 141 154
    001144  aa  137 163 164 141
    001145  aa  155 160 163 000
    001146  aa  015 163 145 156         send_shutdown
    001147  aa  144 137 163 150
    001150  aa  165 164 144 157
    001151  aa  167 156 000 000
    001152  aa  031 163 145 156         send_new_process_notifies
    001153  aa  144 137 156 145
    001154  aa  167 137 160 162
    001155  aa  157 143 145 163
    001156  aa  163 137 156 157
    001157  aa  164 151 146 151
    001160  aa  145 163 000 000
    001161  aa  015 163 145 156         send_new_proc
    001162  aa  144 137 156 145
    001163  aa  167 137 160 162
    001164  aa  157 143 000 000
    001165  aa  015 163 145 156         send_kill_txn
    001166  aa  144 137 153 151
    001167  aa  154 154 137 164
    001170  aa  170 156 000 000
    001171  aa  017 163 145 156         send_adjust_txn
    001172  aa  144 137 141 144
    001173  aa  152 165 163 164
    001174  aa  137 164 170 156
    001175  aa  025 163 145 156         send_adjust_tdt_entry
    001176  aa  144 137 141 144
    001177  aa  152 165 163 164
    001200  aa  137 164 144 164
    001201  aa  137 145 156 164
    001202  aa  162 171 000 000
    001203  aa  017 163 145 156         send_adjust_tdt
    001204  aa  144 137 141 144
    001205  aa  152 165 163 164
    001206  aa  137 164 144 164
    001207  aa  026 163 145 156         send_adjust_process_id
    001210  aa  144 137 141 144
    001211  aa  152 165 163 164
    001212  aa  137 160 162 157
    001213  aa  143 145 163 163
    001214  aa  137 151 144 000
    001215  aa  021 163 143 150         schedule_shutdown
    001216  aa  145 144 165 154
    001217  aa  145 137 163 150
    001220  aa  165 164 144 157
    001221  aa  167 156 000 000
    001222  aa  017 144 155 137         dm_firstref_tv_
    001223  aa  146 151 162 163
    001224  aa  164 162 145 146
    001225  aa  137 164 166 137
    001226  aa  010 143 157 160         copy_log
    001227  aa  171 137 154 157
    001230  aa  147 000 000 000
    001231  aa  022 144 155 137         dm_no_firstref_tv_
    001232  aa  156 157 137 146
    001233  aa  151 162 163 164
    001234  aa  162 145 146 137
    001235  aa  164 166 137 000
    001236  aa  024 147 145 164         get_bj_path_from_uid
    001237  aa  137 142 152 137
    001240  aa  160 141 164 150
    001241  aa  137 146 162 157
    001242  aa  155 137 165 151
    001243  aa  144 000 000 000
    001244  aa  020 142 152 155         bjm_firstref_tv_
    001245  aa  137 146 151 162
    001246  aa  163 164 162 145
    001247  aa  146 137 164 166
    001250  aa  137 000 000 000
    001251  aa  007 163 151 147         signal_
    001252  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    001253  aa   000004 000000 
    001254  55   000473 000451 
    001255  aa   000004 000000 
    001256  55   000473 000457 
    001257  aa   000004 000000 
    001260  55   000473 000464 
    001261  aa   000004 000000 
    001262  55   000473 000470 
    001263  aa   000004 000000 
    001264  55   000567 000477 
    001265  aa   000004 000000 
    001266  55   000560 000504 
    001267  aa   000004 000000 
    001270  55   000560 000510 
    001271  aa   000004 000000 
    001272  55   000560 000517 
    001273  aa   000004 000000 
    001274  55   000560 000523 
    001275  aa   000004 000000 
    001276  55   000560 000527 
    001277  aa   000004 000000 
    001300  55   000560 000533 
    001301  aa   000004 000000 
    001302  55   000560 000541 
    001303  aa   000004 000000 
    001304  55   000560 000545 
    001305  aa   000004 000000 
    001306  55   000560 000553 
    001307  aa   000004 000000 
    001310  55   000567 000564 
    001311  aa   000004 000000 
    001312  55   000567 000215 
    001313  aa   000004 000000 
    001314  55   000567 000223 
    001315  aa   000004 000000 
    001316  55   000567 000232 
    001317  aa   000004 000000 
    001320  55   000567 000242 
    001321  aa   000004 000000 
    001322  55   000567 000252 
    001323  aa   000004 000000 
    001324  55   000567 000263 
    001325  aa   000004 000000 
    001326  55   000567 000271 
    001327  aa   000004 000000 
    001330  55   000567 000301 
    001331  aa   000004 000000 
    001332  55   000567 000311 
    001333  aa   000004 000000 
    001334  55   000567 000320 
    001335  aa   000004 000000 
    001336  55   000567 000330 
    001337  aa   000004 000000 
    001340  55   000567 000337 
    001341  aa   000004 000000 
    001342  55   000602 000574 
    001343  aa   000004 000000 
    001344  55   000607 000607 
    001345  aa   000001 000000 
    001346  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001347  5a   000611 000000 
    001350  5a   000613 000000 
    001351  5a   000615 000000 
    001352  5a   000617 000000 
    001353  5a   000621 000000 
    001354  5a   000623 000000 
    001355  5a   000625 000000 
    001356  5a   000627 000000 
    001357  5a   000631 000000 
    001360  5a   000633 000000 
    001361  5a   000635 000000 
    001362  5a   000637 000000 
    001363  5a   000641 000000 
    001364  5a   000643 000000 
    001365  5a   000645 000000 
    001366  5a   000647 000000 
    001367  5a   000651 000000 
    001370  5a   000653 000000 
    001371  5a   000655 000000 
    001372  5a   000657 000000 
    001373  5a   000661 000000 
    001374  5a   000663 000000 
    001375  5a   000665 000000 
    001376  5a   000667 000000 
    001377  5a   000671 000000 
    001400  5a   000673 000000 
    001401  5a   000675 000000 
    001402  5a   000677 000000 
    001403  5a   000701 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000442 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000102 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000741 0000 00
    000012  9a   777766 0000 46         bjm_firstref_tv_|get_bj_path_from_uid
    000013  5a   000740 0000 00
    000014  9a   777764 0000 46         dm_no_firstref_tv_|dlr_close
    000015  5a   000737 0000 00
    000016  9a   777762 0000 46         dm_no_firstref_tv_|dlr_deregister
    000017  5a   000736 0000 00
    000020  9a   777760 0000 46         dm_no_firstref_tv_|dlr_free_message
    000021  5a   000735 0000 00
    000022  9a   777756 0000 46         dm_no_firstref_tv_|dlr_get_log_uid
    000023  5a   000734 0000 00
    000024  9a   777754 0000 46         dm_no_firstref_tv_|dlr_hold_message
    000025  5a   000733 0000 00
    000026  9a   777752 0000 46         dm_no_firstref_tv_|dlr_next_message
    000027  5a   000732 0000 00
    000030  9a   777750 0000 46         dm_no_firstref_tv_|dlr_open
    000031  5a   000731 0000 00
    000032  9a   777746 0000 46         dm_no_firstref_tv_|dlr_position_sequence
    000033  5a   000730 0000 00
    000034  9a   777744 0000 46         dm_no_firstref_tv_|dlr_position_time
    000035  5a   000727 0000 00
    000036  9a   777742 0000 46         dm_no_firstref_tv_|dlr_prev_message
    000037  5a   000726 0000 00
    000040  9a   777740 0000 46         dm_no_firstref_tv_|dlr_register
    000041  5a   000725 0000 00
    000042  9a   777736 0000 46         dm_no_firstref_tv_|dlr_update
    000043  5a   000724 0000 00
    000044  9a   777734 0000 46         dm_no_firstref_tv_|copy_log
    000045  5a   000723 0000 00
    000046  9a   777732 0000 46         dm_firstref_tv_|schedule_shutdown
    000047  5a   000722 0000 00
    000050  9a   777730 0000 46         dm_firstref_tv_|send_adjust_process_id
    000051  5a   000721 0000 00
    000052  9a   777726 0000 46         dm_firstref_tv_|send_adjust_tdt
    000053  5a   000720 0000 00
    000054  9a   777724 0000 46         dm_firstref_tv_|send_adjust_tdt_entry
    000055  5a   000717 0000 00
    000056  9a   777722 0000 46         dm_firstref_tv_|send_adjust_txn
    000057  5a   000716 0000 00
    000060  9a   777720 0000 46         dm_firstref_tv_|send_kill_txn
    000061  5a   000715 0000 00
    000062  9a   777716 0000 46         dm_firstref_tv_|send_new_proc
    000063  5a   000714 0000 00
    000064  9a   777714 0000 46         dm_firstref_tv_|send_new_process_notifies
    000065  5a   000713 0000 00
    000066  9a   777712 0000 46         dm_firstref_tv_|send_shutdown
    000067  5a   000712 0000 00
    000070  9a   777710 0000 46         dm_no_firstref_tv_|set_journal_stamps
    000071  5a   000711 0000 00
    000072  9a   777706 0000 46         lm_firstref_tv_|copy_data
    000073  5a   000710 0000 00
    000074  9a   777704 0000 46         lm_firstref_tv_|copy_fast_data
    000075  5a   000707 0000 00
    000076  9a   777702 0000 46         lm_firstref_tv_|reset_system_meters
    000077  5a   000706 0000 00
    000100  9a   777700 0000 46         lm_firstref_tv_|system_segment_count
    000101  5a   000705 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 113475 
    000007  aa   516672 776272 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000201 
    000020  aa   000000 000120 
    000021  aa   000000 000155 
    000022  aa   000172 000120 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 155040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000041 
    000067  aa   134750 165732 
    000070  aa   000000 113475 
    000071  aa   504203 200000 
    000072  aa   000107 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   076163 160145          >spec>on>41-21>dm_admin_gate_.alm
    000077  aa   143076 157156 
    000100  aa   076064 061055 
    000101  aa   062061 076144 
    000102  aa   155137 141144 
    000103  aa   155151 156137 
    000104  aa   147141 164145 
    000105  aa   137056 141154 
    000106  aa   155040 040040 
    000107  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000110  aa   076151 156143 
    000111  aa   154165 144145 
    000112  aa   076147 141164 
    000113  aa   145137 155141 
    000114  aa   143162 157163 
    000115  aa   056151 156143 
    000116  aa   154056 141154 
    000117  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          36    .actor                   dm_admin_gate_:      50.
          72    .defs_loop               dm_admin_gate_:      50.
         133    .gate_errordesc          dm_admin_gate_:      50.
         130    .gate_errorname          dm_admin_gate_:      50.
         100    .next_def                dm_admin_gate_:      50.
         134    .no_gate_error           dm_admin_gate_:      50.
          55    .return_name             dm_admin_gate_:      50.
          70    .search_defs             dm_admin_gate_:      50.
         103    .setup                   dm_admin_gate_:      50,   54,   58,   60,   62,   64,   66,   68,   70,   72,   74,
                                                              76,   78,   80,   84,   86,   88,   90,   92,   94,   96,   98,
                                                             100,  102,  104,  108,  110,  112,  114.
                bjm_firstref_tv_         dm_admin_gate_:      54.
           1    bjm_get_bj_path_from_uid       dm_admin_gate_:      54.
         136    bjm_get_bj_path_from_uid.e     dm_admin_gate_:      54.
                copy_data                dm_admin_gate_:     108.
                copy_fast_data           dm_admin_gate_:     110.
                copy_log                 dm_admin_gate_:      84.
           2    dlr_close                dm_admin_gate_:      58.
         145    dlr_close.e              dm_admin_gate_:      58.
           3    dlr_deregister           dm_admin_gate_:      60.
         154    dlr_deregister.e         dm_admin_gate_:      60.
           4    dlr_free_message         dm_admin_gate_:      62.
         163    dlr_free_message.e       dm_admin_gate_:      62.
           5    dlr_get_log_uid          dm_admin_gate_:      64.
         172    dlr_get_log_uid.e        dm_admin_gate_:      64.
           6    dlr_hold_message         dm_admin_gate_:      66.
         201    dlr_hold_message.e       dm_admin_gate_:      66.
           7    dlr_next_message         dm_admin_gate_:      68.
         210    dlr_next_message.e       dm_admin_gate_:      68.
          10    dlr_open                 dm_admin_gate_:      70.
         217    dlr_open.e               dm_admin_gate_:      70.
          11    dlr_position_sequence    dm_admin_gate_:      72.
         226    dlr_position_sequence.e  dm_admin_gate_:      72.
          12    dlr_position_time        dm_admin_gate_:      74.
         235    dlr_position_time.e      dm_admin_gate_:      74.
          13    dlr_prev_message         dm_admin_gate_:      76.
         244    dlr_prev_message.e       dm_admin_gate_:      76.
          14    dlr_register             dm_admin_gate_:      78.
         253    dlr_register.e           dm_admin_gate_:      78.
          15    dlr_update               dm_admin_gate_:      80.
         262    dlr_update.e             dm_admin_gate_:      80.
          16    dm_copy_log              dm_admin_gate_:      84.
         271    dm_copy_log.e            dm_admin_gate_:      84.
                dm_firstref_tv_          dm_admin_gate_:      86,   88,   90,   92,   94,   96,   98,  100,  102.
                dm_no_firstref_tv_       dm_admin_gate_:      58,   60,   62,   64,   66,   68,   70,   72,   74,   76,   78,
                                                              80,   84,  104.
          17    dm_schedule_shutdown     dm_admin_gate_:      86.
         300    dm_schedule_shutdown.e   dm_admin_gate_:      86.
          20    dm_send_adjust_process_id      dm_admin_gate_:      88.
         307    dm_send_adjust_process_id.e    dm_admin_gate_:      88.
          21    dm_send_adjust_tdt       dm_admin_gate_:      90.
         316    dm_send_adjust_tdt.e     dm_admin_gate_:      90.
          22    dm_send_adjust_tdt_entry       dm_admin_gate_:      92.
         325    dm_send_adjust_tdt_entry.e     dm_admin_gate_:      92.
          23    dm_send_adjust_txn       dm_admin_gate_:      94.
         334    dm_send_adjust_txn.e     dm_admin_gate_:      94.
          24    dm_send_kill_txn         dm_admin_gate_:      96.
         343    dm_send_kill_txn.e       dm_admin_gate_:      96.
          25    dm_send_new_proc         dm_admin_gate_:      98.
         352    dm_send_new_proc.e       dm_admin_gate_:      98.
          26    dm_send_new_process_notifies   dm_admin_gate_:     100.
         361    dm_send_new_process_notifies.e       dm_admin_gate_:     100.
          27    dm_send_shutdown         dm_admin_gate_:     102.
         370    dm_send_shutdown.e       dm_admin_gate_:     102.
          30    dm_set_journal_stamps    dm_admin_gate_:     104.
         377    dm_set_journal_stamps.e  dm_admin_gate_:     104.
                get_bj_path_from_uid     dm_admin_gate_:      54.
          31    lm_copy_data             dm_admin_gate_:     108.
         406    lm_copy_data.e           dm_admin_gate_:     108.
          32    lm_copy_fast_data        dm_admin_gate_:     110.
         415    lm_copy_fast_data.e      dm_admin_gate_:     110.
                lm_firstref_tv_          dm_admin_gate_:     108,  110,  112,  114.
          33    lm_reset_system_meters   dm_admin_gate_:     112.
         424    lm_reset_system_meters.e       dm_admin_gate_:     112.
          34    lm_system_segment_count  dm_admin_gate_:     114.
         433    lm_system_segment_count.e      dm_admin_gate_:     114.
          36    main                     dm_admin_gate_:      50,   54,   58,   60,   62,   64,   66,   68,   70,   72,   74,
                                                              76,   78,   80,   84,   86,   88,   90,   92,   94,   96,   98,
                                                             100,  102,  104,  108,  110,  112,  114.
                reset_system_meters      dm_admin_gate_:     112.
                schedule_shutdown        dm_admin_gate_:      86.
                send_adjust_process_id   dm_admin_gate_:      88.
                send_adjust_tdt          dm_admin_gate_:      90.
                send_adjust_tdt_entry    dm_admin_gate_:      92.
                send_adjust_txn          dm_admin_gate_:      94.
                send_kill_txn            dm_admin_gate_:      96.
                send_new_proc            dm_admin_gate_:      98.
                send_new_process_notifies      dm_admin_gate_:     100.
                send_shutdown            dm_admin_gate_:     102.
                set_journal_stamps       dm_admin_gate_:     104.
                signal_                  dm_admin_gate_:      50.
         122    signal_arglist           dm_admin_gate_:      50.
                system_segment_count     dm_admin_gate_:     114.
           0    transfer_vector          dm_admin_gate_:      50,   54,   58,   60,   62,   64,   66,   68,   70,   72,   74,
                                                              76,   78,   80,   84,   86,   88,   90,   92,   94,   96,   98,
                                                             100,  102,  104,  108,  110,  112,  114.
          35    tv_end                   dm_admin_gate_:      50.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
