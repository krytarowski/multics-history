	COMPILATION LISTING OF SEGMENT eor_cv9_10_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/28/88  1333.5 mst Fri
	    Options: optimize map

        1 /****^  ********************************************
        2*        *                                          *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988 *
        4*        *                                          *
        5*        ******************************************** */
        6 
        7 /****^  HISTORY COMMENTS:
        8*  1) change(88-08-25,Farley), approve(88-10-12,MCR7911),
        9*     audit(88-10-21,Wallman), install(88-10-28,MR12.2-1199):
       10*     Convert eor data from version 9 to version 10, changes old 24 character
       11*     "form_name" to a 64 character "forms_name".
       12*                                                   END HISTORY COMMENTS */
       13 
       14 /* format: style4,delnl,insnl,^ifthendo */
       15 
       16 /* format: off */
       17 
       18 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       19 	/*									*/
       20 	/* This program is called by enter_output_request.  eor stored user-defined default	*/
       21 	/* control argument settings in the default value segment as binary data values.  This	*/
       22 	/* program converts these values from version 9 to version 10 format.  The only		*/
       23 	/* difference between versions is that version 10 has a larger forms_name area.		*/
       24 	/*									*/
       25 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       26 
       27 /* format: on */
       28 
       29 eor_cv9_10_:
       30      proc (Pdefault_header, code);
       31 
       32 
  1     1 /* BEGIN INCLUDE FILE ... dprint_arg.incl.pl1 */
  1     2 /* Modified 11/13/74 by Noel I. Morris */
  1     3 /* Modified: 10 April 1981 by G. Palter for version 6 structure -- longer request type names */
  1     4 /* Modified: 30 April 1982 by R. Kovalcik for version 7 structure -- defer_until_process_terminataion */
  1     5 /* Modified: November 1983 by C. Marker for version 8 structure -- no_separator */
  1     6 
  1     7 /****^  HISTORY COMMENTS:
  1     8*  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
  1     9*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
  1    10*     Add line_nbrs bit for line-numbered printouts, version 9.
  1    11*  2) change(88-02-05,Farley), approve(88-02-05,PBF7686), audit(88-02-05,GWMay),
  1    12*     install(88-02-05,MR12.2-1022):
  1    13*     Corrected alignment of line_nbrs, was aligned s/b unaligned..
  1    14*  3) change(88-08-29,Farley), approve(88-09-16,MCR7911),
  1    15*     audit(88-09-29,Wallman), install(88-10-28,MR12.2-1199):
  1    16*     Created a new 64 character forms_name variable, which supersedes the old
  1    17*     char 24 form_name variable, version 10.
  1    18*                                                   END HISTORY COMMENTS */
  1    19 
  1    20 
  1    21 dcl  dpap ptr;					/* ptr to argument structure */
  1    22 dcl  1 dprint_arg_buf aligned like dprint_arg;		/* Automatic storage for arg. */
  1    23 
  1    24 dcl  1 dprint_arg based (dpap) aligned,			/* argument structure */
  1    25        2 version fixed bin,				/* version number of dcl - current version is 9 */
  1    26        2 copies fixed bin,				/* number of copies wanted */
  1    27        2 delete fixed bin,				/* 1=delete after print */
  1    28        2 queue fixed bin,				/* print queue */
  1    29        2 pt_pch fixed bin,				/* 1=print, 2=punch */
  1    30        2 notify fixed bin,				/* 1 = notify user when done */
  1    31        2 heading char (64),				/* first page heading */
  1    32        2 output_module fixed bin,			/* 1=print, 2=7punch, 3=mcc, 4=raw, 5=plotter */
  1    33        2 dest char (12),				/* version 5 made this a pad - see destination below */
  1    34 						/* limit of version 1 structure */
  1    35        2 carriage_control,				/* Carriage control flags. */
  1    36          3 nep bit (1) unal,				/* TRUE if print trhu perf. */
  1    37          3 single bit (1) unal,			/* TRUE if ignore FF and VT */
  1    38          3 non_edited bit (1) unal,			/* TRUE if printing in non-edited mode */
  1    39          3 truncate bit (1) unal,			/* TRUE if truncating lines at line length */
  1    40          3 center_top_label bit (1) unal,		/* TRUE if top label to be centered */
  1    41          3 center_bottom_label bit (1) unal,		/* TRUE if bottom label to be centered */
  1    42          3 esc bit (1) unal,				/* version 5 TRUE if text escapes are to be processed */
  1    43          3 no_separator bit (1) unal,			/* version 8 TRUE if the inner head and tail sheets are to be suppressed. */
  1    44          3 line_nbrs bit (1) unal,			/* version 9, line numbers */
  1    45          3 padding bit (27) unal,
  1    46        2 pad (30) fixed bin,
  1    47        2 forms char (8),				/* version 5 made this a pad - see form_name below */
  1    48        2 lmargin fixed bin,				/* left margin */
  1    49        2 line_lth fixed bin,				/* max line lth */
  1    50 						/* limit of version 2 structure */
  1    51        2 class char (8),				/* version 6 made this a pad - see request_type below */
  1    52        2 page_lth fixed bin,				/* Paper length arg */
  1    53 						/* limit of version 3 structure */
  1    54        2 top_label char (136),			/* top-of-page label */
  1    55        2 bottom_label char (136),			/* bottom-of-page label */
  1    56 						/* limit of version 4 structure */
  1    57        2 bit_count fixed bin (35),			/* segment bit count */
  1    58        2 form_name char (24),				/* name of special forms needed - moved from forms */
  1    59 						/* version 10 made this a pad - see forms_name below */
  1    60        2 destination char (24),			/* the long destination - moved from dest */
  1    61        2 chan_stop_path char (168),			/* path of user channel stops - future */
  1    62 						/* limit of version 5 structure */
  1    63        2 request_type character (24) unaligned,		/* request type for the request */
  1    64                                                             /* limit of version 6 structure */
  1    65        2 defer_until_process_termination fixed bin,	/* 1 = don't process request until requesting process terminates */
  1    66        2 forms_name char (64) unal;			/* name of special forms needed - moved from form_name */
  1    67                                                             /* limit of version 10 structure */
  1    68 
  1    69 dcl  dprint_arg_version_1 fixed bin int static options (constant) init (1);
  1    70 dcl  dprint_arg_version_2 fixed bin int static options (constant) init (2);
  1    71 dcl  dprint_arg_version_3 fixed bin int static options (constant) init (3);
  1    72 dcl  dprint_arg_version_4 fixed bin int static options (constant) init (4);
  1    73 dcl  dprint_arg_version_5 fixed bin int static options (constant) init (5);
  1    74 dcl  dprint_arg_version_6 fixed bin int static options (constant) init (6);
  1    75 dcl  dprint_arg_version_7 fixed bin int static options (constant) init (7);
  1    76 dcl  dprint_arg_version_8 fixed bin int static options (constant) init (8);
  1    77 dcl  dprint_arg_version_9 fixed bin int static options (constant) init (9);
  1    78 dcl  dprint_arg_version_10 fixed bin int static options (constant) init (10);
  1    79 						/* current version */
  1    80 
  1    81 dcl  (
  1    82      DP_PRINT init (1),
  1    83      DP_PUNCH init (2),
  1    84      DP_PLOT init (3)
  1    85      ) fixed bin static options (constant);		/* for dprint_arg.pt_pch */
  1    86 
  1    87 /* END INCLUDE FILE ... dprint_arg.incl.pl1 */
       33 
       34 
       35 
  2     1 /* BEGIN value_structures.incl.pl1 */
  2     2 
  2     3 dcl (match_info_ptr, value_list_info_ptr) ptr;
  2     4 dcl (alloc_name_count, alloc_pair_count) fixed bin;
  2     5 dcl (alloc_max_name_len, alloc_chars_len) fixed bin (21);
  2     6 
  2     7 dcl 1 match_info aligned based (match_info_ptr),
  2     8    2 version fixed bin,				/* = 1 */
  2     9    2 name_count fixed bin,
  2    10    2 max_name_len fixed bin (21),
  2    11    2 name_array (alloc_name_count refer (match_info.name_count)),
  2    12     3 exclude_sw bit (1) unaligned,			/* ON for -exclude, OFF for -match */
  2    13     3 regexp_sw bit (1) unaligned,			/* ON for regular exp. without the //, OFF for starname */
  2    14     3 pad bit (34) unaligned,
  2    15     3 name char (alloc_max_name_len refer (match_info.max_name_len)) varying;
  2    16 
  2    17 dcl 1 value_list_info aligned based (value_list_info_ptr),
  2    18    2 version fixed bin,				/* = 1 */
  2    19    2 pair_count fixed bin,
  2    20    2 chars_len fixed bin (21),
  2    21    2 pairs (alloc_pair_count refer (value_list_info.pair_count)),
  2    22     3 type_switches bit (36),				/* correspond to the selection switches arg */
  2    23     3 (name_index, name_len) fixed bin (21),
  2    24     3 (value_index, value_len) fixed bin (21),
  2    25    2 chars char (alloc_chars_len refer (value_list_info.chars_len));
  2    26 
  2    27 dcl (match_info_version_1, value_list_info_version_1) fixed bin int static options (constant) init (1);
  2    28 
  2    29 /* END OF value_structures.incl.pl1 */
       36 
       37 
       38 
       39 dcl  Pdefault_header ptr parameter,
       40      code fixed bin (35) parameter;
       41 
       42 dcl  Pd ptr,
       43      Pnd ptr,
       44      area area (4096),
       45      dft_name char (28) varying,
       46      d_size fixed bin (18),
       47      i fixed bin;
       48 
       49 dcl  Vdefault_header_10 fixed bin int static options (constant) init (10);
       50 						/* Version 10 supports larger forms_name.     */
       51 
       52 dcl  DEFAULT_VALUE_SEG ptr int static options (constant) init (null),
       53      PERM bit (36) aligned int static options (constant) init ("01"b);
       54 
       55 
       56 dcl  1 default_header aligned based (Pdefault_header),	/* Structure containing default request types */
       57        2 version fixed bin,
       58        2 default_request_type (3) char (24) unal;
       59 
       60 dcl  1 default,					/* Structure containing general argument defaults	*/
       61        2 header,
       62          3 Ntype fixed bin,
       63          3 name char (24) unal,
       64          3 size fixed bin (18);
       65 
       66 dcl  1 d aligned based (Pd),
       67        2 header like default.header,
       68        2 data (d_size - size (default)) fixed bin;
       69 
       70 dcl  1 default_print aligned,				/* Structure containing print argument defaults	*/
       71        2 header,
       72          3 Ntype fixed bin,
       73          3 name char (24) unal,
       74          3 size fixed bin (18),
       75        2 Odft,
       76          3 request_type char (24) unal,
       77          3 form_name char (24) unal,
       78        2 Sdft,
       79          3 processing_control,
       80 	 4 brief bit (1),
       81 	 4 force bit (1),
       82          3 carriage_control,
       83 	 4 nep bit (1),
       84 	 4 single bit (1),
       85 	 4 non_edited bit (1),
       86 	 4 truncate bit (1),
       87 	 4 no_separator bit (1),
       88 	 4 line_nbrs bit (1),
       89          3 label,
       90 	 4 top bit (1),
       91 	 4 bottom bit (1),
       92 	 4 access bit (1),
       93        2 Ndft,
       94          3 pt_pch fixed bin,
       95          3 delete fixed bin,
       96          3 notify fixed bin,
       97          3 copies fixed bin,
       98          3 queue fixed bin,
       99          3 output_module fixed bin,
      100          3 lmargin fixed bin,
      101          3 line_lth fixed bin,
      102          3 page_lth fixed bin,
      103          3 defer_until_process_termination fixed bin;
      104 
      105 dcl  1 new_Odft,
      106        2 request_type char (24) unal,
      107        2 forms_name char (64) unal;
      108 
      109 dcl  1 old_print aligned based (Pd),
      110        2 header like default_print.header,
      111        2 Odft like default_print.Odft,
      112        2 Sdft like default_print.Sdft,
      113        2 Ndft like default_print.Ndft,
      114        2 data (d_size - size (default_print)) fixed bin;
      115 
      116 dcl  1 new_print aligned based (Pnd),
      117        2 header like default_print.header,
      118        2 Odft like new_Odft,
      119        2 Sdft like default_print.Sdft,
      120        2 Ndft like default_print.Ndft,
      121        2 data (d_size - size (default_print)) fixed bin;
      122 
      123 dcl  1 mi aligned,					/* Automatic copy of match_info		*/
      124        2 version fixed bin,
      125        2 name_count fixed bin,
      126        2 max_name_length fixed bin,
      127        2 name_array (1),
      128          3 exclude_sw bit (1) unal,
      129          3 regexp_sw bit (1) unal,
      130          3 pad bit (34) unal,
      131          3 name char (30) varying;
      132 
      133 dcl  cleanup condition;
      134 dcl  (addr, after, empty, length, null, size, substr) builtin;
      135 
      136 dcl  value_$get_data entry (ptr, bit (36) aligned, char (*), ptr, ptr, fixed bin (18), fixed bin (35)),
      137      value_$list_data_names entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed bin (35)),
      138      value_$set_data
      139 	entry (ptr, bit (36) aligned, char (*), ptr, fixed bin (18), ptr, ptr, fixed bin (18), fixed bin (35));
      140 
      141 
      142 	code = 0;					/* No error yet.				*/
      143 
      144 	area = empty;
      145 	Pd, Pnd = null;
      146 	on cleanup
      147 	     begin;
      148 	     if Pnd ^= null
      149 	     then free new_print in (area);
      150 	     if Pd ^= null
      151 	     then free d in (area);
      152 	end;
      153 
      154 	mi.version = 1;
      155 	mi.name_count = 1;
      156 	mi.max_name_length = 30;
      157 	mi.exclude_sw,
      158 	     mi.regexp_sw,
      159 	     mi.pad = "0"b;
      160 	mi.name (1) = "eor.**.*._";
      161 	call value_$list_data_names (DEFAULT_VALUE_SEG, PERM, addr (mi), addr (area), value_list_info_ptr, code);
      162 						/* Get a list of eor-related data items.	*/
      163 
      164 	do i = 1 to value_list_info.pair_count;		/* Convert each one.			*/
      165 
      166 	     dft_name =
      167 		substr (value_list_info.chars, value_list_info.pairs (i).name_index,
      168 		value_list_info.pairs (i).name_len);	/* Get a name.				*/
      169 	     dft_name = after (dft_name, ".");
      170 	     dft_name = substr (dft_name, 1, length (dft_name) - 2);
      171 
      172 	     call value_$get_data (DEFAULT_VALUE_SEG, PERM, "eor." || dft_name || "._", addr (area), Pd, d_size, code);
      173 						/* Get the associated data.			*/
      174 	     if code ^= 0
      175 	     then go to ERROR_EXIT;
      176 
      177 	     if d.Ntype = DP_PRINT
      178 	     then do;				/* These are print defaults.			*/
      179 		allocate new_print in (area) set (Pnd); /* Convert them.				*/
      180 		new_print = old_print, by name;
      181 		new_print.forms_name = old_print.form_name;
      182 		call value_$set_data (DEFAULT_VALUE_SEG, PERM, "eor." || dft_name || "._", Pnd, size (new_print),
      183 		     null, null, 0, code);
      184 		if code ^= 0
      185 		then go to ERROR_EXIT;
      186 		free new_print in (area);
      187 	     end;					/* End of print conversion.			*/
      188 
      189 	     free d in (area);			/* Free the data.				*/
      190 
      191 	end;					/* End of conversion loop.			*/
      192 
      193 	default_header.version = Vdefault_header_10;	/* Set info in header.			*/
      194 	call value_$set_data (DEFAULT_VALUE_SEG, PERM, "eor._", Pdefault_header, size (default_header), null, null, 0,
      195 	     code);
      196 
      197 ERROR_EXIT:
      198 	if Pnd ^= null
      199 	then free new_print in (area);
      200 	if Pd ^= null
      201 	then free d in (area);
      202 	return;					/* All done. 				*/
      203 
      204      end eor_cv9_10_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/28/88  1230.2  eor_cv9_10_.pl1                   >special_ldd>install>MR12.2-1199>eor_cv9_10_.pl1
33           1    10/28/88  1227.7  dprint_arg.incl.pl1               >special_ldd>install>MR12.2-1199>dprint_arg.incl.pl1
36           2    06/24/81  1743.9  value_structures.incl.pl1         >ldd>include>value_structures.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
DEFAULT_VALUE_SEG               000002 constant        pointer                  initial dcl 52 set ref 161* 172* 182* 194*
DP_PRINT                               constant        fixed bin(17,0)          initial dcl 1-81 ref 177
Ndft                     37     010130 automatic       structure                level 2 dcl 70
Ntype                                  based           fixed bin(17,0)          level 3 dcl 66 ref 177
Odft                     10            based           structure                level 2 in structure "new_print" dcl 116
                                                                                  in procedure "eor_cv9_10_"
Odft                     10            based           structure                level 2 in structure "old_print" dcl 109
                                                                                  in procedure "eor_cv9_10_"
Odft                     10     010130 automatic       structure                level 2 in structure "default_print" dcl 70
                                                                                  in procedure "eor_cv9_10_"
PERM                            000000 constant        bit(36)                  initial dcl 52 set ref 161* 172* 182* 194*
Pd                              000102 automatic       pointer                  dcl 42 set ref 145* 150 150 172* 177 180 181 189 200
                                                                                  200
Pdefault_header                        parameter       pointer                  dcl 39 set ref 29 193 194* 194 194
Pnd                             000104 automatic       pointer                  dcl 42 set ref 145* 148 148 179* 180 181 182* 182
                                                                                  182 186 197 197
Sdft                     24     010130 automatic       structure                level 2 dcl 70
Vdefault_header_10                     constant        fixed bin(17,0)          initial dcl 49 ref 193
addr                                                   builtin function         dcl 134 ref 161 161 161 161 172 172
after                                                  builtin function         dcl 134 ref 169
area                            000106 automatic       area(4096)               dcl 42 set ref 42* 144* 148 150 161 161 172 172 179
                                                                                  186 189 197 200
chars                                  based           char                     level 2 dcl 2-17 ref 166
chars_len                 2            based           fixed bin(21,0)          level 2 dcl 2-17 ref 166
cleanup                         010244 stack reference condition                dcl 133 ref 146
code                                   parameter       fixed bin(35,0)          dcl 39 set ref 29 142* 161* 172* 174 182* 184 194*
d                                      based           structure                level 1 dcl 66 ref 150 189 200
d_size                          010116 automatic       fixed bin(18,0)          dcl 42 set ref 148 150 172* 179 180 180 182 182 186
                                                                                  189 197 200
default                         010120 automatic       structure                level 1 unaligned dcl 60 ref 150 189 200
default_header                         based           structure                level 1 dcl 56 set ref 194 194
default_print                   010130 automatic       structure                level 1 dcl 70 ref 148 179 180 180 182 182 186 197
dft_name                        010106 automatic       varying char(28)         dcl 42 set ref 166* 169* 169 170* 170 170 172 182
dprint_arg                             based           structure                level 1 dcl 1-24
empty                                                  builtin function         dcl 134 ref 42 144
exclude_sw                3     010227 automatic       bit(1)                   array level 3 packed packed unaligned dcl 123 set
                                                                                  ref 157*
form_name                16            based           char(24)                 level 3 packed packed unaligned dcl 109 ref 181
forms_name               16            based           char(64)                 level 3 packed packed unaligned dcl 116 set ref 181*
header                          010120 automatic       structure                level 2 in structure "default" unaligned dcl 60
                                                                                  in procedure "eor_cv9_10_"
header                          010130 automatic       structure                level 2 in structure "default_print" dcl 70
                                                                                  in procedure "eor_cv9_10_"
header                                 based           structure                level 2 in structure "d" dcl 66 in procedure
                                                                                  "eor_cv9_10_"
i                               010117 automatic       fixed bin(17,0)          dcl 42 set ref 164* 166 166*
length                                                 builtin function         dcl 134 ref 170
max_name_length           2     010227 automatic       fixed bin(17,0)          level 2 dcl 123 set ref 156*
mi                              010227 automatic       structure                level 1 dcl 123 set ref 161 161
name                      4     010227 automatic       varying char(30)         array level 3 dcl 123 set ref 160*
name_array                3     010227 automatic       structure                array level 2 dcl 123
name_count                1     010227 automatic       fixed bin(17,0)          level 2 dcl 123 set ref 155*
name_index                4            based           fixed bin(21,0)          array level 3 dcl 2-17 ref 166
name_len                  5            based           fixed bin(21,0)          array level 3 dcl 2-17 ref 166
new_Odft                        010201 automatic       structure                level 1 packed packed unaligned dcl 105
new_print                              based           structure                level 1 dcl 116 set ref 148 179 180* 182 182 186 197
null                                                   builtin function         dcl 134 ref 145 148 150 182 182 182 182 194 194 194
                                                                                  194 197 200
old_print                              based           structure                level 1 dcl 109 ref 180
pad                       3(02) 010227 automatic       bit(34)                  array level 3 packed packed unaligned dcl 123 set
                                                                                  ref 157*
pair_count                1            based           fixed bin(17,0)          level 2 dcl 2-17 ref 164 166
pairs                     3            based           structure                array level 2 dcl 2-17
regexp_sw                 3(01) 010227 automatic       bit(1)                   array level 3 packed packed unaligned dcl 123 set
                                                                                  ref 157*
size                                                   builtin function         dcl 134 ref 148 150 179 180 180 182 182 182 182 186
                                                                                  189 194 194 197 200
substr                                                 builtin function         dcl 134 ref 166 170
value_$get_data                 000010 constant        entry                    external dcl 136 ref 172
value_$list_data_names          000012 constant        entry                    external dcl 136 ref 161
value_$set_data                 000014 constant        entry                    external dcl 136 ref 182 194
value_list_info                        based           structure                level 1 dcl 2-17
value_list_info_ptr             000100 automatic       pointer                  dcl 2-3 set ref 161* 164 166 166 166
version                                based           fixed bin(17,0)          level 2 in structure "default_header" dcl 56
                                                                                  in procedure "eor_cv9_10_" set ref 193*
version                         010227 automatic       fixed bin(17,0)          level 2 in structure "mi" dcl 123 in procedure
                                                                                  "eor_cv9_10_" set ref 154*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
DP_PLOT                                internal static fixed bin(17,0)          initial dcl 1-81
DP_PUNCH                               internal static fixed bin(17,0)          initial dcl 1-81
alloc_chars_len                        automatic       fixed bin(21,0)          dcl 2-5
alloc_max_name_len                     automatic       fixed bin(21,0)          dcl 2-5
alloc_name_count                       automatic       fixed bin(17,0)          dcl 2-4
alloc_pair_count                       automatic       fixed bin(17,0)          dcl 2-4
dpap                                   automatic       pointer                  dcl 1-21
dprint_arg_buf                         automatic       structure                level 1 dcl 1-22
dprint_arg_version_1                   internal static fixed bin(17,0)          initial dcl 1-69
dprint_arg_version_10                  internal static fixed bin(17,0)          initial dcl 1-78
dprint_arg_version_2                   internal static fixed bin(17,0)          initial dcl 1-70
dprint_arg_version_3                   internal static fixed bin(17,0)          initial dcl 1-71
dprint_arg_version_4                   internal static fixed bin(17,0)          initial dcl 1-72
dprint_arg_version_5                   internal static fixed bin(17,0)          initial dcl 1-73
dprint_arg_version_6                   internal static fixed bin(17,0)          initial dcl 1-74
dprint_arg_version_7                   internal static fixed bin(17,0)          initial dcl 1-75
dprint_arg_version_8                   internal static fixed bin(17,0)          initial dcl 1-76
dprint_arg_version_9                   internal static fixed bin(17,0)          initial dcl 1-77
match_info                             based           structure                level 1 dcl 2-7
match_info_ptr                         automatic       pointer                  dcl 2-3
match_info_version_1                   internal static fixed bin(17,0)          initial dcl 2-27
value_list_info_version_1              internal static fixed bin(17,0)          initial dcl 2-27

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR_EXIT                      000702 constant        label                    dcl 197 ref 174 184
eor_cv9_10_                     000027 constant        entry                    external dcl 29

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1004        1022     725        1014
Length      1232     725        16         174      57           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
eor_cv9_10_                        4360 external procedure  is an external procedure.  
on unit on line 146                  64 on unit               

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
eor_cv9_10_              000100 value_list_info_ptr         eor_cv9_10_
                         000102 Pd                          eor_cv9_10_
                         000104 Pnd                         eor_cv9_10_
                         000106 area                        eor_cv9_10_
                         010106 dft_name                    eor_cv9_10_
                         010116 d_size                      eor_cv9_10_
                         010117 i                           eor_cv9_10_
                         010120 default                     eor_cv9_10_
                         010130 default_print               eor_cv9_10_
                         010201 new_Odft                    eor_cv9_10_
                         010227 mi                          eor_cv9_10_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     cat_realloc_chars   call_ext_out_desc   call_ext_out        return_mac          enable_op
shorten_stack       ext_entry           int_entry           op_alloc_           op_freen_           op_empty_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
value_$get_data               value_$list_data_names        value_$set_data

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     29 000023        42 000034       142 000037       144 000041       145 000044       146 000047       148 000063
    150 000074       152 000104       154 000105       155 000107       156 000110       157 000112       160 000150
    161 000155       164 000203       166 000213       169 000237       170 000262       172 000270       174 000357
    177 000363       179 000366       180 000374       181 000477       182 000502       184 000604       186 000610
    189 000614       191 000617       193 000621       194 000625       197 000702       200 000712       202 000721


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
