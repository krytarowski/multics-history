	COMPILATION LISTING OF SEGMENT memo_set_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1647.3 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 memo_set_: proc (P_msp, P_message, P_flags, P_time, P_exp_delta, P_repeat) returns (fixed bin);
       12 
       13 /* *	Ths procedure finds a new memo slot, and sets the memo in that slot, returning the slot number
       14*   *
       15*   *	June, 1979, W. Olin Sibert
       16*   */
       17 
       18 dcl (P_msp pointer,
       19      P_message char (*),				/* what the memo-to-be-set's data entry will be */
       20      P_flags bit (36) aligned,			/* string of flag bits */
       21      P_time fixed bin (35),				/* the time field of the new memo */
       22      P_exp_delta fixed bin (35),
       23      P_repeat char (*)) parameter;			/* the repeat string */
       24 
       25 dcl  idx fixed bin;
       26 
       27 dcl (stac, string, addr, max) builtin;
       28 
       29 /*  */
       30 
       31 	memo_segment_ptr = P_msp;
       32 	idx = 0;
       33 
       34 LOOP:	idx = idx + 1;				/* look at next entry */
       35 	if ^stac (addr (memo_entry (idx)), "1"b) then goto LOOP; /* if it's not free (i.e. "0"b) then get next entry */
       36 
       37 	string (memo_entry (idx).flags) = P_flags;	/* stac sets taken, this sets flags to flags desired */
       38 	memo_entry (idx).time = P_time; 		/* set the rest of the fields */
       39 	memo_entry (idx).data = P_message;
       40 	memo_entry (idx).exp_delta = P_exp_delta;
       41 	memo_entry (idx).repeat = P_repeat;
       42 	memo_segment.max_number_used = max (idx, memo_segment.max_number_used);
       43 						/* remember the furthest we went in the seg */
       44 
       45 	return (idx);				/* return the number of the new entry */
       46  /* BEGIN INCLUDE FILE ... memo_segment.incl.pl1 ... July, 1979 ... W. Olin Sibert */
  1     2 /* *	This include file describes a memo segment. Presently, this structure is still
  1     3*   *	compatible with "old" version 3 memo segments, although it uses more of the pad
  1     4*   *	fields; hence, it is still identified as version 3. If the conversion to version
  1     5*   *	4 memo segments is ever done, this will have to be changed for version 4.
  1     6*   */
  1     7 
  1     8 dcl  memo_segment_ptr pointer;
  1     9 
  1    10 dcl  MAX_NUMBER_MEMOS fixed bin internal static options (constant) init (5802);
  1    11 						/* max number of memos in a memo segment */
  1    12 
  1    13 dcl  MEMO_SEGMENT_VERSION_3 fixed bin internal static options (constant) init (3);
  1    14 
  1    15 dcl 1 memo_segment aligned based (memo_segment_ptr),	/* current version of whole segment */
  1    16     2 header like memo_segment_header,
  1    17     2 memo_entry (MAX_NUMBER_MEMOS) like memo_segment_entry;
  1    18 
  1    19 dcl 1 memo_segment_header aligned based,		/* header for memo segment */
  1    20     2 version fixed bin (35), 			/* presently 3 */
  1    21     2 max_number_used fixed bin (35);			/* The highest entry known to be used */
  1    22 
  1    23 dcl 1 memo_segment_entry aligned based, 		/* the entry for a single memo */
  1    24     2 taken bit (36) aligned, 			/* Zero if this entry free */
  1    25     2 flags aligned,				/* data about this memo */
  1    26       3 print bit (1) unaligned,			/* normal type memo */
  1    27       3 alarm bit (1) unaligned,			/* alarm type */
  1    28       3 execute bit (1) unaligned,			/* execute type */
  1    29       3 repeatsw bit (1) unaligned,			/* has repeat string */
  1    30       3 expires bit (1) unaligned,			/* has expiration time */
  1    31       3 remains bit (1) unaligned,			/* do not delete this memo when its alarm goes off */
  1    32       3 single bit (1) unaligned,			/* delete this non-alarm memo after one printing or execution */
  1    33       3 per_process bit (1) unaligned,			/* causes repeat to be done from time_now, not maturity */
  1    34       3 pad1 bit (28) unaligned,			/* not used */
  1    35     2 exp_delta fixed bin (35),			/* delta time before memo expires */
  1    36     2 time fixed bin (35),				/* time this memo matures */
  1    37     2 data char (132) aligned,			/* the memo message */
  1    38     2 repeat char (32) aligned;			/* the repeat string */
  1    39 
  1    40 /*	END INCLUDE FILE memo_segment.incl.pl1		*/
       46 
       47 
       48 	end;					/* external procedure memo_set_ */
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1615.0  memo_set_.pl1                     >dumps>old>recomp>memo_set_.pl1
46           1    08/18/81  1510.4  memo_segment.incl.pl1             >ldd>include>memo_segment.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_exp_delta                            parameter       fixed bin(35,0)          dcl 18 ref 11 40
P_flags                                parameter       bit(36)                  dcl 18 ref 11 37
P_message                              parameter       char                     unaligned dcl 18 ref 11 39
P_msp                                  parameter       pointer                  dcl 18 ref 11 31
P_repeat                               parameter       char                     unaligned dcl 18 ref 11 41
P_time                                 parameter       fixed bin(35,0)          dcl 18 ref 11 38
addr                                                   builtin function         dcl 27 ref 35
data                      6            based           char(132)                array level 3 dcl 1-15 set ref 39*
exp_delta                 4            based           fixed bin(35,0)          array level 3 dcl 1-15 set ref 40*
flags                     3            based           structure                array level 3 dcl 1-15 set ref 37*
header                                 based           structure                level 2 dcl 1-15
idx                             000100 automatic       fixed bin(17,0)          dcl 25 set ref 32* 34* 34 35 37 38 39 40 41 42 45
max                                                    builtin function         dcl 27 ref 42
max_number_used           1            based           fixed bin(35,0)          level 3 dcl 1-15 set ref 42* 42
memo_entry                2            based           structure                array level 2 dcl 1-15 set ref 35
memo_segment                           based           structure                level 1 dcl 1-15
memo_segment_entry                     based           structure                level 1 dcl 1-23
memo_segment_header                    based           structure                level 1 dcl 1-19
memo_segment_ptr                000102 automatic       pointer                  dcl 1-8 set ref 31* 35 37 38 39 40 41 42 42
repeat                   47            based           char(32)                 array level 3 dcl 1-15 set ref 41*
stac                                                   builtin function         dcl 27 ref 35
string                                                 builtin function         dcl 27 set ref 37*
time                      5            based           fixed bin(35,0)          array level 3 dcl 1-15 set ref 38*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
MAX_NUMBER_MEMOS                       internal static fixed bin(17,0)          initial dcl 1-10
MEMO_SEGMENT_VERSION_3                 internal static fixed bin(17,0)          initial dcl 1-13

NAMES DECLARED BY EXPLICIT CONTEXT.
LOOP                            000040 constant        label                    dcl 34 ref 35
memo_set_                       000013 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       132         142     105         142
Length       316     105        10         137      24           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
memo_set_                            73 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
memo_set_                000100 idx                         memo_set_
                         000102 memo_segment_ptr            memo_set_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              stac                ext_entry_desc

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000005        31 000033        32 000037        34 000040        35 000041        37 000052        38 000055
     39 000057        40 000065        41 000067        42 000075        45 000102


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
