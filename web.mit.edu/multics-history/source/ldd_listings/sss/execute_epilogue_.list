	COMPILATION LISTING OF SEGMENT execute_epilogue_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/05/86  1032.8 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 execute_epilogue_: proc (run_only);
       12 
       13 /* coded 9/77 by Steve Webber */
       14 /* modified 1/78 by Melanie Weaver to clean up list of run handlers as it is processed and to mask quits */
       15 /* modified  7/78 by Melanie Weaver to fix loop bug */
       16 
       17 /* Parameters */
       18 
       19 dcl  a_entry entry;
       20 dcl  run_only bit (1) aligned;			/* ON if only want run-unit cleanup */
       21 
       22 /* Automatic */
       23 
       24 dcl  i fixed bin;
       25 dcl  code fixed bin (35);
       26 dcl  iocb_ptr ptr;
       27 dcl  mask bit (36) aligned;
       28 
       29 /*  Static */
       30 
       31 dcl  num_handlers fixed bin static init (0);
       32 dcl  epilogue_handlers (10) static entry variable;
       33 dcl  num_run_handlers fixed bin static init (0);
       34 dcl  run_epilogue_handlers (10) static entry variable;
       35 
       36 /* External */
       37 
       38 dcl  error_table_$action_not_performed fixed bin (35) ext;
       39 
       40 /* Builtins, etc */
       41 
       42 dcl  any_other condition;
       43 dcl cleanup condition;
       44 dcl (ptr, addr, hbound) builtin;
       45 
       46 /* entries */
       47 
       48 dcl  iox_$find_iocb_n entry (fixed bin, ptr, fixed bin (35));
       49 dcl  iox_$close entry (ptr, fixed bin (35));
       50 dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
       51 dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
       52 
       53 
       54 /*  */
       55 
       56 /* Don't let quits keep handlers from finishing */
       57 
       58 	mask = "0"b;
       59 	on cleanup begin;
       60 	     if mask then call hcs_$reset_ips_mask (mask, mask);
       61 	end;
       62 	call hcs_$set_ips_mask ("0"b, mask);
       63 
       64 /* Always call the run handlers */
       65 
       66 	do i = num_run_handlers to 1 by -1;
       67 	     num_run_handlers = num_run_handlers - 1;	/* don't want this handler to be remembered after run unit is gone */
       68 	     on any_other goto next0;
       69 	     call run_epilogue_handlers (i) ();
       70 next0:	end;
       71 
       72 
       73 	if ^run_only then do;
       74 	     do i = 1 to num_handlers;
       75 		on any_other goto next;
       76 		call epilogue_handlers (i) ();
       77 next:	     end;
       78 
       79 /* Now close all files */
       80 
       81 	     call iox_$find_iocb_n (1, iocb_ptr, code);
       82 	     do i = 2 to 2000 while (code = 0);		/* avoid infinite loop */
       83 		on any_other goto nexti;
       84 		call iox_$close (iocb_ptr, code);
       85 nexti:		call iox_$find_iocb_n (i, iocb_ptr, code);
       86 	     end;
       87 	end;
       88 
       89 	call hcs_$reset_ips_mask (mask, mask);
       90 
       91 	return;
       92 
       93 /*  */
       94 
       95 add_epilogue_handler_: entry (a_entry) returns (fixed bin (35));
       96 
       97 
       98 	if ptr (addr (i), 0) -> stack_header.run_unit_depth > 0 then do;
       99 	     if num_run_handlers = hbound (run_epilogue_handlers, 1) then return (error_table_$action_not_performed);
      100 	     do i = 1 to num_run_handlers;
      101 		if run_epilogue_handlers (i) = a_entry then return (0);
      102 	     end;
      103 	     num_run_handlers = num_run_handlers + 1;
      104 	     run_epilogue_handlers (num_run_handlers) = a_entry;
      105 	end;
      106 	else do;
      107 	     if num_handlers = hbound (epilogue_handlers, 1) then return (error_table_$action_not_performed);
      108 	     do i = 1 to num_handlers;
      109 		if epilogue_handlers (i) = a_entry then return (0);
      110 	     end;
      111 	     num_handlers = num_handlers + 1;
      112 	     epilogue_handlers (num_handlers) = a_entry;
      113 	end;
      114 	return (0);
      115 
      116 /*  */
      117 
  1     1 /* 	BEGIN INCLUDE FILE ... stack_header.incl.pl1 .. 3/72 Bill Silver  */
  1     2 /*	modified 7/76 by M. Weaver for *system links and more system use of areas */
  1     3 /*	modified 3/77 by M. Weaver to add rnt_ptr */
  1     4 /*	Modified April 1983 by C. Hornig for tasking */
  1     5 
  1     6 /****^  HISTORY COMMENTS:
  1     7*  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
  1     8*     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
  1     9*     added the heap_header_ptr definition.
  1    10*  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
  1    11*     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
  1    12*     Modified to support control point management.  These changes were actually
  1    13*     made in February 1985 by G. Palter.
  1    14*  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
  1    15*     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
  1    16*     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
  1    17*     bit pad after cur_lot_size for the cpm_enabled. This was done to save some
  1    18*     space int the stack header and change the cpd_ptr unal to cpm_data_ptr
  1    19*     (ITS pair).
  1    20*                                                   END HISTORY COMMENTS */
  1    21 
  1    22 /* format: style2 */
  1    23 
  1    24      dcl	   sb		      ptr;		/* the  main pointer to the stack header */
  1    25 
  1    26      dcl	   1 stack_header	      based (sb) aligned,
  1    27 	     2 pad1	      (4) fixed bin,	/*  (0) also used as arg list by outward_call_handler  */
  1    28 	     2 cpm_data_ptr	      ptr,		/*  (4)  pointer to control point which owns this stack */
  1    29 	     2 combined_stat_ptr  ptr,		/*  (6)  pointer to area containing separate static */
  1    30 	     2 clr_ptr	      ptr,		/*  (8)  pointer to area containing linkage sections */
  1    31 	     2 max_lot_size	      fixed bin (17) unal,	/*  (10) DU  number of words allowed in lot */
  1    32 	     2 main_proc_invoked  fixed bin (11) unal,	/*  (10) DL  nonzero if main procedure invoked in run unit */
  1    33 	     2 have_static_vlas   bit (1) unal,		/*  (10) DL  "1"b if (very) large arrays are being used in static */
  1    34 	     2 pad4	      bit (2) unal,
  1    35 	     2 run_unit_depth     fixed bin (2) unal,	/*  (10) DL  number of active run units stacked */
  1    36 	     2 cur_lot_size	      fixed bin (17) unal,	/*  (11) DU  number of words (entries) in lot */
  1    37 	     2 cpm_enabled	      bit (18) unal,	/*  (11) DL  non-zero if control point management is enabled */
  1    38 	     2 system_free_ptr    ptr,		/*  (12)  pointer to system storage area */
  1    39 	     2 user_free_ptr      ptr,		/*  (14)  pointer to user storage area */
  1    40 	     2 null_ptr	      ptr,		/*  (16)  */
  1    41 	     2 stack_begin_ptr    ptr,		/*  (18)  pointer to first stack frame on the stack */
  1    42 	     2 stack_end_ptr      ptr,		/*  (20)  pointer to next useable stack frame */
  1    43 	     2 lot_ptr	      ptr,		/*  (22)  pointer to the lot for the current ring */
  1    44 	     2 signal_ptr	      ptr,		/*  (24)  pointer to signal procedure for current ring */
  1    45 	     2 bar_mode_sp	      ptr,		/*  (26)  value of sp before entering bar mode */
  1    46 	     2 pl1_operators_ptr  ptr,		/*  (28)  pointer to pl1_operators_$operator_table */
  1    47 	     2 call_op_ptr	      ptr,		/*  (30)  pointer to standard call operator */
  1    48 	     2 push_op_ptr	      ptr,		/*  (32)  pointer to standard push operator */
  1    49 	     2 return_op_ptr      ptr,		/*  (34)  pointer to standard return operator */
  1    50 	     2 return_no_pop_op_ptr
  1    51 			      ptr,		/*  (36)  pointer to standard return / no pop operator */
  1    52 	     2 entry_op_ptr	      ptr,		/*  (38)  pointer to standard entry operator */
  1    53 	     2 trans_op_tv_ptr    ptr,		/*  (40)  pointer to translator operator ptrs */
  1    54 	     2 isot_ptr	      ptr,		/*  (42)  pointer to ISOT */
  1    55 	     2 sct_ptr	      ptr,		/*  (44)  pointer to System Condition Table */
  1    56 	     2 unwinder_ptr	      ptr,		/*  (46)  pointer to unwinder for current ring */
  1    57 	     2 sys_link_info_ptr  ptr,		/*  (48)  pointer to *system link name table */
  1    58 	     2 rnt_ptr	      ptr,		/*  (50)  pointer to Reference Name Table */
  1    59 	     2 ect_ptr	      ptr,		/*  (52)  pointer to event channel table */
  1    60 	     2 assign_linkage_ptr ptr,		/*  (54)  pointer to storage for (obsolete) hcs_$assign_linkage */
  1    61 	     2 heap_header_ptr     ptr,		/*  (56)  pointer to the heap header for this ring */
  1    62 	     2 trace,
  1    63 	       3 frames,
  1    64 	         4 count	      fixed bin,		/*  (58)  number of trace frames */
  1    65 	         4 top_ptr	      ptr unal,		/*  (59)  pointer to last trace frame */
  1    66 	       3 in_trace	      bit (36) aligned,	/*  (60)  trace antirecursion flag */
  1    67 	     2 pad2	      bit (36),		/*  (61) */
  1    68                2 pad5	      pointer;		/*  (62)  pointer to future stuff */
  1    69 
  1    70 /*	The following offset refers to a table within the  pl1  operator table.  */
  1    71 
  1    72      dcl	   tv_offset	      fixed bin init (361) internal static;
  1    73 						/* (551) octal */
  1    74 
  1    75 
  1    76 /*	The following constants are offsets within this transfer vector table.  */
  1    77 
  1    78      dcl	   (
  1    79 	   call_offset	      fixed bin init (271),
  1    80 	   push_offset	      fixed bin init (272),
  1    81 	   return_offset	      fixed bin init (273),
  1    82 	   return_no_pop_offset   fixed bin init (274),
  1    83 	   entry_offset	      fixed bin init (275)
  1    84 	   )		      internal static;
  1    85 
  1    86 
  1    87 
  1    88 
  1    89 
  1    90 /*	The following declaration  is an overlay of the whole stack header.   Procedures which
  1    91*	move the whole stack header should use this overlay.
  1    92**/
  1    93 
  1    94      dcl	   stack_header_overlay   (size (stack_header)) fixed bin based (sb);
  1    95 
  1    96 
  1    97 
  1    98 /* 	END INCLUDE FILE ... stack_header.incl.pl1 */
      118 
      119      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/86  1033.6  execute_epilogue_.pl1             >special_ldd>install>MR12.0-1206>execute_epilogue_.pl1
118          1    11/04/86  1324.3  stack_header.incl.pl1             >special_ldd>install>MR12.0-1206>stack_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_entry                                parameter       entry variable           dcl 19 ref 95 101 104 109 112
addr                                                   builtin function         dcl 44 ref 98
any_other                       000106 stack reference condition                dcl 42 ref 68 75 83
cleanup                         000114 stack reference condition                dcl 43 ref 59
code                            000101 automatic       fixed bin(35,0)          dcl 25 set ref 81* 82 84* 85*
epilogue_handlers               000012 internal static entry variable           array dcl 32 set ref 76 107 109 112*
error_table_$action_not_performed
                                000134 external static fixed bin(35,0)          dcl 38 ref 99 107
hbound                                                 builtin function         dcl 44 ref 99 107
hcs_$reset_ips_mask             000144 constant        entry                    external dcl 51 ref 60 89
hcs_$set_ips_mask               000142 constant        entry                    external dcl 50 ref 62
i                               000100 automatic       fixed bin(17,0)          dcl 24 set ref 66* 69* 74* 76* 82* 85* 98 100* 101*
                                                                                  108* 109*
iocb_ptr                        000102 automatic       pointer                  dcl 26 set ref 81* 84* 85*
iox_$close                      000140 constant        entry                    external dcl 49 ref 84
iox_$find_iocb_n                000136 constant        entry                    external dcl 48 ref 81 85
mask                            000104 automatic       bit(36)                  dcl 27 set ref 58* 60 60* 60* 62* 89* 89*
num_handlers                    000010 internal static fixed bin(17,0)          initial dcl 31 set ref 74 107 108 111* 111 112
num_run_handlers                000062 internal static fixed bin(17,0)          initial dcl 33 set ref 66 67* 67 99 100 103* 103 104
ptr                                                    builtin function         dcl 44 ref 98
run_epilogue_handlers           000064 internal static entry variable           array dcl 34 set ref 69 99 101 104*
run_only                               parameter       bit(1)                   dcl 20 ref 11 73
run_unit_depth           12(33)        based           fixed bin(2,0)           level 2 packed unaligned dcl 1-26 ref 98
stack_header                           based           structure                level 1 dcl 1-26

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
call_offset                            internal static fixed bin(17,0)          initial dcl 1-78
entry_offset                           internal static fixed bin(17,0)          initial dcl 1-78
push_offset                            internal static fixed bin(17,0)          initial dcl 1-78
return_no_pop_offset                   internal static fixed bin(17,0)          initial dcl 1-78
return_offset                          internal static fixed bin(17,0)          initial dcl 1-78
sb                                     automatic       pointer                  dcl 1-24
stack_header_overlay                   based           fixed bin(17,0)          array dcl 1-94
tv_offset                              internal static fixed bin(17,0)          initial dcl 1-72

NAMES DECLARED BY EXPLICIT CONTEXT.
add_epilogue_handler_           000323 constant        entry                    external dcl 95
execute_epilogue_               000022 constant        entry                    external dcl 11
next                            000204 constant        label                    dcl 77 ref 75
next0                           000135 constant        label                    dcl 70 ref 68
nexti                           000263 constant        label                    dcl 85 ref 83

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       666        1034     524         676
Length      1256     524       146         206     141         124

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
execute_epilogue_                   104 external procedure  is an external procedure.  
on unit on line 59                   70 on unit               
on unit on line 68                   64 on unit               
on unit on line 75                   64 on unit               
on unit on line 83                   64 on unit               

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 num_handlers                execute_epilogue_
000012 epilogue_handlers           execute_epilogue_
000062 num_run_handlers            execute_epilogue_
000064 run_epilogue_handlers       execute_epilogue_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
execute_epilogue_        000100 i                           execute_epilogue_
                         000101 code                        execute_epilogue_
                         000102 iocb_ptr                    execute_epilogue_
                         000104 mask                        execute_epilogue_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ent_var        call_ext_out        return_mac          tra_ext_1           signal_op           enable_op
ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hcs_$reset_ips_mask           hcs_$set_ips_mask             iox_$close                    iox_$find_iocb_n

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$action_not_performed




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000017        58 000031        59 000032        60 000046        61 000060        62 000061        66 000074
     67 000103        68 000106        69 000125        70 000135        73 000140        74 000144        75 000155
     76 000174        77 000204        81 000206        82 000223        83 000233        84 000252        85 000263
     86 000276        89 000300        91 000310        95 000317        98 000331        99 000340       100 000356
    101 000365       102 000412       103 000414       104 000416       105 000426       107 000427       108 000445
    109 000453       110 000500       111 000502       112 000504       114 000514


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
