	COMPILATION LISTING OF SEGMENT value_path
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1155.83_Tue_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 value_path: vp: proc;
       12 
       13 /* Constants */
       14 
       15 dcl ME char (32) int static options (constant) init ("value_path");
       16 
       17 /* Based */
       18 
       19 dcl return_arg char (return_len) varying based (return_ptr);
       20 
       21 /* Automatic */
       22 
       23 dcl path char (168);
       24 dcl af_sw bit (1) aligned;
       25 dcl return_ptr ptr;
       26 dcl return_len fixed bin (24);
       27 dcl arg_count fixed bin;
       28 dcl code fixed bin (35);
       29 
       30 /* External */
       31 
       32 dcl error_table_$not_act_fnc fixed bin (35) ext;
       33 
       34 dcl (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
       35 dcl (com_err_, com_err_$suppress_name) entry options (variable);
       36 dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin (24), fixed bin (35));
       37 dcl ioa_ entry options (variable);
       38 dcl value_$get_path entry (char (*), fixed bin (35));
       39 
       40 dcl rtrim builtin;
       41 
       42 	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
       43 	if code = error_table_$not_act_fnc then do;
       44 	     af_sw = "0"b;
       45 	end;
       46 	else do;
       47 	     af_sw = "1"b;
       48 	     return_arg = "";
       49 	end;
       50 
       51 	if arg_count ^= 0 then do;
       52 	     if af_sw then call active_fnc_err_$suppress_name (0, ME, "Usage:  [vp]");
       53 	     else call com_err_$suppress_name (0, ME, "Usage:  vp");
       54 	     return;
       55 	end;
       56 
       57 	call value_$get_path (path, code);
       58 	if code ^= 0 then do;
       59 	     if af_sw then call active_fnc_err_ (code, ME);
       60 	     else call com_err_ (code, ME);
       61 	     return;
       62 	end;
       63 
       64 	if af_sw then return_arg = rtrim (path);
       65 	else call ioa_ ("^a", path);
       66 
       67 end value_path;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1155.8  value_path.pl1                    >udd>sm>ds>w>ml>value_path.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ME                              000000 constant        char(32)                 initial packed unaligned dcl 15 set ref 52* 53* 59*
                                                                                  60*
active_fnc_err_                 000012 constant        entry                    external dcl 34 ref 59
active_fnc_err_$suppress_name   000014 constant        entry                    external dcl 34 ref 52
af_sw                           000152 automatic       bit(1)                   dcl 24 set ref 44* 47* 52 59 64
arg_count                       000157 automatic       fixed bin(17,0)          dcl 27 set ref 42* 51
code                            000160 automatic       fixed bin(35,0)          dcl 28 set ref 42* 43 57* 58 59* 60*
com_err_                        000016 constant        entry                    external dcl 35 ref 60
com_err_$suppress_name          000020 constant        entry                    external dcl 35 ref 53
cu_$af_return_arg               000022 constant        entry                    external dcl 36 ref 42
error_table_$not_act_fnc        000010 external static fixed bin(35,0)          dcl 32 ref 43
ioa_                            000024 constant        entry                    external dcl 37 ref 65
path                            000100 automatic       char(168)                packed unaligned dcl 23 set ref 57* 64 65*
return_arg                             based           varying char             dcl 19 set ref 48* 64*
return_len                      000156 automatic       fixed bin(24,0)          dcl 26 set ref 42* 48 64
return_ptr                      000154 automatic       pointer                  dcl 25 set ref 42* 48 64
rtrim                                                  builtin function         dcl 40 ref 64
value_$get_path                 000026 constant        entry                    external dcl 38 ref 57

NAMES DECLARED BY EXPLICIT CONTEXT.
value_path                      000035 constant        entry                    external dcl 11
vp                              000026 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       406         436     270         416
Length       612     270        30         140     116           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
vp                                  138 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
vp                       000100 path                        vp
                         000152 af_sw                       vp
                         000154 return_ptr                  vp
                         000156 return_len                  vp
                         000157 arg_count                   vp
                         000160 code                        vp

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               active_fnc_err_$suppress_name com_err_                      com_err_$suppress_name
cu_$af_return_arg             ioa_                          value_$get_path

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$not_act_fnc




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000025        42 000042        43 000056        44 000062        45 000063        47 000064        48 000066
     51 000067        52 000071        53 000121        54 000147        57 000150        58 000164        59 000166
     60 000206        61 000223        64 000224        65 000250        67 000267


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
