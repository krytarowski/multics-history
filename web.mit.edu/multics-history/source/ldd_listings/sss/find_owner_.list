	COMPILATION LISTING OF SEGMENT find_owner_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/05/86  1031.1 mst Wed
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 find_owner_: proc (in_ptr, a_owner, a_section_offset, a_section,
       11 	     a_class, a_ls_ptr);
       12 
       13 /* This procedure determines whether a pointer points to a linkage or static
       14*   section and returns the useful information it finds along the way. */
       15 
       16 /* coded July 1975 by M. Weaver */
       17 
       18 /* arguments:
       19*   1) in_ptr	input pointer
       20*
       21*   2) a_owner	segno of owner of linkage or static section (output)
       22*
       23*   3) a_section_offset offset of beginning of linkage or static section (output)
       24*
       25*   4) a_section	name of logical section (output)
       26*
       27*   5) a_class	class of physical section (output)
       28*
       29*   6) a_ls_ptr	ptr to beginning of owner's linkage section (output)
       30**/
       31 
       32 
       33 
       34 dcl (in_ptr, a_ls_ptr, ls_ptr, is_ptr, lotp, isotp) ptr;
       35 
       36 dcl (i, class, a_class, highct, hcsct) fixed bin;
       37 dcl (owner, a_owner, section_offset, a_section_offset, tempseg) fixed bin (18);
       38 
       39 dcl (a_section, section) char(8) aligned;
       40 
       41 dcl (addr, baseptr, bin, null, ptr, rel) builtin;
       42 
       43 dcl  hcs_$high_low_seg_count entry (fixed bin, fixed bin);
       44 
       45 dcl 1 lot (0:1000) aligned based(lotp),			/* template for lot */
       46     2 seg bit (18) unaligned,				/* segment number of linkage section */
       47     2 offset bit (18) unaligned;			/* offset of beginning of linkage section */
       48 
       49 dcl 1 isot(0:1000) aligned based(isotp) like lot;
       50 
       51 	
  1     1 /* 	BEGIN INCLUDE FILE ... stack_header.incl.pl1 .. 3/72 Bill Silver  */
  1     2 /*	modified 7/76 by M. Weaver for *system links and more system use of areas */
  1     3 /*	modified 3/77 by M. Weaver to add rnt_ptr */
  1     4 /*	Modified April 1983 by C. Hornig for tasking */
  1     5 
  1     6 /****^  HISTORY COMMENTS:
  1     7*  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
  1     8*     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
  1     9*     added the heap_header_ptr definition.
  1    10*  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
  1    11*     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
  1    12*     Modified to support control point management.  These changes were actually
  1    13*     made in February 1985 by G. Palter.
  1    14*  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
  1    15*     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
  1    16*     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
  1    17*     bit pad after cur_lot_size for the cpm_enabled. This was done to save some
  1    18*     space int the stack header and change the cpd_ptr unal to cpm_data_ptr
  1    19*     (ITS pair).
  1    20*                                                   END HISTORY COMMENTS */
  1    21 
  1    22 /* format: style2 */
  1    23 
  1    24      dcl	   sb		      ptr;		/* the  main pointer to the stack header */
  1    25 
  1    26      dcl	   1 stack_header	      based (sb) aligned,
  1    27 	     2 pad1	      (4) fixed bin,	/*  (0) also used as arg list by outward_call_handler  */
  1    28 	     2 cpm_data_ptr	      ptr,		/*  (4)  pointer to control point which owns this stack */
  1    29 	     2 combined_stat_ptr  ptr,		/*  (6)  pointer to area containing separate static */
  1    30 	     2 clr_ptr	      ptr,		/*  (8)  pointer to area containing linkage sections */
  1    31 	     2 max_lot_size	      fixed bin (17) unal,	/*  (10) DU  number of words allowed in lot */
  1    32 	     2 main_proc_invoked  fixed bin (11) unal,	/*  (10) DL  nonzero if main procedure invoked in run unit */
  1    33 	     2 have_static_vlas   bit (1) unal,		/*  (10) DL  "1"b if (very) large arrays are being used in static */
  1    34 	     2 pad4	      bit (2) unal,
  1    35 	     2 run_unit_depth     fixed bin (2) unal,	/*  (10) DL  number of active run units stacked */
  1    36 	     2 cur_lot_size	      fixed bin (17) unal,	/*  (11) DU  number of words (entries) in lot */
  1    37 	     2 cpm_enabled	      bit (18) unal,	/*  (11) DL  non-zero if control point management is enabled */
  1    38 	     2 system_free_ptr    ptr,		/*  (12)  pointer to system storage area */
  1    39 	     2 user_free_ptr      ptr,		/*  (14)  pointer to user storage area */
  1    40 	     2 null_ptr	      ptr,		/*  (16)  */
  1    41 	     2 stack_begin_ptr    ptr,		/*  (18)  pointer to first stack frame on the stack */
  1    42 	     2 stack_end_ptr      ptr,		/*  (20)  pointer to next useable stack frame */
  1    43 	     2 lot_ptr	      ptr,		/*  (22)  pointer to the lot for the current ring */
  1    44 	     2 signal_ptr	      ptr,		/*  (24)  pointer to signal procedure for current ring */
  1    45 	     2 bar_mode_sp	      ptr,		/*  (26)  value of sp before entering bar mode */
  1    46 	     2 pl1_operators_ptr  ptr,		/*  (28)  pointer to pl1_operators_$operator_table */
  1    47 	     2 call_op_ptr	      ptr,		/*  (30)  pointer to standard call operator */
  1    48 	     2 push_op_ptr	      ptr,		/*  (32)  pointer to standard push operator */
  1    49 	     2 return_op_ptr      ptr,		/*  (34)  pointer to standard return operator */
  1    50 	     2 return_no_pop_op_ptr
  1    51 			      ptr,		/*  (36)  pointer to standard return / no pop operator */
  1    52 	     2 entry_op_ptr	      ptr,		/*  (38)  pointer to standard entry operator */
  1    53 	     2 trans_op_tv_ptr    ptr,		/*  (40)  pointer to translator operator ptrs */
  1    54 	     2 isot_ptr	      ptr,		/*  (42)  pointer to ISOT */
  1    55 	     2 sct_ptr	      ptr,		/*  (44)  pointer to System Condition Table */
  1    56 	     2 unwinder_ptr	      ptr,		/*  (46)  pointer to unwinder for current ring */
  1    57 	     2 sys_link_info_ptr  ptr,		/*  (48)  pointer to *system link name table */
  1    58 	     2 rnt_ptr	      ptr,		/*  (50)  pointer to Reference Name Table */
  1    59 	     2 ect_ptr	      ptr,		/*  (52)  pointer to event channel table */
  1    60 	     2 assign_linkage_ptr ptr,		/*  (54)  pointer to storage for (obsolete) hcs_$assign_linkage */
  1    61 	     2 heap_header_ptr     ptr,		/*  (56)  pointer to the heap header for this ring */
  1    62 	     2 trace,
  1    63 	       3 frames,
  1    64 	         4 count	      fixed bin,		/*  (58)  number of trace frames */
  1    65 	         4 top_ptr	      ptr unal,		/*  (59)  pointer to last trace frame */
  1    66 	       3 in_trace	      bit (36) aligned,	/*  (60)  trace antirecursion flag */
  1    67 	     2 pad2	      bit (36),		/*  (61) */
  1    68                2 pad5	      pointer;		/*  (62)  pointer to future stuff */
  1    69 
  1    70 /*	The following offset refers to a table within the  pl1  operator table.  */
  1    71 
  1    72      dcl	   tv_offset	      fixed bin init (361) internal static;
  1    73 						/* (551) octal */
  1    74 
  1    75 
  1    76 /*	The following constants are offsets within this transfer vector table.  */
  1    77 
  1    78      dcl	   (
  1    79 	   call_offset	      fixed bin init (271),
  1    80 	   push_offset	      fixed bin init (272),
  1    81 	   return_offset	      fixed bin init (273),
  1    82 	   return_no_pop_offset   fixed bin init (274),
  1    83 	   entry_offset	      fixed bin init (275)
  1    84 	   )		      internal static;
  1    85 
  1    86 
  1    87 
  1    88 
  1    89 
  1    90 /*	The following declaration  is an overlay of the whole stack header.   Procedures which
  1    91*	move the whole stack header should use this overlay.
  1    92**/
  1    93 
  1    94      dcl	   stack_header_overlay   (size (stack_header)) fixed bin based (sb);
  1    95 
  1    96 
  1    97 
  1    98 /* 	END INCLUDE FILE ... stack_header.incl.pl1 */
       52 
       53 	
  2     1 /* BEGIN INCLUDE FILE its.incl.pl1
  2     2*   modified 27 July 79 by JRDavis to add its_unsigned
  2     3*   Internal format of ITS pointer, including ring-number field for follow-on processor */
  2     4 
  2     5 dcl 1 its based aligned,				/* declaration for ITS type pointer */
  2     6     2 pad1 bit (3) unaligned,
  2     7     2 segno bit (15) unaligned,			/* segment number within the pointer */
  2     8     2 ringno bit (3) unaligned,			/* ring number within the pointer */
  2     9     2 pad2 bit (9) unaligned,
  2    10     2 its_mod bit (6) unaligned,			/* should be 43(8) */
  2    11 
  2    12     2 offset bit (18) unaligned,			/* word offset within the addressed segment */
  2    13     2 pad3 bit (3) unaligned,
  2    14     2 bit_offset bit (6) unaligned,			/* bit offset within the word */
  2    15     2 pad4 bit (3) unaligned,
  2    16     2 mod bit (6) unaligned;				/* further modification */
  2    17 
  2    18 dcl 1 itp based aligned,				/* declaration for ITP type pointer */
  2    19     2 pr_no bit (3) unaligned,			/* number of pointer register to use */
  2    20     2 pad1 bit (27) unaligned,
  2    21     2 itp_mod bit (6) unaligned,			/* should be 41(8) */
  2    22 
  2    23     2 offset bit (18) unaligned,			/* word offset from pointer register word offset */
  2    24     2 pad2 bit (3) unaligned,
  2    25     2 bit_offset bit (6) unaligned,			/* bit offset relative to new word offset */
  2    26     2 pad3 bit (3) unaligned,
  2    27     2 mod bit (6) unaligned;				/* further modification */
  2    28 
  2    29 
  2    30 dcl 1 its_unsigned based aligned,			/* just like its, but with unsigned binary */
  2    31     2 pad1 bit (3) unaligned,
  2    32     2 segno fixed bin (15) unsigned unaligned,
  2    33     2 ringno fixed bin (3) unsigned unaligned,
  2    34     2 pad2 bit (9) unaligned,
  2    35     2 its_mod bit (6) unaligned,
  2    36 
  2    37     2 offset fixed bin (18) unsigned unaligned,
  2    38     2 pad3 bit (3) unaligned,
  2    39     2 bit_offset fixed bin (6) unsigned unaligned,
  2    40     2 pad4 bit (3) unaligned,
  2    41     2 mod bit (6) unaligned;
  2    42 
  2    43 dcl 1 itp_unsigned based aligned,			/* just like itp, but with unsigned binary where appropriate */
  2    44     2 pr_no fixed bin (3) unsigned unaligned,
  2    45     2 pad1 bit (27) unaligned,
  2    46     2 itp_mod bit (6) unaligned,
  2    47 
  2    48     2 offset fixed bin (18) unsigned unaligned,
  2    49     2 pad2 bit (3) unaligned,
  2    50     2 bit_offset fixed bin (6) unsigned unaligned,
  2    51     2 pad3 bit (3) unaligned,
  2    52     2 mod bit (6) unaligned;
  2    53 
  2    54 
  2    55 dcl  ITS_MODIFIER bit (6) unaligned internal static options (constant) init ("43"b3);
  2    56 dcl  ITP_MODIFIER bit (6) unaligned internal static options (constant) init ("41"b3);
  2    57 
  2    58 /* END INCLUDE FILE   its.incl.pl1 */
       54 
       55 
       56 	
  3     1 /* BEGIN INCLUDE FILE linkdcl.incl.pl1 --- last modified 15 Nov 1971 by C Garman */
  3     2 
  3     3 /* Last Modified (Date and Reason):
  3     4*   6/75 by M.Weaver to add virgin_linkage_header declaration
  3     5*   6/75 by S.Webber to comment existing structures better
  3     6*   9/77 by M. Weaver to add run_depth to link
  3     7*   2/83 by M. Weaver to add linkage header flags and change run_depth precision
  3     8**/
  3     9 
  3    10 /* format: style3 */
  3    11 dcl	1 link		based aligned,		/* link pair in linkage section */
  3    12 	  2 head_ptr	bit (18) unal,		/* rel pointer to beginning of linkage section */
  3    13 	  2 ringno	bit (3) unal,
  3    14 	  2 mbz		bit (6) unal,
  3    15 	  2 run_depth	fixed bin (2) unal,		/* run unit depth, filled when link is snapped */
  3    16 	  2 ft2		bit (6) unal,		/* fault tag. 46(8) if not snapped, 43(8) if snapped */
  3    17 	  2 exp_ptr	bit (18) unal,		/* pointer (rel to defs) of expression word */
  3    18 	  2 mbz2		bit (12) unal,
  3    19 	  2 modifier	bit (6) unal;		/* modifier to be left in snapped link */
  3    20 
  3    21 dcl	1 exp_word	based aligned,		/* expression word in link definition */
  3    22 	  2 type_ptr	bit (18) unal,		/* pointer (rel to defs) of type pair structure */
  3    23 	  2 exp		bit (18) unal;		/* constant expression to be added in when snapping link */
  3    24 
  3    25 dcl	1 type_pair	based aligned,		/* type pair in link definition */
  3    26 	  2 type		bit (18) unal,		/* type of link. may be 1,2,3,4,5, or 6 */
  3    27 	  2 trap_ptr	bit (18) unal,		/* pointer (rel to defs) to the trap word */
  3    28 	  2 seg_ptr	bit (18) unal,		/* pointer to ACC reference name for segment referenced */
  3    29 	  2 ext_ptr	bit (18) unal;		/* pointer (rel to defs)  of ACC segdef name */
  3    30 
  3    31 dcl	1 header		based aligned,		/* linkage block header */
  3    32 	  2 def_ptr	ptr,			/* pointer to definition section */
  3    33 	  2 symbol_ptr	ptr unal,			/* pointer to symbol section in object segment */
  3    34 	  2 original_linkage_ptr
  3    35 			ptr unal,			/* pointer to linkage section in object segment */
  3    36 	  2 unused	bit (72),
  3    37 	  2 stats,
  3    38 	    3 begin_links	bit (18) unal,		/* offset (rel to this section) of first link */
  3    39 	    3 block_length	bit (18) unal,		/* number of words in this linkage section */
  3    40 	    3 segment_number
  3    41 			bit (18) unal,		/* text segment number associated with this section */
  3    42 	    3 static_length bit (18) unal;		/* number of words of static for this segment */
  3    43 
  3    44 dcl	1 linkage_header_flags
  3    45 			aligned based,		/* overlay of def_ptr for flags */
  3    46 	  2 pad1		bit (28) unaligned,		/* flags are in first word */
  3    47 	  2 static_vlas	bit (1) unaligned,		/* static section "owns" some LA/VLA segments */
  3    48 	  2 perprocess_static
  3    49 			bit (1) unaligned,		/* 1 copy of static section is used by all tasks/run units */
  3    50 	  2 pad2		bit (6) unaligned;
  3    51 
  3    52 dcl	1 virgin_linkage_header
  3    53 			aligned based,		/* template for linkage header in object segment */
  3    54 	  2 pad		bit (30) unaligned,		/* is filled in by linker */
  3    55 	  2 defs_in_link	bit (6) unaligned,		/* =o20 if defs in linkage (nonstandard) */
  3    56 	  2 def_offset	bit (18) unaligned,		/* offset of definition section */
  3    57 	  2 first_ref_relp	bit (18) unaligned,		/* offset of trap-at-first-reference offset array */
  3    58 	  2 filled_in_later bit (144),
  3    59 	  2 link_begin	bit (18) unaligned,		/* offset of first link */
  3    60 	  2 linkage_section_lng
  3    61 			bit (18) unaligned,		/* length of linkage section */
  3    62 	  2 segno_pad	bit (18) unaligned,		/* will be segment number of copied linkage */
  3    63 	  2 static_length	bit (18) unaligned;		/* length of static section */
  3    64 
  3    65 
  3    66 dcl	1 trap_word	based aligned,		/* trap word in link definition */
  3    67 	  2 call_ptr	bit (18) unal,		/* pointer (rel to link) of link to trap procedure */
  3    68 	  2 arg_ptr	bit (18) unal;		/* pointer (rel to link) of link to arg info for trap proc */
  3    69 
  3    70 dcl	1 name		based aligned,		/* storage of ASCII names in definitions */
  3    71 	  2 nchars	bit (9) unaligned,		/* number of characters in name */
  3    72 	  2 char_string	char (31) unaligned;	/* 31-character name */
  3    73 
  3    74 /* END INCLUDE FILE linkdcl.incl.pl1 */
       57 
       58 	
       59 	class = 0;				/* initialize "output" variables */
       60 	section_offset = 0;
       61 	section = "text";				/* until proven otherwise */
       62 	ls_ptr = null;
       63 
       64 	i = 100000;				/* test at end for large i */
       65 	if addr (in_ptr) -> its.its_mod ^= "100011"b then go to finish; /* see if we have a ptr */
       66 	if in_ptr = null then goto finish;
       67 
       68 	sb = ptr (addr (owner), 0);			/* get ptr to base of stack */
       69 	lotp = stack_header.lot_ptr;			/* so we can get ptr to base of LOT */
       70 	isotp = stack_header.isot_ptr;
       71 	tempseg = bin (baseno (in_ptr), 18);
       72 
       73 	call hcs_$high_low_seg_count (highct, hcsct);
       74 
       75 	do i = hcsct to hcsct + highct;
       76 	     if bin (lot (i).seg, 18) ^= tempseg then goto check_isot; /* no LOT entry for this seg */
       77 	     if rel (in_ptr) < lot (i).offset then goto check_isot; /* not possibly in linkage section */
       78 	     ls_ptr = ptr (baseptr (lot (i).seg), lot (i).offset); /* get ptr to ls */
       79 	     section_offset = bin (lot (i).offset, 18);
       80 	     if bin (rel (in_ptr), 18) < bin (ls_ptr -> header.stats.block_length, 18) + section_offset
       81 	     then do;				/* in_ptr pts to this linkage section */
       82 		class = 1;
       83 		if section_offset < bin(ls_ptr -> header.stats.begin_links, 18)
       84 		then section = "static";
       85 		else section = "linkage";		/* ptr points to links */
       86 		go to finish;
       87 	     end;
       88 
       89 /* see if in_ptr points to separate static */
       90 
       91 check_isot:    if bin (isot (i).seg, 18) ^= tempseg then go to next_segno;
       92 						/* not even same seg */
       93 	     is_ptr = ptr (baseptr (isot (i).seg), isot (i).offset);
       94 	     if is_ptr = ls_ptr then goto next_segno;	/* no separate static */
       95 	     if rel (in_ptr) < isot (i).offset then goto next_segno; /* not in this static */
       96 	     section_offset = bin (isot (i).offset, 18);
       97 	     if bin (rel (in_ptr), 18) >= section_offset + bin(ls_ptr -> header.stats.static_length, 18)
       98 	     then goto next_segno;
       99 	     class = 4;
      100 	     section = "static";
      101 	     go to finish;
      102 
      103 next_segno:
      104 	end;
      105 
      106 finish:
      107 	a_section = section;
      108 	a_class = class;
      109 	if section = "text" then do;			/* no matching ls or ss found */
      110 	     a_section_offset = 0;
      111 	     a_owner = -1;
      112 	     a_ls_ptr = null;
      113 	end;
      114 	else do;
      115 	     a_section_offset = section_offset;
      116 	     a_owner = i;
      117 	     a_ls_ptr = ls_ptr;
      118 	end;
      119 
      120 	return;
      121      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/86  1033.8  find_owner_.pl1                   >special_ldd>install>MR12.0-1206>find_owner_.pl1
52           1    11/04/86  1324.3  stack_header.incl.pl1             >special_ldd>install>MR12.0-1206>stack_header.incl.pl1
54           2    11/26/79  1320.6  its.incl.pl1                      >ldd>include>its.incl.pl1
57           3    07/27/83  0910.0  linkdcl.incl.pl1                  >ldd>include>linkdcl.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_class                                parameter       fixed bin(17,0)          dcl 36 set ref 10 108*
a_ls_ptr                               parameter       pointer                  dcl 34 set ref 10 112* 117*
a_owner                                parameter       fixed bin(18,0)          dcl 37 set ref 10 111* 116*
a_section                              parameter       char(8)                  dcl 39 set ref 10 106*
a_section_offset                       parameter       fixed bin(18,0)          dcl 37 set ref 10 110* 115*
addr                                                   builtin function         dcl 41 ref 65 68
baseptr                                                builtin function         dcl 41 ref 78 93
begin_links               6            based           bit(18)                  level 3 packed unaligned dcl 3-31 ref 83
bin                                                    builtin function         dcl 41 ref 71 76 79 80 80 83 91 96 97 97
block_length              6(18)        based           bit(18)                  level 3 packed unaligned dcl 3-31 ref 80
class                           000111 automatic       fixed bin(17,0)          dcl 36 set ref 59* 82* 99* 108
hcs_$high_low_seg_count         000010 constant        entry                    external dcl 43 ref 73
hcsct                           000113 automatic       fixed bin(17,0)          dcl 36 set ref 73* 75 75
header                                 based           structure                level 1 dcl 3-31
highct                          000112 automatic       fixed bin(17,0)          dcl 36 set ref 73* 75
i                               000110 automatic       fixed bin(17,0)          dcl 36 set ref 64* 75* 76 77 78 78 79 91 93 93 95
                                                                                  96* 116
in_ptr                                 parameter       pointer                  dcl 34 set ref 10 65 66 71 77 80 95 97
is_ptr                          000102 automatic       pointer                  dcl 34 set ref 93* 94
isot                                   based           structure                array level 1 dcl 49
isot_ptr                 52            based           pointer                  level 2 dcl 1-26 ref 70
isotp                           000106 automatic       pointer                  dcl 34 set ref 70* 91 93 93 95 96
its                                    based           structure                level 1 dcl 2-5
its_mod                   0(30)        based           bit(6)                   level 2 packed unaligned dcl 2-5 ref 65
lot                                    based           structure                array level 1 dcl 45
lot_ptr                  26            based           pointer                  level 2 dcl 1-26 ref 69
lotp                            000104 automatic       pointer                  dcl 34 set ref 69* 76 77 78 78 79
ls_ptr                          000100 automatic       pointer                  dcl 34 set ref 62* 78* 80 83 94 97 117
null                                                   builtin function         dcl 41 ref 62 66 112
offset                    0(18)        based           bit(18)                  array level 2 in structure "isot" packed unaligned
                                                                                  dcl 49 in procedure "find_owner_" ref 93 95 96
offset                    0(18)        based           bit(18)                  array level 2 in structure "lot" packed unaligned
                                                                                  dcl 45 in procedure "find_owner_" ref 77 78 79
owner                           000114 automatic       fixed bin(18,0)          dcl 37 set ref 68
ptr                                                    builtin function         dcl 41 ref 68 78 93
rel                                                    builtin function         dcl 41 ref 77 80 95 97
sb                              000122 automatic       pointer                  dcl 1-24 set ref 68* 69 70
section                         000120 automatic       char(8)                  dcl 39 set ref 61* 83* 85* 100* 106 109
section_offset                  000115 automatic       fixed bin(18,0)          dcl 37 set ref 60* 79* 80 83 96* 97 115
seg                                    based           bit(18)                  array level 2 in structure "isot" packed unaligned
                                                                                  dcl 49 in procedure "find_owner_" ref 91 93
seg                                    based           bit(18)                  array level 2 in structure "lot" packed unaligned
                                                                                  dcl 45 in procedure "find_owner_" ref 76 78
stack_header                           based           structure                level 1 dcl 1-26
static_length             7(18)        based           bit(18)                  level 3 packed unaligned dcl 3-31 ref 97
stats                     6            based           structure                level 2 dcl 3-31
tempseg                         000116 automatic       fixed bin(18,0)          dcl 37 set ref 71* 76 91

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ITP_MODIFIER                           internal static bit(6)                   initial unaligned dcl 2-56
ITS_MODIFIER                           internal static bit(6)                   initial unaligned dcl 2-55
call_offset                            internal static fixed bin(17,0)          initial dcl 1-78
entry_offset                           internal static fixed bin(17,0)          initial dcl 1-78
exp_word                               based           structure                level 1 dcl 3-21
itp                                    based           structure                level 1 dcl 2-18
itp_unsigned                           based           structure                level 1 dcl 2-43
its_unsigned                           based           structure                level 1 dcl 2-30
link                                   based           structure                level 1 dcl 3-11
linkage_header_flags                   based           structure                level 1 dcl 3-44
name                                   based           structure                level 1 dcl 3-70
push_offset                            internal static fixed bin(17,0)          initial dcl 1-78
return_no_pop_offset                   internal static fixed bin(17,0)          initial dcl 1-78
return_offset                          internal static fixed bin(17,0)          initial dcl 1-78
stack_header_overlay                   based           fixed bin(17,0)          array dcl 1-94
trap_word                              based           structure                level 1 dcl 3-66
tv_offset                              internal static fixed bin(17,0)          initial dcl 1-72
type_pair                              based           structure                level 1 dcl 3-25
virgin_linkage_header                  based           structure                level 1 dcl 3-52

NAMES DECLARED BY EXPLICIT CONTEXT.
check_isot                      000166 constant        label                    dcl 91 ref 76 77
find_owner_                     000022 constant        entry                    external dcl 10
finish                          000245 constant        label                    dcl 106 ref 65 66 86 101
next_segno                      000242 constant        label                    dcl 103 ref 91 94 95 97

NAME DECLARED BY CONTEXT OR IMPLICATION.
baseno                                                 builtin function         ref 71

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       334         346     276         344
Length       564     276        12         201      36           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
find_owner_                         100 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
find_owner_              000100 ls_ptr                      find_owner_
                         000102 is_ptr                      find_owner_
                         000104 lotp                        find_owner_
                         000106 isotp                       find_owner_
                         000110 i                           find_owner_
                         000111 class                       find_owner_
                         000112 highct                      find_owner_
                         000113 hcsct                       find_owner_
                         000114 owner                       find_owner_
                         000115 section_offset              find_owner_
                         000116 tempseg                     find_owner_
                         000120 section                     find_owner_
                         000122 sb                          find_owner_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hcs_$high_low_seg_count

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000014        59 000027        60 000030        61 000031        62 000033        64 000035        65 000037
     66 000044        68 000050        69 000053        70 000055        71 000057        73 000065        75 000076
     76 000107        77 000115        78 000127        79 000137        80 000141        82 000152        83 000154
     85 000163        86 000165        91 000166        93 000175        94 000205        95 000212        96 000220
     97 000224        99 000235       100 000237       101 000241       103 000242       106 000245       108 000252
    109 000254       110 000261       111 000262       112 000264       113 000266       115 000267       116 000271
    117 000273       120 000275


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
