	COMPILATION LISTING OF SEGMENT release
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/20/84  0849.3 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 release: rl:	proc;
       12 
       13 /* This procedure implements the start and release commands. It exists so that
       14*   the code involved does not have to be in the main body of listen_ */
       15 
       16 /* Initially coded in May 1972 by V. Voydock as part of the fast command loop */
       17 /* Fixed to reject extra arguments 06/30/82 S. Herbst */
       18 /* Changed to use listener_info.incl.pl1 12/11/84 Steve Herbst */
       19 
       20 
       21 dcl	ioa_ ext entry options(variable);
       22 
       23 dcl	temp_ptr ptr;
       24 
       25 dcl	arg_count fixed bin;
       26 dcl	arg_length fixed bin (21);
       27 dcl	(code,
       28 	 error_table_$badopt external
       29 					) fixed bin(35);
       30 
       31 dcl	argument char(arg_length) based(temp_ptr);
       32 
       33 dcl	cu_$arg_count entry (fixed bin);
       34 dcl	cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       35 dcl	(com_err_, com_err_$suppress_name) ext entry options(variable);
       36 
       37 dcl	(null, substr) builtin;
       38 
       39 /* If there is no frame to release to, print message and return. */
       40 /*
       41*	if listen_static_data_.control_ptr -> based_listener_control.prev_ptr=null() then do;
       42*	     call ioa_("""release"" ignored.");
       43*	     return;
       44*	end;
       45**/
       46 
       47 /* See if we are to release to "top". That is "rl -all" was typed */
       48 
       49 	call cu_$arg_count (arg_count);
       50 	if arg_count > 1 then do;
       51 RL_USAGE:	     call com_err_$suppress_name (0, "release", "Usage:  release {-control_arg}");
       52 	     return;
       53 	end;
       54 
       55 	call cu_$arg_ptr(1,temp_ptr,arg_length,code);
       56 	if code=0 then
       57 	     if (argument = "-all") | (argument = "-a") then
       58 		go to listen_static_data_.control_ptr -> based_listener_control.release_all;
       59 	     else if substr (argument, 1, 1) = "-" then do;
       60 		call com_err_ (error_table_$badopt, "release", argument);
       61 		return;
       62 	     end;
       63 	     else go to RL_USAGE;
       64 
       65 /* Set the release switch */
       66 
       67 	go to listen_static_data_.control_ptr -> based_listener_control.release;
       68 
       69 start: sr: entry;
       70 
       71 /* If there is no frame to "start" to, print message and return */
       72 
       73 	if listen_static_data_.control_ptr -> based_listener_control.release =
       74 	     listen_static_data_.control_ptr -> based_listener_control.new_release then do;
       75 	     call ioa_("""start"" ignored.");
       76 	     return;
       77 	end;
       78 
       79 /* See if we are to not restore io attachments (that is, "start -no_restore" was typed) */
       80 
       81 	call cu_$arg_count (arg_count);
       82 	if arg_count > 1 then do;
       83 SR_USAGE:	     call com_err_$suppress_name (0, "start", "Usage:  start {-control_arg}");
       84 	     return;
       85 	end;
       86 
       87 	call cu_$arg_ptr(1,temp_ptr,arg_length,code);
       88 	if code=0 then
       89 	     if (argument="-no_restore") | (argument="-nr") then
       90 		listen_static_data_.control_ptr -> based_listener_control.dont_restore_sw = "1"b;
       91 	     else if substr (argument, 1, 1) = "-" then do;
       92 		call com_err_ (error_table_$badopt, "start", argument);
       93 		return;
       94 	     end;
       95 	     else go to SR_USAGE;
       96 
       97 /* Set the start switch */
       98 
       99 	go to listen_static_data_.control_ptr -> based_listener_control.start;
      100 
  1     1 /* INCLUDE FILE -- listener_info.incl.pl1  */
  1     2 
  1     3 /* Written 12/07/84 Steve Herbst */
  1     4 
  1     5 
  1     6 dcl 1 listen_static_data_ aligned external static,	/* referenced by both listen_ and absentee_listen_ */
  1     7      2 control_ptr ptr init (null),			/* points to current listener_control */
  1     8      2 first_level_sw bit (1) aligned init ("1"b);	/* ON if this is the top listener level */
  1     9 
  1    10 
  1    11 dcl 1 based_listener_control aligned			/* structure containing all control info */
  1    12 	based (listen_static_data_.control_ptr),
  1    13      2 prev_ptr ptr,				/* to previous listener_control, if any */
  1    14      2 (release_all,				/* label transferred to by "release -all" */
  1    15         release,					/* label transferred to by "release" */
  1    16         new_release,				/* next invocation's release label */
  1    17         start					/* label transferred to by the start command */
  1    18 	) label,
  1    19      2 flags aligned,
  1    20       3 dont_restore_sw bit (1) unaligned,		/* ON => don't restore I/O attachments on "start" */
  1    21       3 pad bit (35) unaligned,
  1    22      2 frame fixed bin,				/* stack frame number of current listener */
  1    23      2 level fixed bin;				/* listener level number of current listener */
  1    24 
  1    25 /* E* END INCLUDE FILE -- listener_info.incl.pl1 */
  1    26 
  1    27      
      101 
      102 
      103 
      104 end release;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/20/84  0833.0  release.pl1                       >spec>on>6678.pbf>release.pl1
101          1    12/20/84  0848.2  listener_info.incl.pl1            >spec>on>6678.pbf>listener_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg_count                       000102 automatic       fixed bin(17,0)          dcl 25 set ref 49* 50 81* 82
arg_length                      000103 automatic       fixed bin(21,0)          dcl 26 set ref 55* 56 56 59 60 60 87* 88 88 91 92 92
argument                               based           char                     unaligned dcl 31 set ref 56 56 59 60* 88 88 91 92*
based_listener_control                 based           structure                level 1 dcl 1-11
code                            000104 automatic       fixed bin(35,0)          dcl 27 set ref 55* 56 87* 88
com_err_                        000020 constant        entry                    external dcl 35 ref 60 92
com_err_$suppress_name          000022 constant        entry                    external dcl 35 ref 51 83
control_ptr                     000024 external static pointer                  initial level 2 dcl 1-6 ref 56 67 73 73 88 99
cu_$arg_count                   000014 constant        entry                    external dcl 33 ref 49 81
cu_$arg_ptr                     000016 constant        entry                    external dcl 34 ref 55 87
dont_restore_sw          22            based           bit(1)                   level 3 packed unaligned dcl 1-11 set ref 88*
error_table_$badopt             000012 external static fixed bin(35,0)          dcl 27 set ref 60* 92*
flags                    22            based           structure                level 2 dcl 1-11
ioa_                            000010 constant        entry                    external dcl 21 ref 75
listen_static_data_             000024 external static structure                level 1 dcl 1-6
new_release              12            based           label variable           level 2 dcl 1-11 ref 73
release                   6            based           label variable           level 2 dcl 1-11 ref 67 73
release_all               2            based           label variable           level 2 dcl 1-11 ref 56
start                    16            based           label variable           level 2 dcl 1-11 ref 99
substr                                                 builtin function         dcl 37 ref 59 91
temp_ptr                        000100 automatic       pointer                  dcl 23 set ref 55* 56 56 59 60 87* 88 88 91 92

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
null                                                   builtin function         dcl 37

NAMES DECLARED BY EXPLICIT CONTEXT.
RL_USAGE                        000072 constant        label                    dcl 51 ref 59
SR_USAGE                        000302 constant        label                    dcl 83 ref 91
release                         000054 constant        entry                    external dcl 11
rl                              000045 constant        entry                    external dcl 11
sr                              000223 constant        entry                    external dcl 69
start                           000232 constant        entry                    external dcl 69

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       562         610     435         572
Length      1006     435        26         162     124           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
rl                                   98 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
rl                       000100 temp_ptr                    rl
                         000102 arg_count                   rl
                         000103 arg_length                  rl
                         000104 code                        rl

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              tra_label_var       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      com_err_$suppress_name        cu_$arg_count                 cu_$arg_ptr
ioa_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           listen_static_data_




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000044        49 000061        50 000067        51 000072        52 000121        55 000122        56 000141
     59 000162        60 000166        61 000214        67 000215        69 000222        73 000237        75 000252
     76 000270        81 000271        82 000277        83 000302        84 000331        87 000332        88 000351
     91 000373        92 000377        93 000425        99 000426


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
