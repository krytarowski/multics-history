	COMPILATION LISTING OF SEGMENT probe_display_request_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 11/11/88  1545.7 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 /****^  HISTORY COMMENTS:
       15*  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
       16*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
       17*     Added format control comment to make the source more readable.
       18*                                                   END HISTORY COMMENTS */
       19 
       20 
       21 /* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */
       22 
       23 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       24 
       25 probe_display_request_:
       26   proc (P_probe_info_ptr);
       27 
       28   /* This is the request processor for the display request - the actual work is done by probe_display_data_
       29*   we just check the syntax -
       30*
       31*   Modified 15 Oct 79 JRDavis
       32*   Modified 08 Mar 80 JRDavis to always indirect through constant */
       33   /* Made subscript ranges work 07/23/82 S. Herbst */
       34   /* Changed for new probe_increment_indices_ calling sequence 08/25/83 S. Herbst */
       35   /* Changed to allow expression for the count arg 08/26/83 S. Herbst */
       36   /* Removed heuristic that always interpreted a pointer as an indirection 04/17/85 Steve Herbst */
       37 
       38 
       39   dcl P_probe_info_ptr	ptr aligned parameter;
       40 
       41   dcl indirect		bit (1) aligned;
       42 				/* we should indirect through address supplied */
       43   dcl daddress		ptr;	/* to the place to dump */
       44   dcl dformat		char (32) aligned;
       45 				/* name of format to use */
       46   dcl dunits		fixed bin (35);
       47 				/* how many to dump */
       48 
       49   dcl a_ref_ptr		pointer;
       50   dcl 1 a_ref		aligned like reference_node based (a_ref_ptr);
       51 
       52   dcl 1 (source, target)	aligned like computational_data;
       53 
       54   dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));
       55 
       56   dcl probe_display_data_	entry (ptr, ptr, char (32) aligned, fixed bin,
       57 			fixed bin (35));
       58 
       59   dcl probe_get_$expression	entry (ptr,
       60 			1 structure aligned like reference_node,
       61 			fixed bin (35));
       62   dcl probe_get_$integer	entry (ptr, fixed bin (35), fixed bin (35));
       63   dcl probe_create_reference_ entry (ptr, ptr);
       64   dcl probe_increment_indices_
       65 			entry (bit (1) aligned, (*) fixed bin,
       66 			(2, *) fixed bin (24),
       67 			fixed bin, bit (1) aligned, bit (1) aligned);
       68   dcl stu_$get_runtime_address
       69 			entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr)
       70 			returns (ptr);
       71 
       72   dcl based_ptr		ptr aligned based;
       73   dcl code		fixed bin (35);
       74   dcl identifiers_name	char (ct -> identifier.length)
       75 			based (ct -> identifier.name);
       76 
       77   dcl probe_error_		entry options (variable);
       78   dcl probe_et_$syntax_error	fixed bin (35) external static;
       79 
       80   dcl (addr, null, unspec)	builtin;
       81 
       82 
       83   probe_info_ptr = P_probe_info_ptr;
       84   indirect = "0"b;
       85 
       86   dunits = 1;
       87   dformat = "octal";		/* defaults */
       88 
       89   call probe_create_reference_ (probe_info_ptr, a_ref_ptr);
       90 				/* make a reference node */
       91 
       92   if ct -> token.type >= probe_info.end_token
       93     then call probe_error_ (probe_info_ptr, probe_et_$syntax_error);
       94 				/* no args ! */
       95 
       96   if ct -> token.type = TIMES | ct -> token.type = ARROW |
       97        ct -> token.type = C_INDIRECTION then do;
       98       indirect = "1"b;
       99       ct = ct -> token.next;
      100     end;
      101 
      102   call probe_get_$expression (probe_info_ptr, a_ref, code);
      103   if code ^= 0
      104     then go to SOME_ERROR;
      105 
      106   if indirect
      107     then daddress = a_ref.address_ptr -> based_ptr;
      108     else daddress = a_ref.address_ptr;
      109 
      110   if there_is_more () /* have specified a format */
      111     then do;
      112       if ct -> token.type ^= NAME_TYPE
      113         then goto SYNTAX_ERROR;
      114       dformat = identifiers_name;
      115       ct = ct -> token.next;
      116 
      117       if there_is_more ()
      118         then do;
      119 	call probe_get_$expression (probe_info_ptr, a_ref, code);
      120 	if code ^= 0
      121 	  then go to SOME_ERROR;
      122 	if a_ref.address_ptr = null
      123 	  then go to SYNTAX_ERROR;
      124 
      125 	unspec (source) = "0"b;
      126 	source.address = a_ref.address_ptr;
      127 	source.data_type = a_ref.type;
      128 	source.prec_or_length = a_ref.precision;
      129 
      130 	unspec (target) = "0"b;
      131 	target.address = addr (dunits);
      132 	target.data_type = real_fix_bin_1_dtype;
      133 	target.prec_or_length = 35;
      134 
      135 	call assign_$computational_ (addr (target), addr (source), code);
      136 	if code ^= 0
      137 	  then go to SYNTAX_ERROR;
      138         end;
      139     end;				/* trying for format */
      140 
      141   if there_is_more ()		/* too many args */
      142     then call probe_error_ (probe_info_ptr, probe_et_$syntax_error);
      143 
      144   if probe_info.execute
      145     then
      146          if a_ref.cross_section
      147 	 then call display_cross_section;
      148 	 else call probe_display_data_ (probe_info_ptr, daddress, dformat,
      149 		 (dunits), code);
      150 
      151   if code ^= 0 then do;
      152 SOME_ERROR:
      153       call probe_error_ (probe_info_ptr, code);
      154     end;
      155   return;
      156 
      157 
      158 SYNTAX_ERROR:
      159   call probe_error_ (probe_info_ptr, probe_et_$syntax_error);
      160   return;
      161 
      162 
      163 there_is_more:
      164   proc () returns (bit (1) aligned);
      165   return (ct -> token.type < end_token);
      166   end there_is_more;
      167 
      168 display_cross_section:
      169   proc;
      170 
      171   /* Cycles through the subscript range specified and displays at a pointer
      172*   to each array element. */
      173 
      174   dcl Indices		(16) fixed bin;
      175   dcl (Base_addr, Block_ptr, Linkage_ptr, Psymbp, Stack_ptr)
      176 			ptr;
      177   dcl i			fixed bin;
      178   dcl done		bit (1) aligned;
      179   dcl 1 ref_subscripts	aligned based (a_ref.subscript_ptr)
      180 			like reference_subscripts;
      181 
      182   do i = 1 to ref_subscripts.number;
      183     Indices (i) = ref_subscripts.value (1, i);
      184   end;
      185   Base_addr = a_ref.base_addr;
      186   Block_ptr = a_ref.source_info_ptr -> source_info.block_ptr;
      187   Linkage_ptr =
      188        a_ref.source_info_ptr -> source_info.seg_info_ptr
      189        -> seg_info.linkage_ptr;
      190   Psymbp = a_ref.symbol_ptr;
      191   Stack_ptr = a_ref.source_info_ptr -> source_info.stack_ptr;
      192 
      193   done = "0"b;
      194   do while (^done);
      195     daddress =
      196          stu_$get_runtime_address (Block_ptr, Psymbp, Stack_ptr, Linkage_ptr,
      197          Block_ptr,
      198          Base_addr, addr (Indices));
      199 
      200     call probe_display_data_ (probe_info_ptr, daddress, dformat, (dunits),
      201          code);
      202 
      203     call probe_increment_indices_ ("0"b, Indices, ref_subscripts.value,
      204          ref_subscripts.number,
      205          done, ("0"b));
      206   end;
      207   end display_cross_section;
      208 
  1     1 /*	BEGIN INCLUDE FILE probe_info.incl.pl1		*/
  1     2 
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(88-10-24,WAAnderson), approve(88-10-24,MCR7952),
  1     7*     audit(88-10-24,RWaters), install(88-10-27,MR12.2-1194):
  1     8*     Added field 'retry_using_main' to add new C feature.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 
  1    12 /* Created: 04/22/79 W. Olin Sibert, from subsystem_info	
  1    13*   Modified: 22 Sept 79 JRd to remove: 	default (ptr & (auto|based)) init (null ());
  1    14*   Added flags.setting_break 08/22/83 Steve Herbst
  1    15*   Added flags.executing_quit_request 01/15/85 Steve Herbst
  1    16**/
  1    17 
  1    18 dcl 1 probe_info aligned based (probe_info_ptr),		/* standard data for a probe invocation */
  1    19     2 probe_info_version fixed bin,			/* version of this structure */
  1    20 
  1    21     2 static_info_ptr pointer unaligned,		/* pointer to static information structure */
  1    22     2 modes_ptr pointer unaligned,			/* pointer to probe_modes structure */
  1    23 
  1    24     2 ptr_to_current_source ptr,			/* current_source is based on this */
  1    25     2 ptr_to_initial_source ptr,			/* initial_source is based on this */
  1    26     2 machine_cond_ptr pointer,			/* pointer to machine conditions, if we faulted to get here */
  1    27 
  1    28     2 token_info aligned,				/* information about token chain currently being processed */
  1    29       3 first_token pointer unaligned,			/* first token in chain */
  1    30       3 ct pointer unaligned, 			/* pointer to current token; updated in MANY places */
  1    31       3 end_token bit (18) aligned,			/* token type at which to stop scanning token chain */
  1    32       3 buffer_ptr pointer unaligned,			/* pointer to input buffer */
  1    33       3 buffer_lth fixed bin (21),			/* and length */
  1    34 
  1    35     2 random_info aligned,
  1    36       3 current_stack_frame pointer unaligned,		/* stack frame pointer for frame in which probe was invoked */
  1    37       3 input_type fixed bin, 			/* current input type */
  1    38       3 language_type fixed bin,			/* current language being processed */
  1    39       3 return_method fixed bin,			/* how we should return after exiting probe */
  1    40       3 entry_method fixed bin,			/* how we got here in the first place */
  1    41       3 pad1 (19) bit (36) aligned,
  1    42 
  1    43     2 break_info,					/* break info -- only interesting if we got here via a break */
  1    44       3 break_slot_ptr pointer,			/* pointer to break slot -- non-null IFF at a break */
  1    45       3 last_break_slot_ptr pointer unaligned,		/* pointer to previous break slot, not presently used */
  1    46       3 break_reset bit (1) aligned,			/* this break has been reset by somebody further on */
  1    47       3 real_break_return_loc pointer,			/* where to REALLY return to, modulo previous bit */
  1    48 
  1    49     2 probe_area_info,				/* information about various probe areas */
  1    50       3 break_segment_ptr pointer unaligned,		/* pointer to Personid.probe */
  1    51       3 break_area_ptr pointer unaligned,		/* pointer to area in break segment */
  1    52       3 scratch_area_ptr pointer unaligned,		/* pointer to probe scratch seg in process dir */
  1    53       3 probe_area_ptr pointer unaligned,		/* This area lasts as long as an invocation of probe. */
  1    54       3 work_area_ptr pointer unaligned,		/* This area lasts as long as the current request line */
  1    55       3 expression_area_ptr pointer unaligned,		/* This area lasts as long as the current command */
  1    56 
  1    57     2 flags aligned,				/* this, in particular, should be saved and restored correctly */
  1    58      (3 execute,					/* "1"b => execute requests, "0"b => just check syntax */
  1    59       3 in_listener,				/* ON => in probe listener loop */
  1    60       3 executing_request,				/* ON => executing a request */
  1    61       3 in_interpret_line,				/* executing in probe_listen_$interpret_line */
  1    62       3 setting_break,				/* executing "after" or "before": check syntax of "if" */
  1    63       3 executing_quit_request,			/* to prevent error looping during "quit" request */
  1    64       3 pad (30)) bit (1) unaligned,
  1    65 
  1    66     2 io_switches,					/* switches probe will do normal I/O on */
  1    67       3 input_switch pointer,
  1    68       3 output_switch pointer,
  1    69 
  1    70     2 error_info,					/* information about the last error saved for later printing */
  1    71       3 error_code fixed bin (35),
  1    72       3 error_message char (300) varying,
  1    73 
  1    74     2 listener_info,				/* internal use by probe listener */
  1    75       3 request_name character (32) varying,		/* primary name of the request being processed */
  1    76       3 abort_probe_label label variable,
  1    77       3 abort_line_label label variable,
  1    78       3 depth fixed binary,				/* count of active invocations of probe */
  1    79       3 previous pointer unaligned,			/* -> previous invocation's info */
  1    80       3 next pointer unaligned,
  1    81 
  1    82     2 end_of_probe_info pointer aligned,
  1    83     2 retry_using_main fixed bin aligned;
  1    84    
  1    85 
  1    86 dcl  probe_info_ptr pointer;
  1    87 
  1    88 dcl  probe_info_version fixed bin static options (constant) initial (1);
  1    89 
  1    90 dcl  probe_info_version_1 fixed bin static options (constant) initial (1);
  1    91 
  1    92 dcl  scratch_area area based (probe_info.scratch_area_ptr);
  1    93 dcl  probe_area area based (probe_info.probe_area_ptr);
  1    94 dcl  work_area area based (probe_info.work_area_ptr);
  1    95 dcl  expression_area area based (probe_info.expression_area_ptr);
  1    96 
  1    97 /*	END INCLUDE FILE probe_info.incl.pl1		*/
      209 
      210 
      211   /* ;;;;;;; */
      212 
  2     1 /* BEGIN INCLUDE FILE ... probe_operators.incl.pl1 */
  2     2 
  2     3 
  2     4 
  2     5 /****^  HISTORY COMMENTS:
  2     6*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  2     7*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  2     8*     Added new C operators.
  2     9*                                                   END HISTORY COMMENTS */
  2    10 
  2    11 
  2    12 /* These are the operator.types for each defined operator */
  2    13 /* Modified June 83 JMAthane for PASCAL_ARROW new operator */
  2    14 /* Added PASCAL_RANGE and PASCAL_ASSIGN 07/26/83 S. Herbst */
  2    15 /* Modified April 88 Hinatsu Addition of C types */
  2    16 
  2    17      dcl	   (PLUS		      init ("400001"b3), MINUS init ("400002"b3),
  2    18 	   TIMES		      init ("400003"b3), SLASH init ("400004"b3),
  2    19 	   OR_BAR		      init ("400005"b3), NOT_SIGN init ("400006"b3),
  2    20 	   LESS_THAN	      init ("400007"b3), GREATER_THAN init ("400010"b3),
  2    21 	   EQUALS		      init ("400011"b3), NOT_EQUALS init ("400012"b3),
  2    22 	   NOT_GREATER_THAN	      init ("400013"b3), NOT_LESS_THAN init ("400014"b3),
  2    23 	   PERIOD		      init ("400015"b3), COLON init ("400016"b3),
  2    24 	   AMPERSAND	      init ("400017"b3), PERCENT init ("400020"b3),
  2    25 	   DOLLAR_SIGN	      init ("400021"b3), LEFT_BRACKET init ("400022"b3),
  2    26 	   RIGHT_BRACKET	      init ("400023"b3), ARROW init ("400024"b3),
  2    27 	   COMMA		      init ("400025"b3), QUESTION_MARK init ("400026"b3),
  2    28 	   PASCAL_ARROW	      init ("400027"b3), PASCAL_RANGE init ("400030"b3),
  2    29 	   PASCAL_ASSIGN	      init ("400031"b3),
  2    30 
  2    31 /* Additons to support C types */
  2    32 	   C_LEFT_SHIFT           init ("400032"b3), C_RIGHT_SHIFT init ("400033"b3),
  2    33 
  2    34 /* operator 28 are left for future expansion */
  2    35 
  2    36 	   LEFT_PAREN	      init ("400035"b3), RIGHT_PAREN init ("400036"b3),
  2    37              C_EQUAL                init ("400037"b3), C_NOT_EQUAL init ("400040"b3),
  2    38 	   SEMI_COLON	      init ("400041"b3), NEW_LINE init ("400042"b3),
  2    39 	   C_INDIRECTION          init ("400034"b3)
  2    40 
  2    41 	   )		      bit (18) aligned internal static options (constant);
  2    42 
  2    43      dcl	   OPERATOR_VALUES	      (0:34) char (4) varying internal static options (constant) init
  2    44 			      ("????", "+", "-", "*", "/", "|", "^", "<",
  2    45 			      ">", "=", "^=", "<=", ">=", ".", ":", "&",
  2    46 			      "%", "$", "[", "]", "->", ",", "?", "^",
  2    47 			      "..", ":=", "<<", ">>", "*", "(", ")",
  2    48 			      "==", "!=", ";","
  2    49 ");
  2    50 
  2    51 /* END INCLUDE FILE ... probe_operators.incl.pl1 */
      213 
      214 
      215   /* ;;;;;;; */
      216 
  3     1 /*	BEGIN INCLUDE FILE probe_tokens.incl.pl1	*/
  3     2 /*	Split up into probe_tokens and probe_references, 04/22/79 WOS */
  3     3 
  3     4 dcl 1 token_header aligned based,			/* header information common to all tokens */
  3     5     2 next pointer unaligned,				/* pointer to next token in chain */
  3     6     2 prev pointer unaligned,				/* same for previous token */
  3     7     2 type bit (18) aligned,
  3     8     2 buffer_ptr pointer unaligned,			/* pointer to beginning of input buffer */
  3     9     2 location fixed bin (17) unal,			/* offset in input buffer */
  3    10     2 length fixed bin (17) unal,
  3    11     2 flags aligned,
  3    12      (3 leading_whitespace,				/* there is whitespace before thios token */
  3    13       3 trailing_whitespace) bit (1) unaligned,		/* and same for after */
  3    14       3 pad1 bit (34) unaligned;
  3    15 
  3    16 dcl 1 token aligned based,				/* produced by scan_probe_input_ */
  3    17     2 header aligned like token_header;			/* that's all there is */
  3    18 
  3    19 dcl 1 identifier aligned based,			/* keyword or identifier token */
  3    20     2 header aligned like token_header,
  3    21     2 length fixed bin,				/* length of name */
  3    22     2 name pointer unaligned;				/* to string in buffer containing name */
  3    23 
  3    24 dcl 1 operator aligned based,				/* for punctuation */
  3    25     2 header aligned like token_header;			/* nothing but a header here */
  3    26 
  3    27 dcl 1 constant aligned based,				/* for strings pointers numbers etc */
  3    28     2 header aligned like token_header,
  3    29     2 encoded_precision aligned,			/* encoded precision kludge for assign_ */
  3    30       3 scale fixed bin (17) unaligned,			/* arithmetic scale */
  3    31       3 precision fixed bin (17) unaligned,		/* arithmetic precision or other size */
  3    32     2 scale_and_precision fixed bin (35),		/* An identical copy of the two values above */
  3    33     2 data_type fixed bin,				/* standard data type code + packed bit */
  3    34     2 data_ptr pointer unaligned;
  3    35 
  3    36 
  3    37 dcl (OPERATOR_TYPE init ("100"b),			/* types for above */
  3    38      NAME_TYPE init ("010"b),
  3    39      CONSTANT_TYPE init ("001"b)) bit (18) internal static options (constant);
  3    40 
  3    41 
  3    42 dcl  current_identifier_name				/* Overlays for looking at the current tokens */
  3    43      char (probe_info.ct -> identifier.length) based (probe_info.ct -> identifier.name);
  3    44 dcl 1 current_constant aligned like constant based (probe_info.ct);
  3    45 dcl 1 current_token aligned like token based (probe_info.ct);
  3    46 
  3    47 /*	END INCLUDE FILE probe_tokens.incl.pl1		*/
      217 
      218 
      219   /* ;;;;;;; */
      220 
  4     1 /*	BEGIN INCLUDE FILE probe_references.incl.pl1	*/
  4     2 
  4     3 /****^  HISTORY COMMENTS:
  4     4*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  4     5*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  4     6*     Added new field (c_symbol) for C-Probe support.
  4     7*  2) change(88-10-28,WAAnderson), approve(88-10-28,MCR7952),
  4     8*     audit(88-10-31,RWaters), install(88-11-11,MR12.2-1210):
  4     9*     Added new field (c_sub_c_ptr) for C-Probe_support.
  4    10*                                                   END HISTORY COMMENTS */
  4    11 
  4    12 /*	Split out of probe_tokens, 04/22/79 WOS 	*/
  4    13 /*       modified for probe variables Feb 19 80 JRD         */
  4    14 /*   Modified June 83 JMAthane to add "type_ptr" and "builtin" fields */
  4    15 
  4    16      dcl	   1 reference_node	      aligned based,	/* information about a reference */
  4    17 	     2 symbol_ptr	      pointer aligned,	/* to symbol table entry for reference */
  4    18 	     2 type_ptr	      pointer aligned,	/* to symbol table entry for type (null if none) */
  4    19 	     2 address_ptr	      pointer aligned,	/* to location of variable */
  4    20 	     2 base_addr	      pointer aligned,	/* pointer on which whole symbol is based */
  4    21 	     2 source_info_ptr    pointer aligned,	/* to symbol structure for reference */
  4    22 
  4    23 	     2 name	      char (256) unaligned varying, /* symbol name */
  4    24 
  4    25 	     2 type	      fixed bin (35),	/* data type */
  4    26 	     2 descriptor	      fixed bin (35),	/* type || packed */
  4    27 	     2 precision	      fixed bin (35),	/* scale and precision */
  4    28 	     2 flags,
  4    29 	       3 packed	      bit (1) unal,		/* data is in packed format */
  4    30 	       3 constant	      bit (1) unal,		/* data is really a constant */
  4    31 	       3 cross_section    bit (1) unal,		/* reference is an array cross-section */
  4    32 	       3 function	      bit (1) unal,		/* reference is function value */
  4    33 	       3 octal	      bit (1) unal,		/* indicates that this is the octal bif */
  4    34 	       3 star_extent      bit (1) unal,		/* reference is a star subscript for father */
  4    35 	       3 have_generation  bit (1) unal,		/* this reference has an explicitly specified generation */
  4    36 	       3 pseudo_var	      bit (1) unal,		/* it is ok to assign to it */
  4    37 	       3 probe_variable   bit (1) unal,
  4    38 	       3 path	      bit (1) unal,		/* it's a pathname/virtual entry */
  4    39 	       3 builtin	      bit (1) unal,		/* probe builtinvalue */
  4    40 	       3 c_ptr_to_char    bit (1)  unal,
  4    41                  3 c_sub_c_ptr      bit (1)  unal,
  4    42 	       3 pad2	      bit (23) unal,
  4    43 
  4    44 	     2 optional_info,			/* information which may or may not be present */
  4    45 	       3 argument_list    pointer unaligned,	/* pointer to reference_arg_list */
  4    46 	       3 subscript_ptr    pointer unaligned,	/* pointer to reference_subscripts */
  4    47 	       3 n_arguments      fixed bin,		/* number of arguments in argument list */
  4    48 	       3 n_subscripts     fixed bin,		/* number of subscripts present */
  4    49 
  4    50 	     2 constant_token_ptr pointer unaligned,	/* pointer to constant token if this is a constant */
  4    51 	     2 subscript_refs_ptr pointer unaligned,	/* pointer to array of subscript reference node pointers */
  4    52 	     2 invocation_level   fixed bin,		/* invocation level number ("[-17]") for this reference */
  4    53 	     2 probe_var_info_ptr ptr unal,		/* only if flags.probe_variable */
  4    54                2 c_symbol_ptr  ptr unal,
  4    55 	     2 pad1	      (9) pointer unaligned,
  4    56 	     2 end_of_reference_node pointer aligned;
  4    57 
  4    58 
  4    59      dcl	   1 reference_arg_list   aligned based,	/* argument list; based on reference.argument_list */
  4    60 	     2 number	      fixed bin,		/* number of arguments actually present */
  4    61 	     2 node	      (16) pointer aligned;	/* reference node pointers for each argument */
  4    62 
  4    63 
  4    64      dcl	   1 reference_subscripts aligned based,	/* subscript array; based on reference.subscript_ptr */
  4    65 	     2 number	      fixed bin,		/* number actually present */
  4    66 	     2 value	      (2, 16) fixed bin (24); /* values for lower and upper bound for each */
  4    67 
  4    68 
  4    69      dcl	   1 subscript_reference_ptrs aligned based,	/* array of pointers to subscript reference nodes */
  4    70 	     2 ptr	      (2, 16) pointer aligned;
  4    71 
  4    72 /*	END INCLUDE FILE probe_references.incl.pl1	*/
      221 
      222 
      223   /* ;;;;;;; */
      224 
  5     1 /* BEGIN INCLUDE FILE ... probe_source_info.incl.pl1
  5     2*
  5     3*  James R. Davis 2 July 79 */
  5     4 
  5     5 dcl 1 source_info based aligned,
  5     6       2 stmnt_map_entry_index fixed bin,		/* index in stmnt map for this stmnt */
  5     7       2 instruction_ptr ptr,				/* to last instruction executed  */
  5     8       2 block_ptr ptr,				/* to runtime_block node */
  5     9       2 stack_ptr ptr,				/* to a stack frame */
  5    10       2 entry_ptr ptr,				/* to entry seq. for this proc */
  5    11       2 seg_info_ptr ptr;				/* to seg_info */
  5    12 
  5    13 dcl 1 current_source aligned like source_info based (probe_info.ptr_to_current_source);
  5    14 dcl 1 initial_source aligned like source_info based (probe_info.ptr_to_initial_source);
  5    15 
  5    16 /* END INCLUDE FILE ... probe_source_info.incl.pl1 */
      225 
      226 
      227   /* ;;;;;;; */
      228 
  6     1 /* BEGIN INCLUDE FILE ... probe_seg_info.incl.pl1
  6     2*
  6     3*   25 June 79 JRDavis
  6     4*
  6     5*   Modified  7 April 1983, TO - Add fields for character offset/line
  6     6*	correction per file.
  6     7**/
  6     8 
  6     9 dcl 1 seg_info based aligned,				/* place to remember information about object seg */
  6    10     2 language_type fixed bin,			/* language of source program */
  6    11     2 bits aligned,
  6    12       3 ignore_case bit (1) unal,
  6    13       3 bound_segment bit (1) unaligned,
  6    14       3 component bit (1) unaligned,
  6    15       3 pad bit (33) unal,
  6    16     2 names,					/* where to find it */
  6    17       3 directory_name character (168) unal,		/* what directory */
  6    18       3 entry_name character (32) unal,			/* what segment */
  6    19       3 segname character (32) unal,			/* procedure segname definition */
  6    20     2 identifier fixed bin (71),			/* time of object creation */
  6    21     2 pointers,					/* location of various parts of segment */
  6    22       3 symbol_header_ptr ptr unal,			/* to symbol section */
  6    23       3 original_source_ptr ptr unal,			/* to segment source map */
  6    24       3 statement_map_ptr ptr unal,			/* to segment statement map */
  6    25       3 break_info ptr unal,				/* for unbound segments, and start of chain for
  6    26*						   bound ones, -> break_map !obsolete, I think! */
  6    27       3 chain ptr unal,				/* to entry for next component if bound */
  6    28       3 linkage_ptr ptr unal,				/* to linkage section */
  6    29     2 bounds aligned,				/* structure of bounds information */
  6    30       3 text_bounds,
  6    31         4 start fixed bin (35),
  6    32         4 end fixed bin (35),
  6    33       3 symbol_bounds,
  6    34         4 start fixed bin (35),
  6    35         4 end fixed bin (35),
  6    36     2 map_size fixed bin,				/* size of statement map */
  6    37     2 error_code fixed bin (35),			/* errors encoutered while getting info, are recorded here */
  6    38     2 bound_create_time fixed bin (71),			/* time seg containing was bound or compiled. */
  6    39     2 bound_sym_header ptr unal,			/* to sym. section header for bound seg */
  6    40     2 pad (1) fixed bin (35),
  6    41 
  6    42     2 nfiles fixed bin,
  6    43     2 per_file (seg_info_nfiles refer (seg_info.nfiles)),
  6    44       3 file_pointers ptr unal,
  6    45       3 break_line (0:3) fixed bin (18) unsigned unaligned;
  6    46 
  6    47 dcl  seg_info_nfiles fixed bin;			/* for allocation purposes */
  6    48 
  6    49 
  6    50 /* END INCLUDE FILE ... probe_seg_info.incl.pl1 */
      229 
      230 
      231   /* ;;;;;;; */
      232 
  7     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  7     2 
  7     3 
  7     4 /****^  HISTORY COMMENTS:
  7     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  7     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  7     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  7     8*     Objects of this type are PASCAL string types.
  7     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  7    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  7    11*     Added the new C types.
  7    12*                                                   END HISTORY COMMENTS */
  7    13 
  7    14 /* This include file defines mnemonic names for the Multics
  7    15*   standard descriptor types, using both pl1 and cobol terminology.
  7    16*   PG 780613
  7    17*   JRD 790530
  7    18*   JRD 791016
  7    19*   MBW 810731
  7    20*   TGO 830614 Add hex types.
  7    21*   Modified June 83 JMAthane to add PASCAL data types
  7    22*   TGO 840120 Add float dec extended and generic, float binary generic
  7    23**/
  7    24 
  7    25      dcl	   (real_fix_bin_1_dtype  init (1),
  7    26 	   real_fix_bin_2_dtype   init (2),
  7    27 	   real_flt_bin_1_dtype   init (3),
  7    28 	   real_flt_bin_2_dtype   init (4),
  7    29 	   cplx_fix_bin_1_dtype   init (5),
  7    30 	   cplx_fix_bin_2_dtype   init (6),
  7    31 	   cplx_flt_bin_1_dtype   init (7),
  7    32 	   cplx_flt_bin_2_dtype   init (8),
  7    33 	   real_fix_dec_9bit_ls_dtype init (9),
  7    34 	   real_flt_dec_9bit_dtype init (10),
  7    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  7    36 	   cplx_flt_dec_9bit_dtype init (12),
  7    37 	   pointer_dtype	      init (13),
  7    38 	   offset_dtype	      init (14),
  7    39 	   label_dtype	      init (15),
  7    40 	   entry_dtype	      init (16),
  7    41 	   structure_dtype	      init (17),
  7    42 	   area_dtype	      init (18),
  7    43 	   bit_dtype	      init (19),
  7    44 	   varying_bit_dtype      init (20),
  7    45 	   char_dtype	      init (21),
  7    46 	   varying_char_dtype     init (22),
  7    47 	   file_dtype	      init (23),
  7    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  7    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  7    50 	   real_fix_bin_1_uns_dtype init (33),
  7    51 	   real_fix_bin_2_uns_dtype init (34),
  7    52 	   real_fix_dec_9bit_uns_dtype init (35),
  7    53 	   real_fix_dec_9bit_ts_dtype init (36),
  7    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  7    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  7    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  7    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  7    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  7    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  7    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  7    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  7    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  7    63 	   real_flt_hex_1_dtype   init (47),
  7    64 	   real_flt_hex_2_dtype   init (48),
  7    65 	   cplx_flt_hex_1_dtype   init (49),
  7    66 	   cplx_flt_hex_2_dtype   init (50),
  7    67 	   c_typeref_dtype        init (54),
  7    68 	   c_enum_dtype           init (55),
  7    69              c_enum_const_dtype     init (56),
  7    70 	   c_union_dtype          init (57),
  7    71 	   algol68_straight_dtype init (59),
  7    72 	   algol68_format_dtype   init (60),
  7    73 	   algol68_array_descriptor_dtype init (61),
  7    74 	   algol68_union_dtype    init (62),
  7    75 
  7    76 	   cobol_comp_6_dtype     init (1),
  7    77 	   cobol_comp_7_dtype     init (1),
  7    78 	   cobol_display_ls_dtype init (9),
  7    79 	   cobol_structure_dtype  init (17),
  7    80 	   cobol_char_string_dtype init (21),
  7    81 	   cobol_display_ls_overp_dtype init (29),
  7    82 	   cobol_display_ts_overp_dtype init (30),
  7    83 	   cobol_display_uns_dtype init (35),
  7    84 	   cobol_display_ts_dtype init (36),
  7    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  7    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  7    87 	   cobol_comp_5_uns_dtype init (40),
  7    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  7    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  7    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  7    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  7    92 	   cplx_flt_dec_generic_dtype init (84),
  7    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  7    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  7    95 
  7    96      dcl	   (ft_integer_dtype      init (1),
  7    97 	   ft_real_dtype	      init (3),
  7    98 	   ft_double_dtype	      init (4),
  7    99 	   ft_complex_dtype	      init (7),
  7   100 	   ft_complex_double_dtype init (8),
  7   101 	   ft_external_dtype      init (16),
  7   102 	   ft_logical_dtype	      init (19),
  7   103 	   ft_char_dtype	      init (21),
  7   104 	   ft_hex_real_dtype      init (47),
  7   105 	   ft_hex_double_dtype    init (48),
  7   106 	   ft_hex_complex_dtype   init (49),
  7   107 	   ft_hex_complex_double_dtype init (50)
  7   108 	   )		      fixed bin internal static options (constant);
  7   109 
  7   110      dcl	   (algol68_short_int_dtype init (1),
  7   111 	   algol68_int_dtype      init (1),
  7   112 	   algol68_long_int_dtype init (2),
  7   113 	   algol68_real_dtype     init (3),
  7   114 	   algol68_long_real_dtype init (4),
  7   115 	   algol68_compl_dtype    init (7),
  7   116 	   algol68_long_compl_dtype init (8),
  7   117 	   algol68_bits_dtype     init (19),
  7   118 	   algol68_bool_dtype     init (19),
  7   119 	   algol68_char_dtype     init (21),
  7   120 	   algol68_byte_dtype     init (21),
  7   121 	   algol68_struct_struct_char_dtype init (22),
  7   122 	   algol68_struct_struct_bool_dtype init (20)
  7   123 	   )		      fixed bin internal static options (constant);
  7   124 
  7   125      dcl	   (label_constant_runtime_dtype init (24),
  7   126 	   int_entry_runtime_dtype init (25),
  7   127 	   ext_entry_runtime_dtype init (26),
  7   128 	   ext_procedure_runtime_dtype init (27),
  7   129 	   picture_runtime_dtype  init (63)
  7   130 	   )		      fixed bin internal static options (constant);
  7   131 
  7   132      dcl	   (pascal_integer_dtype  init (1),
  7   133 	   pascal_real_dtype      init (4),
  7   134 	   pascal_label_dtype     init (24),
  7   135 	   pascal_internal_procedure_dtype init (25),
  7   136 	   pascal_exportable_procedure_dtype init (26),
  7   137 	   pascal_imported_procedure_dtype init (27),
  7   138 	   pascal_typed_pointer_type_dtype init (64),
  7   139 	   pascal_char_dtype      init (65),
  7   140 	   pascal_boolean_dtype   init (66),
  7   141 	   pascal_record_file_type_dtype init (67),
  7   142 	   pascal_record_type_dtype init (68),
  7   143 	   pascal_set_dtype	      init (69),
  7   144 	   pascal_enumerated_type_dtype init (70),
  7   145 	   pascal_enumerated_type_element_dtype init (71),
  7   146 	   pascal_enumerated_type_instance_dtype init (72),
  7   147 	   pascal_user_defined_type_dtype init (73),
  7   148 	   pascal_user_defined_type_instance_dtype init (74),
  7   149 	   pascal_text_file_dtype init (75),
  7   150 	   pascal_procedure_type_dtype init (76),
  7   151 	   pascal_variable_formal_parameter_dtype init (77),
  7   152 	   pascal_value_formal_parameter_dtype init (78),
  7   153 	   pascal_entry_formal_parameter_dtype init (79),
  7   154 	   pascal_parameter_procedure_dtype init (80),
  7   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  7   156 
  7   157 
  7   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      233 
      234 
      235   /* ;;;;;;; */
      236 
  8     1 /* BEGIN INCLUDE FILE ... computational_data.incl.pl1
  8     2*
  8     3*   12 July 79 JRDavis */
  8     4 
  8     5 /* this is the format of the structure given to assign_$computational_
  8     6*   that describes the data to be assigned */
  8     7 
  8     8 dcl 1 computational_data 	aligned based,
  8     9       2 address		ptr aligned,	/* to data  */
  8    10       2 data_type		fixed bin (17),	/* standard descriptor type */
  8    11       2 flags		aligned,
  8    12         3 packed		bit (1) unal,
  8    13         3 pad		bit (35) unal,
  8    14       2 prec_or_length	fixed bin (24),	/* string length or arith prec */
  8    15       2 scale		fixed bin (35),	/* must be zero even if has no scale */
  8    16       2 picture_image_ptr	ptr aligned;	/* to picture image block */
  8    17 
  8    18 /* END INCLUDE FILE ... computational_data.incl.pl1 */
      237 
      238 
      239   end probe_display_request_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/88  1545.0  probe_display_request_.pl1        >spec>install>MR12.2-1210>probe_display_request_.pl1
209          1    10/27/88  1339.2  probe_info.incl.pl1               >ldd>include>probe_info.incl.pl1
213          2    10/26/88  1255.5  probe_operators.incl.pl1          >ldd>include>probe_operators.incl.pl1
217          3    11/26/79  1320.6  probe_tokens.incl.pl1             >ldd>include>probe_tokens.incl.pl1
221          4    11/11/88  1543.8  probe_references.incl.pl1         >spec>install>MR12.2-1210>probe_references.incl.pl1
225          5    11/26/79  1320.6  probe_source_info.incl.pl1        >ldd>include>probe_source_info.incl.pl1
229          6    11/02/83  1845.0  probe_seg_info.incl.pl1           >ldd>include>probe_seg_info.incl.pl1
233          7    10/26/88  1255.5  std_descriptor_types.incl.pl1     >ldd>include>std_descriptor_types.incl.pl1
237          8    11/01/79  1612.9  computational_data.incl.pl1       >ldd>include>computational_data.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ARROW                                  constant        bit(18)                  initial dcl 2-17 ref 96
Base_addr                       000200 automatic       pointer                  dcl 175 set ref 185* 195*
Block_ptr                       000202 automatic       pointer                  dcl 175 set ref 186* 195* 195*
C_INDIRECTION                          constant        bit(18)                  initial dcl 2-17 ref 96
Indices                         000160 automatic       fixed bin(17,0)          array dcl 174 set ref 183* 195 195 203*
Linkage_ptr                     000204 automatic       pointer                  dcl 175 set ref 187* 195*
NAME_TYPE                              constant        bit(18)                  initial packed unaligned dcl 3-37 ref 112
P_probe_info_ptr                       parameter       pointer                  dcl 39 ref 25 83
Psymbp                          000206 automatic       pointer                  dcl 175 set ref 190* 195*
Stack_ptr                       000210 automatic       pointer                  dcl 175 set ref 191* 195*
TIMES                                  constant        bit(18)                  initial dcl 2-17 ref 96
a_ref                                  based           structure                level 1 dcl 50 set ref 102* 119*
a_ref_ptr                       000116 automatic       pointer                  dcl 49 set ref 89* 102 106 108 119 122 126 127 128
                                                                                  144 182 183 185 186 187 190 191 203 203
addr                                                   builtin function         dcl 80 ref 131 135 135 135 135 195 195
address                         000120 automatic       pointer                  level 2 in structure "source" dcl 52 in procedure
                                                                                  "probe_display_request_" set ref 126*
address                         000130 automatic       pointer                  level 2 in structure "target" dcl 52 in procedure
                                                                                  "probe_display_request_" set ref 131*
address_ptr               4            based           pointer                  level 2 dcl 50 set ref 106 108 122 126
assign_$computational_          000010 constant        entry                    external dcl 54 ref 135
base_addr                 6            based           pointer                  level 2 dcl 50 set ref 185
based_ptr                              based           pointer                  dcl 72 ref 106
block_ptr                 4            based           pointer                  level 2 dcl 5-5 ref 186
code                            000140 automatic       fixed bin(35,0)          dcl 73 set ref 102* 103 119* 120 135* 136 148* 151
                                                                                  152* 200*
computational_data                     based           structure                level 1 dcl 8-8
constant                               based           structure                level 1 dcl 3-27
cross_section           116(02)        based           bit(1)                   level 3 packed packed unaligned dcl 50 set ref 144
ct                       13            based           pointer                  level 3 packed packed unaligned dcl 1-18 set ref 92
                                                                                  96 96 96 99* 99 112 114 114 115* 115 165
daddress                        000102 automatic       pointer                  dcl 43 set ref 106* 108* 148* 195* 200*
data_type                 2     000120 automatic       fixed bin(17,0)          level 2 in structure "source" dcl 52 in procedure
                                                                                  "probe_display_request_" set ref 127*
data_type                 2     000130 automatic       fixed bin(17,0)          level 2 in structure "target" dcl 52 in procedure
                                                                                  "probe_display_request_" set ref 132*
dformat                         000104 automatic       char(32)                 dcl 44 set ref 87* 114* 148* 200*
done                            000213 automatic       bit(1)                   dcl 178 set ref 193* 194 203*
dunits                          000114 automatic       fixed bin(35,0)          dcl 46 set ref 86* 131 148 200
end_token                14            based           bit(18)                  level 3 dcl 1-18 ref 92 165
execute                  64            based           bit(1)                   level 3 packed packed unaligned dcl 1-18 ref 144
flags                   116            based           structure                level 2 in structure "a_ref" dcl 50 in procedure
                                                                                  "probe_display_request_"
flags                    64            based           structure                level 2 in structure "probe_info" dcl 1-18
                                                                                  in procedure "probe_display_request_"
header                                 based           structure                level 2 dcl 3-16
i                               000212 automatic       fixed bin(17,0)          dcl 177 set ref 182* 183 183*
identifier                             based           structure                level 1 dcl 3-19
identifiers_name                       based           char                     packed unaligned dcl 74 ref 114
indirect                        000100 automatic       bit(1)                   dcl 41 set ref 84* 98* 106
length                    6            based           fixed bin(17,0)          level 2 dcl 3-19 ref 114
linkage_ptr             103            based           pointer                  level 3 packed packed unaligned dcl 6-9 ref 187
name                      7            based           pointer                  level 2 packed packed unaligned dcl 3-19 ref 114
next                                   based           pointer                  level 3 packed packed unaligned dcl 3-16 ref 99 115
null                                                   builtin function         dcl 80 ref 122
number                                 based           fixed bin(17,0)          level 2 dcl 179 set ref 182 203*
optional_info           117            based           structure                level 2 dcl 50
pointers                 76            based           structure                level 2 dcl 6-9
prec_or_length            4     000120 automatic       fixed bin(24,0)          level 2 in structure "source" dcl 52 in procedure
                                                                                  "probe_display_request_" set ref 128*
prec_or_length            4     000130 automatic       fixed bin(24,0)          level 2 in structure "target" dcl 52 in procedure
                                                                                  "probe_display_request_" set ref 133*
precision               115            based           fixed bin(35,0)          level 2 dcl 50 set ref 128
probe_create_reference_         000016 constant        entry                    external dcl 63 ref 89
probe_display_data_             000012 constant        entry                    external dcl 56 ref 148 200
probe_error_                    000024 constant        entry                    external dcl 77 ref 92 141 152 158
probe_et_$syntax_error          000026 external static fixed bin(35,0)          dcl 78 set ref 92* 141* 158*
probe_get_$expression           000014 constant        entry                    external dcl 59 ref 102 119
probe_increment_indices_        000020 constant        entry                    external dcl 64 ref 203
probe_info                             based           structure                level 1 dcl 1-18
probe_info_ptr                  000142 automatic       pointer                  dcl 1-86 set ref 83* 89* 92 92 92* 96 96 96 99 99
                                                                                  102* 112 114 114 115 115 119* 141* 144 148* 152*
                                                                                  158* 165 165 200*
real_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 7-25 ref 132
ref_subscripts                         based           structure                level 1 dcl 179
reference_node                         based           structure                level 1 dcl 4-16
reference_subscripts                   based           structure                level 1 dcl 4-64
seg_info                               based           structure                level 1 dcl 6-9
seg_info_ptr             12            based           pointer                  level 2 dcl 5-5 ref 187
source                          000120 automatic       structure                level 1 dcl 52 set ref 125* 135 135
source_info                            based           structure                level 1 dcl 5-5
source_info_ptr          10            based           pointer                  level 2 dcl 50 set ref 186 187 191
stack_ptr                 6            based           pointer                  level 2 dcl 5-5 ref 191
stu_$get_runtime_address        000022 constant        entry                    external dcl 68 ref 195
subscript_ptr           120            based           pointer                  level 3 packed packed unaligned dcl 50 set ref 182
                                                                                  183 203 203
symbol_ptr                             based           pointer                  level 2 dcl 50 set ref 190
target                          000130 automatic       structure                level 1 dcl 52 set ref 130* 135 135
token                                  based           structure                level 1 dcl 3-16
token_header                           based           structure                level 1 dcl 3-4
token_info               12            based           structure                level 2 dcl 1-18
type                      2            based           bit(18)                  level 3 in structure "token" dcl 3-16 in procedure
                                                                                  "probe_display_request_" ref 92 96 96 96 112 165
type                    113            based           fixed bin(35,0)          level 2 in structure "a_ref" dcl 50 in procedure
                                                                                  "probe_display_request_" set ref 127
unspec                                                 builtin function         dcl 80 set ref 125* 130*
value                     1            based           fixed bin(24,0)          array level 2 dcl 179 set ref 183 203*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
AMPERSAND                              internal static bit(18)                  initial dcl 2-17
COLON                                  internal static bit(18)                  initial dcl 2-17
COMMA                                  internal static bit(18)                  initial dcl 2-17
CONSTANT_TYPE                          internal static bit(18)                  initial packed unaligned dcl 3-37
C_EQUAL                                internal static bit(18)                  initial dcl 2-17
C_LEFT_SHIFT                           internal static bit(18)                  initial dcl 2-17
C_NOT_EQUAL                            internal static bit(18)                  initial dcl 2-17
C_RIGHT_SHIFT                          internal static bit(18)                  initial dcl 2-17
DOLLAR_SIGN                            internal static bit(18)                  initial dcl 2-17
EQUALS                                 internal static bit(18)                  initial dcl 2-17
GREATER_THAN                           internal static bit(18)                  initial dcl 2-17
LEFT_BRACKET                           internal static bit(18)                  initial dcl 2-17
LEFT_PAREN                             internal static bit(18)                  initial dcl 2-17
LESS_THAN                              internal static bit(18)                  initial dcl 2-17
MINUS                                  internal static bit(18)                  initial dcl 2-17
NEW_LINE                               internal static bit(18)                  initial dcl 2-17
NOT_EQUALS                             internal static bit(18)                  initial dcl 2-17
NOT_GREATER_THAN                       internal static bit(18)                  initial dcl 2-17
NOT_LESS_THAN                          internal static bit(18)                  initial dcl 2-17
NOT_SIGN                               internal static bit(18)                  initial dcl 2-17
OPERATOR_TYPE                          internal static bit(18)                  initial packed unaligned dcl 3-37
OPERATOR_VALUES                        internal static varying char(4)          initial array dcl 2-43
OR_BAR                                 internal static bit(18)                  initial dcl 2-17
PASCAL_ARROW                           internal static bit(18)                  initial dcl 2-17
PASCAL_ASSIGN                          internal static bit(18)                  initial dcl 2-17
PASCAL_RANGE                           internal static bit(18)                  initial dcl 2-17
PERCENT                                internal static bit(18)                  initial dcl 2-17
PERIOD                                 internal static bit(18)                  initial dcl 2-17
PLUS                                   internal static bit(18)                  initial dcl 2-17
QUESTION_MARK                          internal static bit(18)                  initial dcl 2-17
RIGHT_BRACKET                          internal static bit(18)                  initial dcl 2-17
RIGHT_PAREN                            internal static bit(18)                  initial dcl 2-17
SEMI_COLON                             internal static bit(18)                  initial dcl 2-17
SLASH                                  internal static bit(18)                  initial dcl 2-17
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 7-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 7-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 7-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 7-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 7-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 7-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 7-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 7-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 7-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 7-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 7-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 7-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 7-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 7-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 7-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 7-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 7-25
bit_dtype                              internal static fixed bin(17,0)          initial dcl 7-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 7-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 7-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 7-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 7-25
char_dtype                             internal static fixed bin(17,0)          initial dcl 7-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 7-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 7-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 7-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 7-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 7-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 7-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 7-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 7-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 7-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 7-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 7-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 7-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 7-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 7-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
current_constant                       based           structure                level 1 dcl 3-44
current_identifier_name                based           char                     packed unaligned dcl 3-42
current_source                         based           structure                level 1 dcl 5-13
current_token                          based           structure                level 1 dcl 3-45
entry_dtype                            internal static fixed bin(17,0)          initial dcl 7-25
expression_area                        based           area(1024)               dcl 1-95
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 7-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 7-125
file_dtype                             internal static fixed bin(17,0)          initial dcl 7-25
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 7-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 7-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 7-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 7-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 7-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 7-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 7-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 7-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 7-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 7-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 7-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 7-96
initial_source                         based           structure                level 1 dcl 5-14
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 7-125
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 7-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 7-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 7-25
operator                               based           structure                level 1 dcl 3-24
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 7-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 7-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 7-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 7-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 7-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 7-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 7-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 7-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 7-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 7-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 7-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 7-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 7-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 7-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 7-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 7-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 7-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 7-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 7-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 7-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 7-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 7-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 7-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 7-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 7-125
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 7-25
probe_area                             based           area(1024)               dcl 1-93
probe_get_$integer              000000 constant        entry                    external dcl 62
probe_info_version                     internal static fixed bin(17,0)          initial dcl 1-88
probe_info_version_1                   internal static fixed bin(17,0)          initial dcl 1-90
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 7-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 7-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 7-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 7-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 7-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 7-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 7-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 7-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 7-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 7-25
reference_arg_list                     based           structure                level 1 dcl 4-59
scratch_area                           based           area(1024)               dcl 1-92
seg_info_nfiles                        automatic       fixed bin(17,0)          dcl 6-47
structure_dtype                        internal static fixed bin(17,0)          initial dcl 7-25
subscript_reference_ptrs               based           structure                level 1 dcl 4-69
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 7-25
varying_char_dtype                     internal static fixed bin(17,0)          initial dcl 7-25
work_area                              based           area(1024)               dcl 1-94

NAMES DECLARED BY EXPLICIT CONTEXT.
SOME_ERROR                      000341 constant        label                    dcl 152 ref 103 120
SYNTAX_ERROR                    000357 constant        label                    dcl 158 ref 112 122 136
display_cross_section           000407 constant        entry                    internal dcl 168 ref 144
probe_display_request_          000026 constant        entry                    external dcl 25
there_is_more                   000375 constant        entry                    internal dcl 163 ref 110 117 141

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       732         762     572         742
Length      1332     572        30         334     137           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
probe_display_request_              222 external procedure  is an external procedure.  
there_is_more                           internal procedure  shares stack frame of external procedure probe_display_request_.  
display_cross_section                   internal procedure  shares stack frame of external procedure probe_display_request_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
probe_display_request_   000100 indirect                    probe_display_request_
                         000102 daddress                    probe_display_request_
                         000104 dformat                     probe_display_request_
                         000114 dunits                      probe_display_request_
                         000116 a_ref_ptr                   probe_display_request_
                         000120 source                      probe_display_request_
                         000130 target                      probe_display_request_
                         000140 code                        probe_display_request_
                         000142 probe_info_ptr              probe_display_request_
                         000160 Indices                     display_cross_section
                         000200 Base_addr                   display_cross_section
                         000202 Block_ptr                   display_cross_section
                         000204 Linkage_ptr                 display_cross_section
                         000206 Psymbp                      display_cross_section
                         000210 Stack_ptr                   display_cross_section
                         000212 i                           display_cross_section
                         000213 done                        display_cross_section

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_l_s               call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
assign_$computational_        probe_create_reference_       probe_display_data_           probe_error_
probe_get_$expression         probe_increment_indices_      stu_$get_runtime_address

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
probe_et_$syntax_error




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 000023        83 000033        84 000037        86 000040        87 000042        89 000045        92 000055
     96 000100        98 000112        99 000114       102 000117       103 000132       106 000134       108 000143
    110 000146       112 000153       114 000160       115 000165       117 000170       119 000175       120 000210
    122 000212       125 000217       126 000222       127 000224       128 000226       130 000230       131 000233
    132 000235       133 000237       135 000241       136 000260       141 000262       144 000304       148 000316
    151 000337       152 000341       155 000356       158 000357       160 000374       163 000375       165 000377
    168 000407       182 000410       183 000421       184 000426       185 000430       186 000433       187 000437
    190 000442       191 000445       193 000447       194 000450       195 000453       200 000502       203 000523
    206 000563       207 000564


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
