	COMPILATION LISTING OF SEGMENT create_block
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1405.3 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /*	This procedure allocates and initializes a block node.
       12*
       13*	Modified on:	10 August 1970 by P. Green for Version II
       14*	Modified on:	30 October 1970 by PG for updated node format
       15*	Modified on:	 5 January 1971 by BLW for updated node format
       16*	Modified on:	1 July 1971 by JDM for these changes to the block node:
       17*			   1) descriptors_used replaced by filler_field
       18*			   2) max_arg_no replaced by filler
       19*			   3) max_par_no replaced by filler1
       20*			   4) last_temp replaced by entry_info
       21*	Modified on:	22 September 1971 by PAB to add IO items to node
       22*	Modified on:	11 February 1977 to add text_displayed bit
       23*	Modified on:	April 1977 by RHS for new allocation methods
       24*	Modified on:	April 3 1977 by P.Green to tell why blocks are non-quick
       25*	Modified on:	22 Ocober 1980 by M. N. Davidoff to diagnose block.number too big; fixes 1960.
       26**/
       27 /* format: style3 */
       28 create_block:
       29      procedure (type, father) returns (ptr);
       30 
       31 dcl	type		bit (9) aligned;
       32 dcl	father		ptr;
       33 
       34 /* automatic */
       35 
       36 dcl	p		ptr;
       37 dcl	q		ptr;
       38 
       39 /* builtin */
       40 
       41 dcl	(char, ltrim, null) builtin;
       42 
       43 /* external static */
       44 
       45 dcl	1 pl1_nodes_template_$block_template
       46 			aligned like block external static;
       47 dcl	pl1_stat_$node_uses (32) fixed bin external static;
       48 dcl	1 pl1_stat_$statement_id
       49 			external static,
       50 	  2 file_number	bit (8),
       51 	  2 line_number	bit (14),
       52 	  2 statement_number
       53 			bit (5);
       54 
  1     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  1     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  1     3 /* format: style3,idind30 */
  1     4 
  1     5 declare	1 block			aligned based,
  1     6 	  2 node_type		bit (9) unaligned,
  1     7 	  2 source_id		structure unaligned,
  1     8 	    3 file_number		bit (8),
  1     9 	    3 line_number		bit (14),
  1    10 	    3 statement_number	bit (5),
  1    11 	  2 father		ptr unaligned,
  1    12 	  2 brother		ptr unaligned,
  1    13 	  2 son			ptr unaligned,
  1    14 	  2 declaration		ptr unaligned,
  1    15 	  2 end_declaration		ptr unaligned,
  1    16 	  2 default		ptr unaligned,
  1    17 	  2 end_default		ptr unaligned,
  1    18 	  2 context		ptr unaligned,
  1    19 	  2 prologue		ptr unaligned,
  1    20 	  2 end_prologue		ptr unaligned,
  1    21 	  2 main			ptr unaligned,
  1    22 	  2 end_main		ptr unaligned,
  1    23 	  2 return_values		ptr unaligned,
  1    24 	  2 return_count		ptr unaligned,
  1    25 	  2 plio_ps		ptr unaligned,
  1    26 	  2 plio_fa		ptr unaligned,
  1    27 	  2 plio_ffsb		ptr unaligned,
  1    28 	  2 plio_ssl		ptr unaligned,
  1    29 	  2 plio_fab2		ptr unaligned,
  1    30 	  2 block_type		bit (9) unaligned,
  1    31 	  2 prefix		bit (12) unaligned,
  1    32 	  2 like_attribute		bit (1) unaligned,
  1    33 	  2 no_stack		bit (1) unaligned,
  1    34 	  2 get_data		bit (1) unaligned,
  1    35 	  2 flush_at_call		bit (1) unaligned,
  1    36 	  2 processed		bit (1) unaligned,
  1    37 	  2 text_displayed		bit (1) unaligned,
  1    38 	  2 number		fixed bin (9) unsigned unaligned,
  1    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  1    40 	  2 temp_list		ptr,
  1    41 	  2 entry_list		ptr,
  1    42 	  2 o_and_s		ptr,
  1    43 	  2 why_nonquick		aligned,
  1    44 	    3 auto_adjustable_storage bit (1) unaligned,
  1    45 	    3 returns_star_extents	bit (1) unaligned,
  1    46 	    3 stack_extended_by_args	bit (1) unaligned,
  1    47 	    3 invoked_by_format	bit (1) unaligned,
  1    48 	    3 format_statement	bit (1) unaligned,
  1    49 	    3 io_statements		bit (1) unaligned,
  1    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  1    51 	    3 condition_statements	bit (1) unaligned,
  1    52 	    3 no_owner		bit (1) unaligned,
  1    53 	    3 recursive_call	bit (1) unaligned,
  1    54 	    3 options_non_quick	bit (1) unaligned,
  1    55 	    3 options_variable	bit (1) unaligned,
  1    56 	    3 never_referenced	bit (1) unaligned,
  1    57 	    3 pad_nonquick		bit (5) unaligned,
  1    58 	  2 prologue_flag		bit (1) unaligned,
  1    59 	  2 options_main		bit (1) unaligned,
  1    60 	  2 pad			bit (16) unaligned,
  1    61 	  2 number_of_entries	fixed bin (17),
  1    62 	  2 level			fixed bin (17),
  1    63 	  2 last_auto_loc		fixed bin (17),
  1    64 	  2 symbol_block		fixed bin (17),
  1    65 	  2 entry_info		fixed bin (18),
  1    66 	  2 enter			structure unaligned,
  1    67 	    3 start		fixed bin (17),
  1    68 	    3 end			fixed bin (17),
  1    69 	  2 leave			structure unaligned,
  1    70 	    3 start		fixed bin (17),
  1    71 	    3 end			fixed bin (17),
  1    72 	  2 owner			ptr;
  1    73 
  1    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  1    75 
  1    76 /* END INCLUDE FILE ... block.incl.pl1 */
       55 
  2     1 dcl (	root_block		initial("000000001"b),
  2     2 	external_procedure		initial("000000010"b),
  2     3 	internal_procedure		initial("000000011"b),
  2     4 	begin_block		initial("000000100"b),
  2     5 	on_unit			initial("000000101"b))  internal static bit(9) aligned options(constant);
       56 
  3     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  3     2 
  3     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  3     4 
  3     5 dcl (	block_node		initial("000000001"b),
  3     6 	statement_node		initial("000000010"b),
  3     7 	operator_node		initial("000000011"b),
  3     8 	reference_node		initial("000000100"b),
  3     9 	token_node		initial("000000101"b),
  3    10 	symbol_node		initial("000000110"b),
  3    11 	context_node		initial("000000111"b),
  3    12 	array_node		initial("000001000"b),
  3    13 	bound_node		initial("000001001"b),
  3    14 	format_value_node		initial("000001010"b),
  3    15 	list_node			initial("000001011"b),
  3    16 	default_node		initial("000001100"b),
  3    17 	machine_state_node		initial("000001101"b),
  3    18 	source_node		initial("000001110"b),
  3    19 	label_node		initial("000001111"b),
  3    20 	cross_reference_node	initial("000010000"b),
  3    21 	sf_par_node		initial("000010001"b),
  3    22 	temporary_node		initial("000010010"b),
  3    23 	label_array_element_node	initial("000010011"b),
  3    24 	by_name_agg_node		initial("000010100"b))
  3    25 				bit(9) internal static aligned options(constant);
  3    26 
  3    27 dcl	1 node			based aligned,
  3    28 	2 type			unal bit(9),
  3    29 	2 source_id		unal structure,
  3    30 	  3 file_number		bit(8),
  3    31 	  3 line_number		bit(14),
  3    32 	  3 statement_number	bit(5);
  3    33 
  3    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       57 
  4     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  4     2 
  4     3 /* format: style3 */
  4     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  4     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  4     6 
  4     7 dcl	pl1_stat_$tree_area_ptr
  4     8 			ptr ext static,
  4     9 	pl1_stat_$xeq_tree_area_ptr
  4    10 			ptr ext static;
  4    11 
  4    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       58 
  5     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
  5     2 
  5     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
  5     4 	identifier	initial("100000000"b),
  5     5 	isub		initial("010000000"b),
  5     6 	plus		initial("001000001"b),
  5     7 	minus		initial("001000010"b),
  5     8 	asterisk		initial("001000011"b),
  5     9 	slash		initial("001000100"b),
  5    10 	expon		initial("001000101"b),
  5    11 	not		initial("001000110"b),
  5    12 	and		initial("001000111"b),
  5    13 	or		initial("001001000"b),
  5    14 	cat		initial("001001001"b),
  5    15 	eq		initial("001001010"b),
  5    16 	ne		initial("001001011"b),
  5    17 	lt		initial("001001100"b),
  5    18 	gt		initial("001001101"b),
  5    19 	le		initial("001001110"b),
  5    20 	ge		initial("001001111"b),
  5    21 	ngt		initial("001010000"b),
  5    22 	nlt		initial("001010001"b),
  5    23 	assignment	initial("001010010"b),
  5    24 	colon		initial("001010011"b),
  5    25 	semi_colon	initial("001010100"b),
  5    26 	comma		initial("001010101"b),
  5    27 	period		initial("001010110"b),
  5    28 	arrow		initial("001010111"b),
  5    29 	left_parn		initial("001011000"b),
  5    30 	right_parn	initial("001011001"b),
  5    31 	percent		initial("001011100"b),
  5    32 	bit_string	initial("000100001"b),
  5    33 	char_string	initial("000100010"b),
  5    34 	bin_integer	initial("000110001"b),
  5    35 	dec_integer	initial("000110011"b),
  5    36 	fixed_bin		initial("000110000"b),
  5    37 	fixed_dec		initial("000110010"b),
  5    38 	float_bin		initial("000110100"b),
  5    39 	float_dec		initial("000110110"b),
  5    40 	i_bin_integer	initial("000111001"b),
  5    41 	i_dec_integer	initial("000111011"b),
  5    42 	i_fixed_bin	initial("000111000"b),
  5    43 	i_fixed_dec	initial("000111010"b),
  5    44 	i_float_bin	initial("000111100"b),
  5    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
  5    46 
  5    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
  5    48 	is_isub			initial ("010000000"b),
  5    49 	is_delimiter		initial ("001000000"b),
  5    50 	is_constant		initial ("000100000"b),
  5    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
  5    52 	is_arithmetic_constant	initial ("000110000"b),
  5    53 	is_imaginary_constant	initial ("000111000"b),
  5    54 	is_float_constant		initial ("000110100"b),
  5    55 	is_decimal_constant		initial ("000110010"b),
  5    56 	is_integral_constant 	initial ("000110001"b)
  5    57 	) bit(9) internal static aligned options(constant);
  5    58 
  5    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       59 
  6     1 /****^  *********************************************************
  6     2*        *                                                       *
  6     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  6     4*        *                                                       *
  6     5*        ********************************************************* */
  6     6 
  6     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  6     8 
  6     9 
  6    10 /****^  HISTORY COMMENTS:
  6    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  6    12*     install(89-07-31,MR12.3-1066):	
  6    13*     Removed the obsolete parameter source_line from the dcl of error_().
  6    14*                                                   END HISTORY COMMENTS */
  6    15 
  6    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  6    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  6    18* */
  6    19 
  6    20 declare	adjust_count	entry(pointer);
  6    21 			/* parameter 1:	(input)	any node pointer		*/
  6    22 
  6    23 declare	bindec		entry(fixed bin(31)) reducible
  6    24 			returns(character(12) aligned);
  6    25 			/* parameter 1:	(input)	bin value			*/
  6    26 			/* return:	(output)	character value with blanks	*/
  6    27 
  6    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  6    29 			returns(character(12) aligned varying);
  6    30 			/* parameter 1:	(input)	binary value		*/
  6    31 			/* return:	(output)	char value without blanks	*/
  6    32 
  6    33 declare	binoct		entry(fixed bin(31)) reducible
  6    34 			returns(char(12) aligned);
  6    35 			/* parameter 1:	(input)	binary value		*/
  6    36 			/* return:	(output)	char value with blanks	*/
  6    37 
  6    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  6    39 			returns(char(12) aligned);
  6    40 			/* parameter 1:	(input)	binary value		*/
  6    41 			/* return:	(output)	right-aligned char value	*/
  6    42 
  6    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  6    44 			returns(char(12) varying aligned);
  6    45 			/* parameter 1:	(input)	binary value		*/
  6    46 			/* returns:	(output)	char value without blanks	*/
  6    47 
  6    48 declare	compare_expression	entry(pointer,pointer) reducible
  6    49 			returns(bit(1) aligned);
  6    50 			/* parameter 1:	(input)	any node pointer		*/
  6    51 			/* parameter 2:	(input)	any node pointer		*/
  6    52 			/* return:	(output)	compare bit		*/
  6    53 
  6    54 declare	constant_length	entry (pointer, fixed bin (71))
  6    55 			returns (bit (1) aligned);
  6    56 			/* parameter 1:	(input)	reference node pointer	*/
  6    57 			/* parameter 2:	(input)	value of constant length	*/
  6    58 			/* return:	(output)	"1"b if constant length	*/
  6    59 
  6    60 declare	convert		entry(pointer,bit(36) aligned)
  6    61 			returns(pointer);
  6    62 			/* parameter 1:	(input)	any node pointer		*/
  6    63 			/* parameter 2:	(input)	target type		*/
  6    64 			/* return:	(output)	target value tree pointer	*/
  6    65 
  6    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  6    67 			returns(pointer);
  6    68 			/* parameter 1:	(input)	any node pointer		*/
  6    69 			/* parameter 2:	(input)	target type		*/
  6    70 			/* return:	(output)	target value tree pointer	*/
  6    71 
  6    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  6    73 			returns(pointer);
  6    74 			/* parameter 1:	(input)	any node pointer		*/
  6    75 			/* parameter 2:	(input)	target type		*/
  6    76 			/* return:	(output)	target value tree pointer	*/
  6    77 
  6    78 declare	convert$validate	entry(pointer,pointer);
  6    79 			/* parameter 1:	(input)	source value tree pointer	*/
  6    80 			/* parameter 2:	(input)	target reference node pointer	*/
  6    81 
  6    82 declare	convert$to_target_fb entry(pointer,pointer)
  6    83 			returns(pointer);
  6    84 			/* parameter 1:	(input)	source value tree pointer	*/
  6    85 			/* parameter 2:	(input)	target reference node pointer	*/
  6    86 			/* return:	(output)	target value tree pointer	*/
  6    87 
  6    88 declare	convert$to_target	entry(pointer,pointer)
  6    89 			returns(pointer);
  6    90 			/* parameter 1:	(input)	source value tree pointer	*/
  6    91 			/* parameter 2:	(input)	target reference node pointer	*/
  6    92 			/* return:	(output)	target value tree pointer	*/
  6    93 
  6    94 declare	copy_expression	entry(pointer unaligned)
  6    95 			returns(pointer);
  6    96 			/* parameter 1:	(input)	any node pointer		*/
  6    97 			/* return:	(output)	any node pointer		*/
  6    98 
  6    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  6   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  6   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  6   102 
  6   103 declare	copy_unique_expression entry(pointer)
  6   104 			returns(pointer);
  6   105 			/* parameter 1:	(input)	any node pointer		*/
  6   106 			/* return:	(output)	any node pointer		*/
  6   107 
  6   108 declare	create_array	entry()
  6   109 			returns(pointer);
  6   110 			/* return:	(output)	array node pointer		*/
  6   111 
  6   112 declare	create_block	entry(bit(9) aligned,pointer)
  6   113 			returns(pointer);
  6   114 			/* parameter 1:	(input)	block type		*/
  6   115 			/* parameter 2:	(input)	father block node pointer	*/
  6   116 			/* return:	(output)	block node pointer		*/
  6   117 
  6   118 declare	create_bound	entry()
  6   119 			returns(pointer);
  6   120 			/* return:	(output)	bound node pointer		*/
  6   121 
  6   122 declare	create_context	entry(pointer,pointer)
  6   123 			returns(pointer);
  6   124 			/* parameter 1:	(input)	block node pointer		*/
  6   125 			/* parameter 2:	(input)	token pointer		*/
  6   126 			/* return:	(output)	context node pointer	*/
  6   127 
  6   128 declare	create_cross_reference entry()
  6   129 			returns(pointer);
  6   130 			/* return:	(output)	cross reference node pointer	*/
  6   131 
  6   132 declare	create_default	entry
  6   133 			returns(pointer);
  6   134 			/* return:	(output)	default node pointer	*/
  6   135 
  6   136 declare	create_identifier	entry()
  6   137 			returns(pointer);
  6   138 			/* return:	(output)	token node pointer		*/
  6   139 
  6   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  6   141 			returns(pointer);
  6   142 			/* parameter 1:	(input)	block node pointer		*/
  6   143 			/* parameter 2:	(input)	token node pointer		*/
  6   144 			/* parameter 3:	(input)	declare type		*/
  6   145 			/* return:	(output)	label node pointer		*/
  6   146 
  6   147 declare	create_list	entry(fixed bin(15))
  6   148 			returns(pointer);
  6   149 			/* parameter 1:	(input)	number of list elements	*/
  6   150 			/* return:	(output)	list node pointer		*/
  6   151 
  6   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  6   153 			returns(pointer);
  6   154 			/* parameter 1:	(input)	operator type		*/
  6   155 			/* parameter 2:	(input)	number of operands		*/
  6   156 			/* return:	(output)	operator node pointer	*/
  6   157 
  6   158 declare	create_reference	entry(pointer)
  6   159 			returns(pointer);
  6   160 			/* parameter 1:	(input)	symbol node pointer		*/
  6   161 			/* return:	(output)	reference node pointer	*/
  6   162 
  6   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  6   164 			returns(pointer);
  6   165 			/* parameter 1:	(input)	statement type		*/
  6   166 			/* parameter 2:	(input)	block node pointer		*/
  6   167 			/* parameter 3:	(input)	label node pointer		*/
  6   168 			/* parameter 4:	(input)	conditions		*/
  6   169 			/* return:	(output)	statement node pointer	*/
  6   170 
  6   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  6   172 			returns(pointer);
  6   173 			/* parameter 1:	(input)	statement type		*/
  6   174 			/* parameter 2:	(input)	block node pointer		*/
  6   175 			/* parameter 3:	(input)	label node pointer		*/
  6   176 			/* parameter 4:	(input)	conditions		*/
  6   177 			/* return:	(output)	statement node pointer	*/
  6   178 
  6   179 declare	create_storage	entry(fixed bin(15))
  6   180 			returns(pointer);
  6   181 			/* parameter 1:	(input)	number of words		*/
  6   182 			/* return:	(output)	storage block pointer	*/
  6   183 
  6   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  6   185 			returns(pointer);
  6   186 			/* parameter 1:	(input)	block node pointer		*/
  6   187 			/* parameter 2:	(input)	token node pointer		*/
  6   188 			/* parameter 3:	(input)	declare type		*/
  6   189 			/* return:	(output)	symbol node pointer		*/
  6   190 
  6   191 declare	create_token	entry (character (*), bit (9) aligned)
  6   192 			returns (ptr);
  6   193 			/* parameter 1:	(input)	token string		*/
  6   194 			/* parameter 2:	(input)	token type		*/
  6   195 			/* return:	(output)	token node ptr		*/
  6   196 
  6   197 declare	create_token$init_hash_table entry ();
  6   198 
  6   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  6   200 			returns (ptr);
  6   201 			/* parameter 1:	(input)	token string		*/
  6   202 			/* parameter 2:	(input)	token type		*/
  6   203 			/* parameter 3:	(input)	protected flag		*/
  6   204 			/* return:	(output)	token node ptr		*/
  6   205 
  6   206 declare	decbin		entry(character(*) aligned) reducible
  6   207 			returns(fixed bin(31));
  6   208 			/* parameter 1:	(input)	decimal character string	*/
  6   209 			/* return:	(output)	binary value		*/
  6   210 
  6   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  6   212 			returns(pointer);
  6   213 			/* parameter 1:	(input)	value			*/
  6   214 			/* parameter 2:	(input)	type			*/
  6   215 			/* parameter 3:	(input)	size			*/
  6   216 			/* parameter 4:	(input)	scale			*/
  6   217 			/* return:	(output)	reference node pointer	*/
  6   218 
  6   219 declare	declare_constant$bit entry(bit(*) aligned)
  6   220 			returns(pointer);
  6   221 			/* parameter 1:	(input)	bit			*/
  6   222 			/* return:	(output)	reference node pointer	*/
  6   223 
  6   224 declare	declare_constant$char entry(character(*) aligned)
  6   225 			returns(pointer);
  6   226 			/* parameter 1:	(input)	character			*/
  6   227 			/* return:	(output)	reference node pointer	*/
  6   228 
  6   229 declare	declare_constant$desc entry(bit(*) aligned)
  6   230 			returns(pointer);
  6   231 			/* parameter 1:	(input)	descriptor bit value	*/
  6   232 			/* return:	(output)	reference node pointer	*/
  6   233 
  6   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  6   235 			returns(pointer);
  6   236 			/* parameter 1:	(input)	integer			*/
  6   237 			/* return:	(output)	reference node pointer	*/
  6   238 
  6   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   240 			returns(pointer);
  6   241 			/* parameter 1:	(input)	block node pointer		*/
  6   242 			/* parameter 2:	(input)	statement node pointer	*/
  6   243 			/* parameter 3:	(input)	symbol node pointer		*/
  6   244 			/* parameter 4:	(input)	loc pointer		*/
  6   245 			/* parameter 5:	(input)	array descriptor bit
  6   246*						cross_section bit	*/
  6   247 			/* return:	(output)	reference node pointer	*/
  6   248 
  6   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   250 			returns(pointer);
  6   251 			/* parameter 1:	(input)	block node pointer	*/
  6   252 			/* parameter 2:	(input)	statement node pointer 	*/
  6   253 			/* parameter 3:	(input)	symbol node pointer	*/
  6   254 			/* parameter 4:	(input)	loc pointer	*/
  6   255 			/* parameter 5:	(input)	array descriptor bit
  6   256*						cross_section bit	*/
  6   257 			/* return:	(output)	reference node pointer	*/
  6   258 
  6   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   260 			returns(pointer);
  6   261 			/* parameter 1:	(input)	block node pointer		*/
  6   262 			/* parameter 2:	(input)	statement node pointer	*/
  6   263 			/* parameter 3:	(input)	symbol node pointer		*/
  6   264 			/* parameter 4:	(input)	loc pointer		*/
  6   265 			/* parameter 5:	(input)	array descriptor bit
  6   266*						cross_section bit	*/
  6   267 			/* return:	(output)	reference node pointer	*/
  6   268 
  6   269 declare	declare_integer	entry(pointer)
  6   270 			returns(pointer);
  6   271 			/* parameter 1:	(input)	block node pointer		*/
  6   272 			/* return:	(output)	reference node pointer 	*/
  6   273 
  6   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  6   275 			/* parameter 1:	(input)	picture string		*/
  6   276 			/* parameter 2:	(input)	symbol node pointer		*/
  6   277 			/* parameter 3:	(output)	error code, if any		*/
  6   278 
  6   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  6   280 			returns(pointer);
  6   281 			/* parameter 1:	(input)	picture string		*/
  6   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  6   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  6   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  6   285 			/* return:	(output)	reference node pointer	*/
  6   286 
  6   287 declare	declare_pointer	entry(pointer)
  6   288 			returns(pointer);
  6   289 			/* parameter 1:	(input)	block node pointer		*/
  6   290 			/* return:	(output)	reference node pointer	*/
  6   291 
  6   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  6   293 			returns(pointer);
  6   294 			/* parameter 1:	(input)	type			*/
  6   295 			/* parameter 2:	(input)	precision			*/
  6   296 			/* parameter 3:	(input)	scale			*/
  6   297 			/* parameter 4:	(input)	length			*/
  6   298 			/* return:	(output)	reference node pointer	*/
  6   299 
  6   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  6   301 			returns(char(120) varying);
  6   302 			/* parameter 1:	(input)	node pointer		*/
  6   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  6   304 			/* return:	(output)	source line id		*/
  6   305 
  6   306 declare	decode_source_id	entry(
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  6   307 
  6   308 			bit(1) aligned)
  6   309 			returns(char(120) varying);
  6   310 			/* parameter 1:	(input)	source id			*/
  6   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  6   312 			/* return:	(output)	source line id		*/
  6   313 
  6   314 declare	error		entry(fixed bin(15),pointer,pointer);
  6   315 			/* parameter 1:	(input)	error number		*/
  6   316 			/* parameter 2:	(input)	statement node pointer or null*/
  6   317 			/* parameter 3:	(input)	token node pointer 		*/
  6   318 
  6   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  6   320 			/* parameter 1:	(input)	error number		*/
  6   321 			/* parameter 2:	(input)	statement node pointer or null*/
  6   322 			/* parameter 3:	(input)	token node pointer 		*/
  6   323 
  6   324 declare	error_		entry(fixed bin(15),
  8     1 			1 structure unaligned,
  8     2 			  2 /* file_number */	bit(8),
  8     3 			  2 /* line_number */	bit(14),
  8     4 			  2 /* stmt_number */	bit(5),
  6   325 
  6   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  6   327 			/* parameter 1:	(input)	error number		*/
  6   328 			/* parameter 2:	(input)	statement id		*/
  6   329 			/* parameter 3:	(input)	any node pointer		*/
  6   330 			/* parameter 4:	(input)	source segment		*/
  6   331 			/* parameter 5:	(input)	source starting character	*/
  6   332 			/* parameter 6:	(input)	source length		*/
  6   333 
  6   334 declare	error_$no_text	entry(fixed bin(15),
  9     1 			1 structure unaligned,
  9     2 			  2 /* file_number */	bit(8),
  9     3 			  2 /* line_number */	bit(14),
  9     4 			  2 /* stmt_number */	bit(5),
  6   335 
  6   336 			pointer);
  6   337 			/* parameter 1:	(input)	error number		*/
  6   338 			/* parameter 2:	(input)	statement id		*/
  6   339 			/* parameter 3:	(input)	any node pointer		*/
  6   340 
  6   341 declare	error_$initialize_error entry();
  6   342 
  6   343 declare	error_$finish	entry();
  6   344 
  6   345 declare	free_node		entry(pointer);
  6   346 			/* parameter 1:	any node pointer			*/
  6   347 
  6   348 declare	get_array_size	entry(pointer,fixed bin(3));
  6   349 			/* parameter 1:	(input)	symbol node pointer		*/
  6   350 			/* parameter 2:	(input)	units			*/
  6   351 
  6   352 declare	get_size		entry(pointer);
  6   353 			/* parameter 1:	(input)	symbol node pointer		*/
  6   354 
  6   355 declare	merge_attributes	external entry(pointer,pointer)
  6   356 			returns(bit(1) aligned);
  6   357 			/* parameter 1:	(input)	target symbol node pointer */
  6   358 			/* parameter 2:	(input)	source symbol node pointer */
  6   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  6   360 
  6   361 declare	optimizer		entry(pointer);
  6   362 			/* parameter 1:	(input)	root pointer		*/
  6   363 
  6   364 declare	parse_error	entry(fixed bin(15),pointer);
  6   365 			/* parameter 1:	(input)	error number		*/
  6   366 			/* parameter 2:	(input)	any node pointer		*/
  6   367 
  6   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  6   369 			/* parameter 1:	(input)	error number		*/
  6   370 			/* parameter 2:	(input)	any node pointer		*/
  6   371 
  6   372 declare	pl1_error_print$write_out
  6   373 			entry(fixed bin(15),
 10     1 			1 structure unaligned,
 10     2 			  2 /* file_number */	bit(8),
 10     3 			  2 /* line_number */	bit(14),
 10     4 			  2 /* stmt_number */	bit(5),
  6   374 
  6   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  6   376 			/* parameter 1:	(input)	error number		*/
  6   377 			/* parameter 2:	(input)	statement identification	*/
  6   378 			/* parameter 3:	(input)	any node pointer		*/
  6   379 			/* parameter 4:	(input)	source segment		*/
  6   380 			/* parameter 5:	(input)	source character index	*/
  6   381 			/* parameter 6:	(input)	source length		*/
  6   382 			/* parameter 7:	(input)	source line		*/
  6   383 
  6   384 declare	pl1_error_print$listing_segment
  6   385 			entry(fixed bin(15),
 11     1 			1 structure unaligned,
 11     2 			  2 /* file_number */	bit(8),
 11     3 			  2 /* line_number */	bit(14),
 11     4 			  2 /* stmt_number */	bit(5),
  6   386 
  6   387 			pointer);
  6   388 			/* parameter 1:	(input)	error number		*/
  6   389 			/* parameter 2:	(input)	statement identification	*/
  6   390 			/* parameter 3:	(input)	token node pointer		*/
  6   391 
  6   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  6   393 			/* parameter 1:	(input)	string			*/
  6   394 
  6   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  6   396 			/* parameter 1:	(input)	string			*/
  6   397 
  6   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  6   399 			/* parameter 1:	(input)	string			*/
  6   400 			/* parameter 2:	(input)	string length or 0		*/
  6   401 
  6   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  6   403 			/* parameter 1:	(input)	string			*/
  6   404 			/* parameter 2:	(input)	string length or 0		*/
  6   405 
  6   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  6   407 			/* parameter 1:	(input)	string pointer		*/
  6   408 			/* parameter 2:	(input)	string size		*/
  6   409 
  6   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  6   411 			/* parameter 1:	(input)	string pointer		*/
  6   412 			/* parameter 2:	(input)	string length or 0		*/
  6   413 
  6   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  6   415 			/* parameter 1:	(input)	string			*/
  6   416 			/* parameter 2:	(input)	length			*/
  6   417 
  6   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  6   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  6   420 			/* parameter 2:	(input)	line number		*/
  6   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  6   422 			/* parameter 4:	(input)	number of chars to copy	*/
  6   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  6   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  6   425 
  6   426 declare	refer_extent	entry(pointer,pointer);
  6   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  6   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  6   429 
  6   430 declare	reserve$clear	entry()
  6   431 			returns(pointer);
  6   432 			/* return:	(output)	pointer			*/
  6   433 
  6   434 declare	reserve$declare_lib	entry(fixed bin(15))
  6   435 			returns(pointer);
  6   436 			/* parameter 1:	(input)	builtin function number	*/
  6   437 			/* return:	(output)	pointer			*/
  6   438 
  6   439 declare	reserve$read_lib	entry(fixed bin(15))
  6   440 			returns(pointer);
  6   441 			/* parameter 1:	(input)	builtin function number	*/
  6   442 			/* return:	(output)	pointer			*/
  6   443 
  6   444 declare	semantic_translator	entry();
  6   445 
  6   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  6   447 			/* parameter 1:	(input)	error number		*/
  6   448 			/* parameter 2:	(input)	any node pointer		*/
  6   449 
  6   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  6   451 			/* parameter 1:	(input)	error number		*/
  6   452 			/* parameter 2:	(input)	any node pointer		*/
  6   453 
  6   454 declare	share_expression	entry(ptr)
  6   455 			returns(ptr);
  6   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  6   457 			/* return:	(output)	tree pointer or null	*/
  6   458 
  6   459 declare	token_to_binary	entry(ptr) reducible
  6   460 			returns(fixed bin(31));
  6   461 			/* parameter 1:	(input)	token node pointer		*/
  6   462 			/* return:	(output)	converted binary value	*/
  6   463 
  6   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       60 
       61 
       62 /* program */
       63 
       64 	pl1_stat_$node_uses (1) = pl1_stat_$node_uses (1) + 1;
       65 	if pl1_stat_$node_uses (1) > max_block_number
       66 	then call parse_error$no_text (385, create_token (ltrim (char (max_block_number)), dec_integer));
       67 
       68 	allocate block in (tree_area) set (p);
       69 
       70 	p -> block = pl1_nodes_template_$block_template;
       71 	p -> block.node_type = block_node;
       72 	p -> block.source_id = pl1_stat_$statement_id;
       73 	p -> block.father = father;
       74 	p -> block.block_type = type;
       75 	p -> block.no_stack = type = internal_procedure | type = begin_block;
       76 	p -> block.number = pl1_stat_$node_uses (1);
       77 	p -> block.owner = null;
       78 
       79 	if father ^= null
       80 	then if father -> block.son = null
       81 	     then father -> block.son = p;
       82 	     else do;
       83 		     do q = father -> block.son repeat q -> block.brother while (q -> block.brother ^= null);
       84 		     end;
       85 
       86 		     q -> block.brother = p;
       87 		end;
       88 
       89 	return (p);
       90      end create_block;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.3  create_block.pl1                  >spec>install>MR12.3-1066>create_block.pl1
55           1    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
56           2    05/03/76  1320.8  block_types.incl.pl1              >ldd>include>block_types.incl.pl1
57           3    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
58           4    07/21/80  1546.3  pl1_tree_areas.incl.pl1           >ldd>include>pl1_tree_areas.incl.pl1
59           5    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
60           6    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
6-307        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
6-325        8    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
6-335        9    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
6-374       10    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
6-386       11    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
begin_block                            constant        bit(9)                   initial dcl 2-1 ref 75
block                                  based           structure                level 1 dcl 1-5 set ref 68 70*
block_node                             constant        bit(9)                   initial dcl 3-5 ref 71
block_type               24            based           bit(9)                   level 2 packed packed unaligned dcl 1-5 set ref 74*
brother                   2            based           pointer                  level 2 packed packed unaligned dcl 1-5 set ref 83
                                                                                  84 86*
char                                                   builtin function         dcl 41 ref 65 65 65 65
create_token                    000020 constant        entry                    external dcl 6-191 ref 65 65
dec_integer                     000000 constant        bit(9)                   initial dcl 5-3 set ref 65* 65*
father                                 parameter       pointer                  dcl 32 in procedure "create_block" ref 28 73 79 79
                                                                                  79 83
father                    1            based           pointer                  level 2 in structure "block" packed packed unaligned
                                                                                  dcl 1-5 in procedure "create_block" set ref 73*
internal_procedure                     constant        bit(9)                   initial dcl 2-1 ref 75
ltrim                                                  builtin function         dcl 41 ref 65 65 65 65
max_block_number                000224 constant        fixed bin(17,0)          initial dcl 1-74 ref 65 65 65 65 65
no_stack                 24(22)        based           bit(1)                   level 2 packed packed unaligned dcl 1-5 set ref 75*
node_type                              based           bit(9)                   level 2 packed packed unaligned dcl 1-5 set ref 71*
null                                                   builtin function         dcl 41 ref 77 79 79 83
number                   24(27)        based           fixed bin(9,0)           level 2 packed packed unsigned unaligned dcl 1-5 set
                                                                                  ref 76*
owner                    54            based           pointer                  level 2 dcl 1-5 set ref 77*
p                               000100 automatic       pointer                  dcl 36 set ref 68* 70 71 72 73 74 75 76 77 79 86 89
parse_error$no_text             000022 constant        entry                    external dcl 6-368 ref 65
pl1_nodes_template_$block_template
                                000010 external static structure                level 1 dcl 45 ref 70
pl1_stat_$node_uses             000012 external static fixed bin(17,0)          array dcl 47 set ref 64* 64 65 76
pl1_stat_$statement_id          000014 external static structure                level 1 packed packed unaligned dcl 48 ref 72
pl1_stat_$tree_area_ptr         000016 external static pointer                  dcl 4-7 ref 68
q                               000102 automatic       pointer                  dcl 37 set ref 83* 83* 84 86
son                       3            based           pointer                  level 2 packed packed unaligned dcl 1-5 set ref 79
                                                                                  79* 83
source_id                 0(09)        based           structure                level 2 packed packed unaligned dcl 1-5 set ref 72*
tree_area                              based           area(1024)               dcl 4-4 ref 68
type                                   parameter       bit(9)                   dcl 31 ref 28 74 75 75

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 6-20
and                                    internal static bit(9)                   initial dcl 5-3
array_node                             internal static bit(9)                   initial dcl 3-5
arrow                                  internal static bit(9)                   initial dcl 5-3
assignment                             internal static bit(9)                   initial dcl 5-3
asterisk                               internal static bit(9)                   initial dcl 5-3
bin_integer                            internal static bit(9)                   initial dcl 5-3
binary_to_octal_string          000000 constant        entry                    external dcl 6-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 6-43
bindec                          000000 constant        entry                    external dcl 6-23
bindec$vs                       000000 constant        entry                    external dcl 6-28
binoct                          000000 constant        entry                    external dcl 6-33
bit_string                             internal static bit(9)                   initial dcl 5-3
bound_node                             internal static bit(9)                   initial dcl 3-5
by_name_agg_node                       internal static bit(9)                   initial dcl 3-5
cat                                    internal static bit(9)                   initial dcl 5-3
char_string                            internal static bit(9)                   initial dcl 5-3
colon                                  internal static bit(9)                   initial dcl 5-3
comma                                  internal static bit(9)                   initial dcl 5-3
compare_expression              000000 constant        entry                    external dcl 6-48
constant_length                 000000 constant        entry                    external dcl 6-54
context_node                           internal static bit(9)                   initial dcl 3-5
convert                         000000 constant        entry                    external dcl 6-60
convert$from_builtin            000000 constant        entry                    external dcl 6-72
convert$to_integer              000000 constant        entry                    external dcl 6-66
convert$to_target               000000 constant        entry                    external dcl 6-88
convert$to_target_fb            000000 constant        entry                    external dcl 6-82
convert$validate                000000 constant        entry                    external dcl 6-78
copy_expression                 000000 constant        entry                    external dcl 6-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 6-99
copy_unique_expression          000000 constant        entry                    external dcl 6-103
create_array                    000000 constant        entry                    external dcl 6-108
create_block                    000000 constant        entry                    external dcl 6-112
create_bound                    000000 constant        entry                    external dcl 6-118
create_context                  000000 constant        entry                    external dcl 6-122
create_cross_reference          000000 constant        entry                    external dcl 6-128
create_default                  000000 constant        entry                    external dcl 6-132
create_identifier               000000 constant        entry                    external dcl 6-136
create_label                    000000 constant        entry                    external dcl 6-140
create_list                     000000 constant        entry                    external dcl 6-147
create_operator                 000000 constant        entry                    external dcl 6-152
create_reference                000000 constant        entry                    external dcl 6-158
create_statement                000000 constant        entry                    external dcl 6-163
create_statement$prologue       000000 constant        entry                    external dcl 6-171
create_storage                  000000 constant        entry                    external dcl 6-179
create_symbol                   000000 constant        entry                    external dcl 6-184
create_token$init_hash_table    000000 constant        entry                    external dcl 6-197
create_token$protected          000000 constant        entry                    external dcl 6-199
cross_reference_node                   internal static bit(9)                   initial dcl 3-5
decbin                          000000 constant        entry                    external dcl 6-206
declare_constant                000000 constant        entry                    external dcl 6-211
declare_constant$bit            000000 constant        entry                    external dcl 6-219
declare_constant$char           000000 constant        entry                    external dcl 6-224
declare_constant$desc           000000 constant        entry                    external dcl 6-229
declare_constant$integer        000000 constant        entry                    external dcl 6-234
declare_descriptor              000000 constant        entry                    external dcl 6-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 6-249
declare_descriptor$param        000000 constant        entry                    external dcl 6-259
declare_integer                 000000 constant        entry                    external dcl 6-269
declare_picture                 000000 constant        entry                    external dcl 6-274
declare_picture_temp            000000 constant        entry                    external dcl 6-279
declare_pointer                 000000 constant        entry                    external dcl 6-287
declare_temporary               000000 constant        entry                    external dcl 6-292
decode_node_id                  000000 constant        entry                    external dcl 6-300
decode_source_id                000000 constant        entry                    external dcl 6-306
default_node                           internal static bit(9)                   initial dcl 3-5
eq                                     internal static bit(9)                   initial dcl 5-3
error                           000000 constant        entry                    external dcl 6-314
error$omit_text                 000000 constant        entry                    external dcl 6-319
error_                          000000 constant        entry                    external dcl 6-324
error_$finish                   000000 constant        entry                    external dcl 6-343
error_$initialize_error         000000 constant        entry                    external dcl 6-341
error_$no_text                  000000 constant        entry                    external dcl 6-334
expon                                  internal static bit(9)                   initial dcl 5-3
external_procedure                     internal static bit(9)                   initial dcl 2-1
fixed_bin                              internal static bit(9)                   initial dcl 5-3
fixed_dec                              internal static bit(9)                   initial dcl 5-3
float_bin                              internal static bit(9)                   initial dcl 5-3
float_dec                              internal static bit(9)                   initial dcl 5-3
format_value_node                      internal static bit(9)                   initial dcl 3-5
free_node                       000000 constant        entry                    external dcl 6-345
ge                                     internal static bit(9)                   initial dcl 5-3
get_array_size                  000000 constant        entry                    external dcl 6-348
get_size                        000000 constant        entry                    external dcl 6-352
gt                                     internal static bit(9)                   initial dcl 5-3
i_bin_integer                          internal static bit(9)                   initial dcl 5-3
i_dec_integer                          internal static bit(9)                   initial dcl 5-3
i_fixed_bin                            internal static bit(9)                   initial dcl 5-3
i_fixed_dec                            internal static bit(9)                   initial dcl 5-3
i_float_bin                            internal static bit(9)                   initial dcl 5-3
i_float_dec                            internal static bit(9)                   initial dcl 5-3
identifier                             internal static bit(9)                   initial dcl 5-3
is_arith_constant                      internal static bit(9)                   initial dcl 5-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 5-47
is_constant                            internal static bit(9)                   initial dcl 5-47
is_decimal_constant                    internal static bit(9)                   initial dcl 5-47
is_delimiter                           internal static bit(9)                   initial dcl 5-47
is_float_constant                      internal static bit(9)                   initial dcl 5-47
is_identifier                          internal static bit(9)                   initial dcl 5-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 5-47
is_integral_constant                   internal static bit(9)                   initial dcl 5-47
is_isub                                internal static bit(9)                   initial dcl 5-47
isub                                   internal static bit(9)                   initial dcl 5-3
label_array_element_node               internal static bit(9)                   initial dcl 3-5
label_node                             internal static bit(9)                   initial dcl 3-5
le                                     internal static bit(9)                   initial dcl 5-3
left_parn                              internal static bit(9)                   initial dcl 5-3
list_node                              internal static bit(9)                   initial dcl 3-5
lt                                     internal static bit(9)                   initial dcl 5-3
machine_state_node                     internal static bit(9)                   initial dcl 3-5
merge_attributes                000000 constant        entry                    external dcl 6-355
minus                                  internal static bit(9)                   initial dcl 5-3
ne                                     internal static bit(9)                   initial dcl 5-3
ngt                                    internal static bit(9)                   initial dcl 5-3
nlt                                    internal static bit(9)                   initial dcl 5-3
no_token                               internal static bit(9)                   initial dcl 5-3
node                                   based           structure                level 1 dcl 3-27
not                                    internal static bit(9)                   initial dcl 5-3
on_unit                                internal static bit(9)                   initial dcl 2-1
operator_node                          internal static bit(9)                   initial dcl 3-5
optimizer                       000000 constant        entry                    external dcl 6-361
or                                     internal static bit(9)                   initial dcl 5-3
parse_error                     000000 constant        entry                    external dcl 6-364
percent                                internal static bit(9)                   initial dcl 5-3
period                                 internal static bit(9)                   initial dcl 5-3
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 6-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 6-372
pl1_print$for_lex               000000 constant        entry                    external dcl 6-418
pl1_print$non_varying           000000 constant        entry                    external dcl 6-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 6-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 6-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 6-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 6-414
pl1_print$varying               000000 constant        entry                    external dcl 6-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 6-395
pl1_stat_$xeq_tree_area_ptr            external static pointer                  dcl 4-7
plus                                   internal static bit(9)                   initial dcl 5-3
refer_extent                    000000 constant        entry                    external dcl 6-426
reference_node                         internal static bit(9)                   initial dcl 3-5
reserve$clear                   000000 constant        entry                    external dcl 6-430
reserve$declare_lib             000000 constant        entry                    external dcl 6-434
reserve$read_lib                000000 constant        entry                    external dcl 6-439
right_parn                             internal static bit(9)                   initial dcl 5-3
root_block                             internal static bit(9)                   initial dcl 2-1
semantic_translator             000000 constant        entry                    external dcl 6-444
semantic_translator$abort       000000 constant        entry                    external dcl 6-446
semantic_translator$error       000000 constant        entry                    external dcl 6-450
semi_colon                             internal static bit(9)                   initial dcl 5-3
sf_par_node                            internal static bit(9)                   initial dcl 3-5
share_expression                000000 constant        entry                    external dcl 6-454
slash                                  internal static bit(9)                   initial dcl 5-3
source_node                            internal static bit(9)                   initial dcl 3-5
statement_node                         internal static bit(9)                   initial dcl 3-5
symbol_node                            internal static bit(9)                   initial dcl 3-5
temporary_node                         internal static bit(9)                   initial dcl 3-5
token_node                             internal static bit(9)                   initial dcl 3-5
token_to_binary                 000000 constant        entry                    external dcl 6-459
xeq_tree_area                          based           area(1024)               dcl 4-5

NAME DECLARED BY EXPLICIT CONTEXT.
create_block                    000020 constant        entry                    external dcl 28

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       334         360     225         344
Length       766     225        24         371     107           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
create_block                         94 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
create_block             000100 p                           create_block
                         000102 q                           create_block

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              alloc_char_temp     call_ext_out_desc   call_ext_out        return_mac          shorten_stack
ext_entry           op_alloc_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_token                  parse_error$no_text

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_nodes_template_$block_template                          pl1_stat_$node_uses           pl1_stat_$statement_id
pl1_stat_$tree_area_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     28 000014        64 000025        65 000026        68 000114        70 000124        71 000131        72 000133
     73 000140        74 000144        75 000147        76 000163        77 000165        79 000167        83 000201
     84 000210        86 000213        89 000215


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
