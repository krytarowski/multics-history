	COMPILATION LISTING OF SEGMENT merge_attributes
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1403.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* procedure to merge attributes from t (template) into s (symbol).
       12*   Return value is "1"b if some attribute could not be merged, else "0"b
       13*   Modified 780712 by PG to modify s only if no errors occurred
       14**/
       15 
       16 merge_attributes:
       17 	procedure (bv_s, bv_t) returns (bit (1) aligned);
       18 
       19 /* parameters */
       20 
       21 declare	(bv_s, bv_t) ptr parameter;
       22 
       23 /* automatic */
       24 
       25 declare	(dummy_qualifier, s, t) ptr;
       26 declare	1 dummy aligned like symbol;
       27 declare	e bit(1) aligned;
       28 
       29 /* builtins */
       30 
       31 declare	(null,string) builtin;
       32 
       33 /* program */
       34 
       35 	t = bv_t;
       36 	s = bv_s;
       37 
       38 	/* Make a copy of s in case an error is found later... */
       39 
       40 	dummy = s -> symbol;			/* structure assignment */
       41 	dummy_qualifier = dummy.reference -> reference.qualifier;
       42 	e = "0"b;
       43 
       44 	/* Now merge into the dummy symbol, setting the error flag if applicable. */
       45 
       46 	string(dummy.attributes) = string(dummy.attributes) | string(t->symbol.attributes);
       47 
       48 	if dummy.initial = null
       49 	then dummy.initial = copy_expression(t->symbol.initial);
       50 	else if t->symbol.initial ^= null then e="1"b;
       51 
       52 	if dummy.general = null
       53 	then dummy.general = t->symbol.general;
       54 	else if t->symbol.general ^= null then e="1"b;
       55 
       56 	if dummy.equivalence = null
       57 	then dummy.equivalence = t->symbol.equivalence;
       58 	else if t->symbol.equivalence ^= null then e="1"b;
       59 
       60 	if dummy.array = null
       61 	then dummy.array = copy_expression(t->symbol.array);
       62 	else if t->symbol.array ^= null then e="1"b;
       63 
       64 	if dummy_qualifier = null
       65 	then dummy_qualifier = t->symbol.reference->reference.qualifier;
       66 	else if t->symbol.reference->reference.qualifier ^= null then e = "1"b;
       67 
       68 	if dummy.dcl_size = null
       69 	then if t->symbol.returns
       70 	     then if t->symbol.dcl_size ^= null
       71 		then do;
       72 		     dummy.dcl_size = copy_expression(t->symbol.dcl_size);
       73 		     dummy.dcl_size->symbol.token =
       74 			create_token(dummy.token->token.string||"[return_value]",(identifier));
       75 		     end;
       76 		else;
       77 	     else dummy.dcl_size = copy_expression(t->symbol.dcl_size);
       78 	else if t->symbol.dcl_size ^= null then e="1"b;
       79 
       80 	if dummy.c_dcl_size = 0
       81 	then do;
       82 		dummy.c_dcl_size = t->symbol.c_dcl_size;
       83 		dummy.scale = t->symbol.scale;
       84 	     end;
       85 	else do;
       86 		if t->symbol.c_dcl_size ^= 0 then e="1"b;
       87 		if t->symbol.scale ^= 0 then e="1"b;
       88 	     end;
       89 
       90 	/* If no errors were discovered, it is OK to change the input node. */
       91 
       92 	if e = "0"b
       93 	then do;
       94 		s -> symbol = dummy;		/* structure assignment */
       95 		dummy.reference -> reference.qualifier = dummy_qualifier;
       96 	     end;
       97 
       98 	return(e);
       99 
      100 /* include files */
      101 
  1     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  1     2 
  1     3 dcl	1 symbol			based aligned,
  1     4 	2 node_type		bit(9) unal,
  1     5 	2 source_id		structure unal,
  1     6 	  3 file_number		bit(8),
  1     7 	  3 line_number		bit(14),
  1     8 	  3 statement_number	bit(5),
  1     9 	2 location		fixed(18) unal unsigned,
  1    10 	2 allocated		bit(1) unal,
  1    11 	2 dcl_type		bit(3) unal,
  1    12 	2 reserved		bit(6) unal,
  1    13 	2 pix			unal,
  1    14 	  3 pic_fixed		bit(1) unal,
  1    15 	  3 pic_float		bit(1) unal,
  1    16 	  3 pic_char		bit(1) unal,
  1    17 	  3 pic_scale		fixed(7) unal,
  1    18 	  3 pic_size		fixed(7) unal,
  1    19 	2 level			fixed(8) unal,
  1    20 	2 boundary		fixed(3) unal,
  1    21 	2 size_units		fixed(3) unal,
  1    22 	2 scale			fixed(7) unal,
  1    23 	2 runtime			bit(18) unal,
  1    24 	2 runtime_offset		bit(18) unal,
  1    25 	2 block_node		ptr unal,
  1    26 	2 token			ptr unal,
  1    27 	2 next			ptr unal,
  1    28 	2 multi_use		ptr unal,
  1    29 	2 cross_references		ptr unal,
  1    30 	2 initial			ptr unal,
  1    31 	2 array			ptr unal,
  1    32 	2 descriptor		ptr unal,
  1    33 	2 equivalence		ptr unal,
  1    34 	2 reference		ptr unal,
  1    35 	2 general			ptr unal,
  1    36 	2 father			ptr unal,
  1    37 	2 brother			ptr unal,
  1    38 	2 son			ptr unal,
  1    39 	2 word_size		ptr unal,
  1    40 	2 bit_size		ptr unal,
  1    41 	2 dcl_size		ptr unal,
  1    42 	2 symtab_size		ptr unal,
  1    43 	2 c_word_size		fixed(24),
  1    44 	2 c_bit_size		fixed(24),
  1    45 	2 c_dcl_size		fixed(24),
  1    46 
  1    47 	2 attributes		structure aligned,
  1    48 	  3 data_type		structure unal,
  1    49 	    4 structure		bit(1) ,
  1    50 	    4 fixed		bit(1),
  1    51 	    4 float		bit(1),
  1    52 	    4 bit			bit(1),
  1    53 	    4 char		bit(1),
  1    54 	    4 ptr			bit(1),
  1    55 	    4 offset		bit(1),
  1    56 	    4 area		bit(1),
  1    57 	    4 label		bit(1),
  1    58 	    4 entry		bit(1),
  1    59 	    4 file		bit(1),
  1    60 	    4 arg_descriptor	bit(1),
  1    61 	    4 storage_block		bit(1),
  1    62 	    4 explicit_packed	bit(1), /* options(packed) */
  1    63 	    4 condition		bit(1),
  1    64 	    4 format		bit(1),
  1    65 	    4 builtin		bit(1),
  1    66 	    4 generic		bit(1),
  1    67 	    4 picture		bit(1),
  1    68 
  1    69 	  3 misc_attributes		structure unal,
  1    70 	    4 dimensioned		bit(1),
  1    71 	    4 initialed		bit(1),
  1    72 	    4 aligned		bit(1),
  1    73 	    4 unaligned		bit(1),
  1    74 	    4 signed		bit(1),
  1    75 	    4 unsigned		bit(1),
  1    76 	    4 precision		bit(1),
  1    77 	    4 varying		bit(1),
  1    78 	    4 local		bit(1),
  1    79 	    4 decimal		bit(1),
  1    80 	    4 binary		bit(1),
  1    81 	    4 real		bit(1),
  1    82 	    4 complex		bit(1),
  1    83 	    4 variable		bit(1),
  1    84 	    4 reducible		bit(1),
  1    85 	    4 irreducible		bit(1),
  1    86 	    4 returns		bit(1),
  1    87 	    4 position		bit(1),
  1    88 	    4 internal		bit(1),
  1    89 	    4 external		bit(1),
  1    90 	    4 like		bit(1),
  1    91 	    4 member		bit(1),
  1    92 	    4 non_varying		bit(1),
  1    93 	    4 options		bit(1),
  1    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  1    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  1    96 
  1    97 	  3 storage_class		structure unal,
  1    98 	    4 auto		bit(1),
  1    99 	    4 based		bit(1),
  1   100 	    4 static		bit(1),
  1   101 	    4 controlled		bit(1),
  1   102 	    4 defined		bit(1),
  1   103 	    4 parameter		bit(1),
  1   104 	    4 param_desc		bit(1),
  1   105 	    4 constant		bit(1),
  1   106 	    4 temporary		bit(1),
  1   107 	    4 return_value		bit(1),
  1   108 
  1   109 	  3 file_attributes		structure unal,
  1   110 	    4 print		bit(1),
  1   111 	    4 input		bit(1),
  1   112 	    4 output		bit(1),
  1   113 	    4 update		bit(1),
  1   114 	    4 stream		bit(1),
  1   115 	    4 reserved_1		bit(1),
  1   116 	    4 record		bit(1),
  1   117 	    4 sequential		bit(1),
  1   118 	    4 direct		bit(1),
  1   119 	    4 interactive		bit(1),		/* env(interactive) */
  1   120 	    4 reserved_2		bit(1),
  1   121 	    4 reserved_3		bit(1),
  1   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  1   123 	    4 keyed		bit(1),
  1   124 	    4 reserved_4		bit(1),
  1   125 	    4 environment		bit(1),
  1   126 
  1   127 	  3 compiler_developed	structure unal,
  1   128 	    4 aliasable		bit(1),
  1   129 	    4 packed		bit(1),
  1   130 	    4 passed_as_arg		bit(1),
  1   131 	    4 allocate		bit(1),
  1   132 	    4 set			bit(1),
  1   133 	    4 exp_extents		bit(1),
  1   134 	    4 refer_extents		bit(1),
  1   135 	    4 star_extents		bit(1),
  1   136 	    4 isub		bit(1),
  1   137 	    4 put_in_symtab		bit(1),
  1   138 	    4 contiguous		bit(1),
  1   139 	    4 put_data		bit(1),
  1   140 	    4 overlayed		bit(1),
  1   141 	    4 error		bit(1),
  1   142 	    4 symtab_processed	bit(1),
  1   143 	    4 overlayed_by_builtin	bit(1),
  1   144 	    4 defaulted		bit(1),
  1   145 	    4 connected		bit(1);
  1   146 
  1   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      102 
  2     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  2     2 
  2     3 dcl	1 reference		based aligned,
  2     4 	2 node_type		bit(9) unaligned,
  2     5 	2 array_ref		bit(1) unaligned,
  2     6 	2 varying_ref		bit(1) unaligned,
  2     7 	2 shared			bit(1) unaligned,
  2     8 	2 put_data_sw		bit(1) unaligned,
  2     9 	2 processed		bit(1) unaligned,
  2    10 	2 units			fixed(3) unaligned,
  2    11 	2 ref_count		fixed(17) unaligned,
  2    12 	2 c_offset		fixed(24),
  2    13 	2 c_length		fixed(24),
  2    14 	2 symbol			ptr unaligned,
  2    15 	2 qualifier		ptr unaligned,
  2    16 	2 offset			ptr unaligned,
  2    17 	2 length			ptr unaligned,
  2    18 	2 subscript_list		ptr unaligned,
  2    19 						/* these fields are used by the 645 code generator */
  2    20 	2 address			structure unaligned,
  2    21 	  3 base			bit(3),
  2    22 	  3 offset		bit(15),
  2    23 	  3 op			bit(9),
  2    24 	  3 no_address		bit(1),
  2    25 	  3 inhibit		bit(1),
  2    26 	  3 ext_base		bit(1),
  2    27 	  3 tag			bit(6),
  2    28 	2 info			structure unaligned,
  2    29 	  3 address_in		structure,
  2    30 	    4 b			dimension(0:7) bit(1),
  2    31 	    4 storage		bit(1),
  2    32 	  3 value_in		structure,
  2    33 	    4 a			bit(1),
  2    34 	    4 q			bit(1),
  2    35 	    4 aq			bit(1),
  2    36 	    4 string_aq		bit(1),
  2    37 	    4 complex_aq		bit(1),
  2    38 	    4 decimal_aq		bit(1),
  2    39 	    4 b			dimension(0:7) bit(1),
  2    40 	    4 storage		bit(1),
  2    41 	    4 indicators		bit(1),
  2    42 	    4 x			dimension(0:7) bit(1),
  2    43 	  3 other			structure,
  2    44 	    4 big_offset		bit(1),
  2    45 	    4 big_length		bit(1),
  2    46 	    4 modword_in_offset	bit(1),
  2    47 	2 data_type		fixed(5) unaligned,
  2    48 	2 bits			structure unaligned,
  2    49 	  3 padded_ref		bit(1),
  2    50 	  3 aligned_ref		bit(1),
  2    51 	  3 long_ref		bit(1),
  2    52 	  3 forward_ref		bit(1),
  2    53 	  3 ic_ref		bit(1),
  2    54 	  3 temp_ref		bit(1),
  2    55 	  3 defined_ref		bit(1),
  2    56 	  3 evaluated		bit(1),
  2    57 	  3 allocate		bit(1),
  2    58 	  3 allocated		bit(1),
  2    59 	  3 aliasable		bit(1),
  2    60 	  3 even			bit(1),
  2    61 	  3 perm_address		bit(1),
  2    62 	  3 aggregate		bit(1),
  2    63 	  3 hit_zero		bit(1),
  2    64 	  3 dont_save		bit(1),
  2    65 	  3 fo_in_qual		bit(1),
  2    66 	  3 hard_to_load		bit(1),
  2    67 	2 relocation		bit(12) unaligned,
  2    68 	2 more_bits		structure unaligned,
  2    69 	  3 substr		bit(1),
  2    70 	  3 padded_for_store_ref	bit(1),
  2    71 	  3 aligned_for_store_ref	bit(1),
  2    72 	  3 mbz			bit(15),
  2    73 	2 store_ins		bit(18) unaligned;
  2    74 
  2    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      103 
  3     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
  3     2 
  3     3 dcl	1 token			based aligned,
  3     4 	2 node_type		bit(9) unaligned,
  3     5 	2 type			bit(9) unaligned,
  3     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
  3     7 	2 declaration		ptr unaligned,
  3     8 	2 next			ptr unaligned,
  3     9 	2 size			fixed(9),
  3    10 	2 string			char(n refer(token.size));
  3    11 
  3    12 /* END INCLUDE FILE ... token.incl.pl1 */
      104 
  4     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
  4     2 
  4     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
  4     4 	identifier	initial("100000000"b),
  4     5 	isub		initial("010000000"b),
  4     6 	plus		initial("001000001"b),
  4     7 	minus		initial("001000010"b),
  4     8 	asterisk		initial("001000011"b),
  4     9 	slash		initial("001000100"b),
  4    10 	expon		initial("001000101"b),
  4    11 	not		initial("001000110"b),
  4    12 	and		initial("001000111"b),
  4    13 	or		initial("001001000"b),
  4    14 	cat		initial("001001001"b),
  4    15 	eq		initial("001001010"b),
  4    16 	ne		initial("001001011"b),
  4    17 	lt		initial("001001100"b),
  4    18 	gt		initial("001001101"b),
  4    19 	le		initial("001001110"b),
  4    20 	ge		initial("001001111"b),
  4    21 	ngt		initial("001010000"b),
  4    22 	nlt		initial("001010001"b),
  4    23 	assignment	initial("001010010"b),
  4    24 	colon		initial("001010011"b),
  4    25 	semi_colon	initial("001010100"b),
  4    26 	comma		initial("001010101"b),
  4    27 	period		initial("001010110"b),
  4    28 	arrow		initial("001010111"b),
  4    29 	left_parn		initial("001011000"b),
  4    30 	right_parn	initial("001011001"b),
  4    31 	percent		initial("001011100"b),
  4    32 	bit_string	initial("000100001"b),
  4    33 	char_string	initial("000100010"b),
  4    34 	bin_integer	initial("000110001"b),
  4    35 	dec_integer	initial("000110011"b),
  4    36 	fixed_bin		initial("000110000"b),
  4    37 	fixed_dec		initial("000110010"b),
  4    38 	float_bin		initial("000110100"b),
  4    39 	float_dec		initial("000110110"b),
  4    40 	i_bin_integer	initial("000111001"b),
  4    41 	i_dec_integer	initial("000111011"b),
  4    42 	i_fixed_bin	initial("000111000"b),
  4    43 	i_fixed_dec	initial("000111010"b),
  4    44 	i_float_bin	initial("000111100"b),
  4    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
  4    46 
  4    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
  4    48 	is_isub			initial ("010000000"b),
  4    49 	is_delimiter		initial ("001000000"b),
  4    50 	is_constant		initial ("000100000"b),
  4    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
  4    52 	is_arithmetic_constant	initial ("000110000"b),
  4    53 	is_imaginary_constant	initial ("000111000"b),
  4    54 	is_float_constant		initial ("000110100"b),
  4    55 	is_decimal_constant		initial ("000110010"b),
  4    56 	is_integral_constant 	initial ("000110001"b)
  4    57 	) bit(9) internal static aligned options(constant);
  4    58 
  4    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      105 
  5     1 /****^  *********************************************************
  5     2*        *                                                       *
  5     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  5     4*        *                                                       *
  5     5*        ********************************************************* */
  5     6 
  5     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  5     8 
  5     9 
  5    10 /****^  HISTORY COMMENTS:
  5    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  5    12*     install(89-07-31,MR12.3-1066):	
  5    13*     Removed the obsolete parameter source_line from the dcl of error_().
  5    14*                                                   END HISTORY COMMENTS */
  5    15 
  5    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  5    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  5    18* */
  5    19 
  5    20 declare	adjust_count	entry(pointer);
  5    21 			/* parameter 1:	(input)	any node pointer		*/
  5    22 
  5    23 declare	bindec		entry(fixed bin(31)) reducible
  5    24 			returns(character(12) aligned);
  5    25 			/* parameter 1:	(input)	bin value			*/
  5    26 			/* return:	(output)	character value with blanks	*/
  5    27 
  5    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  5    29 			returns(character(12) aligned varying);
  5    30 			/* parameter 1:	(input)	binary value		*/
  5    31 			/* return:	(output)	char value without blanks	*/
  5    32 
  5    33 declare	binoct		entry(fixed bin(31)) reducible
  5    34 			returns(char(12) aligned);
  5    35 			/* parameter 1:	(input)	binary value		*/
  5    36 			/* return:	(output)	char value with blanks	*/
  5    37 
  5    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  5    39 			returns(char(12) aligned);
  5    40 			/* parameter 1:	(input)	binary value		*/
  5    41 			/* return:	(output)	right-aligned char value	*/
  5    42 
  5    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  5    44 			returns(char(12) varying aligned);
  5    45 			/* parameter 1:	(input)	binary value		*/
  5    46 			/* returns:	(output)	char value without blanks	*/
  5    47 
  5    48 declare	compare_expression	entry(pointer,pointer) reducible
  5    49 			returns(bit(1) aligned);
  5    50 			/* parameter 1:	(input)	any node pointer		*/
  5    51 			/* parameter 2:	(input)	any node pointer		*/
  5    52 			/* return:	(output)	compare bit		*/
  5    53 
  5    54 declare	constant_length	entry (pointer, fixed bin (71))
  5    55 			returns (bit (1) aligned);
  5    56 			/* parameter 1:	(input)	reference node pointer	*/
  5    57 			/* parameter 2:	(input)	value of constant length	*/
  5    58 			/* return:	(output)	"1"b if constant length	*/
  5    59 
  5    60 declare	convert		entry(pointer,bit(36) aligned)
  5    61 			returns(pointer);
  5    62 			/* parameter 1:	(input)	any node pointer		*/
  5    63 			/* parameter 2:	(input)	target type		*/
  5    64 			/* return:	(output)	target value tree pointer	*/
  5    65 
  5    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  5    67 			returns(pointer);
  5    68 			/* parameter 1:	(input)	any node pointer		*/
  5    69 			/* parameter 2:	(input)	target type		*/
  5    70 			/* return:	(output)	target value tree pointer	*/
  5    71 
  5    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  5    73 			returns(pointer);
  5    74 			/* parameter 1:	(input)	any node pointer		*/
  5    75 			/* parameter 2:	(input)	target type		*/
  5    76 			/* return:	(output)	target value tree pointer	*/
  5    77 
  5    78 declare	convert$validate	entry(pointer,pointer);
  5    79 			/* parameter 1:	(input)	source value tree pointer	*/
  5    80 			/* parameter 2:	(input)	target reference node pointer	*/
  5    81 
  5    82 declare	convert$to_target_fb entry(pointer,pointer)
  5    83 			returns(pointer);
  5    84 			/* parameter 1:	(input)	source value tree pointer	*/
  5    85 			/* parameter 2:	(input)	target reference node pointer	*/
  5    86 			/* return:	(output)	target value tree pointer	*/
  5    87 
  5    88 declare	convert$to_target	entry(pointer,pointer)
  5    89 			returns(pointer);
  5    90 			/* parameter 1:	(input)	source value tree pointer	*/
  5    91 			/* parameter 2:	(input)	target reference node pointer	*/
  5    92 			/* return:	(output)	target value tree pointer	*/
  5    93 
  5    94 declare	copy_expression	entry(pointer unaligned)
  5    95 			returns(pointer);
  5    96 			/* parameter 1:	(input)	any node pointer		*/
  5    97 			/* return:	(output)	any node pointer		*/
  5    98 
  5    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  5   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  5   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  5   102 
  5   103 declare	copy_unique_expression entry(pointer)
  5   104 			returns(pointer);
  5   105 			/* parameter 1:	(input)	any node pointer		*/
  5   106 			/* return:	(output)	any node pointer		*/
  5   107 
  5   108 declare	create_array	entry()
  5   109 			returns(pointer);
  5   110 			/* return:	(output)	array node pointer		*/
  5   111 
  5   112 declare	create_block	entry(bit(9) aligned,pointer)
  5   113 			returns(pointer);
  5   114 			/* parameter 1:	(input)	block type		*/
  5   115 			/* parameter 2:	(input)	father block node pointer	*/
  5   116 			/* return:	(output)	block node pointer		*/
  5   117 
  5   118 declare	create_bound	entry()
  5   119 			returns(pointer);
  5   120 			/* return:	(output)	bound node pointer		*/
  5   121 
  5   122 declare	create_context	entry(pointer,pointer)
  5   123 			returns(pointer);
  5   124 			/* parameter 1:	(input)	block node pointer		*/
  5   125 			/* parameter 2:	(input)	token pointer		*/
  5   126 			/* return:	(output)	context node pointer	*/
  5   127 
  5   128 declare	create_cross_reference entry()
  5   129 			returns(pointer);
  5   130 			/* return:	(output)	cross reference node pointer	*/
  5   131 
  5   132 declare	create_default	entry
  5   133 			returns(pointer);
  5   134 			/* return:	(output)	default node pointer	*/
  5   135 
  5   136 declare	create_identifier	entry()
  5   137 			returns(pointer);
  5   138 			/* return:	(output)	token node pointer		*/
  5   139 
  5   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  5   141 			returns(pointer);
  5   142 			/* parameter 1:	(input)	block node pointer		*/
  5   143 			/* parameter 2:	(input)	token node pointer		*/
  5   144 			/* parameter 3:	(input)	declare type		*/
  5   145 			/* return:	(output)	label node pointer		*/
  5   146 
  5   147 declare	create_list	entry(fixed bin(15))
  5   148 			returns(pointer);
  5   149 			/* parameter 1:	(input)	number of list elements	*/
  5   150 			/* return:	(output)	list node pointer		*/
  5   151 
  5   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  5   153 			returns(pointer);
  5   154 			/* parameter 1:	(input)	operator type		*/
  5   155 			/* parameter 2:	(input)	number of operands		*/
  5   156 			/* return:	(output)	operator node pointer	*/
  5   157 
  5   158 declare	create_reference	entry(pointer)
  5   159 			returns(pointer);
  5   160 			/* parameter 1:	(input)	symbol node pointer		*/
  5   161 			/* return:	(output)	reference node pointer	*/
  5   162 
  5   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  5   164 			returns(pointer);
  5   165 			/* parameter 1:	(input)	statement type		*/
  5   166 			/* parameter 2:	(input)	block node pointer		*/
  5   167 			/* parameter 3:	(input)	label node pointer		*/
  5   168 			/* parameter 4:	(input)	conditions		*/
  5   169 			/* return:	(output)	statement node pointer	*/
  5   170 
  5   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  5   172 			returns(pointer);
  5   173 			/* parameter 1:	(input)	statement type		*/
  5   174 			/* parameter 2:	(input)	block node pointer		*/
  5   175 			/* parameter 3:	(input)	label node pointer		*/
  5   176 			/* parameter 4:	(input)	conditions		*/
  5   177 			/* return:	(output)	statement node pointer	*/
  5   178 
  5   179 declare	create_storage	entry(fixed bin(15))
  5   180 			returns(pointer);
  5   181 			/* parameter 1:	(input)	number of words		*/
  5   182 			/* return:	(output)	storage block pointer	*/
  5   183 
  5   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  5   185 			returns(pointer);
  5   186 			/* parameter 1:	(input)	block node pointer		*/
  5   187 			/* parameter 2:	(input)	token node pointer		*/
  5   188 			/* parameter 3:	(input)	declare type		*/
  5   189 			/* return:	(output)	symbol node pointer		*/
  5   190 
  5   191 declare	create_token	entry (character (*), bit (9) aligned)
  5   192 			returns (ptr);
  5   193 			/* parameter 1:	(input)	token string		*/
  5   194 			/* parameter 2:	(input)	token type		*/
  5   195 			/* return:	(output)	token node ptr		*/
  5   196 
  5   197 declare	create_token$init_hash_table entry ();
  5   198 
  5   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  5   200 			returns (ptr);
  5   201 			/* parameter 1:	(input)	token string		*/
  5   202 			/* parameter 2:	(input)	token type		*/
  5   203 			/* parameter 3:	(input)	protected flag		*/
  5   204 			/* return:	(output)	token node ptr		*/
  5   205 
  5   206 declare	decbin		entry(character(*) aligned) reducible
  5   207 			returns(fixed bin(31));
  5   208 			/* parameter 1:	(input)	decimal character string	*/
  5   209 			/* return:	(output)	binary value		*/
  5   210 
  5   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  5   212 			returns(pointer);
  5   213 			/* parameter 1:	(input)	value			*/
  5   214 			/* parameter 2:	(input)	type			*/
  5   215 			/* parameter 3:	(input)	size			*/
  5   216 			/* parameter 4:	(input)	scale			*/
  5   217 			/* return:	(output)	reference node pointer	*/
  5   218 
  5   219 declare	declare_constant$bit entry(bit(*) aligned)
  5   220 			returns(pointer);
  5   221 			/* parameter 1:	(input)	bit			*/
  5   222 			/* return:	(output)	reference node pointer	*/
  5   223 
  5   224 declare	declare_constant$char entry(character(*) aligned)
  5   225 			returns(pointer);
  5   226 			/* parameter 1:	(input)	character			*/
  5   227 			/* return:	(output)	reference node pointer	*/
  5   228 
  5   229 declare	declare_constant$desc entry(bit(*) aligned)
  5   230 			returns(pointer);
  5   231 			/* parameter 1:	(input)	descriptor bit value	*/
  5   232 			/* return:	(output)	reference node pointer	*/
  5   233 
  5   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  5   235 			returns(pointer);
  5   236 			/* parameter 1:	(input)	integer			*/
  5   237 			/* return:	(output)	reference node pointer	*/
  5   238 
  5   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  5   240 			returns(pointer);
  5   241 			/* parameter 1:	(input)	block node pointer		*/
  5   242 			/* parameter 2:	(input)	statement node pointer	*/
  5   243 			/* parameter 3:	(input)	symbol node pointer		*/
  5   244 			/* parameter 4:	(input)	loc pointer		*/
  5   245 			/* parameter 5:	(input)	array descriptor bit
  5   246*						cross_section bit	*/
  5   247 			/* return:	(output)	reference node pointer	*/
  5   248 
  5   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  5   250 			returns(pointer);
  5   251 			/* parameter 1:	(input)	block node pointer	*/
  5   252 			/* parameter 2:	(input)	statement node pointer 	*/
  5   253 			/* parameter 3:	(input)	symbol node pointer	*/
  5   254 			/* parameter 4:	(input)	loc pointer	*/
  5   255 			/* parameter 5:	(input)	array descriptor bit
  5   256*						cross_section bit	*/
  5   257 			/* return:	(output)	reference node pointer	*/
  5   258 
  5   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  5   260 			returns(pointer);
  5   261 			/* parameter 1:	(input)	block node pointer		*/
  5   262 			/* parameter 2:	(input)	statement node pointer	*/
  5   263 			/* parameter 3:	(input)	symbol node pointer		*/
  5   264 			/* parameter 4:	(input)	loc pointer		*/
  5   265 			/* parameter 5:	(input)	array descriptor bit
  5   266*						cross_section bit	*/
  5   267 			/* return:	(output)	reference node pointer	*/
  5   268 
  5   269 declare	declare_integer	entry(pointer)
  5   270 			returns(pointer);
  5   271 			/* parameter 1:	(input)	block node pointer		*/
  5   272 			/* return:	(output)	reference node pointer 	*/
  5   273 
  5   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  5   275 			/* parameter 1:	(input)	picture string		*/
  5   276 			/* parameter 2:	(input)	symbol node pointer		*/
  5   277 			/* parameter 3:	(output)	error code, if any		*/
  5   278 
  5   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  5   280 			returns(pointer);
  5   281 			/* parameter 1:	(input)	picture string		*/
  5   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  5   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  5   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  5   285 			/* return:	(output)	reference node pointer	*/
  5   286 
  5   287 declare	declare_pointer	entry(pointer)
  5   288 			returns(pointer);
  5   289 			/* parameter 1:	(input)	block node pointer		*/
  5   290 			/* return:	(output)	reference node pointer	*/
  5   291 
  5   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  5   293 			returns(pointer);
  5   294 			/* parameter 1:	(input)	type			*/
  5   295 			/* parameter 2:	(input)	precision			*/
  5   296 			/* parameter 3:	(input)	scale			*/
  5   297 			/* parameter 4:	(input)	length			*/
  5   298 			/* return:	(output)	reference node pointer	*/
  5   299 
  5   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  5   301 			returns(char(120) varying);
  5   302 			/* parameter 1:	(input)	node pointer		*/
  5   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  5   304 			/* return:	(output)	source line id		*/
  5   305 
  5   306 declare	decode_source_id	entry(
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  5   307 
  5   308 			bit(1) aligned)
  5   309 			returns(char(120) varying);
  5   310 			/* parameter 1:	(input)	source id			*/
  5   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  5   312 			/* return:	(output)	source line id		*/
  5   313 
  5   314 declare	error		entry(fixed bin(15),pointer,pointer);
  5   315 			/* parameter 1:	(input)	error number		*/
  5   316 			/* parameter 2:	(input)	statement node pointer or null*/
  5   317 			/* parameter 3:	(input)	token node pointer 		*/
  5   318 
  5   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  5   320 			/* parameter 1:	(input)	error number		*/
  5   321 			/* parameter 2:	(input)	statement node pointer or null*/
  5   322 			/* parameter 3:	(input)	token node pointer 		*/
  5   323 
  5   324 declare	error_		entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  5   325 
  5   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  5   327 			/* parameter 1:	(input)	error number		*/
  5   328 			/* parameter 2:	(input)	statement id		*/
  5   329 			/* parameter 3:	(input)	any node pointer		*/
  5   330 			/* parameter 4:	(input)	source segment		*/
  5   331 			/* parameter 5:	(input)	source starting character	*/
  5   332 			/* parameter 6:	(input)	source length		*/
  5   333 
  5   334 declare	error_$no_text	entry(fixed bin(15),
  8     1 			1 structure unaligned,
  8     2 			  2 /* file_number */	bit(8),
  8     3 			  2 /* line_number */	bit(14),
  8     4 			  2 /* stmt_number */	bit(5),
  5   335 
  5   336 			pointer);
  5   337 			/* parameter 1:	(input)	error number		*/
  5   338 			/* parameter 2:	(input)	statement id		*/
  5   339 			/* parameter 3:	(input)	any node pointer		*/
  5   340 
  5   341 declare	error_$initialize_error entry();
  5   342 
  5   343 declare	error_$finish	entry();
  5   344 
  5   345 declare	free_node		entry(pointer);
  5   346 			/* parameter 1:	any node pointer			*/
  5   347 
  5   348 declare	get_array_size	entry(pointer,fixed bin(3));
  5   349 			/* parameter 1:	(input)	symbol node pointer		*/
  5   350 			/* parameter 2:	(input)	units			*/
  5   351 
  5   352 declare	get_size		entry(pointer);
  5   353 			/* parameter 1:	(input)	symbol node pointer		*/
  5   354 
  5   355 declare	merge_attributes	external entry(pointer,pointer)
  5   356 			returns(bit(1) aligned);
  5   357 			/* parameter 1:	(input)	target symbol node pointer */
  5   358 			/* parameter 2:	(input)	source symbol node pointer */
  5   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  5   360 
  5   361 declare	optimizer		entry(pointer);
  5   362 			/* parameter 1:	(input)	root pointer		*/
  5   363 
  5   364 declare	parse_error	entry(fixed bin(15),pointer);
  5   365 			/* parameter 1:	(input)	error number		*/
  5   366 			/* parameter 2:	(input)	any node pointer		*/
  5   367 
  5   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  5   369 			/* parameter 1:	(input)	error number		*/
  5   370 			/* parameter 2:	(input)	any node pointer		*/
  5   371 
  5   372 declare	pl1_error_print$write_out
  5   373 			entry(fixed bin(15),
  9     1 			1 structure unaligned,
  9     2 			  2 /* file_number */	bit(8),
  9     3 			  2 /* line_number */	bit(14),
  9     4 			  2 /* stmt_number */	bit(5),
  5   374 
  5   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  5   376 			/* parameter 1:	(input)	error number		*/
  5   377 			/* parameter 2:	(input)	statement identification	*/
  5   378 			/* parameter 3:	(input)	any node pointer		*/
  5   379 			/* parameter 4:	(input)	source segment		*/
  5   380 			/* parameter 5:	(input)	source character index	*/
  5   381 			/* parameter 6:	(input)	source length		*/
  5   382 			/* parameter 7:	(input)	source line		*/
  5   383 
  5   384 declare	pl1_error_print$listing_segment
  5   385 			entry(fixed bin(15),
 10     1 			1 structure unaligned,
 10     2 			  2 /* file_number */	bit(8),
 10     3 			  2 /* line_number */	bit(14),
 10     4 			  2 /* stmt_number */	bit(5),
  5   386 
  5   387 			pointer);
  5   388 			/* parameter 1:	(input)	error number		*/
  5   389 			/* parameter 2:	(input)	statement identification	*/
  5   390 			/* parameter 3:	(input)	token node pointer		*/
  5   391 
  5   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  5   393 			/* parameter 1:	(input)	string			*/
  5   394 
  5   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  5   396 			/* parameter 1:	(input)	string			*/
  5   397 
  5   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  5   399 			/* parameter 1:	(input)	string			*/
  5   400 			/* parameter 2:	(input)	string length or 0		*/
  5   401 
  5   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  5   403 			/* parameter 1:	(input)	string			*/
  5   404 			/* parameter 2:	(input)	string length or 0		*/
  5   405 
  5   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  5   407 			/* parameter 1:	(input)	string pointer		*/
  5   408 			/* parameter 2:	(input)	string size		*/
  5   409 
  5   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  5   411 			/* parameter 1:	(input)	string pointer		*/
  5   412 			/* parameter 2:	(input)	string length or 0		*/
  5   413 
  5   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  5   415 			/* parameter 1:	(input)	string			*/
  5   416 			/* parameter 2:	(input)	length			*/
  5   417 
  5   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  5   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  5   420 			/* parameter 2:	(input)	line number		*/
  5   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  5   422 			/* parameter 4:	(input)	number of chars to copy	*/
  5   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  5   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  5   425 
  5   426 declare	refer_extent	entry(pointer,pointer);
  5   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  5   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  5   429 
  5   430 declare	reserve$clear	entry()
  5   431 			returns(pointer);
  5   432 			/* return:	(output)	pointer			*/
  5   433 
  5   434 declare	reserve$declare_lib	entry(fixed bin(15))
  5   435 			returns(pointer);
  5   436 			/* parameter 1:	(input)	builtin function number	*/
  5   437 			/* return:	(output)	pointer			*/
  5   438 
  5   439 declare	reserve$read_lib	entry(fixed bin(15))
  5   440 			returns(pointer);
  5   441 			/* parameter 1:	(input)	builtin function number	*/
  5   442 			/* return:	(output)	pointer			*/
  5   443 
  5   444 declare	semantic_translator	entry();
  5   445 
  5   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  5   447 			/* parameter 1:	(input)	error number		*/
  5   448 			/* parameter 2:	(input)	any node pointer		*/
  5   449 
  5   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  5   451 			/* parameter 1:	(input)	error number		*/
  5   452 			/* parameter 2:	(input)	any node pointer		*/
  5   453 
  5   454 declare	share_expression	entry(ptr)
  5   455 			returns(ptr);
  5   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  5   457 			/* return:	(output)	tree pointer or null	*/
  5   458 
  5   459 declare	token_to_binary	entry(ptr) reducible
  5   460 			returns(fixed bin(31));
  5   461 			/* parameter 1:	(input)	token node pointer		*/
  5   462 			/* return:	(output)	converted binary value	*/
  5   463 
  5   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
      106 
      107 
      108      end /* merge attributes */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.4  merge_attributes.pl1              >spec>install>MR12.3-1066>merge_attributes.pl1
102          1    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
103          2    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
104          3    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
105          4    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
106          5    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
5-307        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
5-325        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
5-335        8    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
5-374        9    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
5-386       10    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 1-3 in procedure "merge_attributes"
                                                                                  set ref 60* 62
array                    12     000106 automatic       pointer                  level 2 in structure "dummy" packed packed unaligned
                                                                                  dcl 26 in procedure "merge_attributes" set ref 60
                                                                                  60*
attributes               31     000106 automatic       structure                level 2 in structure "dummy" dcl 26 in procedure
                                                                                  "merge_attributes" set ref 46* 46
attributes               31            based           structure                level 2 in structure "symbol" dcl 1-3 in procedure
                                                                                  "merge_attributes" set ref 46
bv_s                                   parameter       pointer                  dcl 21 ref 16 36
bv_t                                   parameter       pointer                  dcl 21 ref 16 35
c_dcl_size               30     000106 automatic       fixed bin(24,0)          level 2 in structure "dummy" dcl 26 in procedure
                                                                                  "merge_attributes" set ref 80 82*
c_dcl_size               30            based           fixed bin(24,0)          level 2 in structure "symbol" dcl 1-3 in procedure
                                                                                  "merge_attributes" set ref 82 86
copy_expression                 000010 constant        entry                    external dcl 5-94 ref 48 60 72 77
create_token                    000012 constant        entry                    external dcl 5-191 ref 73
dcl_size                 24     000106 automatic       pointer                  level 2 in structure "dummy" packed packed unaligned
                                                                                  dcl 26 in procedure "merge_attributes" set ref 68
                                                                                  72* 73 77*
dcl_size                 24            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 1-3 in procedure "merge_attributes"
                                                                                  set ref 68 72* 77* 78
dummy                           000106 automatic       structure                level 1 dcl 26 set ref 40* 94
dummy_qualifier                 000100 automatic       pointer                  dcl 25 set ref 41* 64 64* 95
e                               000142 automatic       bit(1)                   dcl 27 set ref 42* 50* 54* 58* 62* 66* 78* 86* 87*
                                                                                  92 98
equivalence              14            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 1-3 in procedure "merge_attributes"
                                                                                  set ref 56 58
equivalence              14     000106 automatic       pointer                  level 2 in structure "dummy" packed packed unaligned
                                                                                  dcl 26 in procedure "merge_attributes" set ref 56
                                                                                  56*
general                  16     000106 automatic       pointer                  level 2 in structure "dummy" packed packed unaligned
                                                                                  dcl 26 in procedure "merge_attributes" set ref 52
                                                                                  52*
general                  16            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 1-3 in procedure "merge_attributes"
                                                                                  set ref 52 54
identifier                             constant        bit(9)                   initial dcl 4-3 ref 73
initial                  11     000106 automatic       pointer                  level 2 in structure "dummy" packed packed unaligned
                                                                                  dcl 26 in procedure "merge_attributes" set ref 48
                                                                                  48*
initial                  11            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 1-3 in procedure "merge_attributes"
                                                                                  set ref 48* 50
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 1-3
null                                                   builtin function         dcl 31 ref 48 50 52 54 56 58 60 62 64 66 68 68 78
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 2-3 set ref 41
                                                                                  64 66 95*
reference                15     000106 automatic       pointer                  level 2 in structure "dummy" packed packed unaligned
                                                                                  dcl 26 in procedure "merge_attributes" set ref 41
                                                                                  95
reference                              based           structure                level 1 dcl 2-3 in procedure "merge_attributes"
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 1-3 in procedure "merge_attributes"
                                                                                  set ref 64 66
returns                  31(35)        based           bit(1)                   level 4 packed packed unaligned dcl 1-3 set ref 68
s                               000102 automatic       pointer                  dcl 25 set ref 36* 40 94
scale                     2(28)        based           fixed bin(7,0)           level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 1-3 in procedure "merge_attributes"
                                                                                  set ref 83 87
scale                     2(28) 000106 automatic       fixed bin(7,0)           level 2 in structure "dummy" packed packed unaligned
                                                                                  dcl 26 in procedure "merge_attributes" set ref 83*
size                      3            based           fixed bin(9,0)           level 2 dcl 3-3 ref 73
string                    4            based           char                     level 2 in structure "token" dcl 3-3 in procedure
                                                                                  "merge_attributes" ref 73
string                                                 builtin function         dcl 31 in procedure "merge_attributes" set ref 46*
                                                                                  46 46
symbol                                 based           structure                level 1 dcl 1-3 set ref 40 94*
t                               000104 automatic       pointer                  dcl 25 set ref 35* 46 48 50 52 54 56 58 60 62 64 66
                                                                                  68 68 72 77 78 82 83 86 87
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 1-3 in procedure "merge_attributes"
                                                                                  set ref 73*
token                                  based           structure                level 1 dcl 3-3 in procedure "merge_attributes"
token                     5     000106 automatic       pointer                  level 2 in structure "dummy" packed packed unaligned
                                                                                  dcl 26 in procedure "merge_attributes" set ref 73

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 5-20
and                                    internal static bit(9)                   initial dcl 4-3
arrow                                  internal static bit(9)                   initial dcl 4-3
assignment                             internal static bit(9)                   initial dcl 4-3
asterisk                               internal static bit(9)                   initial dcl 4-3
bin_integer                            internal static bit(9)                   initial dcl 4-3
binary_to_octal_string          000000 constant        entry                    external dcl 5-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 5-43
bindec                          000000 constant        entry                    external dcl 5-23
bindec$vs                       000000 constant        entry                    external dcl 5-28
binoct                          000000 constant        entry                    external dcl 5-33
bit_string                             internal static bit(9)                   initial dcl 4-3
cat                                    internal static bit(9)                   initial dcl 4-3
char_string                            internal static bit(9)                   initial dcl 4-3
colon                                  internal static bit(9)                   initial dcl 4-3
comma                                  internal static bit(9)                   initial dcl 4-3
compare_expression              000000 constant        entry                    external dcl 5-48
constant_length                 000000 constant        entry                    external dcl 5-54
convert                         000000 constant        entry                    external dcl 5-60
convert$from_builtin            000000 constant        entry                    external dcl 5-72
convert$to_integer              000000 constant        entry                    external dcl 5-66
convert$to_target               000000 constant        entry                    external dcl 5-88
convert$to_target_fb            000000 constant        entry                    external dcl 5-82
convert$validate                000000 constant        entry                    external dcl 5-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 5-99
copy_unique_expression          000000 constant        entry                    external dcl 5-103
create_array                    000000 constant        entry                    external dcl 5-108
create_block                    000000 constant        entry                    external dcl 5-112
create_bound                    000000 constant        entry                    external dcl 5-118
create_context                  000000 constant        entry                    external dcl 5-122
create_cross_reference          000000 constant        entry                    external dcl 5-128
create_default                  000000 constant        entry                    external dcl 5-132
create_identifier               000000 constant        entry                    external dcl 5-136
create_label                    000000 constant        entry                    external dcl 5-140
create_list                     000000 constant        entry                    external dcl 5-147
create_operator                 000000 constant        entry                    external dcl 5-152
create_reference                000000 constant        entry                    external dcl 5-158
create_statement                000000 constant        entry                    external dcl 5-163
create_statement$prologue       000000 constant        entry                    external dcl 5-171
create_storage                  000000 constant        entry                    external dcl 5-179
create_symbol                   000000 constant        entry                    external dcl 5-184
create_token$init_hash_table    000000 constant        entry                    external dcl 5-197
create_token$protected          000000 constant        entry                    external dcl 5-199
dec_integer                            internal static bit(9)                   initial dcl 4-3
decbin                          000000 constant        entry                    external dcl 5-206
declare_constant                000000 constant        entry                    external dcl 5-211
declare_constant$bit            000000 constant        entry                    external dcl 5-219
declare_constant$char           000000 constant        entry                    external dcl 5-224
declare_constant$desc           000000 constant        entry                    external dcl 5-229
declare_constant$integer        000000 constant        entry                    external dcl 5-234
declare_descriptor              000000 constant        entry                    external dcl 5-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 5-249
declare_descriptor$param        000000 constant        entry                    external dcl 5-259
declare_integer                 000000 constant        entry                    external dcl 5-269
declare_picture                 000000 constant        entry                    external dcl 5-274
declare_picture_temp            000000 constant        entry                    external dcl 5-279
declare_pointer                 000000 constant        entry                    external dcl 5-287
declare_temporary               000000 constant        entry                    external dcl 5-292
decode_node_id                  000000 constant        entry                    external dcl 5-300
decode_source_id                000000 constant        entry                    external dcl 5-306
eq                                     internal static bit(9)                   initial dcl 4-3
error                           000000 constant        entry                    external dcl 5-314
error$omit_text                 000000 constant        entry                    external dcl 5-319
error_                          000000 constant        entry                    external dcl 5-324
error_$finish                   000000 constant        entry                    external dcl 5-343
error_$initialize_error         000000 constant        entry                    external dcl 5-341
error_$no_text                  000000 constant        entry                    external dcl 5-334
expon                                  internal static bit(9)                   initial dcl 4-3
fixed_bin                              internal static bit(9)                   initial dcl 4-3
fixed_dec                              internal static bit(9)                   initial dcl 4-3
float_bin                              internal static bit(9)                   initial dcl 4-3
float_dec                              internal static bit(9)                   initial dcl 4-3
free_node                       000000 constant        entry                    external dcl 5-345
ge                                     internal static bit(9)                   initial dcl 4-3
get_array_size                  000000 constant        entry                    external dcl 5-348
get_size                        000000 constant        entry                    external dcl 5-352
gt                                     internal static bit(9)                   initial dcl 4-3
i_bin_integer                          internal static bit(9)                   initial dcl 4-3
i_dec_integer                          internal static bit(9)                   initial dcl 4-3
i_fixed_bin                            internal static bit(9)                   initial dcl 4-3
i_fixed_dec                            internal static bit(9)                   initial dcl 4-3
i_float_bin                            internal static bit(9)                   initial dcl 4-3
i_float_dec                            internal static bit(9)                   initial dcl 4-3
is_arith_constant                      internal static bit(9)                   initial dcl 4-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 4-47
is_constant                            internal static bit(9)                   initial dcl 4-47
is_decimal_constant                    internal static bit(9)                   initial dcl 4-47
is_delimiter                           internal static bit(9)                   initial dcl 4-47
is_float_constant                      internal static bit(9)                   initial dcl 4-47
is_identifier                          internal static bit(9)                   initial dcl 4-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 4-47
is_integral_constant                   internal static bit(9)                   initial dcl 4-47
is_isub                                internal static bit(9)                   initial dcl 4-47
isub                                   internal static bit(9)                   initial dcl 4-3
le                                     internal static bit(9)                   initial dcl 4-3
left_parn                              internal static bit(9)                   initial dcl 4-3
lt                                     internal static bit(9)                   initial dcl 4-3
merge_attributes                000000 constant        entry                    external dcl 5-355
minus                                  internal static bit(9)                   initial dcl 4-3
ne                                     internal static bit(9)                   initial dcl 4-3
ngt                                    internal static bit(9)                   initial dcl 4-3
nlt                                    internal static bit(9)                   initial dcl 4-3
no_token                               internal static bit(9)                   initial dcl 4-3
not                                    internal static bit(9)                   initial dcl 4-3
optimizer                       000000 constant        entry                    external dcl 5-361
or                                     internal static bit(9)                   initial dcl 4-3
parse_error                     000000 constant        entry                    external dcl 5-364
parse_error$no_text             000000 constant        entry                    external dcl 5-368
percent                                internal static bit(9)                   initial dcl 4-3
period                                 internal static bit(9)                   initial dcl 4-3
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 5-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 5-372
pl1_print$for_lex               000000 constant        entry                    external dcl 5-418
pl1_print$non_varying           000000 constant        entry                    external dcl 5-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 5-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 5-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 5-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 5-414
pl1_print$varying               000000 constant        entry                    external dcl 5-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 5-395
plus                                   internal static bit(9)                   initial dcl 4-3
refer_extent                    000000 constant        entry                    external dcl 5-426
reserve$clear                   000000 constant        entry                    external dcl 5-430
reserve$declare_lib             000000 constant        entry                    external dcl 5-434
reserve$read_lib                000000 constant        entry                    external dcl 5-439
right_parn                             internal static bit(9)                   initial dcl 4-3
semantic_translator             000000 constant        entry                    external dcl 5-444
semantic_translator$abort       000000 constant        entry                    external dcl 5-446
semantic_translator$error       000000 constant        entry                    external dcl 5-450
semi_colon                             internal static bit(9)                   initial dcl 4-3
share_expression                000000 constant        entry                    external dcl 5-454
slash                                  internal static bit(9)                   initial dcl 4-3
token_to_binary                 000000 constant        entry                    external dcl 5-459

NAME DECLARED BY EXPLICIT CONTEXT.
merge_attributes                000022 constant        entry                    external dcl 16

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       430         444     363         440
Length      1030     363        14         350      44           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
merge_attributes                    136 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
merge_attributes         000100 dummy_qualifier             merge_attributes
                         000102 s                           merge_attributes
                         000104 t                           merge_attributes
                         000106 dummy                       merge_attributes
                         000142 e                           merge_attributes

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     alloc_bit_temp      call_ext_out_desc   call_ext_out        return_mac          shorten_stack
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_token

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000016        35 000027        36 000033        40 000036        41 000041        42 000044        46 000045
     48 000061        50 000101        52 000106        54 000115        56 000123        58 000131        60 000136
     62 000155        64 000162        66 000173        68 000202        72 000214        73 000227        75 000275
     76 000276        77 000277        78 000313        80 000321        82 000323        83 000326        84 000332
     86 000333        87 000340        92 000346        94 000350        95 000354        98 000357


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
