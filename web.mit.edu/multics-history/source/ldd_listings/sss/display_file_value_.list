	COMPILATION LISTING OF SEGMENT display_file_value_
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1428.3 mst Mon
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 display_file_value_: proc (P_switch, P_file, P_code);
       11 
       12 /* formats information about the file, and outputs it on switch.
       13*   Code is returned 0 for no errors, oterwise it is a standard system error code
       14*
       15*   Designed 18 July 78 by James R. Davis
       16**/
       17 
       18 dcl (P_switch ptr,					/* to switch for io */
       19      P_file file variable,				/* the file whose value we print */
       20      P_code fixed bin (35)				/* standard system error code */
       21      ) parameter;
       22 
       23 
       24 dcl  fsbp ptr,					/* to file state block */
       25      fabp ptr,					/* to file attribute block */
       26      swp ptr,					/* to switch for io */
       27      ioa_$ioa_switch entry options (variable),
       28      chbuf char (fsb.bsize) based (fsb.bptr),
       29     (addr, substr, null) builtin;
       30 
       31 dcl  iox_$user_output ptr external;			/* default switch */
       32 dcl  TIC char (1) static options (constant) init ("!");	/* used in stream input */
       33 
       34 	P_code = 0;
       35 	fsbp = addr (P_file) -> file_value.fsb_ptr;
       36 	fabp = addr (P_file) -> file_value.fab_ptr;
       37 	swp = P_switch;
       38 	if swp = null () then swp = iox_$user_output;
       39 
       40 	call ioa_$ioa_switch (swp, "fab: ^p, fsb: ^p", fabp, fsbp);
       41 
       42 	if ^ fsb.switch.open
       43 	then if fab.switch.stream
       44 	     then if fab.switch.input
       45 		then call ioa_$ioa_switch (swp,
       46 		     "closed ^[internal^;external^] stream input file: ^32a",
       47 		     fab.switch.internal, fab.name);
       48 		else if fab.switch.output
       49 		then call ioa_$ioa_switch (swp,
       50 		     "closed ^[internal^;external^] stream output file: ^32a ^[print page size: ^d line size: ^d^;^2s^]",
       51 		     fab.switch.internal, fab.name, fab.switch.print, fab.page_size, fab.line_size);
       52 		else call ioa_$ioa_switch (swp,
       53 		     "closed ^[internal^;external^] stream file not input or output: ^32a",
       54 		     fab.switch.internal, fab.name);
       55 	     else if fab.switch.record
       56 	     then call ioa_$ioa_switch (
       57 		"closed ^[internal^;external^]  record ^[output ^;^] ^[input ^;^]^[update ^;^]^[keyed ^;^]^[sequential^;^]^[direct^;^]^[(stringvalue)^;^] file: ^32a",
       58 		fab.switch.internal, fab.switch.output, fab.switch.input, fab.switch.update,
       59 		fab.switch.keyed, fab.switch.sequential, fab.switch.direct,
       60 		fab.switch.stringvalue, fab.name);
       61 	     else call ioa_$ioa_switch (swp, "closed file not record or stream name: ^32a", fab.name);
       62 	else do;					/* open file */
       63 	     call ioa_$ioa_switch (swp, "^[internal^;external^] file name: ^32a ^/ path: ^168a^/iocb at ^p",
       64 		fsb.switch.internal, fsb.filename, fsb.path_name, fsb.iocb_p);
       65 
       66 	     if fsb.switch.stream
       67 	     then if fsb.switch.input
       68 		then do;
       69 		     call ioa_$ioa_switch (swp, "stream input last char ^d", fsb.blc);
       70 		     call ioa_$ioa_switch (swp, "^a^a^a",
       71 			substr (chbuf, 1, fsb.bnc-1), TIC, substr (chbuf, bnc, blc -bnc + 1));
       72 		end;				/* of input stream file */
       73 		else if fsb.switch.output
       74 		then call ioa_$ioa_switch (swp,
       75 		     "stream output ^[print page size ^d line size ^d^/pageno ^d lineno ^d colno^d^;^5s^]",
       76 		     fsb.switch.print,		/* if print then give print parms */
       77 		     fsb.psize, fsb.lsize, fsb.pageno, fsb.lineno, fsb.kol);
       78 		else call ioa_$ioa_switch (swp, "stream, but not input or output");
       79 	     else if fsb.switch.record then call ioa_$ioa_switch (swp,
       80 		"record ^[input^;^]^[output^;^]^[update^;^] ^[keyed^;^]^[sequential^;^]^[direct^;^] ^[(string value)^;^]",
       81 		fsb.switch.input, fsb.switch.output, fsb.switch.update,
       82 		fsb.switch.keyed, fsb.switch.sequential, fsb.switch.direct, fsb.switch.stringvalue);
       83 	     else call ioa_$ioa_switch (swp, "not stream or record");
       84 	end;					/* of open file */
       85 						/*  */
  1     1 /* BEGIN INCLUDE FILE ... pl1_file_value.incl.pl1 */
  1     2 
  1     3 dcl 1 file_value aligned based,
  1     4     2 fab_ptr ptr,					/* ptr to file attribute block (fab) */
  1     5     2 fsb_ptr ptr;					/* ptr to file state block (fsb) */
  1     6 
  1     7 /* END INCLUDE FILE ... pl1_file_value.incl.pl1 */
       86 
  2     1 /* BEGIN INCLUDE FILE ... plio2_fsb.incl.pl1 */
  2     2 /* format: style3,idind30 */
  2     3 
  2     4 declare	1 fsb			aligned based (fsbp),
  2     5 	  2 switch		aligned,
  2     6 	    3 zot			(2) bit (1) unaligned,
  2     7 	    3 version_2		bit (1) unaligned,
  2     8 	    3 open		bit (1) unaligned,
  2     9 	    3 print		bit (1) unaligned,
  2    10 	    3 input		bit (1) unaligned,
  2    11 	    3 output		bit (1) unaligned,
  2    12 	    3 update		bit (1) unaligned,
  2    13 	    3 stream		bit (1) unaligned,
  2    14 	    3 notkeyed		bit (1) unaligned,
  2    15 	    3 record		bit (1) unaligned,
  2    16 	    3 sequential		bit (1) unaligned,
  2    17 	    3 direct		bit (1) unaligned,
  2    18 	    3 interactive		bit (1) unaligned,
  2    19 	    3 not_used_1		bit (1) unaligned,
  2    20 	    3 not_used_2		bit (1) unaligned,
  2    21 	    3 stringvalue		bit (1) unaligned,
  2    22 	    3 keyed		bit (1) unaligned,
  2    23 	    3 namelist		bit (1) unaligned,
  2    24 	    3 implementation	bit (1) unaligned,
  2    25 	    3 not_used_4		bit (1) unaligned,	/* old get-input eof flag */
  2    26 	    3 transmit_error	bit (1) unaligned,
  2    27 	    3 buffer_in_use		bit (1) unaligned,
  2    28 	    3 copy		bit (1) unaligned,
  2    29 	    3 detach		bit (1) unaligned,
  2    30 	    3 te_hold		bit (1) unaligned,
  2    31 	    3 not_used_5		bit (1) unaligned,
  2    32 	    3 internal		bit (1) unaligned,
  2    33 	    3 threaded		bit (1) unaligned,
  2    34 	    3 fsb_in_use		bit (1) unaligned,
  2    35 	    3 console		bit (1) unaligned,
  2    36 	    3 emptyline		bit (1) unaligned,
  2    37 	    3 iox_close		bit (1) unaligned,
  2    38 	    3 xxx4		bit (1) unaligned,
  2    39 	    3 xxx5		bit (1) unaligned,
  2    40 	    3 xxx6		bit (1) unaligned,
  2    41 	  2 nono			aligned,
  2    42 	    3 bit_string		bit (1) unaligned,
  2    43 	    3 not_used_3		bit (1) unaligned,
  2    44 	    3 read		bit (1) unaligned,
  2    45 	    3 write		bit (1) unaligned,
  2    46 	    3 rewrite		bit (1) unaligned,
  2    47 	    3 delete		bit (1) unaligned,
  2    48 	    3 locate		bit (1) unaligned,
  2    49 	    3 key			bit (1) unaligned,
  2    50 	    3 keyto		bit (1) unaligned,
  2    51 	    3 keyfrom		bit (1) unaligned,
  2    52 	    3 set			bit (1) unaligned,
  2    53 	    3 into		bit (1) unaligned,
  2    54 	    3 ignore		bit (1) unaligned,
  2    55 	    3 from		bit (1) unaligned,
  2    56 	    3 nofrom		bit (1) unaligned,
  2    57 	    3 nokey		bit (1) unaligned,
  2    58 	    3 nokeyfrom		bit (1) unaligned,
  2    59 	    3 nolock		bit (1) unaligned,
  2    60 	  2 lsep			fixed bin (15),	/* (1,COMMA)(2,BL)(3,TAB)(4,NL)(5,SEMI) */
  2    61 	  2 iocb_p		ptr unaligned,	/* identifies data_set to iox_ */
  2    62 	  2 blc			fixed bin (21),	/* buffer's last character (input) */
  2    63 	  2 bsize			fixed bin (21),	/* size of buffer */
  2    64 	  2 bptr			ptr,		/* address of buffer */
  2    65 	  2 bnc			fixed bin (15),	/* next character in buffer */
  2    66 	  2 kol			fixed bin (15),	/* last column read from or written into */
  2    67 	  2 lsize			fixed bin (15),	/* line size (output) */
  2    68 	  2 lineno		fixed bin (15),	/* current line (output) - starts at 1 on each new page */
  2    69 	  2 psize			fixed bin (35),	/* page size (output) */
  2    70 	  2 pageno		fixed bin (15),	/* current page number, starts at 1 */
  2    71 	  2 limit			fixed bin (15),
  2    72 	  2 lnzc			fixed bin (35),
  2    73 	  2 filename		char (32) aligned,	/* declared file name */
  2    74 	  2 title			char (32) unaligned,/* Multics I/O switch */
  2    75 	  2 fsb_thread		ptr,
  2    76 	  2 buffer		(212) fixed bin (15),
  2    77 	  2 path_name		char (168) unal,	/* title option */
  2    78 	  2 declared_attributes	(2) bit (36) aligned;
  2    79 
  2    80 declare	xbuf			char (1000) unaligned based (fsb.bptr);
  2    81 
  2    82 /* END INCLUDE FILE ... plio2_fsb.incl.pl1 */
       87 
  3     1 /* BEGIN INCLUDE FILE plio2_fab.incl.pl1
  3     2*
  3     3*   James R. Davis 13 Aug 78
  3     4**/
  3     5 
  3     6 declare   1 fab aligned based (fabp),
  3     7 	2 switch aligned,
  3     8 	  3 zot (2) bit (1) unaligned,
  3     9 	  3 version_2 bit (1) unaligned,
  3    10 	  3 open bit (1) unaligned,
  3    11 	  3 print bit (1) unaligned,
  3    12 	  3 input bit (1) unaligned,
  3    13 	  3 output bit (1) unaligned,
  3    14 	  3 update bit (1) unaligned,
  3    15 	  3 stream bit (1) unaligned,
  3    16 	  3 notkeyed bit (1) unaligned,
  3    17 	  3 record bit (1) unaligned,
  3    18 	  3 sequential bit (1) unaligned,
  3    19 	  3 direct bit (1) unaligned,
  3    20 	  3 interactive bit (1) unaligned,
  3    21 	  3 not_used_1 bit (1) unaligned,
  3    22 	  3 not_used_2 bit (1) unaligned,
  3    23 	  3 stringvalue bit (1) unaligned,
  3    24 	  3 keyed bit (1) unaligned,
  3    25 
  3    26 	  3 namelist bit (1) unaligned,
  3    27 	  3 implementation bit (1) unaligned,
  3    28 	  3 not_used_4 bit (1) unaligned,
  3    29 	  3 transmit_error bit (1) unaligned,
  3    30 	  3 buffer_in_use bit (1) unaligned,
  3    31 	  3 copy bit (1) unaligned,
  3    32 	  3 detach bit (1) unaligned,
  3    33 	  3 te_hold bit (1) unaligned,
  3    34 	  3 not_used_5 bit (1) unaligned,
  3    35 	  3 internal bit (1) unaligned,
  3    36 	  3 threaded bit (1) unaligned,
  3    37 	  3 fsb_in_use bit (1) unaligned,
  3    38 	  3 console bit (1) unaligned,
  3    39 	  3 emptyline bit (1) unaligned,
  3    40 	  3 iox_close bit (1) unaligned,
  3    41 	  3 xxx4 bit (1) unaligned,
  3    42 	  3 xxx5 bit (1) unaligned,
  3    43 	  3 xxx6 bit (1) unaligned,
  3    44 	2 name char (32),
  3    45 	2 line_size fixed bin (17),
  3    46 	2 page_size fixed bin (17),
  3    47 	2 buffer_size fixed bin (17),
  3    48 	2 path_name_ptr ptr;
  3    49 
  3    50 /* END INCLUDE FILE plio2_fab.incl.pl1 */
       88 
       89      end display_file_value_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1005.7  display_file_value_.pl1           >spec>on>pl128d>display_file_value_.pl1
86           1    10/04/77  1919.3  pl1_file_value.incl.pl1           >ldd>include>pl1_file_value.incl.pl1
87           2    08/13/81  2043.5  plio2_fsb.incl.pl1                >ldd>include>plio2_fsb.incl.pl1
88           3    12/23/78  1556.1  plio2_fab.incl.pl1                >ldd>include>plio2_fab.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_code                                 parameter       fixed bin(35,0)          dcl 18 set ref 10 34*
P_file                                 parameter       file variable            dcl 18 set ref 10 35 36
P_switch                               parameter       pointer                  dcl 18 ref 10 37
TIC                             000000 constant        char(1)                  initial unaligned dcl 32 set ref 70*
addr                                                   builtin function         dcl 24 ref 35 36
blc                       4            based           fixed bin(21,0)          level 2 dcl 2-4 set ref 69* 70 70
bnc                      10            based           fixed bin(15,0)          level 2 dcl 2-4 ref 70 70 70 70 70 70
bptr                      6            based           pointer                  level 2 dcl 2-4 ref 70 70 70 70
bsize                     5            based           fixed bin(21,0)          level 2 dcl 2-4 ref 70 70 70 70
chbuf                                  based           char                     unaligned dcl 24 ref 70 70 70 70
direct                    0(12)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 79*
direct                    0(12)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 55*
fab                                    based           structure                level 1 dcl 3-6
fab_ptr                                based           pointer                  level 2 dcl 1-3 ref 36
fabp                            000102 automatic       pointer                  dcl 24 set ref 36* 40* 42 42 42 42 48 48 48 48 48 48
                                                                                  52 52 55 55 55 55 55 55 55 55 55 55 61
file_value                             based           structure                level 1 dcl 1-3
filename                 20            based           char(32)                 level 2 dcl 2-4 set ref 63*
fsb                                    based           structure                level 1 dcl 2-4
fsb_ptr                   2            based           pointer                  level 2 dcl 1-3 ref 35
fsbp                            000100 automatic       pointer                  dcl 24 set ref 35* 40* 42 63 63 63 63 66 66 69 70 70
                                                                                  70 70 70 70 70 70 70 70 70 70 70 70 70 70 73 73 73
                                                                                  73 73 73 73 79 79 79 79 79 79 79 79
input                     0(05)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 66 79*
input                     0(05)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 42 55*
internal                  0(27)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 63*
internal                  0(27)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 42* 48*
                                                                                  52* 55*
ioa_$ioa_switch                 000010 constant        entry                    external dcl 24 ref 40 42 48 52 55 61 63 69 70 73 78
                                                                                  79 83
iocb_p                    3            based           pointer                  level 2 packed unaligned dcl 2-4 set ref 63*
iox_$user_output                000012 external static pointer                  dcl 31 ref 38
keyed                     0(17)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 79*
keyed                     0(17)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 55*
kol                      11            based           fixed bin(15,0)          level 2 dcl 2-4 set ref 73*
line_size                11            based           fixed bin(17,0)          level 2 dcl 3-6 set ref 48*
lineno                   13            based           fixed bin(15,0)          level 2 dcl 2-4 set ref 73*
lsize                    12            based           fixed bin(15,0)          level 2 dcl 2-4 set ref 73*
name                      1            based           char(32)                 level 2 dcl 3-6 set ref 42* 48* 52* 55* 61*
null                                                   builtin function         dcl 24 ref 38
open                      0(03)        based           bit(1)                   level 3 packed unaligned dcl 2-4 ref 42
output                    0(06)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 73 79*
output                    0(06)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 48 55*
page_size                12            based           fixed bin(17,0)          level 2 dcl 3-6 set ref 48*
pageno                   15            based           fixed bin(15,0)          level 2 dcl 2-4 set ref 73*
path_name               366            based           char(168)                level 2 packed unaligned dcl 2-4 set ref 63*
print                     0(04)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 73*
print                     0(04)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 48*
psize                    14            based           fixed bin(35,0)          level 2 dcl 2-4 set ref 73*
record                    0(10)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" ref 79
record                    0(10)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" ref 55
sequential                0(11)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 55*
sequential                0(11)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 79*
stream                    0(08)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" ref 66
stream                    0(08)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" ref 42
stringvalue               0(16)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 79*
stringvalue               0(16)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 55*
substr                                                 builtin function         dcl 24 ref 70 70 70 70
switch                                 based           structure                level 2 in structure "fab" dcl 3-6 in procedure
                                                                                  "display_file_value_"
switch                                 based           structure                level 2 in structure "fsb" dcl 2-4 in procedure
                                                                                  "display_file_value_"
swp                             000104 automatic       pointer                  dcl 24 set ref 37* 38 38* 40* 42* 48* 52* 61* 63*
                                                                                  69* 70* 73* 78* 79* 83*
update                    0(07)        based           bit(1)                   level 3 in structure "fab" packed unaligned dcl 3-6
                                                                                  in procedure "display_file_value_" set ref 55*
update                    0(07)        based           bit(1)                   level 3 in structure "fsb" packed unaligned dcl 2-4
                                                                                  in procedure "display_file_value_" set ref 79*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
xbuf                                   based           char(1000)               unaligned dcl 2-80

NAME DECLARED BY EXPLICIT CONTEXT.
display_file_value_             000342 constant        entry                    external dcl 10

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1360        1374    1311        1370
Length      1620    1311        14         210      46           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
display_file_value_                 254 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
display_file_value_      000100 fsbp                        display_file_value_
                         000102 fabp                        display_file_value_
                         000104 swp                         display_file_value_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_$ioa_switch

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
iox_$user_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000336        34 000347        35 000351        36 000354        37 000357        38 000362        40 000371
     42 000417        48 000464        52 000537        55 000573        61 000671        63 000717        66 000762
     69 000770        70 001015        72 001076        73 001100        78 001154        79 001175        83 001265
     89 001310


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
