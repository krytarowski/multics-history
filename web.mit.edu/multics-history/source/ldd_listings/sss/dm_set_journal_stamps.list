	COMPILATION LISTING OF SEGMENT dm_set_journal_stamps
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/24/85  0832.6 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* DESCRIPTION:
        8*
        9*          dm_set_journal_stamps - a rather drastic way to force held pages to
       10*     disk.  this sets the time stamp of all before image journals registered
       11*     in ring zero to the time of invocation of this command, insuring that
       12*     page control will write them out to disk at claim_mod_core time.
       13*
       14*          THIS BYPASSES THE CONVENTIONS OF DATA MANAGEMENT PAGE PHASING.  IT
       15*     IS TO BE USED IN THE EVENT OF AN EMERGENCY ONLY.  IN THE EVENT OF AN ESD
       16*     FAILURE BEFORE JOURNAL TIME STAMPS ARE RESTORED, DATA BASES WILL BE LEFT
       17*     IN UNKNOWN STATES.
       18*
       19**/
       20 
       21 /*
       22*HISTORY:
       23*     
       24*Written by Mike Pandolf, 08/01/83.
       25*Modified:
       26*09/14/83 by Lee A. Newcomb:  removed name sjs; concensus of author and 
       27*	  myself is the command is too privileged to have a short name.
       28*11/12/84 by Lindsey L. Spratt:  Changed name from set_journal_stamps to
       29*            dm_set_journal_stamps.  Standardized format.  Removed all
       30*            arguments, the command now only sets the journal stamps to be the
       31*            current time.  Removed the ability to set the stamps directly,
       32*            i.e.  without going through hc_dm_util$set_journal_stamp.  Changed
       33*            to call dm_misc_util_$set_journal_stamps instead of
       34*            dm_admin_gate_$set_journal_stamps.
       35*04/11/85 by Lee A. Newcomb:  Fixed to call dm_admin_util_$set_journal_stamps,
       36*            not dm_misc_=$=.
       37**/
       38 
       39 /* format: style2,ind3 */
       40 
       41 dm_set_journal_stamps:
       42    procedure () options (variable);
       43 
       44 
       45 /* DECLARATIONS */
       46 
       47 /* Automatic */
       48 
       49       dcl	    nargs		       fixed bin;
       50       dcl	    code		       fixed bin (35);
       51 
       52 /* Based */
       53 /* Constant */
       54 
       55       dcl	    MYNAME	       char (32) internal static options (constant) init ("dm_set_journal_stamps");
       56 
       57 /* External */
       58 
       59       dcl	    error_table_$too_many_args
       60 			       fixed bin (35) ext static;
       61 
       62 /* Entry */
       63 
       64       dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
       65       dcl	    dm_admin_util_$set_journal_stamps
       66 			       entry (fixed bin (71), fixed bin (35));
       67       dcl	    com_err_	       entry () options (variable);
       68 
       69 /* Builtin */
       70 
       71       dcl	    clock		       builtin;
       72 
       73 /* END OF DECLARATIONS */
       74 
       75       call cu_$arg_count (nargs, code);
       76       if code ^= 0
       77       then call ERROR_RETURN (code, "^/Unable to get the count of arguments given to this command.", "");
       78 
       79       if nargs ^= 0
       80       then call ERROR_RETURN (error_table_$too_many_args, "^/This command does not accept any arguments.", "");
       81 
       82       call dm_admin_util_$set_journal_stamps (clock (), code);
       83       if code ^= 0
       84       then call ERROR_RETURN (code, "^/Unable to set the journal stamps.", "");
       85 
       86 MAIN_RETURN:
       87       return;
       88 
       89 
       90 
       91 ERROR_RETURN:
       92    proc (er_p_code, er_p_msg, er_p_msg_arg);
       93       dcl	    er_p_code	       fixed bin (35) parameter;
       94       dcl	    er_p_msg	       char (*) parameter;
       95       dcl	    er_p_msg_arg	       char (*) parameter;
       96 
       97       call com_err_ (er_p_code, MYNAME, er_p_msg, er_p_msg_arg);
       98       goto MAIN_RETURN;
       99    end ERROR_RETURN;
      100 
      101    end dm_set_journal_stamps;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/24/85  0803.1  dm_set_journal_stamps.pl1         >spec>on>41-21>dm_set_journal_stamps.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
MYNAME                          000000 constant        char(32)                 initial unaligned dcl 55 set ref 97*
clock                                                  builtin function         dcl 71 ref 82 82
code                            000101 automatic       fixed bin(35,0)          dcl 50 set ref 75* 76 76* 82* 83 83*
com_err_                        000016 constant        entry                    external dcl 67 ref 97
cu_$arg_count                   000012 constant        entry                    external dcl 64 ref 75
dm_admin_util_$set_journal_stamps
                                000014 constant        entry                    external dcl 65 ref 82
er_p_code                              parameter       fixed bin(35,0)          dcl 93 set ref 91 97*
er_p_msg                               parameter       char                     unaligned dcl 94 set ref 91 97*
er_p_msg_arg                           parameter       char                     unaligned dcl 95 set ref 91 97*
error_table_$too_many_args      000010 external static fixed bin(35,0)          dcl 59 set ref 79*
nargs                           000100 automatic       fixed bin(17,0)          dcl 49 set ref 75* 79

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR_RETURN                    000164 constant        entry                    internal dcl 91 ref 76 79 83
MAIN_RETURN                     000163 constant        label                    dcl 86 ref 98
dm_set_journal_stamps           000065 constant        entry                    external dcl 41

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       362         402     266         372
Length       556     266        20         137      73           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dm_set_journal_stamps               134 external procedure  is an external procedure.  
ERROR_RETURN                            internal procedure  shares stack frame of external procedure dm_set_journal_stamps.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dm_set_journal_stamps    000100 nargs                       dm_set_journal_stamps
                         000101 code                        dm_set_journal_stamps

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry           clock

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 dm_admin_util_$set_journal_stamps

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$too_many_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     41 000064        75 000072        76 000102        79 000112        82 000140        83 000153        86 000163
     91 000164        97 000202        98 000231


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
