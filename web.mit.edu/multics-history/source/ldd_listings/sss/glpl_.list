ASSEMBLY LISTING OF SEGMENT >spec>install>1170>glpl_.alm                                                                                                                                            
ASSEMBLED ON:	10/17/88  0942.3 mst Mon
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 7.4 April 1987      
ASSEMBLER CREATED:	11/02/87  1303.7 mst Mon

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1988                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
    000000                          11  	name	glpl_		GE-list-processing-language.
                                    12  "	an adaptation of flpl and mlpl to the ge-645 to be used
                                    13  "	with the fortran compiler, especially for the eplbsa
                                    14  "	assembler.	j.w.poduska, november 1965.
                                    15  
                                    16  
                                    17  " Last modified on 11/12/72 at 01:07:44 by R F Mabee.
                                    18  " Modified on 11 November 1972 by R F Mabee to fix short return and bb reference for followon.
                                    19  "	by RHG on 26 Sept 1970 to combine storage_control_ back in
                                    20  "	by RHG on 2 Sept 1970 for new listing package
                                    21  "	by RHG on 28 August 1970 at 1420 to make ersblk do nothing
                                    22  "	by NA on June 28, 1970 at 2022
                                    23  
                                    24  
                        000100      25  	equ	nextf,64
                        000101      26  	equ	first_free,65
                        776000      27  	equ	lavlth,261120	length of free storage segment
                                    28  
                                    29  	temp	t(2)
                                    30  
                                    31  
                        000000      32  	entry	crh
    000000                          33  crh:
    000000  aa  0 00002 2361 20     34  	ldq	ap|2,*
    000001  4a  4 00010 2361 20     35  	ldq	<eb_data_>|[lavptr],*ql
    000002  aa   777777 3760 07     36  	anq	=o777777,dl
    000003  aa  0 00004 7561 20     37  	stq	ap|4,*
    000004  aa  7 00044 7101 20     38  	short_return		" short return as there is no save at entries
                                    39  
                                    40  
                        000005      41  	entry	clh
    000005                          42  clh:
    000005  aa  0 00002 2361 20     43  	ldq	ap|2,*
    000006  4a  4 00010 2361 20     44  	ldq	<eb_data_>|[lavptr],*ql
    000007  aa   000022 7720 00     45  	qrl	18
    000010  aa  0 00004 7561 20     46  	stq	ap|4,*
    000011  aa  7 00044 7101 20     47  	short_return
                                    48  
                                    49  
                        000012      50  	entry	cllh
    000012                          51  cllh:
    000012  aa  0 00002 2361 20     52  	ldq	ap|2,*
    000013  4a  4 00012 3521 20     53  	eppbp	<eb_data_>|[lavptr],*
    000014  aa  2 00000 2361 06     54  	ldq	bp|0,ql
    000015  aa  2 00000 2361 02     55  	ldq	bp|0,qu
    000016  aa   000022 7720 00     56  	qrl	18
    000017  aa  0 00004 7561 20     57  	stq	ap|4,*
    000020  aa  7 00044 7101 20     58  	short_return
                                    59  
                                    60  
                                    61  "	routines for storing and modifying link-words.
                                    62  
                        000021      63  	entry	storl		store left half.
    000021  aa  0 00002 7211 20     64  storl:	lxl1	ap|2,*		get the offset into the free storage segment
    000022  aa  0 00004 7201 20     65  	lxl0	ap|4,*		get the word to be stored
    000023  4a  4 00014 7401 20     66  	stx0	<eb_data_>|[lavptr],*1 store it
    000024  aa  7 00044 7101 20     67  	short_return		and return
                                    68  
                                    69  
                        000025      70  	entry	storr		store right half.
    000025  aa  0 00002 7211 20     71  storr:	lxl1	ap|2,*		get the offset into the free storage segment
    000026  aa  0 00004 7201 20     72  	lxl0	ap|4,*		get the word to be stored
    000027  4a  4 00014 4401 20     73  	sxl0	<eb_data_>|[lavptr],*1 store it in the right half
    000030  aa  7 00044 7101 20     74  	short_return		and return
                                    75  
                                    76  
                        000031      77  	entry	slwrd		store total link word.
    000031                          78  slwrd:
    000031  aa  0 00002 7271 20     79  	lxl7	ap|2,*		get word pointer,
    000032  aa  0 00004 2351 20     80  	lda	ap|4,*		get left half,
    000033  aa  0 00006 2361 20     81  	ldq	ap|6,*		get right half,
    000034  aa   000022 7760 00     82  	qlr	18		and position word in ac.
    000035  aa   000022 7770 00     83  	llr	18		..
    000036  4a  4 00016 7551 20     84  	sta	<eb_data_>|[lavptr],*7
    000037  aa  7 00044 7101 20     85  	short_return		and return to caller.
                                    86  
                                    87  
                        000040      88  	entry	glwrd		construct link word and return.
    000040                          89  glwrd:
    000040  aa  0 00004 2351 20     90  	lda	ap|4,*		get right half,
    000041  aa  0 00002 2361 20     91  	ldq	ap|2,*		and left half,
    000042  aa   000022 7750 00     92  	alr	18		and form word in mq.
    000043  aa   000022 7770 00     93  	llr	18		..
    000044  aa  0 00006 7561 20     94  	stq	ap|6,*		return in the third argument
    000045  aa  7 00044 7101 20     95  	short_return		and return lword to caller.
                                    96  
                                    97  
                                    98  "	routines for reading total words
                                    99  
                                   100  
                        000046     101  	entry	cwrd		read contents of total word.
    000046                         102  cwrd:
    000046  aa  0 00002 2361 20    103  	ldq	ap|2,*		get word pointer,
    000047  4a  4 00010 2361 20    104  	ldq	<eb_data_>|[lavptr],*ql
    000050  aa  0 00004 7561 20    105  	stq	ap|4,*
    000051  aa  7 00044 7101 20    106  	short_return		and return to caller.
                                   107  
                                   108  
                                   109  "	routines for manipulating blocks of information.
                                   110  
                                   111  
                        000052     112  	entry	genlas		generate the free storage list.
    000052                         113  genlas:
    000052  aa   000101 2350 07    114  	lda	first_free,dl	get the address of the first word in the scratch segment
    000053  4a  4 00012 3521 20    115  	eppbp	<eb_data_>|[lavptr],*
    000054  aa  2 00100 7551 00    116  	sta	bp|nextf		store it in the uninit pointer
    000055  aa  7 00044 7101 20    117  	short_return		and return
                                   118  
                                   119  
                        000056     120  	entry	setblk		get a block of free storage.
    000056  4a  4 00012 3521 20    121  setblk:	eppbp	<eb_data_>|[lavptr],*
    000057  aa  2 00000 3531 00    122  	epbpbb	bp|0		" Should turn into epbpbb on 645F, harmless here.
    000060  aa  2 00100 2361 00    123  	ldq	bp|nextf		get next free location
    000061  aa  0 00006 7561 20    124  	stq	ap|6,*		return it
    000062  aa  2 00000 3521 06    125  	eppbp	bp|0,ql		reset bp to point to the new block
    000063  aa  0 00004 0761 20    126  	adq	ap|4,*		add the number of words requested
    000064  aa  3 00100 7561 00    127  	stq	bb|nextf		save the new next free
    000065  aa   776000 1160 07    128  	cmpq	lavlth,dl		check for overflowing scratch segment
    000066  4a  4 00020 6051 20    129  	tpl	<prnter_>|[no_storage] complain if overflow
    000067  aa  0 00004 2361 20    130  	ldq	ap|4,*		get the count again
    000070  aa   000002 7360 00    131  	qls	2		multiply by 2
    000071  aa  0 00002 3501 20    132  	eppap	ap|2,*		ap -> data words
    000072  aa  0 00140 1005 40    133  	mlr	(pr,rl),(pr,rl)	move the data
    000073  aa   000000 000006     134  	desc9a	ap|0,ql
    000074  aa   200000 000006     135  	desc9a	bp|0,ql
    000075  aa  7 00044 7101 20    136  	short_return
    000076  aa  7 00044 7101 20    137  	short_return		and return if done
                                   138  
                                   139  	end
ENTRY SEQUENCES
     
    000077  5a   000064 0000 00
    000100  aa  7 00046 2721 20
    000101  0a   000000 7100 00
    000102  5a   000060 0000 00
    000103  aa  7 00046 2721 20
    000104  0a   000005 7100 00
    000105  5a   000053 0000 00
    000106  aa  7 00046 2721 20
    000107  0a   000012 7100 00
    000110  5a   000046 0000 00
    000111  aa  7 00046 2721 20
    000112  0a   000021 7100 00
    000113  5a   000041 0000 00
    000114  aa  7 00046 2721 20
    000115  0a   000025 7100 00
    000116  5a   000034 0000 00
    000117  aa  7 00046 2721 20
    000120  0a   000031 7100 00
    000121  5a   000027 0000 00
    000122  aa  7 00046 2721 20
    000123  0a   000040 7100 00
    000124  5a   000022 0000 00
    000125  aa  7 00046 2721 20
    000126  0a   000046 7100 00
    000127  5a   000015 0000 00
    000130  aa  7 00046 2721 20
    000131  0a   000052 7100 00
    000132  5a   000010 0000 00
    000133  aa  7 00046 2721 20
    000134  0a   000056 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000136  5a   000003 000000 
    000137  5a   000077 600000 
    000140  aa   000000 000000 
    000141  55   000010 000002 
    000142  5a   000002 400003 
    000143  55   000006 000010 
    000144  aa  005 147 154 160
    000145  aa  154 137 000 000
    000146  55   000015 000003 
    000147  0a   000133 500000 
    000150  55   000013 000003 
    000151  aa  006 163 145 164         setblk
    000152  aa  142 154 153 000
    000153  55   000022 000010 
    000154  0a   000130 500000 
    000155  55   000020 000003 
    000156  aa  006 147 145 156         genlas
    000157  aa  154 141 163 000
    000160  55   000027 000015 
    000161  0a   000125 500000 
    000162  55   000025 000003 
    000163  aa  004 143 167 162         cwrd
    000164  aa  144 000 000 000
    000165  55   000034 000022 
    000166  0a   000122 500000 
    000167  55   000032 000003 
    000170  aa  005 147 154 167         glwrd
    000171  aa  162 144 000 000
    000172  55   000041 000027 
    000173  0a   000117 500000 
    000174  55   000037 000003 
    000175  aa  005 163 154 167         slwrd
    000176  aa  162 144 000 000
    000177  55   000046 000034 
    000200  0a   000114 500000 
    000201  55   000044 000003 
    000202  aa  005 163 164 157         storr
    000203  aa  162 162 000 000
    000204  55   000053 000041 
    000205  0a   000111 500000 
    000206  55   000051 000003 
    000207  aa  005 163 164 157         storl
    000210  aa  162 154 000 000
    000211  55   000060 000046 
    000212  0a   000106 500000 
    000213  55   000056 000003 
    000214  aa  004 143 154 154         cllh
    000215  aa  150 000 000 000
    000216  55   000064 000053 
    000217  0a   000103 500000 
    000220  55   000063 000003 
    000221  aa  003 143 154 150         clh
    000222  55   000070 000060 
    000223  0a   000100 500000 
    000224  55   000067 000003 
    000225  aa  003 143 162 150         crh
    000226  55   000002 000064 
    000227  6a   000000 400002 
    000230  55   000073 000003 
    000231  aa  014 163 171 155         symbol_table
    000232  aa  142 157 154 137
    000233  aa  164 141 142 154
    000234  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000235  aa   000000 000015 
    000236  5a   000070 000000 
    000237  5a   000015 000000 
    000240  5a   000064 000000 
    000241  aa   000000 000000 
    000242  aa   000000 000000 
    000243  5a   000022 000000 
    000244  5a   000041 000000 
    000245  5a   000046 000000 
    000246  5a   000010 000000 
    000247  5a   000053 000000 
    000250  5a   000060 000000 
    000251  5a   000027 000000 
    000252  5a   000034 000000 

EXTERNAL NAMES

    000253  aa  012 156 157 137         no_storage
    000254  aa  163 164 157 162
    000255  aa  141 147 145 000
    000256  aa  007 160 162 156         prnter_
    000257  aa  164 145 162 137
    000260  aa  006 154 141 166         lavptr
    000261  aa  160 164 162 000
    000262  aa  010 145 142 137         eb_data_
    000263  aa  144 141 164 141
    000264  aa  137 000 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000265  aa   000004 000000 
    000266  55   000120 000115 
    000267  aa   000004 000000 
    000270  55   000124 000122 
    000271  aa   000001 000000 
    000272  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000273  5a   000127 000000 
    000274  5a   000131 000000 
    000275  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000136 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000022 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         eb_data_|lavptr
    000011  5a   000136 0000 66
    000012  9a   777766 0000 46         eb_data_|lavptr
    000013  5a   000136 0000 20
    000014  9a   777764 0000 46         eb_data_|lavptr
    000015  5a   000136 0000 71
    000016  9a   777762 0000 46         eb_data_|lavptr
    000017  5a   000136 0000 77
    000020  9a   777760 0000 46         prnter_|no_storage
    000021  5a   000135 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000007 
    000004  aa   000000 115705 
    000005  aa   073761 335527 
    000006  aa   000000 116574 
    000007  aa   773406 623217 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000150 
    000020  aa   000000 000101 
    000021  aa   000121 000114 
    000022  aa   000142 000101 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   067056 064040 
    000030  aa   101160 162151 
    000031  aa   154040 061071 
    000032  aa   070067 040040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000034 
    000067  aa   165715 122714 
    000070  aa   000000 116574 
    000071  aa   771523 200000 
    000072  aa   076163 160145          >spec>install>1170>glpl_.alm
    000073  aa   143076 151156 
    000074  aa   163164 141154 
    000075  aa   154076 061061 
    000076  aa   067060 076147 
    000077  aa   154160 154137 
    000100  aa   056141 154155 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           5    clh                      glpl_:         41,   42.
          12    cllh                     glpl_:         50,   51.
           0    crh                      glpl_:         32,   33.
          46    cwrd                     glpl_:        101,  102.
                eb_data_                 glpl_:         35,   44,   53,   66,   73,   84,  104,  115,  121.
         101    first_free               glpl_:         26,  114.
          52    genlas                   glpl_:        112,  113.
          40    glwrd                    glpl_:         88,   89.
      776000    lavlth                   glpl_:         27,  128.
                lavptr                   glpl_:         35,   44,   53,   66,   73,   84,  104,  115,  121.
         100    nextf                    glpl_:         25,  116,  123,  127.
                no_storage               glpl_:        129.
                prnter_                  glpl_:        129.
          56    setblk                   glpl_:        120,  121.
          31    slwrd                    glpl_:         77,   78.
          21    storl                    glpl_:         63,   64.
          25    storr                    glpl_:         70,   71.
          50    t                        glpl_:         29.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
