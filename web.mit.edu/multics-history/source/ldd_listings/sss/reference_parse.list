	COMPILATION LISTING OF SEGMENT reference_parse
	Compiled by: Multics PL/I Compiler, Release 33c, of October 25, 1990
	Compiled at: ACTC Technologies Inc.          
	Compiled on: 92-04-24_1115.47_Fri_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 reference_parse:
       17 	procedure(index,cblock) returns(pointer);
       18 
       19 /*	Re-written by:	Gabriel Chang for Version II
       20*	Modified:		Richard A. Barnes to fix 1544
       21*          Modified:		EBush for temporary extension of max
       22*			args per call to 512 */
       23 
       24 dcl	(i,j,k,m,n,index) fixed bin(15);
       25 dcl	(arg,cblock,p,q,qual,arglist,op,sym) ptr;
       26 dcl	s(512) ptr unaligned;
       27 dcl	t(128) ptr unaligned;
       28 
       29 dcl	(addr,null) builtin;
       30 
  1     1 /* BEGIN INCLUDE FILE parse.incl.pl1 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(91-01-09,Blackmore), approve(91-01-09,MCR8234),
  1     6*     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
  1     7*     Change entry points for 'lex', 'lex$write_last_line', and
  1     8*     'statement_type', for constant reference resolution fix.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 declare	attribute_parse	entry(ptr,ptr,fixed bin(15),bit(1) aligned);
  1    12 			/* parameter 1:	(input)	block node ptr		*/
  1    13 			/* parameter 2:	(input)	symbol node ptr		*/
  1    14 			/* parameter 3:	(in/out)	token index		*/
  1    15 			/* parameter 4:	(input)   called while doing generic	*/
  1    16 
  1    17 declare	context		entry(ptr,ptr,fixed bin(15));
  1    18 			/* parameter 1:	(input)	usually token node ptr	*/
  1    19 			/* parameter 2:	(input)	block node ptr		*/
  1    20 			/* parameter 3:	(input)	context type		*/
  1    21 
  1    22 declare	data_list_parse	entry(fixed bin(15),ptr,ptr)
  1    23 			returns(bit(1) aligned);
  1    24 			/* parameter 1:	(in/out)	token index		*/
  1    25 			/* parameter 2:	(input)	block node ptr		*/
  1    26 			/* parameter 3:	(output)	data list parse tree ptr	*/
  1    27 			/* return:	(output)	valid parse bit		*/
  1    28 
  1    29 declare	declare_label	entry(ptr,ptr,ptr,bit(3) aligned);
  1    30 			/* parameter 1:	(input)	block node ptr		*/
  1    31 			/* parameter 2:	(input)	statement node ptr	*/
  1    32 			/* parameter 3:	(input)	label list ptr or null	*/
  1    33 			/* parameter 4:	(input)	declare type		*/
  1    34 
  1    35 declare	declare_parse	entry(fixed bin(15),ptr,ptr);
  1    36 			/* parameter 1:	(input)	token index		*/
  1    37 			/* parameter 2:	(input)	block node ptr		*/
  1    38 			/* parameter 3:	(input)	label list ptr or null	*/
  1    39 
  1    40 declare	declare_parse$abort	entry(fixed bin(15),ptr);
  1    41 			/* parameter 1:	(input)	error number		*/
  1    42 			/* parameter 2:	(input)	any node ptr		*/
  1    43 
  1    44 declare	default_parse	entry(fixed bin(15),ptr,ptr);
  1    45 			/* parameter 1:	(input)	token index		*/
  1    46 			/* parameter 2:	(input)	block node ptr		*/
  1    47 			/* parameter 3:	(input)	label list ptr or null	*/
  1    48 
  1    49 declare	descriptor_parse	entry(ptr,ptr,fixed bin(15))
  1    50 			returns(ptr);
  1    51 			/* parameter 1:	(input)	block node ptr		*/
  1    52 			/* parameter 2:	(input)	token node ptr or null	*/
  1    53 			/* parameter 3:	(in/out)	token index		*/
  1    54 			/* return:	(output)	symbol node ptr		*/
  1    55 
  1    56 declare	do_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    57 			bit(1) aligned,bit(1) aligned,bit(1) aligned);
  1    58 			/* parameter 1:	(in/out)	token index		*/
  1    59 			/* parameter 2:	(input)	label list ptr or null	*/
  1    60 			/* parameter 3:	(input)	conditions		*/
  1    61 			/* parameter 4:	(input)	father block node ptr	*/
  1    62 			/* parameter 5:	(output)	end ptr			*/
  1    63 			/* parameter 6:	(input)	entry bit			*/
  1    64 			/* parameter 7:	(input)	return bit		*/
  1    65 			/* parameter 8:	(input)	iterative do bit		*/
  1    66 
  1    67 declare	evaluate		entry(bit(9) aligned,ptr,ptr) returns(ptr);
  1    68 			/* parameter 1:	(input)	opcode		*/
  1    69 			/* parameter 2:	(input)	left operand (token ptr)	*/
  1    70 			/* parameter 3:	(input)	right operand (token ptr)	*/
  1    71 			/* return:	(output)	ptr to result node	*/
  1    72 
  1    73 declare	expression_parse	entry(fixed bin(15),ptr)
  1    74 			returns(ptr);
  1    75 			/* parameter 1:	(in/out)	token index		*/
  1    76 			/* parameter 2:	(input)	block node ptr		*/
  1    77 			/* return:	(output)	expression parse tree ptr	*/
  1    78 
  1    79 declare	format_list_parse	entry(fixed bin(15),ptr,ptr,ptr)
  1    80 			returns(bit(1) aligned);
  1    81 			/* parameter 1:	(in/out)	token index		*/
  1    82 			/* parameter 2:	(input)	block node ptr		*/
  1    83 			/* parameter 3:	(input)	statement node ptr		*/
  1    84 			/* parameter 4:	(output)	format list parse tree ptr	*/
  1    85 			/* return:	(output)	valid parse bit		*/
  1    86 
  1    87 declare	if_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    88 			bit(1) aligned);
  1    89 			/* parameter 1:	(in/out)	token index		*/
  1    90 			/* parameter 2:	(input)	label list ptr or null	*/
  1    91 			/* parameter 3:	(input)	conditions		*/
  1    92 			/* parameter 4:	(input)	father block node ptr	*/
  1    93 			/* parameter 5:	(input)	end ptr			*/
  1    94 			/* parameter 6:	(output)	valid parse bit		*/
  1    95 
  1    96 declare	io_statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    97 			bit(1) aligned,bit(9) aligned);
  1    98 			/* parameter 1:	(in/out)	token index		*/
  1    99 			/* parameter 2:	(input)	label list ptr or null	*/
  1   100 			/* parameter 3:	(input)	conditions		*/
  1   101 			/* parameter 4:	(input)	father block node ptr	*/
  1   102 			/* parameter 5:	(output)	end ptr			*/
  1   103 			/* parameter 6:	(output)	valid parse bit		*/
  1   104 			/* parameter 7:	(output)	statement type		*/
  1   105 
  1   106 declare	lex		entry(ptr);
  1   107 			/* parameter 1:	(input)	block node ptr		*/
  1   108 
  1   109 declare	lex$write_last_line	entry(ptr);
  1   110 			/* parameter 1:	(input)	block node ptr		*/
  1   111 
  1   112 declare	lex$initialize_lex	entry(ptr,fixed bin(15));
  1   113 			/* parameter 1:	(input)	ptr to source		*/
  1   114 			/* parameter 2:	(input)	length of source (chars)	*/
  1   115 
  1   116 declare	on_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr);
  1   117 			/* parameter 1:	(in/out)	token index		*/
  1   118 			/* parameter 2:	(input)	label list ptr or null	*/
  1   119 			/* parameter 3:	(input)	conditions		*/
  1   120 			/* parameter 4:	(input)	father block node ptr	*/
  1   121 			/* parameter 5:	(output)	end ptr (set to null)	*/
  1   122 
  1   123 declare	on_parse$revert	entry(fixed bin(15),ptr,ptr);
  1   124 			/* parameter 1:	(input)	token index	*/
  1   125 			/* parameter 2:	(input)	statement node ptr	*/
  1   126 			/* parameter 3:	(input)	block node ptr	*/
  1   127 
  1   128 declare	parse		entry(ptr,ptr,fixed bin(15));
  1   129 			/* parameter 1:	(output)	root ptr		*/
  1   130 			/* parameter 2	(input)	source ptr		*/
  1   131 			/* parameter 3:	(input)	source length		*/
  1   132 
  1   133 declare	procedure_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1   134 			bit(9) aligned,bit(1) aligned);
  1   135 			/* parameter 1:	(in/out)	token index		*/
  1   136 			/* parameter 2:	(input)	label list ptr or null	*/
  1   137 			/* parameter 3:	(input)	conditions		*/
  1   138 			/* parameter 4:	(input)	father block node ptr	*/
  1   139 			/* parameter 5:	(output)	end ptr		*/
  1   140 			/* parameter 6:	(input)	block type		*/
  1   141 			/* parameter 7:	(input)	no return statement bit	*/
  1   142 
  1   143 declare	process_entry	entry(fixed bin(15),bit(9) aligned,ptr,ptr,bit(12) aligned);
  1   144 			/* parameter 1:	(in/out)	token index		*/
  1   145 			/* parameter 2:	(input)	statement type		*/
  1   146 			/* parameter 3:	(input)	block node ptr		*/
  1   147 			/* parameter 4:	(input)	label list ptr or null	*/
  1   148 			/* parameter 5:	(input)	conditions		*/
  1   149 
  1   150 declare	reference_parse	entry(fixed bin(15),ptr)
  1   151 			returns(ptr);
  1   152 			/* parameter 1:	(in/out)	token index		*/
  1   153 			/* parameter 2:	(input)	block node ptr		*/
  1   154 			/* return:	(output)	reference parse tree ptr	*/
  1   155 
  1   156 declare	reserve$rename_parse entry(fixed bin(15)) returns(bit(1) aligned);
  1   157 			/* parameter 1:	(in/out)	token index	 */
  1   158 			/* return:	(output)	success bit	 */
  1   159 
  1   160 declare	statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,fixed bin(15));
  1   161 			/* parameter 1:	(in/out)	token index		*/
  1   162 			/* parameter 2:	(input)	label list ptr or null	*/
  1   163 			/* parameter 3:	(input)	conditions		*/
  1   164 			/* parameter 4:	(input)	block node ptr		*/
  1   165 			/* parameter 5:	(input)	statement type		*/
  1   166 
  1   167 declare	statement_type	entry(ptr,fixed bin(15),ptr,bit(12) aligned)
  1   168 			returns(fixed bin(15));
  1   169 			/* parameter 1:	(input)	block node ptr		*/
  1   170 			/* parameter 2:	(in/out)	token index		*/
  1   171 			/* parameter 3:	(output)	label list ptr or null	*/
  1   172 			/* parameter 4:	(output)	conditions		*/
  1   173 			/* return:	(output)	statement type		*/
  1   174 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   175 
  1   176 /* END INCLUDE FILE parse.incl.pl1 */
       31 
  8     1 dcl (	pointer_context		initial(6),
  8     2 	area_context		initial(8),
  8     3 	file_name_context		initial(11),
  8     4 	condition_context		initial(15),
  8     5 	parameter_context		initial(20)) fixed bin(15) internal static options(constant);
       32 
  9     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
  9     2 
  9     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  9     4 
  9     5 dcl  (	by_declare	initial("001"b),
  9     6 	by_explicit_context initial("010"b),
  9     7 	by_context	initial("011"b),
  9     8 	by_implication	initial("100"b),
  9     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
  9    10 
  9    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       33 
 10     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 10     2 
 10     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 10     4 
 10     5 
 10     6 dcl	1 list		based aligned,
 10     7 	2 node_type	bit(9) unaligned,
 10     8 	2 reserved	bit(12) unaligned,
 10     9 	2 number		fixed(14) unaligned,
 10    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 10    11 
 10    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 10    13 	                    init(16383);
 10    14 
 10    15 /* END INCLUDE FILE ... list.incl.pl1 */
       34 
 11     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 11     2 
 11     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 11     4 
 11     5 dcl (	block_node		initial("000000001"b),
 11     6 	statement_node		initial("000000010"b),
 11     7 	operator_node		initial("000000011"b),
 11     8 	reference_node		initial("000000100"b),
 11     9 	token_node		initial("000000101"b),
 11    10 	symbol_node		initial("000000110"b),
 11    11 	context_node		initial("000000111"b),
 11    12 	array_node		initial("000001000"b),
 11    13 	bound_node		initial("000001001"b),
 11    14 	format_value_node		initial("000001010"b),
 11    15 	list_node			initial("000001011"b),
 11    16 	default_node		initial("000001100"b),
 11    17 	machine_state_node		initial("000001101"b),
 11    18 	source_node		initial("000001110"b),
 11    19 	label_node		initial("000001111"b),
 11    20 	cross_reference_node	initial("000010000"b),
 11    21 	sf_par_node		initial("000010001"b),
 11    22 	temporary_node		initial("000010010"b),
 11    23 	label_array_element_node	initial("000010011"b),
 11    24 	by_name_agg_node		initial("000010100"b))
 11    25 				bit(9) internal static aligned options(constant);
 11    26 
 11    27 dcl	1 node			based aligned,
 11    28 	2 type			unal bit(9),
 11    29 	2 source_id		unal structure,
 11    30 	  3 file_number		bit(8),
 11    31 	  3 line_number		bit(14),
 11    32 	  3 statement_number	bit(5);
 11    33 
 11    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       35 
 12     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 12     2 
 12     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 12     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 12     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 12     6 /* Modified: 26 July 82 BIM wordno, segno */
 12     7 
 12     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 12     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 12    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 12    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 12    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 12    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 12    14 
 12    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 12    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 12    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 12    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 12    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 12    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 12    21 
 12    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 12    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 12    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 12    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 12    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 12    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 12    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 12    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 12    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 12    31 
 12    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 12    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 12    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 12    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 12    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 12    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 12    38 
 12    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 12    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 12    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 12    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 12    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 12    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 12    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 12    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 12    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 12    48 
 12    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 12    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 12    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 12    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 12    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 12    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 12    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 12    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 12    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 12    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 12    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 12    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 12    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 12    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 12    63 
 12    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 12    65*						   opnd(2) <- opnd(3) / 36		*/
 12    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 12    67*						   opnd(2) <- opnd(3) / 4		*/
 12    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 12    69*						   opnd(2) <- opnd(3) / 2		*/
 12    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 12    71 
 12    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 12    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 12    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 12    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 12    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 12    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 12    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 12    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 12    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 12    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 12    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 12    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 12    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 12    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 12    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 12    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 12    88 
 12    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 12    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 12    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 12    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 12    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 12    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 12    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 12    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 12    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 12    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 12    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 12   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 12   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 12   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 12   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 12   104 
 12   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 12   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 12   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 12   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 12   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 12   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 12   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 12   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 12   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 12   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 12   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 12   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 12   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 12   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 12   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 12   120 
 12   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 12   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 12   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 12   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 12   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 12   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 12   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 12   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 12   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 12   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 12   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 12   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 12   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 12   134 
 12   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 12   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 12   137 
 12   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 12   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 12   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 12   141*						   opnd(2) is the file name
 12   142*						   opnd(3) is the block	*/
 12   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 12   144*						   opnd(2) is the file name	*/
 12   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 12   146*						   opnd(2) is the file name */
 12   147 
 12   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 12   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 12   150*						   opnd(3) is old value, (4) is new value. */
 12   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 12   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 12   153 
 12   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 12   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 12   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 12   157*						   opnd(5) is the list */
 12   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 12   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 12   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 12   161 
 12   162 	r_parn		initial("011110001"b),	/* format op code			*/
 12   163 	l_parn		initial("011110010"b),
 12   164 	r_format		initial("011110011"b),
 12   165 	c_format		initial("011110100"b),
 12   166 	f_format		initial("011110101"b),
 12   167 	e_format		initial("011110110"b),
 12   168 	b_format		initial("011110111"b),
 12   169 	a_format		initial("011111000"b),
 12   170 	x_format		initial("011111001"b),
 12   171 	skip_format	initial("011111010"b),
 12   172 	column_format	initial("011111011"b),
 12   173 	page_format	initial("011111100"b),
 12   174 	line_format	initial("011111101"b),
 12   175 	picture_format	initial("011111110"b),
 12   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 12   177 
 12   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 12   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 12   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 12   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 12   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 12   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 12   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 12   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 12   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 12   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 12   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 12   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 12   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 12   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 12   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 12   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 12   194 
 12   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 12   196 /* They are processed by the semantic translator.						*/
 12   197 
 12   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 12   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 12   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 12   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 12   202 						/* opnd(3) is skip, opnd(4) is list	*/
 12   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 12   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 12   205 						/* opnd(3) is skip,opnd(4) is line	*/
 12   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 12   207 	open_file		initial("100011001"b),
 12   208 	close_file	initial("100011010"b),
 12   209 	read_file		initial("100011011"b),
 12   210 	write_file	initial("100011100"b),
 12   211 	locate_file	initial("100011101"b),
 12   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 12   213 						/* opnd(2) is control variable ref	*/
 12   214 						/* opnd(3) is specification operator	*/
 12   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 12   216 						/* repeat opnd(4) while opnd(5)	*/
 12   217 						/* opnd(6) is next specification	*/
 12   218 
 12   219 	rewrite_file	initial("100100000"b),
 12   220 	delete_file	initial("100100001"b),
 12   221 	unlock_file	initial("100100010"b),
 12   222 	lock_file		initial("100100011"b),
 12   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 12   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 12   225 	nop		initial("100100111"b),	/* no-op */
 12   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 12   227 
 12   228 /* These operators are produced by the semantic translator in processing the math
 12   229*   builtin functions and are used as input to the code generator			*/
 12   230 
 12   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 12   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 12   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 12   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 12   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 12   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 12   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 12   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 12   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 12   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 12   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 12   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 12   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 12   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 12   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 12   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 12   247 
 12   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 12   249 
 12   250 			bit(9) aligned internal static options(constant);
 12   251 
 12   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       36 
 13     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 13     2 
 13     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 13     4 
 13     5 /* format: style3 */
 13     6 dcl	1 operator	based aligned,
 13     7 	  2 node_type	bit (9) unaligned,
 13     8 	  2 op_code	bit (9) unaligned,
 13     9 	  2 shared	bit (1) unaligned,
 13    10 	  2 processed	bit (1) unaligned,
 13    11 	  2 optimized	bit (1) unaligned,
 13    12 	  2 number	fixed (14) unaligned,
 13    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 13    14 
 13    15 dcl	max_number_of_operands
 13    16 			fixed bin (15) int static options (constant) initial (32767);
 13    17 
 13    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       37 
 14     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 14     2 
 14     3 dcl	1 reference		based aligned,
 14     4 	2 node_type		bit(9) unaligned,
 14     5 	2 array_ref		bit(1) unaligned,
 14     6 	2 varying_ref		bit(1) unaligned,
 14     7 	2 shared			bit(1) unaligned,
 14     8 	2 put_data_sw		bit(1) unaligned,
 14     9 	2 processed		bit(1) unaligned,
 14    10 	2 units			fixed(3) unaligned,
 14    11 	2 ref_count		fixed(17) unaligned,
 14    12 	2 c_offset		fixed(24),
 14    13 	2 c_length		fixed(24),
 14    14 	2 symbol			ptr unaligned,
 14    15 	2 qualifier		ptr unaligned,
 14    16 	2 offset			ptr unaligned,
 14    17 	2 length			ptr unaligned,
 14    18 	2 subscript_list		ptr unaligned,
 14    19 						/* these fields are used by the 645 code generator */
 14    20 	2 address			structure unaligned,
 14    21 	  3 base			bit(3),
 14    22 	  3 offset		bit(15),
 14    23 	  3 op			bit(9),
 14    24 	  3 no_address		bit(1),
 14    25 	  3 inhibit		bit(1),
 14    26 	  3 ext_base		bit(1),
 14    27 	  3 tag			bit(6),
 14    28 	2 info			structure unaligned,
 14    29 	  3 address_in		structure,
 14    30 	    4 b			dimension(0:7) bit(1),
 14    31 	    4 storage		bit(1),
 14    32 	  3 value_in		structure,
 14    33 	    4 a			bit(1),
 14    34 	    4 q			bit(1),
 14    35 	    4 aq			bit(1),
 14    36 	    4 string_aq		bit(1),
 14    37 	    4 complex_aq		bit(1),
 14    38 	    4 decimal_aq		bit(1),
 14    39 	    4 b			dimension(0:7) bit(1),
 14    40 	    4 storage		bit(1),
 14    41 	    4 indicators		bit(1),
 14    42 	    4 x			dimension(0:7) bit(1),
 14    43 	  3 other			structure,
 14    44 	    4 big_offset		bit(1),
 14    45 	    4 big_length		bit(1),
 14    46 	    4 modword_in_offset	bit(1),
 14    47 	2 data_type		fixed(5) unaligned,
 14    48 	2 bits			structure unaligned,
 14    49 	  3 padded_ref		bit(1),
 14    50 	  3 aligned_ref		bit(1),
 14    51 	  3 long_ref		bit(1),
 14    52 	  3 forward_ref		bit(1),
 14    53 	  3 ic_ref		bit(1),
 14    54 	  3 temp_ref		bit(1),
 14    55 	  3 defined_ref		bit(1),
 14    56 	  3 evaluated		bit(1),
 14    57 	  3 allocate		bit(1),
 14    58 	  3 allocated		bit(1),
 14    59 	  3 aliasable		bit(1),
 14    60 	  3 even			bit(1),
 14    61 	  3 perm_address		bit(1),
 14    62 	  3 aggregate		bit(1),
 14    63 	  3 hit_zero		bit(1),
 14    64 	  3 dont_save		bit(1),
 14    65 	  3 fo_in_qual		bit(1),
 14    66 	  3 hard_to_load		bit(1),
 14    67 	2 relocation		bit(12) unaligned,
 14    68 	2 more_bits		structure unaligned,
 14    69 	  3 substr		bit(1),
 14    70 	  3 padded_for_store_ref	bit(1),
 14    71 	  3 aligned_for_store_ref	bit(1),
 14    72 	  3 mbz			bit(15),
 14    73 	2 store_ins		bit(18) unaligned;
 14    74 
 14    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       38 
 15     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 15     2 
 15     3 dcl	1 symbol			based aligned,
 15     4 	2 node_type		bit(9) unal,
 15     5 	2 source_id		structure unal,
 15     6 	  3 file_number		bit(8),
 15     7 	  3 line_number		bit(14),
 15     8 	  3 statement_number	bit(5),
 15     9 	2 location		fixed(18) unal unsigned,
 15    10 	2 allocated		bit(1) unal,
 15    11 	2 dcl_type		bit(3) unal,
 15    12 	2 reserved		bit(6) unal,
 15    13 	2 pix			unal,
 15    14 	  3 pic_fixed		bit(1) unal,
 15    15 	  3 pic_float		bit(1) unal,
 15    16 	  3 pic_char		bit(1) unal,
 15    17 	  3 pic_scale		fixed(7) unal,
 15    18 	  3 pic_size		fixed(7) unal,
 15    19 	2 level			fixed(8) unal,
 15    20 	2 boundary		fixed(3) unal,
 15    21 	2 size_units		fixed(3) unal,
 15    22 	2 scale			fixed(7) unal,
 15    23 	2 runtime			bit(18) unal,
 15    24 	2 runtime_offset		bit(18) unal,
 15    25 	2 block_node		ptr unal,
 15    26 	2 token			ptr unal,
 15    27 	2 next			ptr unal,
 15    28 	2 multi_use		ptr unal,
 15    29 	2 cross_references		ptr unal,
 15    30 	2 initial			ptr unal,
 15    31 	2 array			ptr unal,
 15    32 	2 descriptor		ptr unal,
 15    33 	2 equivalence		ptr unal,
 15    34 	2 reference		ptr unal,
 15    35 	2 general			ptr unal,
 15    36 	2 father			ptr unal,
 15    37 	2 brother			ptr unal,
 15    38 	2 son			ptr unal,
 15    39 	2 word_size		ptr unal,
 15    40 	2 bit_size		ptr unal,
 15    41 	2 dcl_size		ptr unal,
 15    42 	2 symtab_size		ptr unal,
 15    43 	2 c_word_size		fixed(24),
 15    44 	2 c_bit_size		fixed(24),
 15    45 	2 c_dcl_size		fixed(24),
 15    46 
 15    47 	2 attributes		structure aligned,
 15    48 	  3 data_type		structure unal,
 15    49 	    4 structure		bit(1) ,
 15    50 	    4 fixed		bit(1),
 15    51 	    4 float		bit(1),
 15    52 	    4 bit			bit(1),
 15    53 	    4 char		bit(1),
 15    54 	    4 ptr			bit(1),
 15    55 	    4 offset		bit(1),
 15    56 	    4 area		bit(1),
 15    57 	    4 label		bit(1),
 15    58 	    4 entry		bit(1),
 15    59 	    4 file		bit(1),
 15    60 	    4 arg_descriptor	bit(1),
 15    61 	    4 storage_block		bit(1),
 15    62 	    4 explicit_packed	bit(1), /* options(packed) */
 15    63 	    4 condition		bit(1),
 15    64 	    4 format		bit(1),
 15    65 	    4 builtin		bit(1),
 15    66 	    4 generic		bit(1),
 15    67 	    4 picture		bit(1),
 15    68 
 15    69 	  3 misc_attributes		structure unal,
 15    70 	    4 dimensioned		bit(1),
 15    71 	    4 initialed		bit(1),
 15    72 	    4 aligned		bit(1),
 15    73 	    4 unaligned		bit(1),
 15    74 	    4 signed		bit(1),
 15    75 	    4 unsigned		bit(1),
 15    76 	    4 precision		bit(1),
 15    77 	    4 varying		bit(1),
 15    78 	    4 local		bit(1),
 15    79 	    4 decimal		bit(1),
 15    80 	    4 binary		bit(1),
 15    81 	    4 real		bit(1),
 15    82 	    4 complex		bit(1),
 15    83 	    4 variable		bit(1),
 15    84 	    4 reducible		bit(1),
 15    85 	    4 irreducible		bit(1),
 15    86 	    4 returns		bit(1),
 15    87 	    4 position		bit(1),
 15    88 	    4 internal		bit(1),
 15    89 	    4 external		bit(1),
 15    90 	    4 like		bit(1),
 15    91 	    4 member		bit(1),
 15    92 	    4 non_varying		bit(1),
 15    93 	    4 options		bit(1),
 15    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 15    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 15    96 
 15    97 	  3 storage_class		structure unal,
 15    98 	    4 auto		bit(1),
 15    99 	    4 based		bit(1),
 15   100 	    4 static		bit(1),
 15   101 	    4 controlled		bit(1),
 15   102 	    4 defined		bit(1),
 15   103 	    4 parameter		bit(1),
 15   104 	    4 param_desc		bit(1),
 15   105 	    4 constant		bit(1),
 15   106 	    4 temporary		bit(1),
 15   107 	    4 return_value		bit(1),
 15   108 
 15   109 	  3 file_attributes		structure unal,
 15   110 	    4 print		bit(1),
 15   111 	    4 input		bit(1),
 15   112 	    4 output		bit(1),
 15   113 	    4 update		bit(1),
 15   114 	    4 stream		bit(1),
 15   115 	    4 reserved_1		bit(1),
 15   116 	    4 record		bit(1),
 15   117 	    4 sequential		bit(1),
 15   118 	    4 direct		bit(1),
 15   119 	    4 interactive		bit(1),		/* env(interactive) */
 15   120 	    4 reserved_2		bit(1),
 15   121 	    4 reserved_3		bit(1),
 15   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 15   123 	    4 keyed		bit(1),
 15   124 	    4 reserved_4		bit(1),
 15   125 	    4 environment		bit(1),
 15   126 
 15   127 	  3 compiler_developed	structure unal,
 15   128 	    4 aliasable		bit(1),
 15   129 	    4 packed		bit(1),
 15   130 	    4 passed_as_arg		bit(1),
 15   131 	    4 allocate		bit(1),
 15   132 	    4 set			bit(1),
 15   133 	    4 exp_extents		bit(1),
 15   134 	    4 refer_extents		bit(1),
 15   135 	    4 star_extents		bit(1),
 15   136 	    4 isub		bit(1),
 15   137 	    4 put_in_symtab		bit(1),
 15   138 	    4 contiguous		bit(1),
 15   139 	    4 put_data		bit(1),
 15   140 	    4 overlayed		bit(1),
 15   141 	    4 error		bit(1),
 15   142 	    4 symtab_processed	bit(1),
 15   143 	    4 overlayed_by_builtin	bit(1),
 15   144 	    4 defaulted		bit(1),
 15   145 	    4 connected		bit(1);
 15   146 
 15   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       39 
 16     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 16     2 
 16     3 dcl	1 token			based aligned,
 16     4 	2 node_type		bit(9) unaligned,
 16     5 	2 type			bit(9) unaligned,
 16     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 16     7 	2 declaration		ptr unaligned,
 16     8 	2 next			ptr unaligned,
 16     9 	2 size			fixed(9),
 16    10 	2 string			char(n refer(token.size));
 16    11 
 16    12 /* END INCLUDE FILE ... token.incl.pl1 */
       40 
 17     1 dcl	pl1_stat_$token_list_ptr ptr external static;		/* pointer to token list	*/
 17     2 dcl	token_list(token_list_length) ptr based(token_list_pointer);
 17     3 dcl	token_list_pointer ptr initial(pl1_stat_$token_list_ptr);	/* for efficiency only */
 17     4 dcl	token_list_length fixed(15) internal static initial(3000) options(constant);
 17     5 
 17     6 dcl	1 pl1_stat_$statement_id	external static,
 17     7 	2 file_number		bit(8),
 17     8 	2 line_number		bit(14),
 17     9 	2 statement_number		bit(5);
 17    10 
 17    11 dcl	1 t_table 		based(token_list(k)) aligned,
 17    12 	2 node_type		bit(9) unaligned,
 17    13 	2 type			bit(9) unaligned,
 17    14 	2 loc			bit(18) unaligned,
 17    15 	2 declaration		ptr unaligned,
 17    16 	2 next			ptr unaligned,
 17    17 	2 size			fixed(9),
 17    18 	2 string			char(n refer(t_table.size));
       41 
 18     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 18     2 
 18     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 18     4 	identifier	initial("100000000"b),
 18     5 	isub		initial("010000000"b),
 18     6 	plus		initial("001000001"b),
 18     7 	minus		initial("001000010"b),
 18     8 	asterisk		initial("001000011"b),
 18     9 	slash		initial("001000100"b),
 18    10 	expon		initial("001000101"b),
 18    11 	not		initial("001000110"b),
 18    12 	and		initial("001000111"b),
 18    13 	or		initial("001001000"b),
 18    14 	cat		initial("001001001"b),
 18    15 	eq		initial("001001010"b),
 18    16 	ne		initial("001001011"b),
 18    17 	lt		initial("001001100"b),
 18    18 	gt		initial("001001101"b),
 18    19 	le		initial("001001110"b),
 18    20 	ge		initial("001001111"b),
 18    21 	ngt		initial("001010000"b),
 18    22 	nlt		initial("001010001"b),
 18    23 	assignment	initial("001010010"b),
 18    24 	colon		initial("001010011"b),
 18    25 	semi_colon	initial("001010100"b),
 18    26 	comma		initial("001010101"b),
 18    27 	period		initial("001010110"b),
 18    28 	arrow		initial("001010111"b),
 18    29 	left_parn		initial("001011000"b),
 18    30 	right_parn	initial("001011001"b),
 18    31 	percent		initial("001011100"b),
 18    32 	bit_string	initial("000100001"b),
 18    33 	char_string	initial("000100010"b),
 18    34 	bin_integer	initial("000110001"b),
 18    35 	dec_integer	initial("000110011"b),
 18    36 	fixed_bin		initial("000110000"b),
 18    37 	fixed_dec		initial("000110010"b),
 18    38 	float_bin		initial("000110100"b),
 18    39 	float_dec		initial("000110110"b),
 18    40 	i_bin_integer	initial("000111001"b),
 18    41 	i_dec_integer	initial("000111011"b),
 18    42 	i_fixed_bin	initial("000111000"b),
 18    43 	i_fixed_dec	initial("000111010"b),
 18    44 	i_float_bin	initial("000111100"b),
 18    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 18    46 
 18    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 18    48 	is_isub			initial ("010000000"b),
 18    49 	is_delimiter		initial ("001000000"b),
 18    50 	is_constant		initial ("000100000"b),
 18    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 18    52 	is_arithmetic_constant	initial ("000110000"b),
 18    53 	is_imaginary_constant	initial ("000111000"b),
 18    54 	is_float_constant		initial ("000110100"b),
 18    55 	is_decimal_constant		initial ("000110010"b),
 18    56 	is_integral_constant 	initial ("000110001"b)
 18    57 	) bit(9) internal static aligned options(constant);
 18    58 
 18    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       42 
       43 			/*      */
       44 
       45 begin:
       46 	qual=null;
       47 	k=index;
       48 	if t_table.type = isub
       49 		then do;
       50 			index=index+1;
       51 			return(token_list(k));
       52 		     end;
       53 
       54 reset:
       55 	i,j=0;
       56 
       57 next:
       58 	if t_table.type ^= identifier then go to fail;
       59 	q=token_list(k);
       60 	k=k+1;
       61 
       62 	if t_table.type = left_parn
       63 		then do;
       64 			if token_list(k+1)->t_table.type=right_parn
       65 			then do;
       66 				call make_reference;
       67 
       68 				if i = 0
       69 				then do;
       70 					q -> reference.offset = create_list(0);
       71 					k = k + 2;
       72 
       73 					if t_table.type = arrow then goto test_ptr;
       74 				end;
       75 
       76 				goto entry_reference;
       77 			end;
       78 
       79 next_sub:
       80 			k=k+1;
       81 			i=i+1;
       82 
       83 			if t_table.type=asterisk
       84 			then do;
       85 				if i > hbound(s,1)
       86 				     then goto fail;
       87 				s(i)=token_list(k);
       88 				k=k+1;
       89 			end;
       90 			else	if ^atom() then goto fail;
       91 
       92 			if t_table.type = comma then go to next_sub;
       93 			if t_table.type = colon then go to next_sub;
       94 			if t_table.type ^= right_parn then go to fail;
       95 			k=k+1;
       96 		     end;
       97 
       98 	if t_table.type = period
       99 		then do;
      100 			k=k+1;
      101 			j=j+1;
      102 			if j > hbound(t,1)
      103 			    then goto fail;
      104 			t(j)=q;
      105 			go to next;
      106 		     end;
      107 
      108 	if qual^=null | j+i ^= 0
      109 		then call make_reference;
      110 
      111 	if t_table.type = arrow
      112 		then do;
      113 test_ptr:
      114 			k=k+1;
      115 			qual=q;
      116 			if q->node.type = token_node
      117 				then if cblock^=null then call context(q,cblock,pointer_context);
      118 			go to reset;
      119 		     end;
      120 
      121 entry_reference:
      122 	do while(t_table.type=left_parn);
      123 		i=0;
      124 
      125 		if token_list(k+1)->t_table.type^=right_parn
      126 		then do;
      127 next_arg:
      128 			k=k+1;
      129 			i=i+1;
      130 
      131 			if ^atom() then goto fail;
      132 
      133 			if t_table.type=comma then goto next_arg;
      134 			if t_table.type^=right_parn then goto fail;
      135 		end;
      136 		else	k=k+1;
      137 
      138 		k=k+1;
      139 
      140 		arglist=create_operator(std_arg_list,3);
      141 		arglist->operand(2)=create_list(i);
      142 
      143 		do j=1 to i;
      144 			arglist->operand(2)->list.element(j)=s(i-j+1);
      145 		end;
      146 
      147 		op=create_operator(std_call,3);
      148 		op->operand(2)=q;
      149 		op->operand(3)=arglist;
      150 
      151 		q=op;
      152 	end;
      153 
      154 	if t_table.type=arrow
      155 	then	goto test_ptr;
      156 
      157 ret1:
      158 	index=k;
      159 	return(q);
      160 
      161 fail:
      162 	return(null);
      163 
      164 
      165 make_reference:	proc;
      166 
      167 		q=create_reference(q);
      168 		q->reference.qualifier=qual;
      169 		if i^=0 then do;
      170 				p=create_list(i);
      171 				do m=1 to i;
      172 					p->list.element(m) = s(i+1-m);
      173 				end;
      174 				q->reference.offset=p;
      175 			   end;
      176 		if j^=0 then do;
      177 				p=create_list(j);
      178 				do m=1 to j;
      179 					p->list.element(m) = t(j+1-m);
      180 				end;
      181 				q->reference.length=p;
      182 			     end;
      183 
      184 		end make_reference;
      185 
      186 
      187 atom:	proc() returns(bit(1)aligned);
      188 
      189 dcl	save_index fixed bin(15);
      190 
      191 	save_index=k;
      192 
      193 	if i > hbound(s,1)
      194 	     then goto fail;
      195 	s(i) = expression_parse(k,cblock);
      196 	if s(i)=null then return("0"b);
      197 
      198 	if token_list(save_index)->token.type^=left_parn
      199 	then;			else
      200 
      201 	if s(i)->node.type=operator_node
      202 	then;			else
      203 
      204 	if s(i)->node.type=token_node
      205 	&  s(i)->token.type^=identifier
      206 	then;
      207 
      208 	else do;
      209 		sym=create_symbol(null,null,by_compiler);
      210 		sym->symbol.temporary="1"b;
      211 
      212 		op=create_operator(assign,2);
      213 		op->operand(1)=sym->symbol.reference;
      214 		op->operand(2)=s(i);
      215 
      216 		if i > hbound(s,1)
      217 		     then goto fail;
      218 		s(i)=op;
      219 	end;
      220 
      221 	return("1"b);
      222 
      223 	end atom;
      224 
      225 	end reference_parse;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/24/92  1102.5  reference_parse.pl1               >spec>install>MR12.5-1011>reference_parse.pl1
31           1    04/24/92  1056.9  parse.incl.pl1                    >spec>install>MR12.5-1011>parse.incl.pl1
1-175        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
32           8    05/03/76  1420.8  context_codes.incl.pl1            >ldd>incl>context_codes.incl.pl1
33           9    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
34          10    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
35          11    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
36          12    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
37          13    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
38          14    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
39          15    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
40          16    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
41          17    09/14/77  1805.7  token_list.incl.pl1               >ldd>incl>token_list.incl.pl1
42          18    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arglist                         000112 automatic       pointer                  dcl 25 set ref 140* 141 144 149
arrow                                  constant        bit(9)                   initial dcl 18-3 ref 73 111 154
assign                          000002 constant        bit(9)                   initial dcl 12-8 set ref 212*
asterisk                               constant        bit(9)                   initial dcl 18-3 ref 83
attributes               31            based           structure                level 2 dcl 15-3
by_compiler                     000003 constant        bit(3)                   initial dcl 9-5 set ref 209*
cblock                                 parameter       pointer                  dcl 25 set ref 16 116 116* 195*
colon                                  constant        bit(9)                   initial dcl 18-3 ref 93
comma                                  constant        bit(9)                   initial dcl 18-3 ref 92 133
context                         000010 constant        entry                    external dcl 1-17 ref 116
create_list                     000014 constant        entry                    external dcl 2-147 ref 70 141 170 177
create_operator                 000016 constant        entry                    external dcl 2-152 ref 140 147 212
create_reference                000020 constant        entry                    external dcl 2-158 ref 167
create_symbol                   000022 constant        entry                    external dcl 2-184 ref 209
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 10-6 set
                                                                                  ref 144* 172* 179*
expression_parse                000012 constant        entry                    external dcl 1-73 ref 195
i                               000100 automatic       fixed bin(15,0)          dcl 24 set ref 54* 68 81* 81 85 87 108 123* 129* 129
                                                                                  141* 143 144 169 170* 171 172 193 195 196 199 202
                                                                                  202 214 216 218
identifier                             constant        bit(9)                   initial dcl 18-3 ref 57 202
index                                  parameter       fixed bin(15,0)          dcl 24 set ref 16 47 50* 50 157*
isub                                   constant        bit(9)                   initial dcl 18-3 ref 48
j                               000101 automatic       fixed bin(15,0)          dcl 24 set ref 54* 101* 101 102 104 108 143* 144
                                                                                  144* 176 177* 178 179
k                               000102 automatic       fixed bin(15,0)          dcl 24 set ref 47* 48 51 57 59 60* 60 62 64 71* 71
                                                                                  73 79* 79 83 87 88* 88 92 93 94 95* 95 98 100* 100
                                                                                  111 113* 113 121 125 127* 127 133 134 136* 136
                                                                                  138* 138 154 157 191 195*
left_parn                              constant        bit(9)                   initial dcl 18-3 ref 62 121 198
length                    6            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref
                                                                                  181*
list                                   based           structure                level 1 dcl 10-6
m                               000103 automatic       fixed bin(15,0)          dcl 24 set ref 171* 172 172* 178* 179 179*
node                                   based           structure                level 1 dcl 11-27
null                                                   builtin function         dcl 29 ref 45 108 116 161 196 209 209 209 209
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref 70*
                                                                                  174*
op                              000114 automatic       pointer                  dcl 25 set ref 147* 148 149 151 212* 213 214 218
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 13-6 set
                                                                                  ref 141* 144 148* 149* 213* 214*
operator                               based           structure                level 1 dcl 13-6
operator_node                          constant        bit(9)                   initial dcl 11-5 ref 199
p                               000104 automatic       pointer                  dcl 25 set ref 170* 172 174 177* 179 181
period                                 constant        bit(9)                   initial dcl 18-3 ref 98
pl1_stat_$token_list_ptr        000024 external static pointer                  dcl 17-1 ref 17-3
pointer_context                 000004 constant        fixed bin(15,0)          initial dcl 8-1 set ref 116*
q                               000106 automatic       pointer                  dcl 25 set ref 59* 70 104 115 116 116* 148 151* 159
                                                                                  167* 167* 168 174 181
qual                            000110 automatic       pointer                  dcl 25 set ref 45* 108 115* 168
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref
                                                                                  168*
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 15-3 in procedure "reference_parse"
                                                                                  ref 213
reference                              based           structure                level 1 dcl 14-3 in procedure "reference_parse"
right_parn                             constant        bit(9)                   initial dcl 18-3 ref 64 94 125 134
s                               000120 automatic       pointer                  array packed unaligned dcl 26 set ref 85 87* 144 172
                                                                                  193 195* 196 199 202 202 214 216 218*
save_index                      001342 automatic       fixed bin(15,0)          dcl 189 set ref 191* 198
std_arg_list                    000001 constant        bit(9)                   initial dcl 12-8 set ref 140*
std_call                        000000 constant        bit(9)                   initial dcl 12-8 set ref 147*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 15-3
sym                             000116 automatic       pointer                  dcl 25 set ref 209* 210 213
symbol                                 based           structure                level 1 dcl 15-3
t                               001120 automatic       pointer                  array packed unaligned dcl 27 set ref 102 104* 179
t_table                                based           structure                level 1 dcl 17-11
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 15-3 set ref
                                                                                  210*
token                                  based           structure                level 1 dcl 16-3
token_list                             based           pointer                  array dcl 17-2 ref 48 51 57 59 62 64 73 83 87 92 93
                                                                                  94 98 111 121 125 133 134 154 198
token_list_pointer              001320 automatic       pointer                  initial dcl 17-3 set ref 48 51 57 59 62 64 73 83 87
                                                                                  92 93 94 98 111 121 125 133 134 154 17-3* 198
token_node                             constant        bit(9)                   initial dcl 11-5 ref 116 202
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 16-3 in procedure "reference_parse" ref 198
                                                                                  202
type                      0(09)        based           bit(9)                   level 2 in structure "t_table" packed packed
                                                                                  unaligned dcl 17-11 in procedure "reference_parse"
                                                                                  ref 48 57 62 64 73 83 92 93 94 98 111 121 125 133
                                                                                  134 154
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 11-27 in procedure "reference_parse" ref 116
                                                                                  199 202

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 12-8
abs_fun                                internal static bit(9)                   initial dcl 12-8
acos_fun                               internal static bit(9)                   initial dcl 12-8
acosd_fun                              internal static bit(9)                   initial dcl 12-8
add                                    internal static bit(9)                   initial dcl 12-8
addbitno_fun                           internal static bit(9)                   initial dcl 12-8
addcharno_fun                          internal static bit(9)                   initial dcl 12-8
addr                                                   builtin function         dcl 29
addr_fun                               internal static bit(9)                   initial dcl 12-8
addr_fun_bits                          internal static bit(9)                   initial dcl 12-8
addrel_fun                             internal static bit(9)                   initial dcl 12-8
adjust_count                    000000 constant        entry                    external dcl 2-20
allocation_fun                         internal static bit(9)                   initial dcl 12-8
allot_auto                             internal static bit(9)                   initial dcl 12-8
allot_based                            internal static bit(9)                   initial dcl 12-8
allot_ctl                              internal static bit(9)                   initial dcl 12-8
allot_var                              internal static bit(9)                   initial dcl 12-8
and                                    internal static bit(9)                   initial dcl 18-3
and_bits                               internal static bit(9)                   initial dcl 12-8
area_context                           internal static fixed bin(15,0)          initial dcl 8-1
arg                                    automatic       pointer                  dcl 25
array_node                             internal static bit(9)                   initial dcl 11-5
asin_fun                               internal static bit(9)                   initial dcl 12-8
asind_fun                              internal static bit(9)                   initial dcl 12-8
assign_by_name                         internal static bit(9)                   initial dcl 12-8
assign_round                           internal static bit(9)                   initial dcl 12-8
assign_size_ck                         internal static bit(9)                   initial dcl 12-8
assign_zero                            internal static bit(9)                   initial dcl 12-8
assignment                             internal static bit(9)                   initial dcl 18-3
atan_fun                               internal static bit(9)                   initial dcl 12-8
atand_fun                              internal static bit(9)                   initial dcl 12-8
attribute_parse                 000000 constant        entry                    external dcl 1-11
b_format                               internal static bit(9)                   initial dcl 12-8
baseno_fun                             internal static bit(9)                   initial dcl 12-8
baseptr_fun                            internal static bit(9)                   initial dcl 12-8
bin_integer                            internal static bit(9)                   initial dcl 18-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_pointer                            internal static bit(9)                   initial dcl 12-8
bit_string                             internal static bit(9)                   initial dcl 18-3
bit_to_char                            internal static bit(9)                   initial dcl 12-8
bit_to_word                            internal static bit(9)                   initial dcl 12-8
bitno_fun                              internal static bit(9)                   initial dcl 12-8
block_node                             internal static bit(9)                   initial dcl 11-5
bn_format                              internal static bit(9)                   initial dcl 12-8
bool_fun                               internal static bit(9)                   initial dcl 12-8
bound_ck                               internal static bit(9)                   initial dcl 12-8
bound_node                             internal static bit(9)                   initial dcl 11-5
by_context                             internal static bit(3)                   initial dcl 9-5
by_declare                             internal static bit(3)                   initial dcl 9-5
by_explicit_context                    internal static bit(3)                   initial dcl 9-5
by_implication                         internal static bit(3)                   initial dcl 9-5
by_name_agg_node                       internal static bit(9)                   initial dcl 11-5
byte_fun                               internal static bit(9)                   initial dcl 12-8
c_format                               internal static bit(9)                   initial dcl 12-8
cat                                    internal static bit(9)                   initial dcl 18-3
cat_string                             internal static bit(9)                   initial dcl 12-8
ceil_fun                               internal static bit(9)                   initial dcl 12-8
char_string                            internal static bit(9)                   initial dcl 18-3
char_to_word                           internal static bit(9)                   initial dcl 12-8
charno_fun                             internal static bit(9)                   initial dcl 12-8
clock_fun                              internal static bit(9)                   initial dcl 12-8
close_file                             internal static bit(9)                   initial dcl 12-8
codeptr_fun                            internal static bit(9)                   initial dcl 12-8
column_format                          internal static bit(9)                   initial dcl 12-8
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 12-8
condition_context                      internal static fixed bin(15,0)          initial dcl 8-1
conjg_fun                              internal static bit(9)                   initial dcl 12-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 11-5
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 12-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 12-8
cos_fun                                internal static bit(9)                   initial dcl 12-8
cosd_fun                               internal static bit(9)                   initial dcl 12-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_statement                000000 constant        entry                    external dcl 2-163
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 11-5
data_list_parse                 000000 constant        entry                    external dcl 1-22
dec_integer                            internal static bit(9)                   initial dcl 18-3
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_label                   000000 constant        entry                    external dcl 1-29
declare_parse                   000000 constant        entry                    external dcl 1-35
declare_parse$abort             000000 constant        entry                    external dcl 1-40
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_node                           internal static bit(9)                   initial dcl 11-5
default_parse                   000000 constant        entry                    external dcl 1-44
delete_file                            internal static bit(9)                   initial dcl 12-8
desc_size                              internal static bit(9)                   initial dcl 12-8
descriptor_parse                000000 constant        entry                    external dcl 1-49
digit_to_bit                           internal static bit(9)                   initial dcl 12-8
div                                    internal static bit(9)                   initial dcl 12-8
do_fun                                 internal static bit(9)                   initial dcl 12-8
do_parse                        000000 constant        entry                    external dcl 1-56
do_spec                                internal static bit(9)                   initial dcl 12-8
e_format                               internal static bit(9)                   initial dcl 12-8
empty_area                             internal static bit(9)                   initial dcl 12-8
enable_on                              internal static bit(9)                   initial dcl 12-8
environmentptr_fun                     internal static bit(9)                   initial dcl 12-8
eq                                     internal static bit(9)                   initial dcl 18-3
equal                                  internal static bit(9)                   initial dcl 12-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
evaluate                        000000 constant        entry                    external dcl 1-67
ex_prologue                            internal static bit(9)                   initial dcl 12-8
exp                                    internal static bit(9)                   initial dcl 12-8
exp_fun                                internal static bit(9)                   initial dcl 12-8
expon                                  internal static bit(9)                   initial dcl 18-3
f_format                               internal static bit(9)                   initial dcl 12-8
file_name_context                      internal static fixed bin(15,0)          initial dcl 8-1
fixed_bin                              internal static bit(9)                   initial dcl 18-3
fixed_dec                              internal static bit(9)                   initial dcl 18-3
float_bin                              internal static bit(9)                   initial dcl 18-3
float_dec                              internal static bit(9)                   initial dcl 18-3
floor_fun                              internal static bit(9)                   initial dcl 12-8
format_list_parse               000000 constant        entry                    external dcl 1-79
format_value_node                      internal static bit(9)                   initial dcl 11-5
fortran_read                           internal static bit(9)                   initial dcl 12-8
fortran_write                          internal static bit(9)                   initial dcl 12-8
free_based                             internal static bit(9)                   initial dcl 12-8
free_ctl                               internal static bit(9)                   initial dcl 12-8
free_node                       000000 constant        entry                    external dcl 2-345
free_var                               internal static bit(9)                   initial dcl 12-8
ftn_file_manip                         internal static bit(9)                   initial dcl 12-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 12-8
ge                                     internal static bit(9)                   initial dcl 18-3
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 12-8
get_edit_trans                         internal static bit(9)                   initial dcl 12-8
get_file                               internal static bit(9)                   initial dcl 12-8
get_list_trans                         internal static bit(9)                   initial dcl 12-8
get_size                        000000 constant        entry                    external dcl 2-352
get_string                             internal static bit(9)                   initial dcl 12-8
greater_or_equal                       internal static bit(9)                   initial dcl 12-8
greater_than                           internal static bit(9)                   initial dcl 12-8
gt                                     internal static bit(9)                   initial dcl 18-3
half_to_word                           internal static bit(9)                   initial dcl 12-8
i_bin_integer                          internal static bit(9)                   initial dcl 18-3
i_dec_integer                          internal static bit(9)                   initial dcl 18-3
i_fixed_bin                            internal static bit(9)                   initial dcl 18-3
i_fixed_dec                            internal static bit(9)                   initial dcl 18-3
i_float_bin                            internal static bit(9)                   initial dcl 18-3
i_float_dec                            internal static bit(9)                   initial dcl 18-3
if_parse                        000000 constant        entry                    external dcl 1-87
imag_fun                               internal static bit(9)                   initial dcl 12-8
index_after_fun                        internal static bit(9)                   initial dcl 12-8
index_before_fun                       internal static bit(9)                   initial dcl 12-8
index_fun                              internal static bit(9)                   initial dcl 12-8
index_rev_fun                          internal static bit(9)                   initial dcl 12-8
io_statement_parse              000000 constant        entry                    external dcl 1-96
is_arith_constant                      internal static bit(9)                   initial dcl 18-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 18-47
is_constant                            internal static bit(9)                   initial dcl 18-47
is_decimal_constant                    internal static bit(9)                   initial dcl 18-47
is_delimiter                           internal static bit(9)                   initial dcl 18-47
is_float_constant                      internal static bit(9)                   initial dcl 18-47
is_identifier                          internal static bit(9)                   initial dcl 18-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 18-47
is_integral_constant                   internal static bit(9)                   initial dcl 18-47
is_isub                                internal static bit(9)                   initial dcl 18-47
join                                   internal static bit(9)                   initial dcl 12-8
jump                                   internal static bit(9)                   initial dcl 12-8
jump_false                             internal static bit(9)                   initial dcl 12-8
jump_if_eq                             internal static bit(9)                   initial dcl 12-8
jump_if_ge                             internal static bit(9)                   initial dcl 12-8
jump_if_gt                             internal static bit(9)                   initial dcl 12-8
jump_if_le                             internal static bit(9)                   initial dcl 12-8
jump_if_lt                             internal static bit(9)                   initial dcl 12-8
jump_if_ne                             internal static bit(9)                   initial dcl 12-8
jump_true                              internal static bit(9)                   initial dcl 12-8
l_parn                                 internal static bit(9)                   initial dcl 12-8
label_array_element_node               internal static bit(9)                   initial dcl 11-5
label_node                             internal static bit(9)                   initial dcl 11-5
le                                     internal static bit(9)                   initial dcl 18-3
length_fun                             internal static bit(9)                   initial dcl 12-8
less_or_equal                          internal static bit(9)                   initial dcl 12-8
less_than                              internal static bit(9)                   initial dcl 12-8
lex                             000000 constant        entry                    external dcl 1-106
lex$initialize_lex              000000 constant        entry                    external dcl 1-112
lex$write_last_line             000000 constant        entry                    external dcl 1-109
line_format                            internal static bit(9)                   initial dcl 12-8
list_node                              internal static bit(9)                   initial dcl 11-5
locate_file                            internal static bit(9)                   initial dcl 12-8
lock_file                              internal static bit(9)                   initial dcl 12-8
lock_fun                               internal static bit(9)                   initial dcl 12-8
log10_fun                              internal static bit(9)                   initial dcl 12-8
log2_fun                               internal static bit(9)                   initial dcl 12-8
log_fun                                internal static bit(9)                   initial dcl 12-8
loop                                   internal static bit(9)                   initial dcl 12-8
lt                                     internal static bit(9)                   initial dcl 18-3
machine_state_node                     internal static bit(9)                   initial dcl 11-5
make_desc                              internal static bit(9)                   initial dcl 12-8
max_fun                                internal static bit(9)                   initial dcl 12-8
max_list_elements                      internal static fixed bin(17,0)          initial dcl 10-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 13-15
merge_attributes                000000 constant        entry                    external dcl 2-355
min_fun                                internal static bit(9)                   initial dcl 12-8
minus                                  internal static bit(9)                   initial dcl 18-3
mod_bit                                internal static bit(9)                   initial dcl 12-8
mod_byte                               internal static bit(9)                   initial dcl 12-8
mod_fun                                internal static bit(9)                   initial dcl 12-8
mod_half                               internal static bit(9)                   initial dcl 12-8
mod_word                               internal static bit(9)                   initial dcl 12-8
mult                                   internal static bit(9)                   initial dcl 12-8
n                                      automatic       fixed bin(15,0)          dcl 24
ne                                     internal static bit(9)                   initial dcl 18-3
negate                                 internal static bit(9)                   initial dcl 12-8
ngt                                    internal static bit(9)                   initial dcl 18-3
nlt                                    internal static bit(9)                   initial dcl 18-3
no_token                               internal static bit(9)                   initial dcl 18-3
nop                                    internal static bit(9)                   initial dcl 12-8
not                                    internal static bit(9)                   initial dcl 18-3
not_bits                               internal static bit(9)                   initial dcl 12-8
not_equal                              internal static bit(9)                   initial dcl 12-8
off_fun                                internal static bit(9)                   initial dcl 12-8
on_parse                        000000 constant        entry                    external dcl 1-116
on_parse$revert                 000000 constant        entry                    external dcl 1-123
open_file                              internal static bit(9)                   initial dcl 12-8
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 18-3
or_bits                                internal static bit(9)                   initial dcl 12-8
pack                                   internal static bit(9)                   initial dcl 12-8
page_format                            internal static bit(9)                   initial dcl 12-8
param_desc_ptr                         internal static bit(9)                   initial dcl 12-8
param_ptr                              internal static bit(9)                   initial dcl 12-8
parameter_context                      internal static fixed bin(15,0)          initial dcl 8-1
parse                           000000 constant        entry                    external dcl 1-128
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 18-3
picture_format                         internal static bit(9)                   initial dcl 12-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 12-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
pl1_stat_$statement_id                 external static structure                level 1 packed packed unaligned dcl 17-6
plus                                   internal static bit(9)                   initial dcl 18-3
prefix_plus                            internal static bit(9)                   initial dcl 12-8
procedure_parse                 000000 constant        entry                    external dcl 1-133
process_entry                   000000 constant        entry                    external dcl 1-143
ptr_fun                                internal static bit(9)                   initial dcl 12-8
put_control                            internal static bit(9)                   initial dcl 12-8
put_data_trans                         internal static bit(9)                   initial dcl 12-8
put_edit_trans                         internal static bit(9)                   initial dcl 12-8
put_field                              internal static bit(9)                   initial dcl 12-8
put_field_chk                          internal static bit(9)                   initial dcl 12-8
put_file                               internal static bit(9)                   initial dcl 12-8
put_list_trans                         internal static bit(9)                   initial dcl 12-8
put_string                             internal static bit(9)                   initial dcl 12-8
r_format                               internal static bit(9)                   initial dcl 12-8
r_parn                                 internal static bit(9)                   initial dcl 12-8
range_ck                               internal static bit(9)                   initial dcl 12-8
rank_fun                               internal static bit(9)                   initial dcl 12-8
read_file                              internal static bit(9)                   initial dcl 12-8
real_fun                               internal static bit(9)                   initial dcl 12-8
record_io                              internal static bit(9)                   initial dcl 12-8
refer                                  internal static bit(9)                   initial dcl 12-8
refer_extent                    000000 constant        entry                    external dcl 2-426
reference_node                         internal static bit(9)                   initial dcl 11-5
reference_parse                 000000 constant        entry                    external dcl 1-150
rel_fun                                internal static bit(9)                   initial dcl 12-8
repeat_fun                             internal static bit(9)                   initial dcl 12-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
reserve$rename_parse            000000 constant        entry                    external dcl 1-156
return_bits                            internal static bit(9)                   initial dcl 12-8
return_string                          internal static bit(9)                   initial dcl 12-8
return_value                           internal static bit(9)                   initial dcl 12-8
return_words                           internal static bit(9)                   initial dcl 12-8
reverse_fun                            internal static bit(9)                   initial dcl 12-8
revert_on                              internal static bit(9)                   initial dcl 12-8
rewrite_file                           internal static bit(9)                   initial dcl 12-8
round_fun                              internal static bit(9)                   initial dcl 12-8
search_fun                             internal static bit(9)                   initial dcl 12-8
search_rev_fun                         internal static bit(9)                   initial dcl 12-8
segno_fun                              internal static bit(9)                   initial dcl 12-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$abort       000000 constant        entry                    external dcl 2-446
semantic_translator$error       000000 constant        entry                    external dcl 2-450
semi_colon                             internal static bit(9)                   initial dcl 18-3
setbitno_fun                           internal static bit(9)                   initial dcl 12-8
setcharno_fun                          internal static bit(9)                   initial dcl 12-8
sf_par_node                            internal static bit(9)                   initial dcl 11-5
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 12-8
signal_on                              internal static bit(9)                   initial dcl 12-8
sin_fun                                internal static bit(9)                   initial dcl 12-8
sind_fun                               internal static bit(9)                   initial dcl 12-8
skip_format                            internal static bit(9)                   initial dcl 12-8
slash                                  internal static bit(9)                   initial dcl 18-3
source_node                            internal static bit(9)                   initial dcl 11-5
sqrt_fun                               internal static bit(9)                   initial dcl 12-8
stack_ptr                              internal static bit(9)                   initial dcl 12-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 12-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 12-8
stacq_fun                              internal static bit(9)                   initial dcl 12-8
statement_node                         internal static bit(9)                   initial dcl 11-5
statement_parse                 000000 constant        entry                    external dcl 1-160
statement_type                  000000 constant        entry                    external dcl 1-167
std_entry                              internal static bit(9)                   initial dcl 12-8
std_return                             internal static bit(9)                   initial dcl 12-8
stop                                   internal static bit(9)                   initial dcl 12-8
stream_prep                            internal static bit(9)                   initial dcl 12-8
sub                                    internal static bit(9)                   initial dcl 12-8
symbol_node                            internal static bit(9)                   initial dcl 11-5
tan_fun                                internal static bit(9)                   initial dcl 12-8
tand_fun                               internal static bit(9)                   initial dcl 12-8
temporary_node                         internal static bit(9)                   initial dcl 11-5
terminate_trans                        internal static bit(9)                   initial dcl 12-8
token_list_length                      internal static fixed bin(15,0)          initial dcl 17-4
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 12-8
trunc_fun                              internal static bit(9)                   initial dcl 12-8
unlock_file                            internal static bit(9)                   initial dcl 12-8
unpack                                 internal static bit(9)                   initial dcl 12-8
vclock_fun                             internal static bit(9)                   initial dcl 12-8
verify_fun                             internal static bit(9)                   initial dcl 12-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 12-8
verify_rev_fun                         internal static bit(9)                   initial dcl 12-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 12-8
word_to_mod2                           internal static bit(9)                   initial dcl 12-8
word_to_mod4                           internal static bit(9)                   initial dcl 12-8
word_to_mod8                           internal static bit(9)                   initial dcl 12-8
wordno_fun                             internal static bit(9)                   initial dcl 12-8
write_file                             internal static bit(9)                   initial dcl 12-8
x_format                               internal static bit(9)                   initial dcl 12-8
xor_bits                               internal static bit(9)                   initial dcl 12-8

NAMES DECLARED BY EXPLICIT CONTEXT.
atom                            000575 constant        entry                    internal dcl 187 ref 90 131
begin                           000032 constant        label                    dcl 45
entry_reference                 000303 constant        label                    dcl 121 ref 76
fail                            000460 constant        label                    dcl 161 ref 57 85 90 94 102 131 134 193 216
make_reference                  000464 constant        entry                    internal dcl 165 ref 66 108
next                            000056 constant        label                    dcl 57 ref 105
next_arg                        000325 constant        label                    dcl 127 ref 133
next_sub                        000144 constant        label                    dcl 79 ref 92 93
reference_parse                 000022 constant        entry                    external dcl 16
reset                           000054 constant        label                    dcl 54 ref 118
ret1                            000452 constant        label                    dcl 157
test_ptr                        000253 constant        label                    dcl 113 ref 73 154

NAME DECLARED BY CONTEXT OR IMPLICATION.
hbound                                                 builtin function         ref 85 102 193 216

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1060        1106     750        1070
Length      1624     750        26         501     110           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
reference_parse                     792 external procedure  is an external procedure.  
make_reference                          internal procedure  shares stack frame of external procedure reference_parse.  
atom                                    internal procedure  shares stack frame of external procedure reference_parse.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
reference_parse          000100 i                           reference_parse
                         000101 j                           reference_parse
                         000102 k                           reference_parse
                         000103 m                           reference_parse
                         000104 p                           reference_parse
                         000106 q                           reference_parse
                         000110 qual                        reference_parse
                         000112 arglist                     reference_parse
                         000114 op                          reference_parse
                         000116 sym                         reference_parse
                         000120 s                           reference_parse
                         001120 t                           reference_parse
                         001320 token_list_pointer          reference_parse
                         001342 save_index                  atom

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
context                       create_list                   create_operator               create_reference
create_symbol                 expression_parse

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$token_list_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000016   17    3 000027        45 000032        47 000034        48 000037        50 000047        51 000050
     54 000054        57 000056        59 000067        60 000072        62 000073        64 000103        66 000111
     68 000112        70 000114        71 000131        73 000133        76 000143        79 000144        81 000145
     83 000146        85 000157        87 000162        88 000165        89 000166        90 000167        92 000174
     93 000205        94 000207        95 000211        98 000212       100 000222       101 000223       102 000224
    104 000227       105 000231       108 000232       111 000242       113 000253       115 000254       116 000256
    118 000302       121 000303       123 000316       125 000317       127 000325       129 000326       131 000327
    133 000334       134 000345       135 000347       136 000350       138 000351       140 000352       141 000367
    143 000403       144 000413       145 000422       147 000424       148 000441       149 000444       151 000446
    152 000447       154 000450       157 000452       159 000455       161 000460       165 000464       167 000465
    168 000475       169 000500       170 000502       171 000513       172 000523       173 000531       174 000533
    176 000536       177 000540       178 000551       179 000561       180 000567       181 000571       184 000574
    187 000575       191 000577       193 000601       195 000604       196 000623       198 000631       199 000643
    202 000653       209 000663       210 000703       212 000706       213 000723       214 000727       216 000732
    218 000735       221 000736


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
