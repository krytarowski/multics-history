	COMPILATION LISTING OF SEGMENT trace_transactions_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 10/23/84  1254.0 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /*
        7*   This program contains the trace operations that are too complicated for trace_.alm
        8*
        9*   Written: May 1984 by Jeffrey D. Ives.
       10**/
       11 /* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */
       12 
       13 
       14 trace_transactions_:
       15   procedure ();
       16     signal error;
       17 
       18 
       19 /* INITIALIZE EVERYTHING is invoked by the firstref trap in trace_.alm. */
       20 
       21 initialize_everything:
       22   entry ();
       23 
       24     unspec (my_area_info) = ""b;
       25     my_area_info.version = area_info_version_1;
       26     my_area_info.control.extend = "1"b;
       27     my_area_info.owner = trace_$me ();
       28     my_area_info.size = sys_info$max_seg_size;
       29     my_area_info.areap = null ();
       30 
       31     call define_area_ (addr (my_area_info), code);
       32     if code ^= 0
       33     then call sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, "Call to define_area_ failed.");
       34 
       35     trace_catch_$trace_storage_ptr = my_area_info.areap;
       36 
       37     call trace_catch_$initialize ();
       38 
       39     call trace_tables_$initialize ();
       40 
       41     call trace_parameters_$initialize ();
       42 
       43     call add_epilogue_handler_ (trace_epilogue, code);
       44     if code ^= 0
       45     then call sub_err_ (code, trace_$me (), ACTION_DEFAULT_RESTART, null (), rv,
       46     "I could not add the epilogue handler.");
       47 
       48     return;
       49 
       50 
       51 trace_epilogue:
       52   entry ();
       53 
       54     call transaction_begin_force (clock ());
       55     call trace_$set_enabled ("0"b);
       56     call trace_$set_output_switch (trace_$cv_stream_name_to_osw (""));
       57     if trace_$update_global_parms ()
       58     then;
       59 
       60     return;
       61 
       62 /* TRANSACTION BEGIN */
       63 
       64 transaction_begin:
       65   entry (transaction_id_i) returns (bit aligned);
       66 
       67     transaction_id = transaction_id_i;
       68     if transaction_id = 0
       69     then return ("0"b);
       70 
       71     if trace_$transaction_id ^= 0
       72     then return ("0"b);				/* A transaction is already in progress. */
       73 
       74     trace_$transaction_id = transaction_id;		/* Order is important for correct cleanup.	*/
       75 
       76     call trace_catch_$stop_tracing ();			/* Yank operator ptrs and move meters to tabs.	*/
       77 
       78     call trace_parameters_$transaction_begin ();
       79 
       80     call trace_tables_$transaction_begin ();
       81 
       82     return ("1"b);
       83 
       84 
       85 /* TRANSACTION BEGIN FORCE */
       86 
       87 transaction_begin_force:
       88   entry (transaction_id_i);
       89 
       90     trace_$transaction_id = transaction_id_i;		/* Order is important for correct cleanup.	*/
       91 
       92     call trace_catch_$stop_tracing ();			/* Yank operator ptrs and move meters to tabs.	*/
       93 
       94     call trace_parameters_$transaction_begin_force ();
       95 
       96     call trace_tables_$transaction_begin_force ();
       97 
       98     return;
       99 
      100 
      101 /* TRANSACTION END */
      102 
      103 transaction_end:
      104   entry (transaction_id_i) returns (bit aligned);
      105 
      106     if transaction_id_i ^= trace_$transaction_id
      107     then return ("0"b);
      108 
      109     call trace_parameters_$transaction_end ();
      110 
      111     call trace_tables_$transaction_end ();
      112 
      113     call trace_catch_$start_tracing ();			/* Plant operator ptrs and start global meters.	*/
      114 
      115     trace_$transaction_id = 0;
      116 
      117     return ("1"b);
      118 
      119 /* START OF DECLARATIONS */
      120 /* format: ^insnl,^delnl */
      121 
      122 /* Parameters */
      123 
      124     dcl  transaction_id_i		 fixed bin (71) parm;
      125 
      126 
      127 /* Automatic */
      128 
      129     dcl  code			 fixed bin (35);
      130     dcl  rv			 fixed bin (35);
      131     dcl  transaction_id		 fixed bin (71);
      132 
      133     dcl  1 my_area_info		 like area_info aligned;
      134 
      135 /* Static */
      136 
      137     dcl  sys_info$max_seg_size	 fixed bin (35) ext;
      138     dcl  trace_catch_$trace_storage_ptr	 ptr ext;
      139     dcl  ZERO			 fixed bin (35) static options (constant) init (0);
      140 
      141 
      142 /* Conditions */
      143 
      144     dcl  error			 condition;
      145 
      146 
      147 /* Based */
      148 
      149 
      150 /* External Variables */
      151 
      152     dcl  trace_$transaction_id	 fixed bin (71) ext;
      153 
      154 
      155 /* External Entries */
      156 
      157     dcl  add_epilogue_handler_	 entry (entry, fixed bin (35));
      158     dcl  define_area_		 entry (ptr, fixed bin (35));
      159     dcl  sub_err_			 entry () options (variable);
      160 
      161     dcl  trace_catch_$initialize	 entry ();
      162     dcl  trace_catch_$start_tracing	 entry ();
      163     dcl  trace_catch_$stop_tracing	 entry ();
      164     dcl  trace_parameters_$initialize	 entry ();
      165     dcl  trace_parameters_$transaction_begin entry ();
      166     dcl  trace_parameters_$transaction_begin_force entry ();
      167     dcl  trace_parameters_$transaction_end entry ();
      168     dcl  trace_tables_$initialize	 entry ();
      169     dcl  trace_tables_$transaction_begin entry ();
      170     dcl  trace_tables_$transaction_begin_force entry ();
      171     dcl  trace_tables_$transaction_end	 entry ();
      172 
      173 
      174 /* format: insnl,delnl */
      175 /* END OF DECLARATIONS */
      176 
      177 /* START OF INCLUDE FILES */
      178 
      179 
  1     1 /* BEGIN INCLUDE FILE area_info.incl.pl1  12/75 */
  1     2 
  1     3 dcl  area_info_version_1 fixed bin static init (1) options (constant);
  1     4 
  1     5 dcl  area_infop ptr;
  1     6 
  1     7 dcl 1 area_info aligned based (area_infop),
  1     8     2 version fixed bin,				/* version number for this structure is 1 */
  1     9     2 control aligned like area_control,		/* control bits for the area */
  1    10     2 owner char (32) unal,				/* creator of the area */
  1    11     2 n_components fixed bin,				/* number of components in the area (returned only) */
  1    12     2 size fixed bin (18),				/* size of the area in words */
  1    13     2 version_of_area fixed bin,			/* version of area (returned only) */
  1    14     2 areap ptr,					/* pointer to the area (first component on multisegment area) */
  1    15     2 allocated_blocks fixed bin,			/* number of blocks allocated */
  1    16     2 free_blocks fixed bin,				/* number of free blocks not in virgin */
  1    17     2 allocated_words fixed bin (30),			/* number of words allocated in the area */
  1    18     2 free_words fixed bin (30);			/* number of words free in area not in virgin */
  1    19 
  1    20 dcl 1 area_control aligned based,
  1    21     2 extend bit (1) unal,				/* says area is extensible */
  1    22     2 zero_on_alloc bit (1) unal,			/* says block gets zerod at allocation time */
  1    23     2 zero_on_free bit (1) unal,			/* says block gets zerod at free time */
  1    24     2 dont_free bit (1) unal,			/* debugging aid, turns off free requests */
  1    25     2 no_freeing bit (1) unal,			/* for allocation method without freeing */
  1    26     2 system bit (1) unal,				/* says area is managed by system */
  1    27     2 pad bit (30) unal;
  1    28 
  1    29 /* END INCLUDE FILE area_info.incl.pl1 */
      180 
      181 
  2     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  2     2 /* format: style3 */
  2     3 
  2     4 /* These constants are to be used for the flags argument of sub_err_ */
  2     5 /* They are just "string (condition_info_header.action_flags)" */
  2     6 
  2     7 declare	(
  2     8 	ACTION_CAN_RESTART	init (""b),
  2     9 	ACTION_CANT_RESTART init ("1"b),
  2    10 	ACTION_DEFAULT_RESTART
  2    11 			init ("01"b),
  2    12 	ACTION_QUIET_RESTART
  2    13 			init ("001"b),
  2    14 	ACTION_SUPPORT_SIGNAL
  2    15 			init ("0001"b)
  2    16 	)		bit (36) aligned internal static options (constant);
  2    17 
  2    18 /* End include file */
      182 
      183 
  3     1 /*  START OF:	trace_interface.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  3     2 /* Written: May 1984 by Jeffrey D. Ives. */
  3     3 /* format: style2,^inddcls,^indnoniterdo,^inditerdo,dclind5,idind35 */
  3     4 
  3     5 /* IDENTIFICATION */
  3     6 
  3     7 dcl  trace_$me			entry () returns (char (32));
  3     8 dcl  trace_$version			entry () returns (char (32));
  3     9 
  3    10 /* TRANSACTIONS */
  3    11 
  3    12 dcl  trace_$transaction_begin		entry (fixed bin (71)) returns (bit aligned);
  3    13 dcl  trace_$transaction_begin_force	entry (fixed bin (71));
  3    14 dcl  trace_$transaction_end		entry (fixed bin (71)) returns (bit aligned);
  3    15 
  3    16 /* ACTIONS */
  3    17 
  3    18 dcl  trace_$update_default_parms	entry () returns (bit aligned);
  3    19 dcl  trace_$update_global_parms	entry () returns (bit aligned);
  3    20 dcl  trace_$add_specified_eps		entry (fixed bin, fixed bin);
  3    21 dcl  trace_$add_specified_locs	entry (fixed bin, fixed bin);
  3    22 dcl  trace_$remove_specified_eps	entry (fixed bin);
  3    23 dcl  trace_$remove_specified_locs	entry (fixed bin);
  3    24 dcl  trace_$turn_on_specified_eps	entry (fixed bin);
  3    25 dcl  trace_$turn_off_specified_eps	entry (fixed bin);
  3    26 
  3    27 /* CONVERSION */
  3    28 
  3    29 dcl  trace_$cv_inout_to_bits		entry (char (8) aligned) returns (bit (2) aligned);
  3    30 dcl  trace_$cv_bits_to_inout		entry (bit (2) aligned) returns (char (8) aligned);
  3    31 dcl  trace_$cv_n_to_number		entry (char (16)) returns (fixed bin (34));
  3    32 dcl  trace_$cv_onoff_to_bit		entry (char (8) aligned) returns (bit aligned);
  3    33 dcl  trace_$cv_bit_to_onoff		entry (bit aligned) returns (char (8) aligned);
  3    34 dcl  trace_$cv_entry_name_to_spp	entry (char (256) var, ptr) returns (1 like stop_proc aligned);
  3    35 dcl  trace_$cv_file_path_to_osw	entry (char (256) var, ptr) returns (1 like output_switch aligned);
  3    36 dcl  trace_$cv_stream_name_to_osw	entry (char (32) var) returns (1 like output_switch aligned);
  3    37 
  3    38 /* METERS */
  3    39 
  3    40 dcl  trace_$entrypoint_counts		entry (fixed bin) returns (1 aligned like counts);
  3    41 dcl  trace_$entrypoint_global_meters	entry (fixed bin) returns (1 like meters aligned);
  3    42 dcl  trace_$entrypoint_local_meters	entry (fixed bin) returns (1 like meters aligned);
  3    43 dcl  trace_$metered			entry () returns (1 like meters aligned);
  3    44 dcl  trace_$removed			entry () returns (1 like meters aligned);
  3    45 dcl  trace_$reset_meters		entry ();
  3    46 
  3    47 /* ENTRYPOINTS */
  3    48 
  3    49 dcl  trace_$entrypoint_index		entry (ptr unal) returns (fixed bin);
  3    50 dcl  trace_$entrypoint_name		entry (fixed bin) returns (char (65) var);
  3    51 dcl  trace_$entrypoint_ptr		entry (fixed bin) returns (ptr);
  3    52 dcl  trace_$entrypoint_seg_path	entry (fixed bin) returns (char (256) var);
  3    53 dcl  trace_$entrypoint_status		entry (fixed bin) returns (char (32) var);
  3    54 dcl  trace_$function		entry (fixed bin) returns (bit aligned);
  3    55 dcl  trace_$num_entrypoints		entry () returns (fixed bin);
  3    56 dcl  trace_$num_specified_entrypoints	entry () returns (fixed bin);
  3    57 dcl  trace_$specified_entrypoint_index	entry (fixed bin) returns (fixed bin);
  3    58 dcl  trace_$specify_entrypoints	entry (char (256) var, ptr);
  3    59 dcl  trace_$translator_id		entry (fixed bin) returns (fixed bin);
  3    60 
  3    61 /* LOCATIONS */
  3    62 
  3    63 dcl  trace_$location_ptr		entry (fixed bin) returns (ptr);
  3    64 dcl  trace_$location_seg_path		entry (fixed bin) returns (char (256) var);
  3    65 dcl  trace_$location_values		entry (fixed bin) returns (1 aligned like watch_values);
  3    66 dcl  trace_$num_locations		entry () returns (fixed bin);
  3    67 dcl  trace_$num_specified_locations	entry () returns (fixed bin);
  3    68 dcl  trace_$specified_location_index	entry (fixed bin) returns (fixed bin);
  3    69 dcl  trace_$specify_locations		entry (char (256) var);
  3    70 dcl  trace_$specify_changed_locations	entry ();
  3    71 
  3    72 /* EVENT BUFFER */
  3    73 
  3    74 dcl  trace_$buffer_counts		entry (fixed bin (34), fixed bin (34));
  3    75 dcl  trace_$buffer_event		entry (fixed bin (34), fixed bin, char (2), ptr unal, 1 like counts aligned, 1 like meters aligned);
  3    76 dcl  trace_$buffer_event_header	entry (fixed bin (34)) returns (char (256) var);
  3    77 dcl  trace_$buffer_event_string	entry (fixed bin (34)) returns (char (256) var);
  3    78 dcl  trace_$buffer_ptr		entry () returns (ptr unal);
  3    79 
  3    80 /* TRACE PARAMETERS */
  3    81 
  3    82 dcl  trace_$arguments		entry (fixed bin) returns (bit (2) aligned);
  3    83 dcl  trace_$set_arguments		entry (bit (2) aligned);
  3    84 dcl  trace_$call			entry (fixed bin) returns (char (256) var);
  3    85 dcl  trace_$set_call		entry (char (256) var);
  3    86 dcl  trace_$every			entry (fixed bin) returns (fixed bin (34));
  3    87 dcl  trace_$set_every		entry (fixed bin (34));
  3    88 dcl  trace_$first			entry (fixed bin) returns (fixed bin (34));
  3    89 dcl  trace_$set_first		entry (fixed bin (34));
  3    90 dcl  trace_$high			entry (fixed bin) returns (fixed bin (34));
  3    91 dcl  trace_$set_high		entry (fixed bin (34));
  3    92 dcl  trace_$last			entry (fixed bin) returns (fixed bin (34));
  3    93 dcl  trace_$set_last		entry (fixed bin (34));
  3    94 dcl  trace_$low			entry (fixed bin) returns (fixed bin (34));
  3    95 dcl  trace_$set_low			entry (fixed bin (34));
  3    96 dcl  trace_$new_high		entry (fixed bin) returns (bit aligned);
  3    97 dcl  trace_$set_new_high		entry (bit aligned);
  3    98 dcl  trace_$parms_string		entry (fixed bin, bit aligned) returns (char (256) var);
  3    99 dcl  trace_$parms_specified		entry () returns (bit aligned);
  3   100 dcl  trace_$stop			entry (fixed bin) returns (bit (2) aligned);
  3   101 dcl  trace_$set_stop		entry (bit (2) aligned);
  3   102 dcl  trace_$stop_every		entry (fixed bin) returns (fixed bin (34));
  3   103 dcl  trace_$set_stop_every		entry (fixed bin (34));
  3   104 dcl  trace_$stop_low		entry (fixed bin) returns (fixed bin (34));
  3   105 dcl  trace_$set_stop_low		entry (fixed bin (34));
  3   106 dcl  trace_$trace			entry (fixed bin) returns (bit (2) aligned);
  3   107 dcl  trace_$set_trace		entry (bit (2) aligned);
  3   108 
  3   109 /* GLOBAL PARAMETERS */
  3   110 
  3   111 dcl  trace_$alm			entry () returns (bit aligned);
  3   112 dcl  trace_$set_alm			entry (bit aligned);
  3   113 dcl  trace_$automatic		entry () returns (bit aligned);
  3   114 dcl  trace_$set_automatic		entry (bit aligned);
  3   115 dcl  trace_$buffer			entry () returns (bit aligned);
  3   116 dcl  trace_$set_buffer		entry (bit aligned);
  3   117 dcl  trace_$calibrate		entry () returns (bit aligned);
  3   118 dcl  trace_$set_calibrate		entry (bit aligned);
  3   119 dcl  trace_$compensation		entry (fixed bin) returns (1 aligned like compensation);
  3   120 dcl  trace_$set_compensation		entry (fixed bin, 1 aligned like compensation);
  3   121 dcl  trace_$enabled			entry () returns (bit aligned);
  3   122 dcl  trace_$set_enabled		entry (bit aligned);
  3   123 dcl  trace_$global_parms_string	entry () returns (char (256) var);
  3   124 dcl  trace_$long			entry () returns (bit aligned);
  3   125 dcl  trace_$set_long		entry (bit aligned);
  3   126 dcl  trace_$meter			entry () returns (bit aligned);
  3   127 dcl  trace_$set_meter		entry (bit aligned);
  3   128 dcl  trace_$output_switch		entry () returns (1 like output_switch aligned);
  3   129 dcl  trace_$set_output_switch		entry (1 like output_switch aligned);
  3   130 dcl  trace_$signals			entry () returns (bit aligned);
  3   131 dcl  trace_$set_signals		entry (bit aligned);
  3   132 dcl  trace_$stop_proc		entry () returns (1 like stop_proc);
  3   133 dcl  trace_$set_stop_proc		entry (1 like stop_proc);
  3   134 dcl  trace_$stop_routine		entry () returns (entry);
  3   135 dcl  trace_$set_stop_routine		entry (entry);
  3   136 dcl  trace_$trace_routine		entry () returns (entry);
  3   137 dcl  trace_$set_trace_routine		entry (entry);
  3   138 dcl  trace_$loud			entry () returns (bit aligned);
  3   139 dcl  trace_$set_loud		entry (bit aligned);
  3   140 
  3   141 /* MISCELLANEOUS */
  3   142 
  3   143 dcl  trace_$in_trace		entry () returns (bit aligned);
  3   144 
  3   145 /* STRUCTURES AND CONSTANTS */
  3   146 
  3   147 dcl  1 watch_values			aligned,
  3   148        2 old			bit (36),
  3   149        2 new			bit (36);
  3   150 
  3   151 dcl  1 counts			aligned,
  3   152        2 calls			fixed bin (53),	/* total number of calls			*/
  3   153        2 level			fixed bin (34),	/* current recursion level			*/
  3   154        2 max_level			fixed bin (34);	/* max ever recursion level			*/
  3   155 
  3   156 
  3   157 dcl  1 meters			aligned,
  3   158        2 real_time			fixed bin (53),	/* The total amount of real time metered.	*/
  3   159        2 vcpu_time			fixed bin (53),	/* The total amount of virtual cpu time metered.	*/
  3   160        2 page_faults		fixed bin (34);	/* The total number of page faults metered.	*/
  3   161 
  3   162 dcl  1 output_switch		aligned based,
  3   163        2 iocb_ptr			ptr,
  3   164        2 stream_name		char (32) var,
  3   165        2 file_path			char (256) var;
  3   166 
  3   167 dcl  1 stop_proc			aligned based,
  3   168        2 entry_value		entry (),
  3   169        2 entry_name			char (256) var;
  3   170 
  3   171 dcl  1 compensation			aligned,
  3   172        2 real_time			fixed bin (53),
  3   173        2 vcpu_time			fixed bin (53);
  3   174 
  3   175 dcl  (
  3   176      COMPENSATION_FROM_ENTRY_TO_ENTRY	init (1),
  3   177      COMPENSATION_FROM_ENTRY_TO_RETURN	init (2),
  3   178      COMPENSATION_FROM_RETURN_TO_ENTRY	init (3),
  3   179      COMPENSATION_FROM_RETURN_TO_RETURN init (4)
  3   180      )				static options (constant);
  3   181 
  3   182 /*  END OF:	trace_interface.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      184 
      185 
      186   end trace_transactions_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/23/84  1219.2  trace_transactions_.pl1           >special_ldd>online>6972-10/23/84>trace_transactions_.pl1
180          1    06/11/76  1043.4  area_info.incl.pl1                >ldd>include>area_info.incl.pl1
182          2    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
184          3    10/23/84  1226.2  trace_interface.incl.pl1          >special_ldd>online>6972-10/23/84>trace_interface.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000006 constant        bit(36)                  initial dcl 2-7 set ref 32*
ACTION_DEFAULT_RESTART          000000 constant        bit(36)                  initial dcl 2-7 set ref 44*
add_epilogue_handler_           000016 constant        entry                    external dcl 157 ref 43
area_control                           based           structure                level 1 dcl 1-20
area_info                              based           structure                level 1 dcl 1-7
area_info_version_1                    constant        fixed bin(17,0)          initial dcl 1-3 ref 25
areap                    16     000104 automatic       pointer                  level 2 dcl 133 set ref 29* 35
code                            000100 automatic       fixed bin(35,0)          dcl 129 set ref 31* 32 32* 43* 44 44*
compensation                    000152 automatic       structure                level 1 dcl 3-171
control                   1     000104 automatic       structure                level 2 dcl 133
counts                          000140 automatic       structure                level 1 dcl 3-151
define_area_                    000020 constant        entry                    external dcl 158 ref 31
error                           000130 stack reference condition                dcl 144 ref 16
extend                    1     000104 automatic       bit(1)                   level 3 packed unaligned dcl 133 set ref 26*
meters                          000144 automatic       structure                level 1 dcl 3-157
my_area_info                    000104 automatic       structure                level 1 dcl 133 set ref 24* 31 31
output_switch                          based           structure                level 1 dcl 3-162
owner                     2     000104 automatic       char(32)                 level 2 packed unaligned dcl 133 set ref 27*
rv                              000101 automatic       fixed bin(35,0)          dcl 130 set ref 32* 44*
size                     13     000104 automatic       fixed bin(18,0)          level 2 dcl 133 set ref 28*
stop_proc                              based           structure                level 1 dcl 3-167
sub_err_                        000022 constant        entry                    external dcl 159 ref 32 44
sys_info$max_seg_size           000010 external static fixed bin(35,0)          dcl 137 ref 28
trace_$cv_stream_name_to_osw    000056 constant        entry                    external dcl 3-36 ref 56 56
trace_$me                       000052 constant        entry                    external dcl 3-7 ref 27 32 32 44 44
trace_$set_enabled              000060 constant        entry                    external dcl 3-122 ref 55
trace_$set_output_switch        000062 constant        entry                    external dcl 3-129 ref 56
trace_$transaction_id           000014 external static fixed bin(71,0)          dcl 152 set ref 71 74* 90* 106 115*
trace_$update_global_parms      000054 constant        entry                    external dcl 3-19 ref 57
trace_catch_$initialize         000024 constant        entry                    external dcl 161 ref 37
trace_catch_$start_tracing      000026 constant        entry                    external dcl 162 ref 113
trace_catch_$stop_tracing       000030 constant        entry                    external dcl 163 ref 76 92
trace_catch_$trace_storage_ptr  000012 external static pointer                  dcl 138 set ref 35*
trace_parameters_$initialize    000032 constant        entry                    external dcl 164 ref 41
trace_parameters_$transaction_begin
                                000034 constant        entry                    external dcl 165 ref 78
trace_parameters_$transaction_begin_force
                                000036 constant        entry                    external dcl 166 ref 94
trace_parameters_$transaction_end
                                000040 constant        entry                    external dcl 167 ref 109
trace_tables_$initialize        000042 constant        entry                    external dcl 168 ref 39
trace_tables_$transaction_begin 000044 constant        entry                    external dcl 169 ref 80
trace_tables_$transaction_begin_force
                                000046 constant        entry                    external dcl 170 ref 96
trace_tables_$transaction_end   000050 constant        entry                    external dcl 171 ref 111
transaction_id                  000102 automatic       fixed bin(71,0)          dcl 131 set ref 67* 68 74
transaction_id_i                       parameter       fixed bin(71,0)          dcl 124 ref 64 67 87 90 103 106
version                         000104 automatic       fixed bin(17,0)          level 2 dcl 133 set ref 25*
watch_values                    000136 automatic       structure                level 1 dcl 3-147

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 2-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 2-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 2-7
COMPENSATION_FROM_ENTRY_TO_ENTRY       internal static fixed bin(17,0)          initial dcl 3-175
COMPENSATION_FROM_ENTRY_TO_RETURN      internal static fixed bin(17,0)          initial dcl 3-175
COMPENSATION_FROM_RETURN_TO_ENTRY      internal static fixed bin(17,0)          initial dcl 3-175
COMPENSATION_FROM_RETURN_TO_RETURN     internal static fixed bin(17,0)          initial dcl 3-175
ZERO                                   internal static fixed bin(35,0)          initial dcl 139
area_infop                             automatic       pointer                  dcl 1-5
trace_$add_specified_eps        000000 constant        entry                    external dcl 3-20
trace_$add_specified_locs       000000 constant        entry                    external dcl 3-21
trace_$alm                      000000 constant        entry                    external dcl 3-111
trace_$arguments                000000 constant        entry                    external dcl 3-82
trace_$automatic                000000 constant        entry                    external dcl 3-113
trace_$buffer                   000000 constant        entry                    external dcl 3-115
trace_$buffer_counts            000000 constant        entry                    external dcl 3-74
trace_$buffer_event             000000 constant        entry                    external dcl 3-75
trace_$buffer_event_header      000000 constant        entry                    external dcl 3-76
trace_$buffer_event_string      000000 constant        entry                    external dcl 3-77
trace_$buffer_ptr               000000 constant        entry                    external dcl 3-78
trace_$calibrate                000000 constant        entry                    external dcl 3-117
trace_$call                     000000 constant        entry                    external dcl 3-84
trace_$compensation             000000 constant        entry                    external dcl 3-119
trace_$cv_bit_to_onoff          000000 constant        entry                    external dcl 3-33
trace_$cv_bits_to_inout         000000 constant        entry                    external dcl 3-30
trace_$cv_entry_name_to_spp     000000 constant        entry                    external dcl 3-34
trace_$cv_file_path_to_osw      000000 constant        entry                    external dcl 3-35
trace_$cv_inout_to_bits         000000 constant        entry                    external dcl 3-29
trace_$cv_n_to_number           000000 constant        entry                    external dcl 3-31
trace_$cv_onoff_to_bit          000000 constant        entry                    external dcl 3-32
trace_$enabled                  000000 constant        entry                    external dcl 3-121
trace_$entrypoint_counts        000000 constant        entry                    external dcl 3-40
trace_$entrypoint_global_meters 000000 constant        entry                    external dcl 3-41
trace_$entrypoint_index         000000 constant        entry                    external dcl 3-49
trace_$entrypoint_local_meters  000000 constant        entry                    external dcl 3-42
trace_$entrypoint_name          000000 constant        entry                    external dcl 3-50
trace_$entrypoint_ptr           000000 constant        entry                    external dcl 3-51
trace_$entrypoint_seg_path      000000 constant        entry                    external dcl 3-52
trace_$entrypoint_status        000000 constant        entry                    external dcl 3-53
trace_$every                    000000 constant        entry                    external dcl 3-86
trace_$first                    000000 constant        entry                    external dcl 3-88
trace_$function                 000000 constant        entry                    external dcl 3-54
trace_$global_parms_string      000000 constant        entry                    external dcl 3-123
trace_$high                     000000 constant        entry                    external dcl 3-90
trace_$in_trace                 000000 constant        entry                    external dcl 3-143
trace_$last                     000000 constant        entry                    external dcl 3-92
trace_$location_ptr             000000 constant        entry                    external dcl 3-63
trace_$location_seg_path        000000 constant        entry                    external dcl 3-64
trace_$location_values          000000 constant        entry                    external dcl 3-65
trace_$long                     000000 constant        entry                    external dcl 3-124
trace_$loud                     000000 constant        entry                    external dcl 3-138
trace_$low                      000000 constant        entry                    external dcl 3-94
trace_$meter                    000000 constant        entry                    external dcl 3-126
trace_$metered                  000000 constant        entry                    external dcl 3-43
trace_$new_high                 000000 constant        entry                    external dcl 3-96
trace_$num_entrypoints          000000 constant        entry                    external dcl 3-55
trace_$num_locations            000000 constant        entry                    external dcl 3-66
trace_$num_specified_entrypoints
                                000000 constant        entry                    external dcl 3-56
trace_$num_specified_locations  000000 constant        entry                    external dcl 3-67
trace_$output_switch            000000 constant        entry                    external dcl 3-128
trace_$parms_specified          000000 constant        entry                    external dcl 3-99
trace_$parms_string             000000 constant        entry                    external dcl 3-98
trace_$remove_specified_eps     000000 constant        entry                    external dcl 3-22
trace_$remove_specified_locs    000000 constant        entry                    external dcl 3-23
trace_$removed                  000000 constant        entry                    external dcl 3-44
trace_$reset_meters             000000 constant        entry                    external dcl 3-45
trace_$set_alm                  000000 constant        entry                    external dcl 3-112
trace_$set_arguments            000000 constant        entry                    external dcl 3-83
trace_$set_automatic            000000 constant        entry                    external dcl 3-114
trace_$set_buffer               000000 constant        entry                    external dcl 3-116
trace_$set_calibrate            000000 constant        entry                    external dcl 3-118
trace_$set_call                 000000 constant        entry                    external dcl 3-85
trace_$set_compensation         000000 constant        entry                    external dcl 3-120
trace_$set_every                000000 constant        entry                    external dcl 3-87
trace_$set_first                000000 constant        entry                    external dcl 3-89
trace_$set_high                 000000 constant        entry                    external dcl 3-91
trace_$set_last                 000000 constant        entry                    external dcl 3-93
trace_$set_long                 000000 constant        entry                    external dcl 3-125
trace_$set_loud                 000000 constant        entry                    external dcl 3-139
trace_$set_low                  000000 constant        entry                    external dcl 3-95
trace_$set_meter                000000 constant        entry                    external dcl 3-127
trace_$set_new_high             000000 constant        entry                    external dcl 3-97
trace_$set_signals              000000 constant        entry                    external dcl 3-131
trace_$set_stop                 000000 constant        entry                    external dcl 3-101
trace_$set_stop_every           000000 constant        entry                    external dcl 3-103
trace_$set_stop_low             000000 constant        entry                    external dcl 3-105
trace_$set_stop_proc            000000 constant        entry                    external dcl 3-133
trace_$set_stop_routine         000000 constant        entry                    external dcl 3-135
trace_$set_trace                000000 constant        entry                    external dcl 3-107
trace_$set_trace_routine        000000 constant        entry                    external dcl 3-137
trace_$signals                  000000 constant        entry                    external dcl 3-130
trace_$specified_entrypoint_index
                                000000 constant        entry                    external dcl 3-57
trace_$specified_location_index 000000 constant        entry                    external dcl 3-68
trace_$specify_changed_locations
                                000000 constant        entry                    external dcl 3-70
trace_$specify_entrypoints      000000 constant        entry                    external dcl 3-58
trace_$specify_locations        000000 constant        entry                    external dcl 3-69
trace_$stop                     000000 constant        entry                    external dcl 3-100
trace_$stop_every               000000 constant        entry                    external dcl 3-102
trace_$stop_low                 000000 constant        entry                    external dcl 3-104
trace_$stop_proc                000000 constant        entry                    external dcl 3-132
trace_$stop_routine             000000 constant        entry                    external dcl 3-134
trace_$trace                    000000 constant        entry                    external dcl 3-106
trace_$trace_routine            000000 constant        entry                    external dcl 3-136
trace_$transaction_begin        000000 constant        entry                    external dcl 3-12
trace_$transaction_begin_force  000000 constant        entry                    external dcl 3-13
trace_$transaction_end          000000 constant        entry                    external dcl 3-14
trace_$translator_id            000000 constant        entry                    external dcl 3-59
trace_$turn_off_specified_eps   000000 constant        entry                    external dcl 3-25
trace_$turn_on_specified_eps    000000 constant        entry                    external dcl 3-24
trace_$update_default_parms     000000 constant        entry                    external dcl 3-18
trace_$version                  000000 constant        entry                    external dcl 3-8

NAMES DECLARED BY EXPLICIT CONTEXT.
initialize_everything           000123 constant        entry                    external dcl 21
trace_epilogue                  000361 constant        entry                    external dcl 51 ref 43 43
trace_transactions_             000107 constant        entry                    external dcl 14
transaction_begin               000462 constant        entry                    external dcl 64
transaction_begin_force         000554 constant        entry                    external dcl 87 ref 54
transaction_end                 000616 constant        entry                    external dcl 103

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 31 31
clock                                                  builtin function         ref 54 54
null                                                   builtin function         ref 29 32 32 44 44
unspec                                                 builtin function         ref 24

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1212        1276     676        1222
Length      1576     676        64         263     313           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
trace_transactions_                 344 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
trace_transactions_      000100 code                        trace_transactions_
                         000101 rv                          trace_transactions_
                         000102 transaction_id              trace_transactions_
                         000104 my_area_info                trace_transactions_
                         000136 watch_values                trace_transactions_
                         000140 counts                      trace_transactions_
                         000144 meters                      trace_transactions_
                         000152 compensation                trace_transactions_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_in         call_ext_out_desc   call_ext_out        return              signal              ext_entry
clock

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
add_epilogue_handler_         define_area_                  sub_err_                      trace_$cv_stream_name_to_osw
trace_$me                     trace_$set_enabled            trace_$set_output_switch      trace_$update_global_parms
trace_catch_$initialize       trace_catch_$start_tracing    trace_catch_$stop_tracing     trace_parameters_$initialize
trace_parameters_$transaction_begin                         trace_parameters_$transaction_begin_force
trace_parameters_$transaction_end                           trace_tables_$initialize
trace_tables_$transaction_begin                             trace_tables_$transaction_begin_force
trace_tables_$transaction_end

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
sys_info$max_seg_size         trace_$transaction_id         trace_catch_$trace_storage_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000106        16 000116        21 000121        24 000132        25 000135        26 000137        27 000141
     28 000150        29 000153        31 000155        32 000167        35 000241        37 000244        39 000250
     41 000255        43 000262        44 000277        48 000351        51 000360        54 000370        55 000400
     56 000411        57 000435        60 000447        64 000456        67 000470        68 000473        71 000504
     74 000517        76 000521        78 000525        80 000532        82 000537        87 000551        90 000563
     92 000567        94 000573        96 000600        98 000605       103 000614       106 000624       109 000641
    111 000645       113 000652       115 000657       117 000662


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
