	COMPILATION LISTING OF SEGMENT set_bit_count
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/25/83  1542.6 mst Tue
	    Options: optimize map

        1 /* **************************************************************
        2*   *                                                            *
        3*   * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        4*   *                                                            *
        5*   * Copyright, (C) Honeywell Information Systems Inc., 1983    *
        6*   *                                                            *
        7*   ************************************************************** */
        8 
        9 
       10 
       11 
       12 /* format: style2,idind30,indcomtxt */
       13 
       14 set_bit_count:
       15 sbc:
       16      procedure options (variable);
       17 
       18 /* procedure to set the bit count on segments */
       19 /* coded by M. Weaver on  28 November 1969  11:00 A.M.  */
       20 /* modified by M. Weaver  22 January 1970 */
       21 /* modified to reject too large bit count 9/15/76 S. Herbst */
       22 /* Modified 2/20/83 Jay Pattin for object_type_ */
       23 /* 830924 BIM for fs_util_ */
       24 
       25           dcl     dirname                       char (168);
       26           dcl     arg                           char (argl) based (argp) unaligned;
       27           dcl     ename                         char (32);
       28           dcl     bitcnt                        fixed bin (24);
       29           dcl     bc_35                         fixed bin (35);
       30           dcl     argl                          fixed bin (21);
       31           dcl     i                             fixed bin;
       32           dcl     argp                          ptr;
       33           dcl     arg_count                     fixed bin;
       34           dcl     (
       35                   code,
       36                   error_table_$noarg            ext
       37                   )                             fixed bin (35);
       38           dcl     cv_dec_check_                 entry (char (*), fixed bin (35)) returns (fixed bin (35));
       39           dcl     err_name                      char (16) static init ("set_bit_count") options (constant);
       40           dcl     expand_pathname_              entry (char (*), char (*), char (*), fixed bin (35));
       41           dcl     fs_util_$set_bit_count        entry (char (*), char (*), fixed bin (24), fixed bin (35));
       42           dcl     com_err_                      entry options (variable);
       43           dcl     cu_$arg_count                 entry (fixed bin, fixed bin (35));
       44           dcl     cu_$arg_ptr                   entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       45           dcl     check_star_name_$entry        entry (char (*), fixed bin (35));
       46           dcl     error_table_$nostars          fixed bin (35) ext static;
       47           dcl     pathname_                     entry (char (*), char (*)) returns (char (168));
       48           dcl     mod                           builtin;
       49 
       50 
       51 
       52 
       53           call cu_$arg_count (arg_count, code);
       54           if code ^= 0
       55           then do;
       56                     call com_err_ (code, err_name);
       57                     return;
       58                end;
       59 
       60           if arg_count = 0 | mod (arg_count, 2) ^= 0
       61           then do;
       62                     call com_err_ (0, err_name, "Usage: set_bit_count path1 bit_count1 ... pathN bit_countN");
       63                     return;
       64                end;
       65 
       66           do i = 1 by 2 to arg_count;
       67                call cu_$arg_ptr (i, argp, argl, (0));
       68                call expand_pathname_ (arg, dirname, ename, code);
       69                if code ^= 0
       70                then do;
       71                          call com_err_ (code, err_name, "^a", arg);
       72                          return;
       73                     end;
       74                call check_star_name_$entry (ename, code);
       75                if code = 1 | code = 2
       76                then code = error_table_$nostars;
       77                if code ^= 0
       78                then do;
       79                          call com_err_ (code, err_name, "^a.", arg);
       80                          return;
       81                     end;
       82 
       83                call cu_$arg_ptr (i + 1, argp, argl, (0));
       84                if argl = 0
       85                then do;
       86                          call com_err_ (0, err_name, "Null argument supplied as bit count for ^a.",
       87                               pathname_ (dirname, ename));
       88                          return;
       89                     end;
       90 
       91                bc_35 = cv_dec_check_ (arg, code);
       92                if code ^= 0
       93                then do;
       94 
       95                          call com_err_ (0, err_name, "Illegal decimal digits in bit count ^a for ^a", arg,
       96                               pathname_ (dirname, ename));
       97 
       98                          return;
       99                     end;
      100 
      101                if bc_35 > 2 ** 24 - 1
      102                then do;
      103                          call com_err_ (0, err_name, "Bit count ^d is larger than the maximum 2**24-1.", bc_35);
      104                          return;
      105                     end;
      106                else bitcnt = bc_35;
      107                call fs_util_$set_bit_count (dirname, ename, bitcnt, code);
      108                if code ^= 0
      109                then do;
      110                          call com_err_ (code, err_name, "^a", pathname_ (dirname, ename));
      111                          return;
      112                     end;
      113 
      114           end;
      115 
      116           return;
      117      end set_bit_count;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/25/83  1444.6  set_bit_count.pl1                 >spec>on>eod-fix>set_bit_count.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg                                    based           char                     unaligned dcl 26 set ref 68* 71* 79* 91* 95*
arg_count                       000170 automatic       fixed bin(17,0)          dcl 33 set ref 53* 60 60 66
argl                            000164 automatic       fixed bin(21,0)          dcl 30 set ref 67* 68 68 71 71 79 79 83* 84 91 91 95
                                                                                  95
argp                            000166 automatic       pointer                  dcl 32 set ref 67* 68 71 79 83* 91 95
bc_35                           000163 automatic       fixed bin(35,0)          dcl 29 set ref 91* 101 103* 106
bitcnt                          000162 automatic       fixed bin(24,0)          dcl 28 set ref 106* 107*
check_star_name_$entry          000026 constant        entry                    external dcl 45 ref 74
code                            000171 automatic       fixed bin(35,0)          dcl 34 set ref 53* 54 56* 68* 69 71* 74* 75 75 75*
                                                                                  77 79* 91* 92 107* 108 110*
com_err_                        000020 constant        entry                    external dcl 42 ref 56 62 71 79 86 95 103 110
cu_$arg_count                   000022 constant        entry                    external dcl 43 ref 53
cu_$arg_ptr                     000024 constant        entry                    external dcl 44 ref 67 83
cv_dec_check_                   000012 constant        entry                    external dcl 38 ref 91
dirname                         000100 automatic       char(168)                unaligned dcl 25 set ref 68* 86* 86* 95* 95* 107*
                                                                                  110* 110*
ename                           000152 automatic       char(32)                 unaligned dcl 27 set ref 68* 74* 86* 86* 95* 95*
                                                                                  107* 110* 110*
err_name                        000000 constant        char(16)                 initial unaligned dcl 39 set ref 56* 62* 71* 79* 86*
                                                                                  95* 103* 110*
error_table_$nostars            000030 external static fixed bin(35,0)          dcl 46 ref 75
expand_pathname_                000014 constant        entry                    external dcl 40 ref 68
fs_util_$set_bit_count          000016 constant        entry                    external dcl 41 ref 107
i                               000165 automatic       fixed bin(17,0)          dcl 31 set ref 66* 67* 83*
mod                                                    builtin function         dcl 48 ref 60
pathname_                       000032 constant        entry                    external dcl 47 ref 86 86 95 95 110 110

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
error_table_$noarg                     external static fixed bin(35,0)          dcl 34

NAMES DECLARED BY EXPLICIT CONTEXT.
sbc                             000106 constant        entry                    external dcl 14
set_bit_count                   000115 constant        entry                    external dcl 14

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1146        1202    1005        1156
Length      1370    1005        34         152     140           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sbc                                 256 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
sbc                      000100 dirname                     sbc
                         000152 ename                       sbc
                         000162 bitcnt                      sbc
                         000163 bc_35                       sbc
                         000164 argl                        sbc
                         000165 i                           sbc
                         000166 argp                        sbc
                         000170 arg_count                   sbc
                         000171 code                        sbc

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              mod_fx1             ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
check_star_name_$entry        com_err_                      cu_$arg_count                 cu_$arg_ptr
cv_dec_check_                 decimal_exp_                  expand_pathname_              fs_util_$set_bit_count
pathname_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$nostars




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000105        53 000122        54 000132        56 000134        57 000151        60 000152        62 000157
     63 000204        66 000205        67 000215        68 000233        69 000263        71 000265        72 000317
     74 000320        75 000335        77 000345        79 000347        80 000401        83 000402        84 000423
     86 000425        88 000476        91 000477        92 000521        95 000523        98 000603       101 000604
    103 000642       104 000673       106 000674       107 000676       108 000723       110 000725       111 000774
    114 000775       116 001000


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
