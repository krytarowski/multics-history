	COMPILATION LISTING OF SEGMENT mlsys_parse_text_
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 07/26/88  1011.7 mst Tue
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 
       10 
       11 /****^  HISTORY COMMENTS:
       12*  1) change(83-07-01,Palter), approve(), audit(), install():
       13*     Pre-hcom comments:
       14*     Created:  July 1983 by G. Palter from mlsys_cv_old_r1_msg_ and mlsys_parse_
       15*     Modified: March 1984 by G. Palter to fix the following mail system errors:
       16*           #0415 -- read_mail, print_mail, and have_mail do not reject starnames as invalid mailbox specifications
       17*           #0417 -- the offset within the message text of an invalid field as returned by mlsys_utils_$parse_message_text does
       18*              not take into account the blank lines which the parser allows to appear before the message header.  As a result,
       19*              error messages produced by send_mail, etc. will appear to truncate the contents of the invalid field
       20*           #0432 -- when converting a forwarded message from its canonical representation, the mail system incorrectly parses
       21*              the Delivery-By field using the sender's system as the default system for the Delivery-By address.  The local
       22*              system should always be used as the default for the Delivery-By field
       23*           #0436 -- if a forum meeting is not found in the "forum" search list, the mail system will treat it as a version 1
       24*              forum in the working directory
       25*           #0437 -- if a message contains an empty multi-line field (eg: Redistributed-Comment), the parser will either take a
       26*              fault or cause a fatal process error
       27*           #0438 -- the primitives which allow a user to replace the address list portions of a message
       28*              (eg: mail_system_$replace_from, mail_system_$replace_user_field) should not make the user's copy of the address
       29*              list read-only.  Instead, they should copy the user's list to allow the user to continue to modify the list if
       30*              desired for later additional use
       31*  2) change(87-04-09,Lippard), approve(86-11-24,MCR7576),
       32*     audit(87-04-21,Dickson), install(87-04-26,MR12.1-1026):
       33*     Modified to use time_names.incl.pl1 instead of time_zones_.incl.pl1.
       34*  3) change(88-05-16,Blair), approve(88-05-16,MCR7842),
       35*     audit(88-06-30,Lippard), install(88-07-26,MR12.2-1069):
       36*     Update parse_address to use the new search path mechanism so that
       37*     unexpanded mailbox pathnames of the form {keyword PATH} can be located.
       38*                                                   END HISTORY COMMENTS */
       39 
       40 
       41 /* format: off */
       42 
       43 /* Mail System Utilities which convert the printed representation of various mail system objects (messages, addresses,
       44*   etc.) into their internal form */
       45 
       46 /* format: on,style4,delnl,insnl,ifthenstmt,ifthen */
       47 
       48 
       49 mlsys_parse_text_:
       50      procedure ();
       51 
       52 	return;					/* not an entrypoint */
       53 
       54 
       55 /* Common Parameters */
       56 
       57 dcl  P_code fixed binary (35) parameter;
       58 
       59 dcl  P_representation character (*) parameter;		/* the text to be parsed */
       60 dcl  P_parse_text_options_ptr pointer parameter;		/* -> user's parsing options */
       61 dcl  P_parse_text_error_list_ptr pointer parameter;	/* set -> list of errors detected during parse */
       62 
       63 
       64 /* parse_im_message_text and parse_new_message_text Parameters */
       65 
       66 dcl  P_message_version character (8) parameter;		/* version of message structure desired by caller */
       67 dcl  P_message_ptr pointer parameter;			/* set -> the message */
       68 
       69 
       70 /* parse_im_message_text Parameters */
       71 
       72 dcl  P_im_message_info_ptr pointer parameter;		/* -> im_message_info describing the in-mailbox message */
       73 dcl  P_last_delivered_by pointer;			/* -> address of user ring-1 claims delivered the message */
       74 dcl  P_last_date_time_delivered fixed binary (71) parameter;/* date/time when ring-1 delivered the message */
       75 dcl  P_requests_acknowledgement bit (1) aligned parameter;	/* ON => the message expects an acknowledgement */
       76 dcl  P_multics_format bit (1) aligned parameter;		/* ON => message is in standard Multics format */
       77 
       78 
       79 /* parse_mailing_list_text and parse_address_list_text Parameters */
       80 
       81 dcl  P_address_list_version character (8) parameter;	/* version of address_list structure desired by caller */
       82 dcl  P_address_list_ptr pointer parameter;		/* set -> the address_list */
       83 
       84 
       85 /* parse_address_text Parameters */
       86 
       87 dcl  P_address_ptr pointer parameter;			/* set -> the address */
       88 
       89 
       90 /* Local copies of parameters */
       91 
       92 dcl  code fixed binary (35);
       93 
       94 dcl  representation character (representation_lth) unaligned based (representation_ptr);
       95 dcl  representation_ptr pointer;
       96 dcl  (representation_lth, representation_used) fixed binary (21);
       97 
       98 dcl  1 local_pto aligned like parse_text_options;
       99 
      100 dcl  address_ptr pointer;
      101 
      102 
      103 /* Remaining declarations */
      104 
      105 dcl  new_message bit (1) aligned;			/* ON => creating a new message; OFF => in-mailbox/incoming */
      106 dcl  message_parse_fails bit (1) aligned;
      107 
      108 dcl  1 message_type_specific_operations aligned,		/* in-mailbox/new/incoming messages use different entries */
      109        2 add_address entry (pointer, pointer, character (8), fixed binary (35)) variable,
      110        2 add_body_section entry (pointer, pointer, fixed binary, fixed binary (35)) variable,
      111        2 add_redistribution entry (pointer, pointer, fixed binary, fixed binary (35)) variable,
      112        2 add_reply_reference entry (pointer, pointer, fixed binary, fixed binary (35)) variable,
      113        2 add_user_field entry (pointer, pointer, fixed binary, bit (1) aligned, fixed binary (35)) variable,
      114        2 create_address_list entry (character (8), pointer, fixed binary (35)) variable,
      115        2 delete_address entry (pointer, fixed binary, fixed binary (35)) variable,
      116        2 encode_foreign_id entry (character (*), character (256) varying, bit (72) aligned) variable,
      117        2 encode_local_id entry (fixed binary (71), bit (72) aligned) variable,
      118        2 encode_psuedo_id entry (fixed binary (71), pointer, character (256) varying, bit (72) aligned) variable,
      119        2 free_address_list entry (pointer, fixed binary (35)) variable,
      120        2 free_message entry (pointer, fixed binary (35)) variable,
      121        2 replace_bcc entry (pointer, pointer, fixed binary (35)) variable,
      122        2 replace_cc entry (pointer, pointer, fixed binary (35)) variable,
      123        2 replace_from entry (pointer, pointer, fixed binary (35)) variable,
      124        2 replace_message_envelope entry (pointer, pointer, fixed binary (35)) variable,
      125        2 replace_reply_to entry (pointer, pointer, fixed binary (35)) variable,
      126        2 replace_subject entry (pointer, character (*), fixed binary (35)) variable,
      127        2 replace_to entry (pointer, pointer, fixed binary (35)) variable,
      128        2 set_address_implicit_route entry (pointer, pointer, fixed binary (35)) variable,
      129        2 set_date_time_created entry (pointer, fixed binary (71), fixed binary (35)) variable,
      130        2 set_message_id entry (pointer, bit (72) aligned, fixed binary (35)) variable;
      131 
      132 dcl  1 internal_parse_options aligned,
      133        2 default_system_name character (256) varying,	/* system name for addresses without explicit name/route */
      134        2 last_delivered_by pointer,			/* -> address of process that actually delivered message */
      135        2 last_date_time_delivered fixed binary (71),	/* date/time it was delivered */
      136        2 flags,
      137          3 default_system_is_local bit (1) unaligned,	/* ON => the default system is this system */
      138          3 multics_format bit (1) unaligned,		/* ON => use standard Multics formatting */
      139          3 no_copy bit (1) unaligned,			/* ON => do not copy text where possible */
      140          3 requests_acknowledgement bit (1) unaligned,	/* ON => put an Acknowledge-To field into last mailing */
      141          3 pad bit (14) unaligned,
      142        2 delimiters,				/* valid delimiters for this parse ... */
      143          3 eos bit (1) unaligned,			/* ... end of the string */
      144          3 comma bit (1) unaligned,			/* ... comma */
      145          3 angle_bracket bit (1) unaligned,		/* ... angle bracket (>) */
      146          3 semicolon bit (1) unaligned,			/* ... semi-colon */
      147          3 pad bit (14) unaligned;
      148 
      149 dcl  1 mrps (forwarding_info_list.n_forwarding_infos) aligned based (mrps_ptr) like message_redistribution_parameter;
      150 dcl  1 the_mrp aligned based (the_mrp_ptr) like message_redistribution_parameter;
      151 dcl  (mrps_ptr, the_mrp_ptr) pointer;
      152 
      153 dcl  mr_sort (forwarding_info_list.n_forwarding_infos) fixed binary based (mr_sort_ptr);
      154 dcl  mr_sort_ptr pointer;
      155 
      156 dcl  1 local_mep aligned like message_envelope_parameter;
      157 dcl  1 local_mrp aligned like message_reference_parameter;
      158 dcl  1 local_mufp aligned like message_user_field_parameter;
      159 dcl  1 local_mbsp aligned like message_body_section_parameter;
      160 
      161 dcl  1 local_mtf aligned like message_text_field;
      162 
      163 dcl  system_area area aligned based (system_area_ptr);
      164 dcl  system_area_ptr pointer;
      165 
      166 dcl  user_area area aligned based (user_area_ptr);
      167 dcl  user_area_ptr pointer;
      168 
      169 dcl  forum_search_list_ptr pointer;
      170 
      171 dcl  (stack_extension_ptr, stack_truncation_ptr) pointer;
      172 dcl  stack_extension_used fixed binary (18);
      173 
      174 dcl  full_fieldname character (256) varying;
      175 dcl  (address_list_field, trace_address, comment_sender, redistribution_sender, acknowledge_to, implicit_route) pointer;
      176 
      177 dcl  (date_time_created, comment_date_time_created, date_time_last_relayed) fixed binary (71);
      178 dcl  message_id bit (72) aligned;
      179 
      180 dcl  (eol_idx, next_eol_idx, amount_good, line_start, line_end, used) fixed binary (21);
      181 dcl  (current_field_list_idx, first_field_idx) fixed binary;
      182 dcl  (n_sorted, sort_idx, idx, position) fixed binary;
      183 
      184 dcl  STACK_EXTENSION fixed binary (18) static options (constant) initial (1024);
      185 
      186 dcl  HTSP_COMMA character (3) static options (constant) initial ("	 ,");
      187 
      188 dcl  LINE_DELIMITERS character (4) static options (constant) initial ("
      189 ");
      190 
      191 /* format: off */
      192 dcl  MULTIPLE_FIELDS_PER_REDISTRIBUTION (18) bit (1) aligned static options (constant) initial (
      193 	"0"b,	"0"b,	"0"b,	"1"b,	"0"b,	"0"b,	"0"b,	"0"b,	"1"b,
      194 	"0"b,	"0"b,	"1"b,	"0"b,	"0"b,	"0"b,	"0"b,	"1"b,	"0"b);
      195 
      196 dcl  MULTIPLE_FIELDS_PER_COMMENT (18) bit (1) aligned static options (constant) initial (
      197 	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,
      198 	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"1"b,	"0"b);
      199 
      200 dcl (UPPERCASE	initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
      201      LOWERCASE	initial ("abcdefghijklmnopqrstuvwxyz"))
      202 	character (26) static options (constant);
      203 
      204 dcl (error_table_$bad_subr_arg, error_table_$entlong, error_table_$nostars, error_table_$smallarg,
      205      error_table_$unimplemented_version, mlsys_et_$address_pathname_expected, mlsys_et_$cant_determine_dtc,
      206      mlsys_et_$cant_determine_msgid, mlsys_et_$cant_determine_sender, mlsys_et_$cant_parse_irt_field,
      207      mlsys_et_$comment_ignored, mlsys_et_$empty_address_text, mlsys_et_$extra_restricted_field,
      208      mlsys_et_$in_mailbox_only_field, mlsys_et_$incomplete_address_list_text, mlsys_et_$incomplete_address_text,
      209      mlsys_et_$incomplete_comment, mlsys_et_$incomplete_named_group_text, mlsys_et_$invalid_address_list_syntax,
      210      mlsys_et_$invalid_address_syntax, mlsys_et_$invalid_named_group_text, mlsys_et_$invalid_relayed_field_syntax,
      211      mlsys_et_$invalid_route_field_syntax, mlsys_et_$missing_host_name, mlsys_et_$multiple_address_routes,
      212      mlsys_et_$no_comment_redistribution, mlsys_et_$no_message_header, mlsys_et_$obsolete_address_syntax,
      213      mlsys_et_$only_address_route_allowed, mlsys_et_$recursive_named_addresses, mlsys_et_$text_follows_address,
      214      mlsys_et_$text_follows_route, mlsys_et_$text_parse_failed, mlsys_et_$unbalanced_braces,
      215      mlsys_et_$unbalanced_parentheses, mlsys_et_$unbalanced_quotes, mlsys_et_$unknown_structured_address_type)
      216 	fixed binary (35) external;
      217 /* format: on */
      218 
      219 dcl  check_star_name_$entry entry (character (*), fixed binary (35));
      220 dcl  convert_date_to_binary_ entry (character (*), fixed binary (71), fixed binary (35));
      221 dcl  cu_$grow_stack_frame entry (fixed binary (18), pointer, fixed binary (35));
      222 dcl  cu_$shrink_stack_frame entry (pointer, fixed binary (35));
      223 dcl  cv_dec_check_ entry (character (*), fixed binary (35)) returns (fixed binary (35));
      224 dcl  encode_clock_value_
      225 	entry (fixed binary, fixed binary, fixed binary, fixed binary, fixed binary, fixed binary, fixed binary (71),
      226 	fixed binary, character (3), fixed binary (71), fixed binary (35));
      227 dcl  expand_pathname_ entry (character (*), character (*), character (*), fixed binary (35));
      228 dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
      229 dcl  expand_pathname_$component_add_suffix
      230 	entry (character (*), character (*), character (*), character (*), character (*), fixed binary (35));
      231 dcl  forum_$get_forum_path entry (character (*), character (*), character (*), character (*), fixed binary (35));
      232 dcl  get_system_free_area_ entry () returns (pointer);
      233 dcl  mail_system_$add_address entry (pointer, pointer, character (8), fixed binary (35));
      234 dcl  mail_system_$add_body_section entry (pointer, pointer, fixed binary, fixed binary (35));
      235 dcl  mail_system_$add_user_field entry (pointer, pointer, fixed binary, bit (1) aligned, fixed binary (35));
      236 dcl  mail_system_$compare_addresses entry (pointer, pointer, fixed binary (35)) returns (bit (1) aligned);
      237 dcl  mail_system_$create_address_list entry (character (8), pointer, fixed binary (35));
      238 dcl  mail_system_$create_foreign_address
      239 	entry (character (*) varying, character (256) varying, pointer, character (*) varying, character (*) varying,
      240 	pointer, fixed binary (35));
      241 dcl  mail_system_$create_forum_address
      242 	entry (character (*), character (*), character (*) varying, character (*) varying, pointer, fixed binary (35));
      243 dcl  mail_system_$create_invalid_address
      244 	entry (character (*) varying, character (*) varying, character (*) varying, pointer, fixed binary (35));
      245 dcl  mail_system_$create_logbox_address
      246 	entry (character (*) varying, character (*) varying, character (*) varying, pointer, fixed binary (35));
      247 dcl  mail_system_$create_mail_table_address
      248 	entry (character (*) varying, character (*) varying, character (*) varying, pointer, fixed binary (35));
      249 dcl  mail_system_$create_mailbox_address
      250 	entry (character (*), character (*), character (*) varying, character (*) varying, pointer, fixed binary (35));
      251 dcl  mail_system_$create_mailing_list_address
      252 	entry (character (*), character (*), character (*), character (*) varying, character (*) varying, pointer,
      253 	fixed binary (35));
      254 dcl  mail_system_$create_message entry (character (8), pointer, fixed binary (35));
      255 dcl  mail_system_$create_named_group_address
      256 	entry (character (*) varying, pointer, bit (1) aligned, character (*) varying, pointer, fixed binary (35));
      257 dcl  mail_system_$create_savebox_address
      258 	entry (character (*) varying, character (*), character (*), character (*) varying, character (*) varying,
      259 	pointer, fixed binary (35));
      260 dcl  mail_system_$create_user_mailbox_address
      261 	entry (character (*) varying, character (*) varying, character (*) varying, pointer, fixed binary (35));
      262 dcl  mail_system_$delete_address entry (pointer, fixed binary, fixed binary (35));
      263 dcl  mail_system_$free_address entry (pointer, fixed binary (35));
      264 dcl  mail_system_$free_address_list entry (pointer, fixed binary (35));
      265 dcl  mail_system_$free_message entry (pointer, fixed binary (35));
      266 dcl  mail_system_$get_address_route entry (pointer, character (8), pointer, fixed binary (35));
      267 dcl  mail_system_$get_address_system entry (pointer, character (256) varying, fixed binary (35));
      268 dcl  mail_system_$get_address_type entry (pointer, fixed binary, fixed binary (35));
      269 dcl  mail_system_$get_user_field_id entry (character (*), bit (36) aligned, character (*) varying, fixed binary (35));
      270 dcl  mail_system_$get_user_field_name entry (bit (36) aligned, character (*) varying, fixed binary (35));
      271 dcl  mail_system_$replace_bcc entry (pointer, pointer, fixed binary (35));
      272 dcl  mail_system_$replace_cc entry (pointer, pointer, fixed binary (35));
      273 dcl  mail_system_$replace_from entry (pointer, pointer, fixed binary (35));
      274 dcl  mail_system_$replace_reply_to entry (pointer, pointer, fixed binary (35));
      275 dcl  mail_system_$replace_subject entry (pointer, character (*), fixed binary (35));
      276 dcl  mail_system_$replace_to entry (pointer, pointer, fixed binary (35));
      277 dcl  mail_system_$validate_address entry (pointer, bit (1) aligned, fixed binary (35));
      278 dcl  mlsys_address_list_mgr_$add_address entry (pointer, pointer, character (8), fixed binary (35));
      279 dcl  mlsys_address_list_mgr_$create_read_only_address_list entry (character (8), pointer, fixed binary (35));
      280 dcl  mlsys_address_list_mgr_$create_user_freeable_address_list entry (character (8), pointer, fixed binary (35));
      281 dcl  mlsys_address_list_mgr_$delete_address entry (pointer, fixed binary, fixed binary (35));
      282 dcl  mlsys_address_list_mgr_$free_address_list entry (pointer, fixed binary (35));
      283 dcl  mlsys_address_mgr_$set_address_implicit_route entry (pointer, pointer, fixed binary (35));
      284 dcl  mlsys_field_id_mgr_$get_system_field_type entry (character (*), fixed binary, fixed binary (35));
      285 dcl  mlsys_message_id_mgr_$encode_foreign_id entry (character (*), character (256) varying, bit (72) aligned);
      286 dcl  mlsys_message_id_mgr_$encode_local_id entry (fixed binary (71), bit (72) aligned);
      287 dcl  mlsys_message_id_mgr_$encode_psuedo_id entry (fixed binary (71), pointer, character (256) varying, bit (72) aligned);
      288 dcl  mlsys_message_mgr_$add_body_section_no_copy entry (pointer, pointer, fixed binary, fixed binary (35));
      289 dcl  mlsys_message_mgr_$add_redistribution_no_copy entry (pointer, pointer, fixed binary, fixed binary (35));
      290 dcl  mlsys_message_mgr_$add_reply_reference entry (pointer, pointer, fixed binary, fixed binary (35));
      291 dcl  mlsys_message_mgr_$add_user_field_no_copy entry (pointer, pointer, fixed binary, bit (1) aligned, fixed binary (35));
      292 dcl  mlsys_message_mgr_$create_im_message entry (character (8), pointer, pointer, fixed binary (35));
      293 dcl  mlsys_message_mgr_$free_message entry (pointer, fixed binary (35));
      294 dcl  mlsys_message_mgr_$replace_bcc_no_copy entry (pointer, pointer, fixed binary (35));
      295 dcl  mlsys_message_mgr_$replace_cc_no_copy entry (pointer, pointer, fixed binary (35));
      296 dcl  mlsys_message_mgr_$replace_from_no_copy entry (pointer, pointer, fixed binary (35));
      297 dcl  mlsys_message_mgr_$replace_message_envelope entry (pointer, pointer, fixed binary (35));
      298 dcl  mlsys_message_mgr_$replace_reply_to_no_copy entry (pointer, pointer, fixed binary (35));
      299 dcl  mlsys_message_mgr_$replace_subject_no_copy entry (pointer, character (*), fixed binary (35));
      300 dcl  mlsys_message_mgr_$replace_to_no_copy entry (pointer, pointer, fixed binary (35));
      301 dcl  mlsys_nit_interface_$get_local_system_name entry () returns (character (256) varying);
      302 dcl  mlsys_nit_interface_$is_local_system entry (character (256) varying) returns (bit (1) aligned);
      303 dcl  mlsys_psp_$forum_not_available entry () returns (bit (1) aligned);
      304 dcl  mlsys_user_mte_syntax_$classify_and_validate
      305 	entry (character (*) varying, bit (1) aligned, character (*) varying, character (*) varying, fixed binary (35));
      306 dcl  search_paths_$get
      307 	entry (character (*), bit (36), character (*), pointer, pointer, fixed binary, pointer, fixed binary (35));
      308 
      309 dcl  cleanup condition;
      310 
      311 dcl  (abs, addr, addcharno, addwordno, baseno, before, charno, hbound, index, lbound, length, max, min, mod, null,
      312      reverse, rtrim, search, size, stackframeptr, string, substr, translate, verify) builtin;
      313 
      314 /* Results of scanning the text of a message for header fields */
      315 
      316 dcl  1 message_scan aligned,
      317        2 header_offset fixed binary (21),		/* offset of header in message ignoring leading NLs */
      318        2 body,					/* the message body  */
      319          3 body_ptr pointer,
      320          3 body_lth fixed binary (21),
      321        2 n_header_fields_allocated fixed binary,		/* size of several arrays below */
      322        2 array_pointers,				/* makes setup simpler */
      323          3 header_field_list_ptr pointer,		/* -> the list defining the actual header fields */
      324          3 field_by_type_lists_ptr pointer,		/* -> the list breaking the fields down by type */
      325          3 forwarding_info_list_ptr pointer,		/* -> the list of forwarding fields */
      326          3 comment_info_list_ptr pointer,		/* -> the list of comment fields */
      327          3 user_field_list_ptr pointer;			/* -> the list of user-defined fields */
      328 
      329 
      330 dcl  1 header_field_list aligned based (message_scan.header_field_list_ptr),
      331        2 n_fields fixed binary,			/* # of fields actually found */
      332        2 fields (message_scan.n_header_fields_allocated),	/* the actual fields */
      333          3 field_value_ptr pointer,			/* -> start of textual content of the field */
      334          3 field_value_lth fixed binary (21),		/* length of the field in characters */
      335          3 complete_field_start fixed binary (21),	/* offset/length of the entire field (including header) ... */
      336          3 complete_field_lth fixed binary (21);		/* ... for use in error reporting */
      337 
      338 dcl  header_field_value character (header_field_list.fields (field_idx).field_value_lth) unaligned
      339 	based (header_field_list.fields (field_idx).field_value_ptr);
      340 dcl  field_idx fixed binary;				/* index of field whose value is above declaration */
      341 
      342 
      343 dcl  1 field_by_type_lists aligned based (message_scan.field_by_type_lists_ptr),
      344        2 types (N_ORDINARY_FIELDS),			/* one array element for each type */
      345          3 n_fields fixed binary,			/* # of fields of this type found */
      346          3 field_idxs (message_scan.n_header_fields_allocated) fixed binary;
      347 						/* index into header_field_list.fields of each field found */
      348 
      349 
      350 dcl  1 forwarding_info_list aligned based (message_scan.forwarding_info_list_ptr),
      351        2 n_forwarding_infos fixed binary,		/* # of separate forwarding infos actually found */
      352        2 forwarding_info_ptrs (message_scan.n_header_fields_allocated) pointer;
      353 						/* -> field_by_type_lists for each forwarding */
      354 
      355 dcl  1 forwarding_info aligned based (forwarding_info_ptr) like field_by_type_lists;
      356 dcl  forwarding_info_ptr pointer;
      357 
      358 
      359 dcl  1 comment_info_list aligned based (message_scan.comment_info_list_ptr),
      360        2 n_comment_infos fixed binary,			/* # of separate comment infos actually found */
      361        2 comment_info_ptrs (message_scan.n_header_fields_allocated) pointer;
      362 						/* -> field_by_type_lists for each comment */
      363 
      364 dcl  1 comment_info aligned based (comment_info_ptr) like field_by_type_lists;
      365 dcl  comment_info_ptr pointer;
      366 
      367 dcl  1 user_field_list aligned based (message_scan.user_field_list_ptr),
      368        2 n_user_fields fixed binary,			/* # of user fields found */
      369        2 user_fields (message_scan.n_header_fields_allocated),
      370          3 field_id bit (36) aligned,			/* ID assigned to group all similar user fields */
      371          3 field_value_idx fixed binary;		/* index into header_field_list of this field */
      372 
      373 /* Declarations used to convert the input text into a series of tokens */
      374 
      375 dcl  original_text character (original_text_lth) unaligned based (original_text_ptr);
      376 dcl  original_text_lth fixed binary (21);
      377 dcl  original_text_ptr pointer;
      378 
      379 dcl  1 lex_and_parse_pointers aligned,			/* allows easy setting of all these pointers */
      380        2 all_but_sel_ptr,
      381          3 token_list_ptr pointer,
      382          3 unquoted_text_ptr pointer,
      383          3 host_indeces_ptr pointer,
      384          3 address_string_ptr pointer,
      385          3 address_name_ptr pointer,
      386          3 address_comment_ptr pointer,
      387        2 sel_ptr pointer;
      388 
      389 dcl  unquoted_text character (original_text_lth) unaligned based (lex_and_parse_pointers.unquoted_text_ptr);
      390 						/* used by lex when processing quoted strings */
      391 
      392 dcl  1 token aligned based (token_ptr),			/* a single token from the string */
      393        2 token_ptr pointer,				/* -> the text */
      394        2 token_lth fixed binary (21),			/* length of text in characters */
      395        2 original_start fixed binary (21),		/* index in caller's text of start of token */
      396        2 original_lth fixed binary (21),		/* length of the original (maybe quoted) version of token */
      397        2 type fixed binary,				/* type of token (see below) */
      398        2 flags,
      399          3 in_unquoted bit (1) unaligned,		/* ON => text was reconstructed (quoted or something) */
      400          3 pad bit (35) unaligned;
      401 dcl  token_ptr pointer;
      402 
      403 dcl  1 current aligned like token based (current_token_ptr);/* the token under examination */
      404 dcl  current_token_ptr pointer;
      405 dcl  token_idx fixed binary (21);			/* index of current token in the token list */
      406 
      407 dcl  current_token character (current.token_lth) unaligned based (current.token_ptr);
      408 						/* the actual text of the token */
      409 
      410 dcl  1 token_list aligned based (lex_and_parse_pointers.token_list_ptr),
      411        2 n_tokens_allocated fixed binary (21),		/* # of tokens below */
      412        2 n_tokens_used fixed binary (21),		/* # of tokens in use */
      413        2 tokens (0:(original_text_lth + 1) refer (token_list.n_tokens_allocated)) like token;
      414 
      415 /* format: off */
      416 
      417 /* Token types common to all forms of lexical analysis */
      418 
      419 dcl (START_OF_TEXT_TOKEN	initial (-3),		/* start of text: always the first token in the list */
      420      END_OF_TEXT_TOKEN	initial (-2),		/* end of the text: always the last token in the list */
      421      WORD_TOKEN		initial (-1),		/* a piece of text (it might have been quoted) */
      422      COMMENT_TOKEN		initial (0),		/* the text of a comment */
      423 
      424      COMMA_TOKEN	initial (1),			/* comma and colon delimiters are common to both lex's */
      425      COLON_TOKEN	initial (2),
      426 
      427 
      428 /* Token types for parsing address, address-list, and message-id fields */
      429 
      430      SEMICOLON_TOKEN	initial (3),	     LEFTBRACE_TOKEN	initial (4),
      431      RIGHTBRACE_TOKEN	initial (5),	     LEFTBRACKET_TOKEN	initial (6),
      432      RIGHTBRACKET_TOKEN	initial (7),	     AT_TOKEN		initial (8),
      433 
      434 
      435 /* Token types for parsing date/time fields */
      436 
      437      PLUS_TOKEN		initial (3),	     HYPHEN_TOKEN		initial (4))
      438 	fixed binary static options (constant);
      439 /* format: on */
      440 
      441 
      442 /* Declarations used for parsing addresses and address lists */
      443 
      444 dcl  1 sel (original_text_lth) aligned based (lex_and_parse_pointers.sel_ptr),
      445        2 text_start fixed binary (21),			/* index in original text of substring in error */
      446        2 text_lth fixed binary (21),			/* ... and the length of said substring */
      447        2 code fixed binary (35);			/* error code describing problem */
      448 dcl  n_syntax_errors fixed binary (21);			/* # of errors detected by the parse */
      449 
      450 dcl  host_indeces (original_text_lth) fixed binary (21) based (lex_and_parse_pointers.host_indeces_ptr);
      451 dcl  n_hosts fixed binary;				/* # of host names in the address */
      452 dcl  n_reversed_hosts fixed binary;			/* # of host names in RFC822 style route */
      453 
      454 dcl  address_string character (original_text_lth + 1) varying based (lex_and_parse_pointers.address_string_ptr);
      455 dcl  address_name character (original_text_lth + 1) varying based (lex_and_parse_pointers.address_name_ptr);
      456 dcl  address_comment character (original_text_lth + 1) varying based (lex_and_parse_pointers.address_comment_ptr);
      457 
      458 
      459 /* Declarations used for parsing date/times */
      460 
      461 dcl  ONE_MINUTE fixed binary (71) static options (constant) initial (60000000);
      462 
      463 /* format: off */
      464 dcl  DAY_OF_WEEKS (14) character (32) static options (constant) initial (
      465 	"SUNDAY",	     "SUN",	"MONDAY",	     "MON",	"TUESDAY",     "TUE",	"WEDNESDAY",   "WED",
      466 	"THURSDAY",    "THU",	"FRIDAY",	     "FRI",	"SATURDAY",    "SAT");
      467 dcl  DAY_OF_WEEK_VALUES (14) fixed binary static options (constant) initial (
      468 	(2) 7,			(2) 1,			(2) 2,			(2) 3,
      469 	(2) 4,			(2) 5,			(2) 6);
      470 
      471 dcl  MONTHS (23) character (32) static options (constant) initial (
      472 	"JANUARY",     "JAN",	"FEBRUARY",    "FEB",	"MARCH",	     "MAR",	"APRIL",	     "APR",
      473 	"MAY",			"JUNE",	     "JUN",	"JULY",	     "JUL",	"AUGUST",	     "AUG",
      474 	"SEPTEMBER",   "SEP",	"OCTOBER",     "OCT",	"NOVEMBER",    "NOV",	"DECEMBER",    "DEC");
      475 dcl  MONTH_VALUES (23) fixed binary static options (constant) initial (
      476 	(2) 1,			(2) 2,			(2) 3,			(2) 4,
      477 	5,			(2) 6,			(2) 7,			(2) 8,
      478 	(2) 9,			(2) 10,			(2) 11,			(2) 12);
      479 
      480 dcl  RFC822_ZONES (35) character (4) static options (constant) initial (
      481 	"GMT",	"UT",	"EST",	"EDT",	"CST",	"CDT",	"MST",	"MDT",	"PST",	"PDT",
      482 	"Z",	"A",	"B",	"C",	"D",	"E",	"F",	"G",	"H",	"I",
      483 	"K",	"L",	"M",	"N",	"O",	"P",	"Q",	"R",	"S",	"T",
      484 	"U",	"V",	"W",	"X",	"Y");
      485 dcl  RFC822_ZONE_OFFSETS (35) fixed binary static options (constant) initial (
      486 	   0,	   0,	-300,	-240,	-360,	-300,	-420,	-360,	-480,	-420,
      487 	   0,	 -60,	-120,	-180,	-240,	-300,	-360,	-420,	-480,	-540,
      488 	-600,	-660,	-720,	  60,	 120,	 180,	 240,	 300,	 360,	 420,
      489 	 480,	 540,	 600,	 660,	 720);
      490 /* format: on */
      491 
      492 /* Convert the printed representation of an in-mailbox message into its internal representation */
      493 
      494 parse_im_message_text:
      495      entry (P_representation, P_message_version, P_im_message_info_ptr, P_last_delivered_by, P_last_date_time_delivered,
      496 	P_requests_acknowledgement, P_multics_format, P_message_ptr, P_code);
      497 
      498 	new_message = "0"b;				/* building an in-mailbox message */
      499 
      500 	local_pto.version = PARSE_TEXT_OPTIONS_VERSION_1; /* setup common parse options */
      501 	local_pto.area_ptr = null ();
      502 	string (local_pto.flags) = ""b;		/* ... don't list errors or validate addresses */
      503 	local_pto.include_invalid_addresses = "1"b;	/* ... but include everything possible in the message */
      504 	parse_text_options_ptr = addr (local_pto);
      505 
      506 	string (internal_parse_options.flags) = ""b;	/* ... will determine the default system later */
      507 	internal_parse_options.multics_format = P_multics_format;
      508 						/* ... use new-style formatting if necessary */
      509 	internal_parse_options.no_copy = "1"b;		/* ... use the actual message text when possible */
      510 
      511 	internal_parse_options.last_delivered_by = P_last_delivered_by;
      512 	internal_parse_options.last_date_time_delivered = P_last_date_time_delivered;
      513 	internal_parse_options.requests_acknowledgement = P_requests_acknowledgement;
      514 
      515 	add_address = mlsys_address_list_mgr_$add_address;
      516 	add_body_section = mlsys_message_mgr_$add_body_section_no_copy;
      517 	add_redistribution = mlsys_message_mgr_$add_redistribution_no_copy;
      518 	add_reply_reference = mlsys_message_mgr_$add_reply_reference;
      519 	add_user_field = mlsys_message_mgr_$add_user_field_no_copy;
      520 	create_address_list = mlsys_address_list_mgr_$create_read_only_address_list;
      521 	delete_address = mlsys_address_list_mgr_$delete_address;
      522 	encode_foreign_id = mlsys_message_id_mgr_$encode_foreign_id;
      523 	encode_local_id = mlsys_message_id_mgr_$encode_local_id;
      524 	encode_psuedo_id = mlsys_message_id_mgr_$encode_psuedo_id;
      525 	free_address_list = mlsys_address_list_mgr_$free_address_list;
      526 	free_message = mlsys_message_mgr_$free_message;
      527 	replace_bcc = mlsys_message_mgr_$replace_bcc_no_copy;
      528 	replace_cc = mlsys_message_mgr_$replace_cc_no_copy;
      529 	replace_from = mlsys_message_mgr_$replace_from_no_copy;
      530 	replace_message_envelope = mlsys_message_mgr_$replace_message_envelope;
      531 	replace_reply_to = mlsys_message_mgr_$replace_reply_to_no_copy;
      532 	replace_subject = mlsys_message_mgr_$replace_subject_no_copy;
      533 	replace_to = mlsys_message_mgr_$replace_to_no_copy;
      534 	set_address_implicit_route = mlsys_address_mgr_$set_address_implicit_route;
      535 	set_date_time_created = set_date_time_created_directly;
      536 	set_message_id = set_message_id_directly;
      537 
      538 	call mlsys_message_mgr_$create_im_message (P_message_version, P_im_message_info_ptr, message_ptr, code);
      539 	if code ^= 0 then do;			/* wrong version? */
      540 	     P_code = code;
      541 	     return;
      542 	end;
      543 
      544 	go to PARSE_MESSAGE_TEXT_COMMON;
      545 
      546 /* Convert the printed representation of a new message into its internal representation */
      547 
      548 parse_new_message_text:
      549      entry (P_representation, P_parse_text_options_ptr, P_message_version, P_message_ptr, P_parse_text_error_list_ptr,
      550 	P_code);
      551 
      552 	new_message = "1"b;				/* building a new message */
      553 
      554 	parse_text_options_ptr = P_parse_text_options_ptr;
      555 	if parse_text_options.version ^= PARSE_TEXT_OPTIONS_VERSION_1 then do;
      556 	     P_code = error_table_$unimplemented_version;
      557 	     return;
      558 	end;
      559 	if parse_text_options.mbz ^= ""b then do;
      560 	     P_code = error_table_$bad_subr_arg;
      561 	     return;
      562 	end;
      563 
      564 	if parse_text_options.area_ptr = null () then
      565 	     user_area_ptr = get_system_free_area_ ();
      566 	else user_area_ptr = parse_text_options.area_ptr;
      567 
      568 	string (internal_parse_options.flags) = ""b;
      569 	internal_parse_options.multics_format = "1"b;	/* use standard Multics formatting conventions */
      570 	internal_parse_options.no_copy = "0"b;		/* can't use supplied text directly */
      571 
      572 	internal_parse_options.default_system_is_local = "1"b;
      573 	internal_parse_options.default_system_name = mlsys_nit_interface_$get_local_system_name ();
      574 
      575 	internal_parse_options.last_delivered_by = null ();
      576 	internal_parse_options.last_date_time_delivered = 0;
      577 	internal_parse_options.requests_acknowledgement = "0"b;
      578 						/* message has never been sent anywhere */
      579 
      580 	add_address = mail_system_$add_address;
      581 	add_body_section = mail_system_$add_body_section;
      582 	add_user_field = mail_system_$add_user_field;
      583 	create_address_list = mail_system_$create_address_list;
      584 	delete_address = mail_system_$delete_address;
      585 	free_address_list = mail_system_$free_address_list;
      586 	free_message = mail_system_$free_message;
      587 	replace_bcc = mail_system_$replace_bcc;
      588 	replace_cc = mail_system_$replace_cc;
      589 	replace_from = mail_system_$replace_from;
      590 	replace_reply_to = mail_system_$replace_reply_to;
      591 	replace_subject = mail_system_$replace_subject;
      592 	replace_to = mail_system_$replace_to;
      593 
      594 	call mail_system_$create_message (P_message_version, message_ptr, code);
      595 	if code ^= 0 then do;			/* wrong version? */
      596 	     P_code = code;
      597 	     return;
      598 	end;
      599 
      600 	go to PARSE_MESSAGE_TEXT_COMMON;
      601 
      602 /* The Message Parser */
      603 
      604 PARSE_MESSAGE_TEXT_COMMON:
      605 	representation_ptr = addr (P_representation);
      606 	representation_lth = length (P_representation);
      607 
      608 	string (internal_parse_options.delimiters) = ""b; /* end of string is only address/address list delimiter */
      609 	internal_parse_options.delimiters.eos = "1"b;
      610 
      611 	message_parse_fails = "0"b;			/* assume no errors are detected */
      612 
      613 	system_area_ptr = get_system_free_area_ ();
      614 
      615 	call initialize_message_parse_data ();		/* for cleanup handler */
      616 
      617 	on condition (cleanup)
      618 	     begin;
      619 	     call cleanup_message_parse_data ();
      620 	     if message_ptr ^= null () then call free_message (message_ptr, (0));
      621 	end;
      622 
      623 
      624 /* Find and classify all header fields */
      625 
      626 	call scan_message_text (parse_text_options, internal_parse_options);
      627 
      628 
      629 /* Add the body to the message: whatever body is present is treated as a single, preformatted section */
      630 
      631 	local_mbsp.version = MESSAGE_BODY_SECTION_PARAMETER_VERSION_2;
      632 
      633 	message_body_section_ptr = addr (local_mbsp.section);
      634 	message_preformatted_body_section.section_type = MESSAGE_PREFORMATTED_BODY_SECTION;
      635 	message_preformatted_body_section.text_ptr = message_scan.body_ptr;
      636 	message_preformatted_body_section.text_lth = message_scan.body_lth;
      637 
      638 	call add_body_section (message_ptr, addr (local_mbsp), (-1), code);
      639 	if code ^= 0 then call message_parse_error_fatal (code);
      640 
      641 
      642 	if new_message then do;
      643 
      644 /* New Message -- Parse the From field and mark all "restricted" header fields and all field in the envelope as errors */
      645 
      646 	     call parse_address_list_field (parse_text_options, internal_parse_options, FROM_FIELDNAME,
      647 		addr (field_by_type_lists.types (FROM_FIELD)), address_list_field);
      648 	     if address_list_field ^= null () then do;	/* ... there's something in the From field */
      649 		call replace_from (message_ptr, address_list_field, code);
      650 		if code ^= 0 then call message_parse_error_fatal (code);
      651 		if address_list_field = message.from then
      652 		     address_list_field = null ();
      653 		else call free_address_list (address_list_field, (0));
      654 	     end;
      655 
      656 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (ACCESS_CLASS_FIELD)));
      657 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (ACKNOWLEDGE_TO_FIELD)));
      658 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (DATE_FIELD)));
      659 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (DELIVERY_BY_FIELD)));
      660 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (DELIVERY_DATE_FIELD)));
      661 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (MESSAGE_ID_FIELD)));
      662 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (POSTED_DATE_FIELD)));
      663 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (RELAYED_FIELD)));
      664 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (ROUTE_FIELD)));
      665 	     call mark_as_in_mailbox_field (addr (field_by_type_lists.types (SENDER_FIELD)));
      666 	end;
      667 
      668 	else do;
      669 
      670 /* In-mailbox/Incoming Message -- Parse the message envelope:  However, the envelope is not added to the message at this
      671*   time as it is possible that either the message trace or Acknowledge-To field or both which appear to be part of the
      672*   envelope are actually part of one of the message redistributions.  As part of parsing the envelope, we also parse the
      673*   Date and From fields in the header as we may need their values to complete the envelope parse; we may also need their
      674*   values to construct a unique ID for the message if there's no Message-ID field */
      675 
      676 	     first_field_idx = 1;			/* message starts at the beginning ... */
      677 
      678 	     local_mep.version = MESSAGE_ENVELOPE_PARAMETER_VERSION_2;
      679 
      680 	     call parse_envelope (parse_text_options, internal_parse_options, "0"b,
      681 		message_scan.field_by_type_lists_ptr, addr (local_mep.envelope), date_time_created,
      682 		address_list_field);		/* takes care of both Date and From fields also */
      683 
      684 	     call set_date_time_created (message_ptr, date_time_created, code);
      685 	     if code ^= 0 then call message_parse_error_fatal (code);
      686 
      687 	     if address_list_field ^= null () then do;	/* ... there's something in the From field */
      688 		call replace_from (message_ptr, address_list_field, code);
      689 		if code ^= 0 then call message_parse_error_fatal (code);
      690 		if address_list_field = message.from then
      691 		     address_list_field = null ();
      692 		else call free_address_list (address_list_field, (0));
      693 	     end;
      694 
      695 
      696 /* In-mailbox/Incoming Message -- Determine the unique ID of the message:  If there is exactly one Message-ID field,
      697*   convert it into the ID; if there is no Message-ID field, construct a psuedo-ID from the Date and From fields; if there
      698*   is more than one Message-ID field, flag them all as errors */
      699 
      700 	     message_id = ""b;			/* assume we don't get one */
      701 
      702 	     if field_by_type_lists.types (MESSAGE_ID_FIELD).n_fields = 1 then do;
      703 		field_idx = field_by_type_lists.types (MESSAGE_ID_FIELD).field_idxs (1);
      704 		call parse_message_id_text (parse_text_options, internal_parse_options, header_field_value,
      705 		     message_id);			/* text can always be converted to a message ID */
      706 	     end;
      707 
      708 	     else if field_by_type_lists.types (MESSAGE_ID_FIELD).n_fields > 1 then do;
      709 		do idx = 1 to field_by_type_lists.types (MESSAGE_ID_FIELD).n_fields;
      710 		     field_idx = field_by_type_lists.types (MESSAGE_ID_FIELD).field_idxs (idx);
      711 		     call message_parse_error (parse_text_options, mlsys_et_$extra_restricted_field,
      712 			header_field_list.fields (field_idx).complete_field_start,
      713 			header_field_list.fields (field_idx).complete_field_lth, "");
      714 		end;
      715 	     end;
      716 
      717 	     else do;				/* must construct a psudeo ID */
      718 		if (message.date_time_created ^= 0) & (message.from -> address_list.n_addresses > 0) then
      719 		     call encode_psuedo_id (message.date_time_created, message.from,
      720 			internal_parse_options.default_system_name, message_id);
      721 		else call message_parse_error (parse_text_options, mlsys_et_$cant_determine_msgid,
      722 			header_field_list.fields (1).complete_field_start,
      723 			header_field_list.fields (1).complete_field_lth, "The message which starts with:");
      724 	     end;
      725 
      726 	     if message_id ^= ""b then do;		/* found an ID ... */
      727 		call set_message_id (message_ptr, message_id, code);
      728 		if code ^= 0 then call message_parse_error_fatal (code);
      729 	     end;
      730 	end;
      731 
      732 
      733 /* Parse the Reply-To, To, cc, and bcc fields */
      734 
      735 	if field_by_type_lists.types (REPLY_TO_FIELD).n_fields > 0 then do;
      736 	     call parse_address_list_field (parse_text_options, internal_parse_options, REPLY_TO_FIELDNAME,
      737 		addr (field_by_type_lists.types (REPLY_TO_FIELD)), address_list_field);
      738 	     if address_list_field ^= null () then do;	/* ... there's something in the Reply-To field */
      739 		call replace_reply_to (message_ptr, address_list_field, code);
      740 		if code ^= 0 then call message_parse_error_fatal (code);
      741 		if address_list_field = message.reply_to then
      742 		     address_list_field = null ();
      743 		else call free_address_list (address_list_field, (0));
      744 	     end;
      745 	end;
      746 
      747 	if field_by_type_lists.types (TO_FIELD).n_fields > 0 then do;
      748 	     call parse_address_list_field (parse_text_options, internal_parse_options, TO_FIELDNAME,
      749 		addr (field_by_type_lists.types (TO_FIELD)), address_list_field);
      750 	     if address_list_field ^= null () then do;	/* ... there's something in the To field */
      751 		call replace_to (message_ptr, address_list_field, code);
      752 		if code ^= 0 then call message_parse_error_fatal (code);
      753 		if address_list_field = message.to then
      754 		     address_list_field = null ();
      755 		else call free_address_list (address_list_field, (0));
      756 	     end;
      757 	end;
      758 
      759 	if field_by_type_lists.types (CC_FIELD).n_fields > 0 then do;
      760 	     call parse_address_list_field (parse_text_options, internal_parse_options, CC_FIELDNAME,
      761 		addr (field_by_type_lists.types (CC_FIELD)), address_list_field);
      762 	     if address_list_field ^= null () then do;	/* ... there's something in the cc field */
      763 		call replace_cc (message_ptr, address_list_field, code);
      764 		if code ^= 0 then call message_parse_error_fatal (code);
      765 		if address_list_field = message.cc then
      766 		     address_list_field = null ();
      767 		else call free_address_list (address_list_field, (0));
      768 	     end;
      769 	end;
      770 
      771 	if field_by_type_lists.types (BCC_FIELD).n_fields > 0 then do;
      772 	     call parse_address_list_field (parse_text_options, internal_parse_options, BCC_FIELDNAME,
      773 		addr (field_by_type_lists.types (BCC_FIELD)), address_list_field);
      774 	     if address_list_field ^= null () then do;	/* ... there's something in the bcc field */
      775 		call replace_bcc (message_ptr, address_list_field, code);
      776 		if code ^= 0 then call message_parse_error_fatal (code);
      777 		if address_list_field = message.bcc then
      778 		     address_list_field = null ();
      779 		else call free_address_list (address_list_field, (0));
      780 	     end;
      781 	end;
      782 
      783 
      784 /* Parse the Subject field: if there are several Subject fields in the message, merge them into a single field */
      785 
      786 	if field_by_type_lists.types (SUBJECT_FIELD).n_fields > 0 then do;
      787 	     call prepare_single_line_field (local_mtf, addr (field_by_type_lists.types (SUBJECT_FIELD)));
      788 	     begin;
      789 dcl  message_subject character (local_mtf.text_lth) unaligned based (local_mtf.text_ptr);
      790 		call replace_subject (message_ptr, message_subject, code);
      791 		if field_by_type_lists.types (SUBJECT_FIELD).n_fields > 1 then
      792 		     if message.subject.text_ptr ^= addr (message_subject) then free message_subject in (system_area);
      793 		if code ^= 0 then call message_parse_error_fatal (code);
      794 	     end;
      795 	end;
      796 
      797 
      798 	if field_by_type_lists.types (IN_REPLY_TO_FIELD).n_fields > 0 then
      799 	     if new_message then do;
      800 
      801 /* New Message -- Mark all In-Reply-To fields as errors:  Privileged operations are required to convert the printed
      802*   representation of a message reference into its internal form */
      803 
      804 		do idx = 1 to field_by_type_lists.types (IN_REPLY_TO_FIELD).n_fields;
      805 		     field_idx = field_by_type_lists.types (IN_REPLY_TO_FIELD).field_idxs (idx);
      806 		     call message_parse_error (parse_text_options, mlsys_et_$cant_parse_irt_field,
      807 			header_field_list.fields (field_idx).complete_field_start,
      808 			header_field_list.fields (field_idx).complete_field_lth, "");
      809 		end;
      810 	     end;
      811 
      812 	     else do;
      813 
      814 /* In-mailbox/Incoming Message -- Parse the In-Reply-To fields:  We can not actually parse the In-Reply-To field as the
      815*   format of the printed representation is not complete enough for parsing.  Therefore, we take each separate line of the
      816*   In-Reply-To fields and treat it as a separate reference; a message ID is generated for each line based on its text so
      817*   that there will be something available to convert back into the printed form */
      818 
      819 		local_mrp.version = MESSAGE_REFERENCE_PARAMETER_VERSION_2;
      820 		local_mrp.date_time_created = 0;	/* there's never any date/time, authors, or subject */
      821 		local_mrp.from, local_mrp.subject.text_ptr = null ();
      822 		local_mrp.subject.text_lth = 0;
      823 
      824 		do idx = 1 to field_by_type_lists.types (IN_REPLY_TO_FIELD).n_fields;
      825 		     field_idx = field_by_type_lists.types (IN_REPLY_TO_FIELD).field_idxs (idx);
      826 
      827 		     used = 0;
      828 		     do while (used < length (header_field_value));
      829 			begin;
      830 dcl  rest_of_field char (length (header_field_value) - used) unaligned defined (header_field_value) position (used + 1);
      831 			     eol_idx = index (rest_of_field, NL);
      832 			     if eol_idx = 0 then eol_idx = length (rest_of_field) + 1;
      833 			end;
      834 			begin;			/* have the next line to convert ... */
      835 dcl  next_line character (eol_idx - 1) unaligned defined (header_field_value) position (used + 1);
      836 			     line_start = verify (next_line, HTSP_COMMA);
      837 			     if line_start ^= 0 then do;
      838 						/* ... something on the line */
      839 				line_end = length (rtrim (next_line, HTSP_COMMA));
      840 				begin;
      841 dcl  the_line character (line_end - line_start + 1) unaligned defined (header_field_value) position (used + line_start);
      842 				     call encode_foreign_id (the_line,
      843 					mlsys_nit_interface_$get_local_system_name (), local_mrp.message_id);
      844 				     call add_reply_reference (message_ptr, addr (local_mrp), (-1), code);
      845 				     if code ^= 0 then call message_parse_error_fatal (code);
      846 				end;
      847 			     end;
      848 			end;
      849 			used = used + eol_idx;	/* on to the next line */
      850 		     end;
      851 		end;
      852 	     end;
      853 
      854 
      855 /* Convert the user-defined fields:  Until messages are stored in binary, we must assume that all user-defined fields are
      856*   text fields */
      857 
      858 	local_mufp.version = MESSAGE_USER_FIELD_PARAMETER_VERSION_2;
      859 	message_user_field_ptr = addr (local_mufp.user_field);
      860 	message_user_field.field_type = MESSAGE_TEXT_USER_FIELD;
      861 
      862 	do idx = 1 to user_field_list.n_user_fields;
      863 	     field_idx = user_field_list.user_fields (idx).field_value_idx;
      864 	     message_user_field.field_id = user_field_list.user_fields (idx).field_id;
      865 
      866 	     message_text_user_field.multiline_text = (search (header_field_value, LINE_DELIMITERS) ^= 0);
      867 	     if message_text_user_field.multiline_text then do;
      868 		call mail_system_$get_user_field_name (message_text_user_field.field_id, full_fieldname, (0));
      869 		message_text_user_field.text_ptr = null ();
      870 		message_text_user_field.text_lth = 0;
      871 		call prepare_multiline_field_from_text (length (full_fieldname), message_text_user_field.text,
      872 		     header_field_value);
      873 	     end;
      874 	     else do;
      875 		message_text_user_field.text_ptr = addr (header_field_value);
      876 		message_text_user_field.text_lth = length (header_field_value);
      877 	     end;
      878 
      879 	     position = -1;				/* add it to the end, please */
      880 	     call add_user_field (message_ptr, addr (local_mufp), position, "1"b, code);
      881 	     if code ^= 0 then do;
      882 		if message_text_user_field.multiline_text then free message_text_user_field_text in (system_area);
      883 		call message_parse_error_fatal (code);
      884 	     end;
      885 
      886 	     if message_text_user_field.multiline_text then
      887 		if message_text_user_field.text_ptr
      888 		     ^= addr (message_user_fields_list.user_fields (position)) -> message_text_user_field.text_ptr
      889 		     then
      890 		     free message_text_user_field_text in (system_area);
      891 	end;
      892 
      893 
      894 /* Convert all free-standing comment fields into user-defined fields:  A free-standing comment is any Comment text field
      895*   in the message for which the scanner didn't find matching Comment-Date and Comment-By fields */
      896 
      897 	local_mufp.version = MESSAGE_USER_FIELD_PARAMETER_VERSION_2;
      898 	message_user_field_ptr = addr (local_mufp.user_field);
      899 
      900 	call mail_system_$get_user_field_id ("X-Comments", message_user_field.field_id, (""), code);
      901 	if (code ^= 0) & (code ^= error_table_$smallarg) then call message_parse_error_fatal (code);
      902 						/* must use above name to avoid conflicts */
      903 
      904 	message_user_field.field_type = MESSAGE_TEXT_USER_FIELD;
      905 	message_text_user_field.multiline_text = "1"b;
      906 	message_text_user_field.text_ptr = null ();	/* no previous text */
      907 	message_text_user_field.text_lth = 0;
      908 
      909 	current_field_list_idx = 1;
      910 
      911 	do while (current_field_list_idx <= comment_info_list.n_comment_infos);
      912 
      913 	     comment_info_ptr = comment_info_list.comment_info_ptrs (current_field_list_idx);
      914 
      915 	     if (comment_info.types (DATE_FIELD).n_fields = 0) & (comment_info.types (SENDER_FIELD).n_fields = 0)
      916 	     then do;				/* this "commenting" should be a user field */
      917 		call prepare_multiline_field_from_list (length ("X-Comments"), message_text_user_field.text,
      918 		     addr (comment_info.types (COMMENT_FIELD)));
      919 		free comment_info in (system_area);	/* we don't need it anymore */
      920 		do idx = (current_field_list_idx + 1) to comment_info_list.n_comment_infos;
      921 		     comment_info_list.comment_info_ptrs (idx - 1) = comment_info_list.comment_info_ptrs (idx);
      922 		end;
      923 		comment_info_list.n_comment_infos = comment_info_list.n_comment_infos - 1;
      924 	     end;
      925 
      926 	     else current_field_list_idx = current_field_list_idx + 1;
      927 	end;					/* a real commenting operation */
      928 
      929 	if message_text_user_field.text_ptr ^= null () then do;
      930 	     position = -1;				/* found some: add them to the message */
      931 	     call add_user_field (message_ptr, addr (local_mufp), position, "1"b, code);
      932 	     if code ^= 0 then do;
      933 		free message_text_user_field_text in (system_area);
      934 		call message_parse_error_fatal (code);
      935 	     end;
      936 	     if message_text_user_field.text_ptr
      937 		^= addr (message_user_fields_list.user_fields (position)) -> message_text_user_field.text_ptr then
      938 		free message_text_user_field_text in (system_area);
      939 	end;
      940 
      941 
      942 	if new_message then do;
      943 
      944 /* New Message -- Mark any redistributions and any remaining comments as errors */
      945 
      946 	     do current_field_list_idx = 1 to forwarding_info_list.n_forwarding_infos;
      947 		forwarding_info_ptr = forwarding_info_list.forwarding_info_ptrs (current_field_list_idx);
      948 		do idx = 1 to N_ORDINARY_FIELDS;
      949 		     call mark_as_in_mailbox_field (addr (forwarding_info.types (idx)));
      950 		end;
      951 	     end;
      952 
      953 	     do current_field_list_idx = 1 to comment_info_list.n_comment_infos;
      954 		comment_info_ptr = comment_info_list.comment_info_ptrs (current_field_list_idx);
      955 		do idx = 1 to N_ORDINARY_FIELDS;
      956 		     call mark_as_in_mailbox_field (addr (comment_info.types (idx)));
      957 		end;
      958 	     end;
      959 	end;
      960 
      961 
      962 	else do;					/* in-mailbox/incoming */
      963 	     if (forwarding_info_list.n_forwarding_infos = 0) & (comment_info_list.n_comment_infos > 0) then do;
      964 		do current_field_list_idx = 1 to comment_info_list.n_comment_infos;
      965 		     comment_info_ptr = comment_info_list.comment_info_ptrs (current_field_list_idx);
      966 		     call find_first_field_in_list (comment_info_ptr, field_idx);
      967 		     call message_parse_error (parse_text_options, mlsys_et_$no_comment_redistribution,
      968 			header_field_list.fields (field_idx).complete_field_start,
      969 			header_field_list.fields (field_idx).complete_field_lth, "The comment which starts with:");
      970 		end;
      971 	     end;
      972 
      973 
      974 /* In-mailbox/Incoming Message -- Parse the redistributions list */
      975 
      976 	     if forwarding_info_list.n_forwarding_infos > 0 then do;
      977 
      978 		allocate mr_sort in (system_area) set (mr_sort_ptr);
      979 		allocate mrps in (system_area) set (mrps_ptr);
      980 
      981 		mrps (*).version = MESSAGE_REDISTRIBUTION_PARAMETER_VERSION_2;
      982 		mrps (*).sender, mrps (*).trace, mrps (*).delivered_by, mrps (*).acknowledge_to, mrps (*).from,
      983 		     mrps (*).to, mrps (*).comment.text_ptr = null ();
      984 
      985 		do current_field_list_idx = 1 to forwarding_info_list.n_forwarding_infos;
      986 		     the_mrp_ptr = addr (mrps (current_field_list_idx));
      987 
      988 		     forwarding_info_ptr = forwarding_info_list.forwarding_info_ptrs (current_field_list_idx);
      989 		     call find_first_field_in_list (forwarding_info_ptr, first_field_idx);
      990 
      991 		     call parse_envelope (parse_text_options, internal_parse_options, "1"b, forwarding_info_ptr,
      992 			addr (the_mrp.envelope), the_mrp.date_time_created, the_mrp.from);
      993 
      994 		     if field_by_type_lists.types (MESSAGE_ID_FIELD).n_fields = 1 then do;
      995 			field_idx = field_by_type_lists.types (MESSAGE_ID_FIELD).field_idxs (1);
      996 			call parse_message_id_text (parse_text_options, internal_parse_options, header_field_value,
      997 			     the_mrp.message_id);
      998 		     end;
      999 		     else if field_by_type_lists.types (MESSAGE_ID_FIELD).n_fields > 1 then do;
     1000 			do idx = 1 to field_by_type_lists.types (MESSAGE_ID_FIELD).n_fields;
     1001 			     field_idx = field_by_type_lists.types (MESSAGE_ID_FIELD).field_idxs (idx);
     1002 			     call message_parse_error (parse_text_options, mlsys_et_$extra_restricted_field,
     1003 				header_field_list.fields (field_idx).complete_field_start,
     1004 				header_field_list.fields (field_idx).complete_field_lth, "");
     1005 			end;
     1006 		     end;
     1007 		     else do;			/* must construct a psudeo ID */
     1008 			if (the_mrp.date_time_created ^= 0) & (the_mrp.from -> address_list.n_addresses > 0) then
     1009 			     call encode_psuedo_id (the_mrp.date_time_created, the_mrp.from,
     1010 				internal_parse_options.default_system_name, the_mrp.message_id);
     1011 			else call message_parse_error (parse_text_options, mlsys_et_$cant_determine_msgid,
     1012 				header_field_list.fields (first_field_idx).complete_field_start,
     1013 				header_field_list.fields (first_field_idx).complete_field_lth,
     1014 				"The redistribution which starts with:");
     1015 		     end;
     1016 
     1017 		     full_fieldname = REDISTRIBUTED_PREFIX || TO_FIELDNAME;
     1018 		     if forwarding_info.types (TO_FIELD).n_fields > 0 then
     1019 			call parse_address_list_field (parse_text_options, internal_parse_options, full_fieldname,
     1020 			     addr (forwarding_info.types (TO_FIELD)), the_mrp.to);
     1021 
     1022 		     if forwarding_info.types (COMMENT_FIELD).n_fields > 0 then
     1023 			call prepare_multiline_field_from_list (length (REDISTRIBUTED_COMMENT_FIELDNAME),
     1024 			     the_mrp.comment, addr (forwarding_info.types (COMMENT_FIELD)));
     1025 		end;
     1026 
     1027 
     1028 /* In-mailbox/Incoming message -- Find any old-style redistribution comments (Comment-Date/Comment-By/Comment) and place
     1029*   their text into the appropriate redistribution */
     1030 
     1031 		internal_parse_options.default_system_name = mlsys_nit_interface_$get_local_system_name ();
     1032 		internal_parse_options.default_system_is_local = "1"b;
     1033 
     1034 		do current_field_list_idx = 1 to comment_info_list.n_comment_infos;
     1035 		     comment_info_ptr = comment_info_list.comment_info_ptrs (current_field_list_idx);
     1036 		     call find_first_field_in_list (comment_info_ptr, first_field_idx);
     1037 
     1038 		     if (comment_info.types (DATE_FIELD).n_fields = 0)
     1039 			| (comment_info.types (SENDER_FIELD).n_fields = 0) then
     1040 			call message_parse_error (parse_text_options, mlsys_et_$incomplete_comment,
     1041 			     header_field_list.fields (first_field_idx).complete_field_start,
     1042 			     header_field_list.fields (first_field_idx).complete_field_lth,
     1043 			     "The comment which starts with:");
     1044 
     1045 		     else do;
     1046 			/*** Message scanner guarentees at most one Comment-Date and Comment-By */
     1047 			field_idx = comment_info.types (DATE_FIELD).field_idxs (1);
     1048 			call parse_date_time_text (parse_text_options, internal_parse_options, header_field_value,
     1049 			     comment_date_time_created, code);
     1050 			if code ^= 0 then do;
     1051 			     call message_parse_error (parse_text_options, code,
     1052 				header_field_list.fields (field_idx).complete_field_start,
     1053 				header_field_list.fields (field_idx).complete_field_lth, "");
     1054 			     call message_parse_error (parse_text_options, mlsys_et_$comment_ignored,
     1055 				header_field_list.fields (first_field_idx).complete_field_start,
     1056 				header_field_list.fields (first_field_idx).complete_field_lth,
     1057 				"The comment which starts with:");
     1058 			     go to TRY_NEXT_COMMENT_OPERATION;
     1059 			end;
     1060 
     1061 			field_idx = comment_info.types (SENDER_FIELD).field_idxs (1);
     1062 			call parse_address_text_internal (parse_text_options, internal_parse_options,
     1063 			     header_field_value, comment_sender, code);
     1064 			if code ^= 0 then do;
     1065 			     call message_parse_error (parse_text_options, code,
     1066 				header_field_list.fields (field_idx).complete_field_start,
     1067 				header_field_list.fields (field_idx).complete_field_lth, "");
     1068 			     call message_parse_error (parse_text_options, mlsys_et_$comment_ignored,
     1069 				header_field_list.fields (first_field_idx).complete_field_start,
     1070 				header_field_list.fields (first_field_idx).complete_field_lth,
     1071 				"The comment which starts with:");
     1072 			     go to TRY_NEXT_COMMENT_OPERATION;
     1073 			end;
     1074 
     1075 			do idx = 1 to forwarding_info_list.n_forwarding_infos;
     1076 			     if mrps (idx).sender = null () then
     1077 				redistribution_sender = mrps (idx).from -> address_list.addresses (1);
     1078 			     else redistribution_sender = mrps (idx).sender;
     1079 			     if date_time_equal (comment_date_time_created, mrps (idx).date_time_created)
     1080 				& mail_system_$compare_addresses (comment_sender, redistribution_sender, (0))
     1081 			     then do;
     1082 				if comment_info.types (COMMENT_FIELD).n_fields > 0 then
     1083 				     call prepare_multiline_field_from_list (length ("Comment"),
     1084 					mrps (idx).comment, addr (comment_info.types (COMMENT_FIELD)));
     1085 				call mail_system_$free_address (comment_sender, (0));
     1086 				go to TRY_NEXT_COMMENT_OPERATION;
     1087 			     end;
     1088 			end;
     1089 
     1090 			/*** Control arrives here iff we couldn't find the matching redistribution */
     1091 			call message_parse_error (parse_text_options, mlsys_et_$no_comment_redistribution,
     1092 			     header_field_list.fields (first_field_idx).complete_field_start,
     1093 			     header_field_list.fields (first_field_idx).complete_field_lth,
     1094 			     "The comment which starts with:");
     1095 		     end;
     1096 
     1097 TRY_NEXT_COMMENT_OPERATION:
     1098 		end;
     1099 
     1100 
     1101 /* In-mailbox/Incoming Message -- Sort the redistributions into chronological order; redistributions whose date/time
     1102*   created is unkown will be placed at the beginning of the list */
     1103 
     1104 		n_sorted = 0;			/* nothing's sorted yet */
     1105 
     1106 		do current_field_list_idx = 1 to forwarding_info_list.n_forwarding_infos;
     1107 		     the_mrp_ptr = addr (mrps (current_field_list_idx));
     1108 
     1109 		     sort_idx = 0;
     1110 		     do idx = 1 to n_sorted while (sort_idx = 0);
     1111 			if date_time_before (the_mrp.date_time_created, mrps (mr_sort (idx)).date_time_created) then
     1112 			     sort_idx = idx;
     1113 		     end;
     1114 		     if sort_idx = 0 then		/* this is the oldest one now */
     1115 			sort_idx = n_sorted + 1;
     1116 
     1117 		     do idx = n_sorted to sort_idx by -1;
     1118 			mr_sort (idx + 1) = mr_sort (idx);
     1119 		     end;				/* move older fields up */
     1120 
     1121 		     mr_sort (sort_idx) = current_field_list_idx;
     1122 		     n_sorted = n_sorted + 1;
     1123 		end;
     1124 	     end;
     1125 
     1126 
     1127 /* In-mailbox/Incoming Message -- Determine where the "original" message trace belongs as only Multics uses the
     1128*   "Redistributed-" forms of the message trace fields */
     1129 
     1130 	     if (local_mep.trace ^= null ()) & (forwarding_info_list.n_forwarding_infos > 0) then
     1131 		if local_mep.trace -> message_trace.n_relays > 0 then do;
     1132 		     message_trace_ptr = local_mep.trace;
     1133 		     date_time_last_relayed = message_trace.relays (message_trace.n_relays).date_time_relayed;
     1134 
     1135 		     do current_field_list_idx = 1 to forwarding_info_list.n_forwarding_infos;
     1136 			idx = mr_sort (current_field_list_idx);
     1137 			if date_time_before (date_time_last_relayed, mrps (idx).date_time_created) then do;
     1138 			     if idx = 1 then go to ORIGINAL_TRACE_PROPERLY_PLACED;
     1139 			     if mrps (idx - 1).date_time_created = 0 then go to ORIGINAL_TRACE_PROPERLY_PLACED;
     1140 			     if mrps (idx - 1).trace ^= null () then go to ORIGINAL_TRACE_PROPERLY_PLACED;
     1141 			     mrps (idx - 1).trace = local_mep.trace;
     1142 			     local_mep.trace = null ();
     1143 			     go to ORIGINAL_TRACE_PROPERLY_PLACED;
     1144 			end;
     1145 		     end;
     1146 
     1147 		     /*** Control arrives here iff the trace should be attached to the last redistribution */
     1148 		     if (mrps (forwarding_info_list.n_forwarding_infos).date_time_created ^= 0)
     1149 			& (mrps (forwarding_info_list.n_forwarding_infos).trace = null ()) then do;
     1150 			mrps (forwarding_info_list.n_forwarding_infos).trace = local_mep.trace;
     1151 			local_mep.trace = null ();
     1152 		     end;
     1153 
     1154 ORIGINAL_TRACE_PROPERLY_PLACED:
     1155 		end;
     1156 
     1157 
     1158 /* In-mailbox/Incoming Message -- Set the Acknowledge-To fields */
     1159 
     1160 	     acknowledge_to = null ();
     1161 
     1162 	     if internal_parse_options.requests_acknowledgement then do;
     1163 		do current_field_list_idx = forwarding_info_list.n_forwarding_infos to 1 by -1
     1164 		     while (acknowledge_to = null ());
     1165 		     idx = mr_sort (current_field_list_idx);
     1166 		     if mrps (idx).acknowledge_to ^= null () then acknowledge_to = mrps (idx).acknowledge_to;
     1167 		end;
     1168 
     1169 		if acknowledge_to = null () then acknowledge_to = local_mep.acknowledge_to;
     1170 		if acknowledge_to = null () then acknowledge_to = internal_parse_options.last_delivered_by;
     1171 	     end;
     1172 
     1173 	     if forwarding_info_list.n_forwarding_infos = 0 then do;
     1174 		if (local_mep.acknowledge_to ^= null ()) & (local_mep.acknowledge_to ^= acknowledge_to) then
     1175 		     call mail_system_$free_address (local_mep.acknowledge_to, (0));
     1176 		local_mep.acknowledge_to = acknowledge_to;
     1177 	     end;
     1178 
     1179 	     else do;				/* put it in the last redistribution */
     1180 		idx = mr_sort (forwarding_info_list.n_forwarding_infos);
     1181 		if (mrps (idx).acknowledge_to ^= null ()) & (mrps (idx).acknowledge_to ^= acknowledge_to) then
     1182 		     call mail_system_$free_address (mrps (idx).acknowledge_to, (0));
     1183 
     1184 		mrps (idx).acknowledge_to = acknowledge_to;
     1185 
     1186 		do current_field_list_idx = 1 to (forwarding_info_list.n_forwarding_infos - 1);
     1187 		     idx = mr_sort (current_field_list_idx);
     1188 		     if (mrps (idx).acknowledge_to ^= null ()) & (mrps (idx).acknowledge_to ^= acknowledge_to) then
     1189 			call mail_system_$free_address (mrps (idx).acknowledge_to, (0));
     1190 		     else mrps (idx).acknowledge_to = null ();
     1191 		end;
     1192 
     1193 		if (local_mep.acknowledge_to ^= null ()) & (local_mep.acknowledge_to ^= acknowledge_to) then
     1194 		     call mail_system_$free_address (local_mep.acknowledge_to, (0));
     1195 		else local_mep.acknowledge_to = null ();/* message should hve only one Acknowledge-To field */
     1196 	     end;
     1197 
     1198 
     1199 /* In-mailbox/Incoming Message -- If supplied, set the last delivery date and address to the values from ring-1 and then
     1200*   place the envelope and redistributions list into the message */
     1201 
     1202 	     if internal_parse_options.last_delivered_by ^= null () then
     1203 		if forwarding_info_list.n_forwarding_infos = 0 then do;
     1204 		     local_mep.date_time_delivered = internal_parse_options.last_date_time_delivered;
     1205 		     if local_mep.delivered_by ^= null () then
     1206 			call mail_system_$free_address (local_mep.delivered_by, (0));
     1207 		     if local_mep.sender ^= null () then
     1208 			if mail_system_$compare_addresses (local_mep.sender,
     1209 			     internal_parse_options.last_delivered_by, (0)) then
     1210 			     ;
     1211 			else local_mep.delivered_by = internal_parse_options.last_delivered_by;
     1212 		     else /*** if local_mep.sender = null () then */
     1213 			if
     1214 			mail_system_$compare_addresses (message.from -> address_list.addresses (1),
     1215 			internal_parse_options.last_delivered_by, (0)) then
     1216 			;
     1217 		     else local_mep.delivered_by = internal_parse_options.last_delivered_by;
     1218 		end;
     1219 
     1220 		else do;
     1221 		     the_mrp_ptr = addr (mrps (mr_sort (forwarding_info_list.n_forwarding_infos)));
     1222 		     the_mrp.date_time_delivered = internal_parse_options.last_date_time_delivered;
     1223 		     if the_mrp.delivered_by ^= null () then
     1224 			call mail_system_$free_address (the_mrp.delivered_by, (0));
     1225 		     if the_mrp.sender ^= null () then
     1226 			if mail_system_$compare_addresses (the_mrp.sender, internal_parse_options.last_delivered_by,
     1227 			     (0)) then
     1228 			     ;
     1229 			else the_mrp.delivered_by = internal_parse_options.last_delivered_by;
     1230 		     else /*** if the_mrp.sender = null () then */
     1231 			if
     1232 			mail_system_$compare_addresses (the_mrp.from -> address_list.addresses (1),
     1233 			internal_parse_options.last_delivered_by, (0)) then
     1234 			;
     1235 		     else the_mrp.delivered_by = internal_parse_options.last_delivered_by;
     1236 		end;
     1237 
     1238 	     call replace_message_envelope (message_ptr, addr (local_mep), code);
     1239 	     if code ^= 0 then call message_parse_error_fatal (code);
     1240 	     local_mep.sender, local_mep.delivered_by, local_mep.acknowledge_to = null ();
     1241 
     1242 	     do current_field_list_idx = 1 to forwarding_info_list.n_forwarding_infos;
     1243 		idx = mr_sort (current_field_list_idx);
     1244 		the_mrp_ptr = addr (mrps (idx));
     1245 		position = -1;			/* add it to the end please */
     1246 		call add_redistribution (message_ptr, the_mrp_ptr, position, code);
     1247 		if code ^= 0 then call message_parse_error_fatal (code);
     1248 		the_mrp.sender, the_mrp.delivered_by, the_mrp.acknowledge_to = null ();
     1249 		message_redistribution_ptr = addr (message_redistributions_list.redistributions (position));
     1250 		if the_mrp.from = message_redistribution.from then the_mrp.from = null ();
     1251 		if the_mrp.to = message_redistribution.to then the_mrp.to = null ();
     1252 		if the_mrp.comment.text_ptr = message_redistribution.comment.text_ptr then
     1253 		     the_mrp.comment.text_ptr = null ();/* don't leave it to be freed if it's used directly */
     1254 	     end;
     1255 
     1256 
     1257 /* In-mailbox/Incoming Message -- Set the implicit route for all addresses as appropriate */
     1258 
     1259 	     if message.envelope.trace ^= null () then
     1260 		if message.envelope.trace -> message_trace.implicit_route ^= null () then do;
     1261 		     implicit_route = message.envelope.trace -> message_trace.implicit_route;
     1262 		     call set_implicit_route (message.from, implicit_route);
     1263 		     call set_implicit_route (message.reply_to, implicit_route);
     1264 		     call set_implicit_route (message.to, implicit_route);
     1265 		     call set_implicit_route (message.cc, implicit_route);
     1266 		     call set_implicit_route (message.bcc, implicit_route);
     1267 		     do idx = 1 to message.n_user_fields;
     1268 			message_user_field_ptr = addr (message_user_fields_list.user_fields (idx));
     1269 			if message_user_field.field_type = MESSAGE_ADDRESS_LIST_USER_FIELD then
     1270 			     call set_implicit_route (message_address_list_user_field.address_list_ptr,
     1271 				implicit_route);
     1272 		     end;
     1273 		end;
     1274 
     1275 	     do idx = 1 to message.n_redistributions;
     1276 		message_redistribution_ptr = addr (message_redistributions_list.redistributions (idx));
     1277 		if message_redistribution.envelope.trace ^= null () then
     1278 		     if message_redistribution.envelope.trace -> message_trace.implicit_route ^= null () then do;
     1279 			implicit_route = message_redistribution.envelope.trace -> message_trace.implicit_route;
     1280 			call set_implicit_route (message_redistribution.from, implicit_route);
     1281 			call set_implicit_route (message_redistribution.to, implicit_route);
     1282 		     end;
     1283 	     end;
     1284 	end;
     1285 
     1286 
     1287 /* Control arrives here iff the message parse succeeded */
     1288 
     1289 	call cleanup_message_parse_data ();		/* get rid of all temporaries */
     1290 
     1291 	P_message_ptr = message_ptr;			/* pass the message back to our caller */
     1292 
     1293 	if parse_text_options.list_errors then		/* will never be set by entries without this parameter */
     1294 	     P_parse_text_error_list_ptr = parse_text_error_list_ptr;
     1295 
     1296 	if message_parse_fails then			/* some types of errors were detected ... */
     1297 	     P_code = mlsys_et_$text_parse_failed;	/* ... even though we might return a message structure */
     1298 	else P_code = 0;
     1299 
     1300 	return;
     1301 
     1302 /* Convert the external form of a mailing list (an ASCII segment/archive component containing the printed representation
     1303*   of addresses) into its internal representation:  This operation is identical to parse_address_list_text except that
     1304*   each line in a mailing list is considered a separate list unless, of course, a single address spans multiple lines; in
     1305*   addition, the lines in a mailing list may contain an optional trailing comma */
     1306 
     1307 parse_mailing_list_text:
     1308      entry (P_representation, P_address_list_version, P_address_list_ptr, P_code);
     1309 
     1310 	local_pto.area_ptr = null ();			/* setup standard parse options */
     1311 	string (local_pto.flags) = ""b;
     1312 	local_pto.list_errors = "1"b;			/* see below */
     1313 	local_pto.include_invalid_addresses = "1"b;
     1314 	parse_text_options_ptr = addr (local_pto);
     1315 
     1316 	string (internal_parse_options.flags) = ""b;
     1317 	internal_parse_options.multics_format = "1"b;	/* use standard Multics formatting conventions */
     1318 	internal_parse_options.no_copy = "0"b;		/* can't use supplied text directly (sigh) */
     1319 
     1320 	internal_parse_options.default_system_is_local = "1"b;
     1321 	internal_parse_options.default_system_name = mlsys_nit_interface_$get_local_system_name ();
     1322 
     1323 	string (internal_parse_options.delimiters) = ""b; /* terminate corectly only at the end of the string */
     1324 	internal_parse_options.delimiters.eos = "1"b;
     1325 
     1326 	system_area_ptr = get_system_free_area_ ();
     1327 
     1328 	add_address = mlsys_address_list_mgr_$add_address;
     1329 	create_address_list = mlsys_address_list_mgr_$create_user_freeable_address_list;
     1330 	delete_address = mlsys_address_list_mgr_$delete_address;
     1331 	free_address_list = mlsys_address_list_mgr_$free_address_list;
     1332 
     1333 	address_list_ptr,				/* for cleanup handler */
     1334 	     lex_and_parse_pointers, forum_search_list_ptr = null ();
     1335 
     1336 	on condition (cleanup)
     1337 	     begin;
     1338 	     if address_list_ptr ^= null () then call mlsys_address_list_mgr_$free_address_list (address_list_ptr, (0));
     1339 	     call lex_and_parse_epilogue ("1"b);
     1340 	     if forum_search_list_ptr ^= null () then free forum_search_list_ptr -> sl_info in (system_area);
     1341 	     forum_search_list_ptr = null ();
     1342 	end;
     1343 
     1344 	call mlsys_address_list_mgr_$create_user_freeable_address_list (P_address_list_version, address_list_ptr, code);
     1345 	if code ^= 0 then do;			/* probably asked for the wrong version */
     1346 	     P_code = code;
     1347 	     return;
     1348 	end;
     1349 
     1350 	representation_ptr = addr (P_representation);
     1351 	representation_lth = length (P_representation);
     1352 	representation_used = 0;			/* haven't parsed any of it yet */
     1353 
     1354 	eol_idx = index (representation, NL);		/* start with first line in the mailing list */
     1355 	if eol_idx = 0 then eol_idx = length (representation) + 1;
     1356 
     1357 	do while (representation_used < representation_lth);
     1358 
     1359 	     begin;				/* try to parse the next section (usually a line) */
     1360 
     1361 dcl  text_to_parse character (eol_idx - 1) unaligned defined (representation) position (representation_used + 1);
     1362 
     1363 		if verify (text_to_parse, WHITESPACE) = 0 then
     1364 		     n_syntax_errors = 0;		/* ingore blank lines */
     1365 		else call parse_address_list_text_internal (parse_text_options, internal_parse_options, text_to_parse,
     1366 			address_list_ptr, code);
     1367 
     1368 		if (n_syntax_errors > 0) & ((representation_used + eol_idx) < representation_lth) then do;
     1369 
     1370 		     /*** Check for errors which can be generated if the last address in this section is incomplete */
     1371 		     if (sel (1).code = mlsys_et_$unbalanced_braces) | (sel (1).code = mlsys_et_$unbalanced_quotes)
     1372 			| (sel (1).code = mlsys_et_$unbalanced_parentheses) then do;
     1373 			call mlsys_address_list_mgr_$delete_address (address_list_ptr, address_list.n_addresses,
     1374 			     (0));
     1375 			amount_good = 0;		/* try entire section again with next line */
     1376 		     end;
     1377 
     1378 		     else if sel (n_syntax_errors).code = mlsys_et_$invalid_named_group_text then
     1379 			if (sel (n_syntax_errors).text_start + sel (n_syntax_errors).text_lth)
     1380 			     >= length (text_to_parse) then do;
     1381 			     call mlsys_address_list_mgr_$delete_address (address_list_ptr,
     1382 				address_list.n_addresses, (0));
     1383 			     amount_good = sel (n_syntax_errors).text_start - 1;
     1384 			end;			/* try bad named group again with next line */
     1385 			else amount_good = length (text_to_parse);
     1386 
     1387 		     else if sel (n_syntax_errors).code = mlsys_et_$empty_address_text then do;
     1388 			if (sel (n_syntax_errors).text_start + sel (n_syntax_errors).text_lth)
     1389 			     >= length (text_to_parse) then do;
     1390 			     begin;
     1391 dcl  empty_text character (sel (n_syntax_errors).text_lth) unaligned defined (representation)
     1392 	position (representation_used + sel (n_syntax_errors).text_start);
     1393 				if verify (empty_text, WHITESPACE) = 0 then
     1394 				     call mlsys_address_list_mgr_$delete_address (address_list_ptr,
     1395 					address_list.n_addresses, (0));
     1396 			     end;
     1397 			     amount_good = length (text_to_parse);
     1398 			end;
     1399 
     1400 			else amount_good = length (text_to_parse);
     1401 		     end;
     1402 
     1403 		     else amount_good = length (text_to_parse);
     1404 		end;
     1405 
     1406 		else amount_good = length (text_to_parse);
     1407 	     end;
     1408 
     1409 	     if (representation_used + amount_good) < representation_lth then do;
     1410 		begin;				/* find end of next line beyond current section */
     1411 dcl  rest_of_representation character (representation_lth - representation_used - eol_idx) unaligned
     1412 	defined (representation) position (representation_used + eol_idx);
     1413 		     next_eol_idx = index (rest_of_representation, NL);
     1414 		     if next_eol_idx = 0 then next_eol_idx = length (rest_of_representation) + 1;
     1415 		end;
     1416 		eol_idx = eol_idx - amount_good + next_eol_idx;
     1417 		representation_used = representation_used + amount_good;
     1418 	     end;
     1419 	     else representation_used = representation_lth;
     1420 
     1421 	     call lex_and_parse_epilogue ("1"b);	/* get rid of syntax error list */
     1422 	end;
     1423 
     1424 	P_address_list_ptr = address_list_ptr;		/* success */
     1425 	P_code = 0;
     1426 
     1427 	return;
     1428 
     1429 /* Convert the printed representation of an address list into its internal representation */
     1430 
     1431 parse_address_list_text:
     1432      entry (P_representation, P_parse_text_options_ptr, P_address_list_version, P_address_list_ptr,
     1433 	P_parse_text_error_list_ptr, P_code);
     1434 
     1435 	parse_text_options_ptr = P_parse_text_options_ptr;
     1436 	if parse_text_options.version ^= PARSE_TEXT_OPTIONS_VERSION_1 then do;
     1437 	     P_code = error_table_$unimplemented_version;
     1438 	     return;
     1439 	end;
     1440 	if parse_text_options.mbz ^= ""b then do;
     1441 	     P_code = error_table_$bad_subr_arg;
     1442 	     return;
     1443 	end;
     1444 
     1445 	add_address = mail_system_$add_address;
     1446 	create_address_list = mail_system_$create_address_list;
     1447 	delete_address = mail_system_$delete_address;
     1448 	free_address_list = mail_system_$free_address_list;
     1449 
     1450 	system_area_ptr = get_system_free_area_ ();
     1451 
     1452 	if parse_text_options.area_ptr = null () then
     1453 	     user_area_ptr = get_system_free_area_ ();
     1454 	else user_area_ptr = parse_text_options.area_ptr;
     1455 
     1456 	string (internal_parse_options.flags) = ""b;
     1457 	internal_parse_options.multics_format = "1"b;	/* use standard Multics formatting conventions */
     1458 	internal_parse_options.no_copy = "0"b;		/* can't use supplied text directly */
     1459 
     1460 	internal_parse_options.default_system_is_local = "1"b;
     1461 	internal_parse_options.default_system_name = mlsys_nit_interface_$get_local_system_name ();
     1462 
     1463 	string (internal_parse_options.delimiters) = ""b; /* terminate corectly only at the end of the string */
     1464 	internal_parse_options.delimiters.eos = "1"b;
     1465 
     1466 	address_list_ptr,				/* for cleanup handler */
     1467 	     lex_and_parse_pointers, forum_search_list_ptr = null ();
     1468 
     1469 	on condition (cleanup)
     1470 	     begin;
     1471 	     if address_list_ptr ^= null () then call mail_system_$free_address_list (address_list_ptr, (0));
     1472 	     call lex_and_parse_epilogue ("1"b);
     1473 	     if forum_search_list_ptr ^= null () then free forum_search_list_ptr -> sl_info in (system_area);
     1474 	     forum_search_list_ptr = null ();
     1475 	end;
     1476 
     1477 	call mail_system_$create_address_list (P_address_list_version, address_list_ptr, code);
     1478 	if code ^= 0 then do;			/* probably asked for the wrong version */
     1479 	     P_code = code;
     1480 	     return;
     1481 	end;
     1482 
     1483 	call parse_address_list_text_internal (parse_text_options, internal_parse_options, P_representation,
     1484 	     address_list_ptr, code);
     1485 
     1486 	if code ^= 0 then				/* iff caller requested an error free list */
     1487 	     call mail_system_$free_address_list (address_list_ptr, (0));
     1488 
     1489 	if parse_text_options.list_errors & (n_syntax_errors > 0) then do;
     1490 	     parse_text_error_list_n_errors = n_syntax_errors;
     1491 	     allocate parse_text_error_list in (system_area) set (parse_text_error_list_ptr);
     1492 	     do idx = 1 to parse_text_error_list.n_errors;
     1493 		parse_text_error_list.errors (idx).text_start = sel (idx).text_start;
     1494 		parse_text_error_list.errors (idx).text_lth = sel (idx).text_lth;
     1495 		parse_text_error_list.errors (idx).code = sel (idx).code;
     1496 		parse_text_error_list.errors (idx).additional_info = "";
     1497 	     end;
     1498 	end;
     1499 	else parse_text_error_list_ptr = null ();
     1500 
     1501 	call lex_and_parse_epilogue ("1"b);		/* get rid of syntax error list now */
     1502 
     1503 	P_address_list_ptr = address_list_ptr;
     1504 	P_parse_text_error_list_ptr = parse_text_error_list_ptr;
     1505 
     1506 	if n_syntax_errors > 0 then			/* something went wrong: let caller know ... */
     1507 	     P_code = mlsys_et_$text_parse_failed;	/* ... even though they might still be getting a list back */
     1508 	else P_code = 0;
     1509 
     1510 	return;
     1511 
     1512 
     1513 
     1514 /* Actually lexically analyze and parse the address list text (called from several different entrypoints) */
     1515 
     1516 parse_address_list_text_internal:
     1517      procedure (p_pto, p_ipo, p_representation, p_address_list_ptr, p_code) /* options (quick) */;
     1518 
     1519 dcl  1 p_pto aligned like parse_text_options parameter;
     1520 dcl  1 p_ipo aligned like internal_parse_options parameter;
     1521 dcl  p_representation character (*) parameter;
     1522 dcl  p_address_list_ptr pointer parameter;
     1523 dcl  p_code fixed binary (35) parameter;
     1524 
     1525 dcl  bad_address pointer;
     1526 
     1527 	call lex_and_parse_prologue (p_representation, "1"b, "1"b);
     1528 						/* lex of an address with syntax list */
     1529 
     1530 	call lex_address (p_pto, p_ipo, p_code);	/* convert it into a token list */
     1531 
     1532 	if p_code = 0 then				/* lex worked: try parsing it */
     1533 	     call parse_address_list (p_pto, p_ipo, 0, p_address_list_ptr, p_code);
     1534 	else do;					/* lex failed: record one error */
     1535 	     n_syntax_errors = 1;
     1536 	     if p_pto.list_errors then do;
     1537 		sel (1).text_start = 1;
     1538 		sel (1).text_lth = length (p_representation);
     1539 		sel (1).code = p_code;
     1540 	     end;
     1541 	     if p_pto.include_invalid_addresses then do;
     1542 		call mail_system_$create_invalid_address ((p_representation), "", "", bad_address, (0));
     1543 		call add_address (p_address_list_ptr, bad_address, ADDRESS_LIST_VERSION_2, (0));
     1544 		p_code = 0;			/* claim success */
     1545 	     end;
     1546 	end;
     1547 
     1548 	call lex_and_parse_epilogue ("0"b);		/* cleanup */
     1549 
     1550 	return;
     1551 
     1552      end parse_address_list_text_internal;
     1553 
     1554 /* Convert the printed representation of an address into its internal representation */
     1555 
     1556 parse_address_text:
     1557      entry (P_representation, P_address_ptr, P_code);
     1558 
     1559 	add_address = mail_system_$add_address;
     1560 	create_address_list = mail_system_$create_address_list;
     1561 	delete_address = mail_system_$delete_address;
     1562 	free_address_list = mail_system_$free_address_list;
     1563 
     1564 	system_area_ptr = get_system_free_area_ ();
     1565 
     1566 	parse_text_options_ptr = addr (local_pto);	/* caller doesn't supply this structure */
     1567 	string (local_pto.flags) = ""b;		/* ... don't list, validate, or create invalid addresses */
     1568 
     1569 	internal_parse_options.multics_format = "1"b;	/* use standard Multics formatting conventions */
     1570 	internal_parse_options.no_copy = "0"b;		/* can't use supplied text directly */
     1571 
     1572 	internal_parse_options.default_system_is_local = "1"b;
     1573 	internal_parse_options.default_system_name = mlsys_nit_interface_$get_local_system_name ();
     1574 
     1575 	string (internal_parse_options.delimiters) = ""b; /* terminate corectly only at the end of the string */
     1576 	internal_parse_options.delimiters.eos = "1"b;
     1577 
     1578 	lex_and_parse_pointers,			/* for cleanup handler */
     1579 	     forum_search_list_ptr = null ();
     1580 
     1581 	on condition (cleanup)
     1582 	     begin;
     1583 	     call lex_and_parse_epilogue ("1"b);
     1584 	     if forum_search_list_ptr ^= null () then free forum_search_list_ptr -> sl_info in (system_area);
     1585 	     forum_search_list_ptr = null ();
     1586 	end;
     1587 
     1588 	call parse_address_text_internal (parse_text_options, internal_parse_options, P_representation, address_ptr,
     1589 	     code);
     1590 
     1591 	if code = 0 then				/* successfully parsed an address from the string */
     1592 	     P_address_ptr = address_ptr;
     1593 
     1594 	P_code = code;
     1595 
     1596 	return;
     1597 
     1598 
     1599 
     1600 /* Actually lexically analyze and parse the address text (called from several different entrypoints) */
     1601 
     1602 parse_address_text_internal:
     1603      procedure (p_pto, p_ipo, p_representation, p_address_ptr, p_code) /* options (quick) */;
     1604 
     1605 dcl  1 p_pto aligned like parse_text_options parameter;
     1606 dcl  1 p_ipo aligned like internal_parse_options parameter;
     1607 dcl  p_representation character (*) parameter;
     1608 dcl  p_address_ptr pointer parameter;
     1609 dcl  p_code fixed binary (35) parameter;
     1610 
     1611 	call lex_and_parse_prologue (p_representation, "1"b, "0"b);
     1612 						/* lex of an address without syntax list */
     1613 
     1614 	call lex_address (p_pto, p_ipo, p_code);	/* convert it into a token list */
     1615 
     1616 	if p_code = 0 then				/* lex worked: try parsing it */
     1617 	     call parse_address (p_pto, p_ipo, 0, p_address_ptr, p_code);
     1618 
     1619 	call lex_and_parse_epilogue ("1"b);		/* cleanup */
     1620 	call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     1621 
     1622 	return;
     1623 
     1624      end parse_address_text_internal;
     1625 
     1626 /* Initialize data structures used during parsing of a message */
     1627 
     1628 initialize_message_parse_data:
     1629      procedure ();
     1630 
     1631 	message_scan.array_pointers, lex_and_parse_pointers, parse_text_error_list_ptr, mrps_ptr, mr_sort_ptr,
     1632 	     trace_address, comment_sender, local_mep.sender, local_mep.trace, local_mep.delivered_by,
     1633 	     local_mep.acknowledge_to, address_list_field, forum_search_list_ptr = null ();
     1634 
     1635 	return;
     1636 
     1637      end initialize_message_parse_data;
     1638 
     1639 
     1640 
     1641 /* Release interim data structures created during parsing of a message */
     1642 
     1643 cleanup_message_parse_data:
     1644      procedure ();
     1645 
     1646 dcl  (idx, jdx) fixed binary;
     1647 
     1648 	if forum_search_list_ptr ^= null () then free forum_search_list_ptr -> sl_info in (system_area);
     1649 	forum_search_list_ptr = null ();
     1650 
     1651 	if address_list_field ^= null () then call free_address_list (address_list_field, (0));
     1652 
     1653 	if local_mep.sender ^= null () then call mail_system_$free_address (local_mep.sender, (0));
     1654 	if local_mep.trace ^= null () then do;
     1655 	     if local_mep.trace -> message_trace.implicit_route ^= null () then
     1656 		free local_mep.trace -> message_trace.implicit_route -> address_route in (system_area);
     1657 	     do idx = 1 to local_mep.trace -> message_trace.n_relays;
     1658 		if local_mep.trace -> message_trace.relays (idx).relay_recipient ^= null () then
     1659 		     call mail_system_$free_address (local_mep.trace -> message_trace.relays (idx).relay_recipient,
     1660 			(0));
     1661 	     end;
     1662 	     free local_mep.trace -> message_trace in (system_area);
     1663 	     local_mep.trace = null ();
     1664 	end;
     1665 	if local_mep.delivered_by ^= null () then call mail_system_$free_address (local_mep.delivered_by, (0));
     1666 	if local_mep.acknowledge_to ^= null () then call mail_system_$free_address (local_mep.acknowledge_to, (0));
     1667 
     1668 	if mrps_ptr ^= null () then do;
     1669 	     do idx = 1 to forwarding_info_list.n_forwarding_infos;
     1670 		if mrps (idx).sender ^= null () then call mail_system_$free_address (mrps (idx).sender, (0));
     1671 		if mrps (idx).trace ^= null () then do;
     1672 		     if mrps (idx).trace -> message_trace.implicit_route ^= null () then
     1673 			free mrps (idx).trace -> message_trace.implicit_route -> address_route in (system_area);
     1674 		     do jdx = 1 to mrps (idx).trace -> message_trace.n_relays;
     1675 			if mrps (idx).trace -> message_trace.relays (jdx).relay_recipient ^= null () then
     1676 			     call mail_system_$free_address (mrps (idx).trace
     1677 				-> message_trace.relays (jdx).relay_recipient, (0));
     1678 		     end;
     1679 		     free mrps (idx).trace -> message_trace in (system_area);
     1680 		     mrps (idx).trace = null ();
     1681 		end;
     1682 		if mrps (idx).delivered_by ^= null () then
     1683 		     call mail_system_$free_address (mrps (idx).delivered_by, (0));
     1684 		if mrps (idx).acknowledge_to ^= null () then
     1685 		     call mail_system_$free_address (mrps (idx).acknowledge_to, (0));
     1686 		if mrps (idx).from ^= null () then call free_address_list (mrps (idx).from, (0));
     1687 		if mrps (idx).to ^= null () then call free_address_list (mrps (idx).to, (0));
     1688 		if mrps (idx).comment.text_ptr ^= null () then
     1689 						/* there's some text ... */
     1690 		     begin;
     1691 dcl  the_comment character (mrps (idx).comment.text_lth) unaligned based (mrps (idx).comment.text_ptr);
     1692 		     free the_comment in (system_area);
     1693 		     mrps (idx).comment.text_ptr = null ();
     1694 		end;
     1695 	     end;
     1696 	     free mrps in (system_area);
     1697 	     mrps_ptr = null ();
     1698 	end;
     1699 
     1700 	if mr_sort_ptr ^= null () then do;
     1701 	     free mr_sort in (system_area);
     1702 	     mr_sort_ptr = null ();
     1703 	end;
     1704 
     1705 	if trace_address ^= null () then call mail_system_$free_address (trace_address, (0));
     1706 
     1707 	if comment_sender ^= null () then call mail_system_$free_address (comment_sender, (0));
     1708 
     1709 	call cleanup_message_scan ();			/* cleanup straight-forward data */
     1710 	call lex_and_parse_epilogue ("1"b);
     1711 
     1712 	return;
     1713 
     1714      end cleanup_message_parse_data;
     1715 
     1716 /* Scan the complete text of a message: isolate the message header and body; locate and classify each header field in the
     1717*   message */
     1718 
     1719 scan_message_text:
     1720      procedure (p_pto, p_ipo);
     1721 
     1722 dcl  1 p_pto aligned like parse_text_options parameter;
     1723 dcl  1 p_ipo aligned like internal_parse_options parameter;
     1724 
     1725 dcl  message_header character (message_header_lth) unaligned based (message_header_ptr);
     1726 dcl  message_header_lth fixed binary (21);
     1727 dcl  message_header_ptr pointer;
     1728 
     1729 dcl  message_body character (message_body_lth) unaligned based (message_body_ptr);
     1730 dcl  message_body_lth fixed binary (21);
     1731 dcl  message_body_ptr pointer;
     1732 
     1733 dcl  field_name character (field_name_lth) unaligned based (field_name_ptr);
     1734 dcl  field_name_lth fixed binary (21);			/* current header field being examined */
     1735 dcl  field_name_ptr pointer;
     1736 
     1737 dcl  (continuation_found, in_forwarding_info, in_comment_info) bit (1) aligned;
     1738 
     1739 dcl  (start, eol_idx, idx, idx2, field_name_start, field_value_start) fixed binary (21);
     1740 
     1741 dcl  (total_field_count, field_type) fixed binary;
     1742 
     1743 
     1744 	message_body_ptr,				/* examine entire message initially */
     1745 	     message_header_ptr = representation_ptr;
     1746 	message_body_lth, message_header_lth = representation_lth;
     1747 	message_scan.header_offset = 0;
     1748 
     1749 	idx = verify (message_header, NL);		/* strip leading newlines added by defective FTP mailers */
     1750 	if idx ^= 0 then
     1751 	     if idx ^= 1 then do;
     1752 		message_body_ptr, message_header_ptr = addcharno (message_body_ptr, (idx - 1));
     1753 		message_body_lth, message_header_lth = message_header_lth - (idx - 1);
     1754 	     end;
     1755 	     else ;				/* no leading newlines */
     1756 	else go to NO_HEADER_FOUND_IN_MESSAGE;		/* all newlines: no header */
     1757 
     1758 	message_scan.header_offset = charno (message_header_ptr) - charno (representation_ptr);
     1759 
     1760 	idx = index (message_header, NLNL);		/* search for header delimiter (double newline) */
     1761 	if idx ^= 0 then				/* seems to have a header: adjust length ... */
     1762 	     message_header_lth = idx;		/* ... if <NL><NL> is missing, assume messageless header */
     1763 
     1764 	idx = index (message_header, NL);		/* the header must have at least one newline in it */
     1765 	if idx = 0 then go to NO_HEADER_FOUND_IN_MESSAGE;
     1766 
     1767 	idx = index (substr (message_header, 1, idx), COLON);
     1768 						/* header must have colon on first line */
     1769 	if idx = 0 then go to NO_HEADER_FOUND_IN_MESSAGE;
     1770 
     1771 
     1772 /* The message appears to have a header: tentatively set the location and size of the message body */
     1773 
     1774 	message_body_ptr = addcharno (message_body_ptr, message_header_lth);
     1775 	message_body_lth = message_body_lth - message_header_lth;
     1776 
     1777 	if message_body_lth <= 0 then do;		/* appears to be no body in the message, just a header */
     1778 	     message_scan.body_ptr = addr (NL);
     1779 	     message_scan.body_lth = 0;
     1780 	end;
     1781 
     1782 	else do;					/* something there: strip leading newlines */
     1783 	     idx = verify (message_body, NL);
     1784 	     if (idx = 0) then message_body_lth = 0;	/* nothing but blank lines */
     1785 	     else if (idx ^= 1) then do;		/* some leading blank lines */
     1786 		message_body_ptr = addcharno (message_body_ptr, (idx - 1));
     1787 		message_body_lth = message_body_lth - (idx - 1);
     1788 	     end;
     1789 	     if (message_body_lth = 0) then do;		/* bodyless message */
     1790 		message_scan.body_ptr = addr (NL);
     1791 		message_scan.body_lth = 0;
     1792 	     end;
     1793 	     else do;				/* really do have body */
     1794 		message_scan.body_ptr = message_body_ptr;
     1795 		message_scan.body_lth = message_body_lth;
     1796 	     end;
     1797 	end;
     1798 
     1799 
     1800 /* Setup structures used to indicate results of the scan */
     1801 
     1802 	message_scan.n_header_fields_allocated =	/* can't be more fields than lines in the header */
     1803 	     count_lines_in_text (message_header_ptr, message_header_lth);
     1804 
     1805 	allocate header_field_list in (system_area) set (message_scan.header_field_list_ptr);
     1806 	header_field_list.n_fields = 0;		/* nothing examined yet */
     1807 
     1808 	allocate field_by_type_lists in (system_area) set (message_scan.field_by_type_lists_ptr);
     1809 	field_by_type_lists.types (*).n_fields = 0;
     1810 
     1811 	allocate forwarding_info_list in (system_area) set (message_scan.forwarding_info_list_ptr);
     1812 	forwarding_info_list.n_forwarding_infos = 0;
     1813 
     1814 	allocate comment_info_list in (system_area) set (message_scan.comment_info_list_ptr);
     1815 	comment_info_list.n_comment_infos = 0;
     1816 
     1817 	allocate user_field_list in (system_area) set (message_scan.user_field_list_ptr);
     1818 	user_field_list.n_user_fields = 0;
     1819 
     1820 
     1821 /* Now examine the purported header: find each field and classify it */
     1822 
     1823 	start = 1;
     1824 
     1825 	total_field_count = 0;			/* no fields yet */
     1826 
     1827 	in_forwarding_info = "0"b;			/* not in the middle of a forwarding description */
     1828 	in_comment_info = "0"b;			/* ... ditto for comments */
     1829 
     1830 
     1831 	do while (start < message_header_lth);
     1832 
     1833 	     eol_idx = index (substr (message_header, start), NL);
     1834 						/* find the end of this line */
     1835 	     if eol_idx = 0 then go to NO_HEADER_FOUND_IN_MESSAGE;
     1836 						/* fields must end in newline */
     1837 
     1838 	     idx = index (substr (message_header, start, eol_idx), COLON);
     1839 	     if idx = 0 then go to NO_HEADER_FOUND_IN_MESSAGE;
     1840 						/* field name MUST be on first line */
     1841 
     1842 	     field_name_ptr = addcharno (message_header_ptr, (start - 1));
     1843 	     field_name_start = start;		/* record where the field starts (for error messages) */
     1844 	     field_name_lth = idx - 1;		/* initially everything up to the colon */
     1845 
     1846 	     idx2 = verify (field_name, HTSP);		/* field name must start at left margin */
     1847 	     if idx2 ^= 1 then go to NO_HEADER_FOUND_IN_MESSAGE;
     1848 
     1849 	     field_name_lth = length (rtrim (field_name, HTSP));
     1850 						/* strip trailing whitespace from name */
     1851 
     1852 	     start = start + idx;			/* skip to first character after the colon */
     1853 
     1854 	     idx = verify (substr (message_header, start), HTSP);
     1855 	     if idx = 0 then go to NO_HEADER_FOUND_IN_MESSAGE;
     1856 						/* nothing after the colon (even a newline) */
     1857 
     1858 	     start = start + idx - 1;			/* skip over the intervening whitespace */
     1859 	     field_value_start = start;		/* and remember where it is */
     1860 
     1861 	     continuation_found = "1"b;		/* look for continuation lines */
     1862 	     do while (continuation_found);
     1863 		eol_idx = index (substr (message_header, start), NL);
     1864 		if eol_idx = 0 then go to NO_HEADER_FOUND_IN_MESSAGE;
     1865 		start = start + eol_idx;		/* skip to the next line */
     1866 		if index (HTSP, substr (message_header, start, 1)) ^= 0 then
     1867 		     continuation_found = "1"b;	/* this line is a continuation of the current field */
     1868 		else continuation_found = "0"b;	/* a new field */
     1869 	     end;
     1870 
     1871 	     header_field_list.n_fields,		/* here's a new field */
     1872 		field_idx = header_field_list.n_fields + 1;
     1873 
     1874 	     header_field_list.fields (field_idx).field_value_ptr =
     1875 		addcharno (message_header_ptr, (field_value_start - 1));
     1876 						/* where it starts ... */
     1877 	     header_field_list.fields (field_idx).field_value_lth = start - (field_value_start + 1);
     1878 						/* ... and how long excluding the trailing newline ... */
     1879 	     header_field_list.fields (field_idx).field_value_lth = length (rtrim (header_field_value, HTSP));
     1880 						/* ... and trailing whitespace */
     1881 
     1882 	     header_field_list.fields (field_idx).complete_field_start = field_name_start;
     1883 	     header_field_list.fields (field_idx).complete_field_lth =
     1884 		field_value_start - field_name_start + header_field_list.fields (field_idx).field_value_lth;
     1885 						/* record location/size of entire field for error reporting */
     1886 
     1887 	     call mlsys_field_id_mgr_$get_system_field_type (field_name, field_type, code);
     1888 	     if code ^= 0 then do;			/* field name is reserved for future expansion ... */
     1889 		call message_parse_error (p_pto, code, header_field_list.fields (field_idx).complete_field_start,
     1890 		     header_field_list.fields (field_idx).complete_field_lth, "");
     1891 		header_field_list.n_fields, field_idx = header_field_list.n_fields - 1;
     1892 		go to PROCESS_NEXT_FIELD;
     1893 	     end;
     1894 
     1895 
     1896 	     if field_type = USER_DEFINED_FIELD then do;	/* unrecognized field name */
     1897 TREAT_AS_USER_DEFINED_FIELD:
     1898 		in_forwarding_info, in_comment_info = "0"b;
     1899 						/* force a new grouping */
     1900 		user_field_list.n_user_fields,	/* another one */
     1901 		     idx = user_field_list.n_user_fields + 1;
     1902 		user_field_list.user_fields (idx).field_value_idx = header_field_list.n_fields;
     1903 		call mail_system_$get_user_field_id ((field_name), user_field_list.user_fields (idx).field_id, (""),
     1904 		     code);
     1905 		if (code ^= 0) & (code ^= error_table_$smallarg) then call message_parse_error_fatal (code);
     1906 	     end;					/* ... get_user_field_id shouldn't fail */
     1907 
     1908 	     else if (field_type > ORDINARY_FIELDS_BASE) & (field_type <= N_ORDINARY_FIELDS) then do;
     1909 						/* an ordinary field */
     1910 		in_forwarding_info, in_comment_info = "0"b;
     1911 		field_by_type_lists.types (field_type).n_fields, idx =
     1912 		     field_by_type_lists.types (field_type).n_fields + 1;
     1913 		field_by_type_lists.types (field_type).field_idxs (idx) = header_field_list.n_fields;
     1914 	     end;
     1915 
     1916 	     else if (field_type > REDISTRIBUTED_FIELDS_BASE)
     1917 		& (field_type <= (REDISTRIBUTED_FIELDS_BASE + N_ORDINARY_FIELDS)) then do;
     1918 						/* part of a forwarding description */
     1919 		field_type = field_type - REDISTRIBUTED_FIELDS_BASE;
     1920 		if ^in_forwarding_info then call create_forwarding_info ();
     1921 		else if (forwarding_info.types (field_type).n_fields > 0)
     1922 		     & ^MULTIPLE_FIELDS_PER_REDISTRIBUTION (field_type) then
     1923 		     call create_forwarding_info ();
     1924 		else if forwarding_info.types (MESSAGE_ID_FIELD).n_fields > 0 then call create_forwarding_info ();
     1925 		in_forwarding_info = "1"b;		/* ... in the middle of one now */
     1926 		in_comment_info = "0"b;		/* ... can't be doing this anymore */
     1927 		forwarding_info.types (field_type).n_fields, idx = forwarding_info.types (field_type).n_fields + 1;
     1928 		forwarding_info.types (field_type).field_idxs (idx) = header_field_list.n_fields;
     1929 	     end;					/* ... set index of this field */
     1930 
     1931 	     else if (field_type > COMMENT_FIELDS_BASE) & (field_type <= (COMMENT_FIELDS_BASE + N_ORDINARY_FIELDS))
     1932 	     then do;				/* part of a comment description */
     1933 		field_type = field_type - COMMENT_FIELDS_BASE;
     1934 		if ^in_comment_info then call create_comment_info ();
     1935 		else if (comment_info.types (field_type).n_fields > 0) & ^MULTIPLE_FIELDS_PER_COMMENT (field_type)
     1936 		     then
     1937 		     call create_comment_info ();
     1938 		in_comment_info = "1"b;		/* ... in the middle of one now */
     1939 		in_forwarding_info = "0"b;		/* ... can't be doing this anymore */
     1940 		comment_info.types (field_type).n_fields, idx = comment_info.types (field_type).n_fields + 1;
     1941 		comment_info.types (field_type).field_idxs (idx) = header_field_list.n_fields;
     1942 	     end;					/* ... set index of this field */
     1943 
     1944 	     else go to TREAT_AS_USER_DEFINED_FIELD;	/* shouldn't get here, of course */
     1945 
     1946 	     total_field_count = total_field_count + 1;	/* another field taken care of */
     1947 
     1948 PROCESS_NEXT_FIELD:
     1949 	end;					/* of scan loop */
     1950 
     1951 	return;
     1952 
     1953 
     1954 /* Control arives here if and only if a valid header is not found in the message */
     1955 
     1956 NO_HEADER_FOUND_IN_MESSAGE:
     1957 	call message_parse_error_fatal (mlsys_et_$no_message_header);
     1958 
     1959 	return;					/* will never get here, but ... */
     1960 
     1961 
     1962 
     1963 /* Internal to scan_message_text: count the lines in a piece of text */
     1964 
     1965 count_lines_in_text:
     1966 	procedure (p_text_ptr, p_text_lth) returns (fixed binary (21));
     1967 
     1968 dcl  the_text character (p_text_lth) unaligned based (p_text_ptr);
     1969 dcl  p_text_ptr pointer parameter;
     1970 dcl  p_text_lth fixed binary (21) parameter;
     1971 
     1972 dcl  (n_lines, used, idx) fixed binary (21);
     1973 
     1974 	     n_lines, used = 0;
     1975 
     1976 	     do while (used < p_text_lth);
     1977 
     1978 		begin;
     1979 
     1980 dcl  rest_of_text character (p_text_lth - used) unaligned defined (the_text) position (used + 1);
     1981 
     1982 		     idx = index (rest_of_text, NL);
     1983 		     if idx = 0 then idx = length (rest_of_text) + 1;
     1984 
     1985 		     n_lines = n_lines + 1;
     1986 		     used = used + idx;
     1987 		end;
     1988 	     end;
     1989 
     1990 	     return (n_lines);
     1991 
     1992 	end count_lines_in_text;
     1993 
     1994 
     1995 
     1996 /* Internal to scan_message_text: start the description of a new forwarding operation */
     1997 
     1998 create_forwarding_info:
     1999 	procedure ();
     2000 
     2001 	     forwarding_info_list.n_forwarding_infos = forwarding_info_list.n_forwarding_infos + 1;
     2002 
     2003 	     allocate forwarding_info in (system_area) set (forwarding_info_ptr);
     2004 	     forwarding_info_list.forwarding_info_ptrs (forwarding_info_list.n_forwarding_infos) = forwarding_info_ptr;
     2005 
     2006 	     forwarding_info.types (*).n_fields = 0;
     2007 
     2008 	     return;
     2009 
     2010 	end create_forwarding_info;
     2011 
     2012 
     2013 
     2014 /* Internal to scan_message_text: start the description of a new commenting operation */
     2015 
     2016 create_comment_info:
     2017 	procedure ();
     2018 
     2019 	     comment_info_list.n_comment_infos = comment_info_list.n_comment_infos + 1;
     2020 
     2021 	     allocate comment_info in (system_area) set (comment_info_ptr);
     2022 	     comment_info_list.comment_info_ptrs (comment_info_list.n_comment_infos) = comment_info_ptr;
     2023 
     2024 	     comment_info.types (*).n_fields = 0;
     2025 
     2026 	     return;
     2027 
     2028 	end create_comment_info;
     2029 
     2030      end scan_message_text;
     2031 
     2032 /* Cleanup the results of a message scan */
     2033 
     2034 cleanup_message_scan:
     2035      procedure ();
     2036 
     2037 dcl  idx fixed binary;
     2038 
     2039 	if message_scan.header_field_list_ptr ^= null () then free header_field_list in (system_area);
     2040 
     2041 	if message_scan.field_by_type_lists_ptr ^= null () then free field_by_type_lists in (system_area);
     2042 
     2043 	if message_scan.forwarding_info_list_ptr ^= null () then do;
     2044 	     do idx = 1 to forwarding_info_list.n_forwarding_infos;
     2045 		forwarding_info_ptr = forwarding_info_list.forwarding_info_ptrs (idx);
     2046 		free forwarding_info in (system_area);
     2047 	     end;
     2048 	     free forwarding_info_list in (system_area);
     2049 	end;
     2050 
     2051 	if message_scan.comment_info_list_ptr ^= null () then do;
     2052 	     do idx = 1 to comment_info_list.n_comment_infos;
     2053 		comment_info_ptr = comment_info_list.comment_info_ptrs (idx);
     2054 		free comment_info in (system_area);
     2055 	     end;
     2056 	     free comment_info_list in (system_area);
     2057 	end;
     2058 
     2059 	if message_scan.user_field_list_ptr ^= null () then free user_field_list in (system_area);
     2060 
     2061 	message_scan.array_pointers = null ();		/* don't try to free them again */
     2062 
     2063 	return;
     2064 
     2065      end cleanup_message_scan;
     2066 
     2067 /* Report an error in the message parse: aborts the parse if required */
     2068 
     2069 message_parse_error:
     2070      procedure (p_pto, p_code, p_text_start, p_text_lth, p_additional_info);
     2071 
     2072 dcl  1 p_pto aligned like parse_text_options parameter;
     2073 dcl  p_code fixed binary (35) parameter;
     2074 dcl  (p_text_start, p_text_lth) fixed binary (21) parameter;
     2075 dcl  p_additional_info character (*) varying parameter;
     2076 
     2077 dcl  new_ptel_ptr pointer;
     2078 dcl  idx fixed binary;
     2079 
     2080 	if ^p_pto.list_errors then			/* any error is fatal if caller doesn't want list or errors */
     2081 	     call message_parse_error_fatal (p_code);
     2082 
     2083 	message_parse_fails = "1"b;			/* set global flag to force correct returned status code */
     2084 
     2085 	if parse_text_error_list_ptr = null () then
     2086 	     parse_text_error_list_n_errors = 1;
     2087 	else parse_text_error_list_n_errors = parse_text_error_list.n_errors + 1;
     2088 
     2089 	allocate parse_text_error_list in (user_area) set (new_ptel_ptr);
     2090 
     2091 	do idx = 1 to (parse_text_error_list_n_errors - 1);
     2092 	     new_ptel_ptr -> parse_text_error_list.errors (idx) = parse_text_error_list.errors (idx);
     2093 	end;
     2094 
     2095 	if parse_text_error_list_ptr ^= null () then free parse_text_error_list in (user_area);
     2096 	parse_text_error_list_ptr = new_ptel_ptr;
     2097 
     2098 	idx = parse_text_error_list_n_errors;		/* it's a shorter name ... */
     2099 
     2100 	parse_text_error_list.errors (idx).text_start = p_text_start + message_scan.header_offset;
     2101 	parse_text_error_list.errors (idx).text_lth = p_text_lth;
     2102 	parse_text_error_list.errors (idx).code = p_code;
     2103 	parse_text_error_list.errors (idx).additional_info = p_additional_info;
     2104 
     2105 	return;
     2106 
     2107      end message_parse_error;
     2108 
     2109 /* Handler for fatal errors during the parsing of a message */
     2110 
     2111 message_parse_error_fatal:
     2112      procedure (p_code);
     2113 
     2114 dcl  p_code fixed binary (35) parameter;
     2115 
     2116 	call cleanup_message_parse_data ();		/* get rid of everything we've created */
     2117 
     2118 	if message_ptr ^= null () then call free_message (message_ptr, (0));
     2119 
     2120 	if parse_text_error_list_ptr ^= null () then	/* release the error description we setup */
     2121 	     free parse_text_error_list in (user_area);
     2122 
     2123 	if parse_text_options.list_errors then do;	/* caller wants to see the actual reason */
     2124 	     parse_text_error_list_n_errors = 1;
     2125 	     allocate parse_text_error_list in (user_area) set (parse_text_error_list_ptr);
     2126 	     parse_text_error_list.errors (1).text_start = 1;
     2127 	     parse_text_error_list.errors (1).text_lth = 0;
     2128 	     parse_text_error_list.errors (1).code = p_code;
     2129 	     parse_text_error_list.errors (1).additional_info = "";
     2130 	     P_parse_text_error_list_ptr = parse_text_error_list_ptr;
     2131 	end;
     2132 
     2133 	P_message_ptr = null ();			/* informs the caller that error too severe to bypass */
     2134 	P_code = mlsys_et_$text_parse_failed;		/* use standard global error code */
     2135 
     2136 	go to RETURN_FROM_MESSAGE_PARSE_AFTER_FAILURE;
     2137 
     2138      end message_parse_error_fatal;
     2139 
     2140 
     2141 RETURN_FROM_MESSAGE_PARSE_AFTER_FAILURE:
     2142 	return;
     2143 
     2144 /* Mark all fields of a given type as being reserved for in-mailbox messages only (only called from main procedure) */
     2145 
     2146 mark_as_in_mailbox_field:
     2147      procedure (p_field_list_ptr);
     2148 
     2149 dcl  p_field_list_ptr pointer parameter;
     2150 
     2151 dcl  1 field_list aligned based (p_field_list_ptr) like field_by_type_lists.types;
     2152 dcl  idx fixed binary;
     2153 
     2154 	do idx = 1 to field_list.n_fields;
     2155 	     field_idx = field_list.field_idxs (idx);
     2156 	     call message_parse_error (parse_text_options, mlsys_et_$in_mailbox_only_field,
     2157 		header_field_list.fields (field_idx).complete_field_start,
     2158 		header_field_list.fields (field_idx).complete_field_lth, "");
     2159 	end;
     2160 
     2161 	return;
     2162 
     2163      end mark_as_in_mailbox_field;
     2164 
     2165 
     2166 
     2167 /* Find the index of the first field in a given set of fields (redistributions/comments) for possible error reporting */
     2168 
     2169 find_first_field_in_list:
     2170      procedure (p_field_lists_ptr, p_first_field_idx);
     2171 
     2172 dcl  p_field_lists_ptr pointer parameter;
     2173 dcl  p_first_field_idx fixed binary parameter;
     2174 
     2175 dcl  1 field_lists aligned based (p_field_lists_ptr) like field_by_type_lists;
     2176 dcl  (idx, jdx) fixed binary;
     2177 
     2178 	p_first_field_idx = message_scan.n_header_fields_allocated + 1;
     2179 
     2180 	do idx = 1 to N_ORDINARY_FIELDS;
     2181 	     do jdx = 1 to field_lists.types (idx).n_fields;
     2182 		p_first_field_idx = min (p_first_field_idx, field_lists.types (idx).field_idxs (jdx));
     2183 	     end;
     2184 	end;
     2185 
     2186 	return;
     2187 
     2188      end find_first_field_in_list;
     2189 
     2190 /* Set the implicit route for all the addresses in the given list */
     2191 
     2192 set_implicit_route:
     2193      procedure (p_address_list_ptr, p_implicit_route);
     2194 
     2195 dcl  p_address_list_ptr pointer parameter;
     2196 dcl  p_implicit_route pointer parameter;
     2197 
     2198 dcl  idx fixed binary;
     2199 
     2200 	do idx = 1 to p_address_list_ptr -> address_list.n_addresses;
     2201 	     call set_address_implicit_route (p_address_list_ptr -> address_list.addresses (idx), p_implicit_route, (0))
     2202 		;
     2203 	end;
     2204 
     2205 	return;
     2206 
     2207      end set_implicit_route;
     2208 
     2209 
     2210 
     2211 /* Set the message date/time created and Message-ID directly as we are in the mail system ring: used only by the
     2212*   parse_im_message_text entrypoint (as the appropriate "primitives") */
     2213 
     2214 set_date_time_created_directly:
     2215      procedure (p_message_ptr, p_date_time_created, p_code);
     2216 
     2217 dcl  p_message_ptr pointer parameter;
     2218 dcl  p_date_time_created fixed binary (71) parameter;
     2219 dcl  p_code fixed binary (35) parameter;
     2220 
     2221 	message.date_time_created = p_date_time_created;
     2222 	p_code = 0;
     2223 
     2224 	return;
     2225 
     2226      end set_date_time_created_directly;
     2227 
     2228 
     2229 set_message_id_directly:
     2230      procedure (p_message_ptr, p_message_id, p_code);
     2231 
     2232 dcl  p_message_ptr pointer parameter;
     2233 dcl  p_message_id bit (72) aligned parameter;
     2234 dcl  p_code fixed binary (35) parameter;
     2235 
     2236 	message.message_id = p_message_id;
     2237 	p_code = 0;
     2238 
     2239 	return;
     2240 
     2241      end set_message_id_directly;
     2242 
     2243 /* Prepare a group of text fields for inclusion into the message as a single line field */
     2244 
     2245 prepare_single_line_field:
     2246      procedure (p_tf, p_field_list_ptr);
     2247 
     2248 dcl  1 p_tf aligned parameter like message_text_field;
     2249 dcl  p_field_list_ptr pointer parameter;
     2250 
     2251 dcl  1 field_list aligned based (p_field_list_ptr) like field_by_type_lists.types;
     2252 
     2253 dcl  total_text character (total_text_lth) unaligned based (total_text_ptr);
     2254 dcl  total_text_ptr pointer;
     2255 dcl  (total_text_lth, total_text_used) fixed binary (21);
     2256 
     2257 dcl  idx fixed binary;
     2258 
     2259 
     2260 	p_tf.multiline_text = "0"b;			/* just to be sure */
     2261 
     2262 	if field_list.n_fields = 0 then do;		/* nothing there */
     2263 	     p_tf.text_ptr = null ();
     2264 	     p_tf.text_lth = 0;
     2265 	end;
     2266 
     2267 	else if field_list.n_fields = 1 then do;	/* one field: return it directly */
     2268 	     field_idx = field_list.field_idxs (1);
     2269 	     p_tf.text_ptr = addr (header_field_value);
     2270 	     p_tf.text_lth = length (header_field_value);
     2271 	end;
     2272 
     2273 	else do;					/* multiple fields: merge them */
     2274 	     total_text_lth = -1;			/* ... following loop computes a value that's one off */
     2275 	     do idx = 1 to field_list.n_fields;
     2276 		field_idx = field_list.field_idxs (idx);
     2277 		total_text_lth = total_text_lth + length (header_field_value) + 1;
     2278 	     end;
     2279 	     allocate total_text in (system_area) set (total_text_ptr);
     2280 	     total_text_used = 0;
     2281 	     do idx = 1 to field_list.n_fields;
     2282 		if idx > 1 then do;			/* ... separate them by a single space */
     2283 		     substr (total_text, (total_text_used + 1), 1) = SP;
     2284 		     total_text_used = total_text_used + 1;
     2285 		end;
     2286 		field_idx = field_list.field_idxs (idx);
     2287 		substr (total_text, (total_text_used + 1), length (header_field_value)) = header_field_value;
     2288 		total_text_used = total_text_used + length (header_field_value);
     2289 	     end;
     2290 	     p_tf.text_ptr = total_text_ptr;
     2291 	     p_tf.text_lth = total_text_lth;
     2292 	end;
     2293 
     2294 	return;
     2295 
     2296      end prepare_single_line_field;
     2297 
     2298 /* Prepare one or more text fields for inclusion in the message as a multiline field */
     2299 
     2300 prepare_multiline_field:
     2301      procedure () options (non_quick);
     2302 
     2303 	return;					/* not an entrypoint */
     2304 
     2305 dcl  p_fieldname_lth fixed binary parameter;
     2306 dcl  1 p_tf aligned parameter like message_text_field;
     2307 dcl  p_field_value character (*) parameter;
     2308 dcl  p_field_list_ptr pointer parameter;
     2309 
     2310 dcl  1 field_list aligned based (p_field_list_ptr) like field_by_type_lists.types;
     2311 
     2312 dcl  total_text character (total_text_lth) unaligned based (total_text_ptr);
     2313 dcl  total_text_ptr pointer;
     2314 dcl  (total_text_lth, total_text_used) fixed binary (21);
     2315 
     2316 dcl  work_string character (work_string_lth) unaligned based (work_string_ptr);
     2317 dcl  work_string_ptr pointer;
     2318 dcl  (work_string_lth, work_string_used) fixed binary (21);
     2319 
     2320 dcl  previous_text character (p_tf.text_lth) unaligned based (p_tf.text_ptr);
     2321 
     2322 dcl  idx fixed binary;
     2323 
     2324 dcl  STACK_EXTENSION fixed binary (18) static options (constant) initial (128);
     2325 
     2326 dcl  FIELDNAME_SUFFIX character (3) static options (constant) initial (":  ");
     2327 dcl  STANDARD_MULTILINE_INDENTATION fixed binary static options (constant) initial (10);
     2328 dcl  CONTINUATION_INDICATOR character (2) static options (constant) initial ("--");
     2329 
     2330 
     2331 prepare_multiline_field_from_text:			/* prepare a single field */
     2332      entry (p_fieldname_lth, p_tf, p_field_value);
     2333 
     2334 	call cu_$grow_stack_frame (STACK_EXTENSION, work_string_ptr, (0));
     2335 	work_string_lth = 4 * STACK_EXTENSION;
     2336 	work_string_used = 0;
     2337 
     2338 	call prepare_single_field_for_multiline (p_field_value);
     2339 
     2340 	go to PREPARE_MULTILINE_FIELD_COMMON;
     2341 
     2342 
     2343 prepare_multiline_field_from_list:			/* prepare a list of fields */
     2344      entry (p_fieldname_lth, p_tf, p_field_list_ptr);
     2345 
     2346 	call cu_$grow_stack_frame (STACK_EXTENSION, work_string_ptr, (0));
     2347 	work_string_lth = 4 * STACK_EXTENSION;
     2348 	work_string_used = 0;
     2349 
     2350 	do idx = 1 to field_list.n_fields;
     2351 	     field_idx = field_list.field_idxs (idx);
     2352 	     call prepare_single_field_for_multiline (header_field_value);
     2353 	end;
     2354 
     2355 	go to PREPARE_MULTILINE_FIELD_COMMON;
     2356 
     2357 
     2358 /* Input fields have been properly prepared: combine them with any prior text and return the new text */
     2359 
     2360 PREPARE_MULTILINE_FIELD_COMMON:
     2361 	p_tf.multiline_text = "1"b;			/* just in case */
     2362 	if p_tf.text_ptr = null () then p_tf.text_lth = 0;
     2363 
     2364 	if work_string_used = 0 then return;		/* the input fields are empty */
     2365 
     2366 	total_text_lth = p_tf.text_lth + work_string_used - 1;
     2367 	if p_tf.text_lth > 0 then total_text_lth = total_text_lth + 1;
     2368 
     2369 	allocate total_text in (system_area) set (total_text_ptr);
     2370 
     2371 	if p_tf.text_lth > 0 then do;			/* copy prior text */
     2372 	     substr (total_text, 1, length (previous_text)) = previous_text;
     2373 	     substr (total_text, (length (previous_text) + 1), 1) = NL;
     2374 	     total_text_used = length (previous_text) + 1;
     2375 	     free previous_text in (system_area);
     2376 	end;
     2377 	else total_text_used = 0;
     2378 
     2379 	substr (total_text, (total_text_used + 1), (work_string_used - 1)) =
     2380 	     substr (work_string, 1, (work_string_used - 1));
     2381 						/* all except the trailing new line */
     2382 
     2383 	p_tf.text_ptr = addr (total_text);
     2384 	p_tf.text_lth = length (total_text);
     2385 
     2386 	return;
     2387 
     2388 
     2389 
     2390 /* Internal to prepare_multiline_field: processes a single field.  All leading whitespace before the indent column is
     2391*   removed; any line which has "--" in the last two columns before the indent column is made a blank line */
     2392 
     2393 prepare_single_field_for_multiline:
     2394 	procedure (p_text) /* options (quick) */;
     2395 
     2396 dcl  p_text character (*) parameter;
     2397 dcl  (text_column, text_used, line_lth, start_of_text, column, used) fixed binary (21);
     2398 
     2399 	     if verify (before (p_text, NL), HTSP) = 0 then do;
     2400 		text_column = STANDARD_MULTILINE_INDENTATION + 1;
     2401 		text_used = index (p_text, NL);	/* special case if first line blank: it's indented 10 */
     2402 	     end;
     2403 	     else do;
     2404 		text_column = p_fieldname_lth + length (FIELDNAME_SUFFIX) + 1;
     2405 		text_used = 0;
     2406 	     end;
     2407 
     2408 	     do while (text_used < length (p_text));
     2409 		begin;
     2410 dcl  rest_of_text character (length (p_text) - text_used) unaligned defined (p_text) position (text_used + 1);
     2411 		     line_lth = index (rest_of_text, NL) - 1;
     2412 		     if line_lth = -1 then		/* last line */
     2413 			line_lth = length (rest_of_text);
     2414 		end;
     2415 
     2416 		if line_lth > 0 then
     2417 		     begin;
     2418 dcl  line character (line_lth) unaligned defined (p_text) position (text_used + 1);
     2419 		     start_of_text = verify (line, HTSP);
     2420 		     if start_of_text = 0 then	/* it's blank? */
     2421 			start_of_text = line_lth + 1;
     2422 
     2423 		     begin;
     2424 dcl  whitespace character (start_of_text - 1) unaligned defined (p_text) position (text_used + 1);
     2425 			column = 1;
     2426 			used = 0;
     2427 			do while ((used < length (whitespace)) & (column < text_column));
     2428 			     used = used + 1;
     2429 			     if substr (whitespace, used, 1) = SP then column = column + 1;
     2430 			     else if mod (column, 10) = 0 then column = column + 1;
     2431 			     else column = column + 11 - mod (column, 10);
     2432 			end;
     2433 			if (column < (text_column - 1)) & (start_of_text < line_lth) then
     2434 			     if substr (line, start_of_text, 2) = CONTINUATION_INDICATOR then
     2435 				if verify (substr (line, (start_of_text + 2)), HTSP) = 0 then
     2436 				     go to LINE_IS_ACTUALLY_BLANK;
     2437 			if used < length (whitespace) then
     2438 			     start_of_text = start_of_text - (length (whitespace) - used);
     2439 		     end;
     2440 
     2441 		     begin;
     2442 dcl  text character (line_lth - start_of_text + 1) unaligned defined (p_text) position (text_used + start_of_text);
     2443 			call add_to_work_string (addr (text), length (text));
     2444 		     end;
     2445 		end;
     2446 
     2447 LINE_IS_ACTUALLY_BLANK:
     2448 		call add_to_work_string (addr (NL), 1);
     2449 
     2450 		text_used = text_used + line_lth + 1;
     2451 	     end;
     2452 
     2453 	     return;
     2454 
     2455 
     2456 
     2457 /* Internal to prepare_single_field_for_multiline: adds a piece of text to the output buffer */
     2458 
     2459 add_to_work_string:
     2460 	     procedure (p_text_ptr, p_text_lth) /* options (quick) */;
     2461 
     2462 dcl  p_text_ptr pointer parameter;
     2463 dcl  p_text_lth fixed binary (21) parameter;
     2464 
     2465 dcl  p_text character (p_text_lth) unaligned based (p_text_ptr);
     2466 
     2467 		do while (work_string_lth < (work_string_used + p_text_lth));
     2468 		     call cu_$grow_stack_frame (STACK_EXTENSION, (null ()), (0));
     2469 		     work_string_lth = work_string_lth + 4 * STACK_EXTENSION;
     2470 		end;
     2471 
     2472 		substr (work_string, (work_string_used + 1), p_text_lth) = p_text;
     2473 
     2474 		work_string_used = work_string_used + p_text_lth;
     2475 
     2476 		return;
     2477 
     2478 	     end add_to_work_string;
     2479 
     2480 	end prepare_single_field_for_multiline;
     2481 
     2482      end prepare_multiline_field;
     2483 
     2484 /* Parse a message/redistribution envelope:  This entrypoint also parses the Date and From fields of the
     2485*   message/redistribution as they may be needed to supply defaults for the envelope and the message/redistribution ID */
     2486 
     2487 parse_envelope:
     2488      procedure (p_pto, p_ipo, p_is_redistribution, p_field_lists_ptr, p_envelope_ptr, p_date_time_created, p_from)
     2489 	/* options (quick) */;
     2490 
     2491 dcl  1 p_pto aligned like parse_text_options parameter;
     2492 dcl  1 p_ipo aligned like internal_parse_options parameter;
     2493 dcl  p_is_redistribution bit (1) aligned parameter;
     2494 dcl  (p_field_lists_ptr, p_envelope_ptr, p_from) pointer parameter;
     2495 dcl  p_date_time_created fixed binary (71) parameter;
     2496 
     2497 dcl  1 field_lists aligned like field_by_type_lists based (p_field_lists_ptr);
     2498 dcl  1 envelope aligned like message_envelope based (p_envelope_ptr);
     2499 
     2500 dcl  1 local_pto aligned like parse_text_options;
     2501 dcl  additional_info character (128) varying;
     2502 dcl  saved_default_system character (256) varying;
     2503 dcl  saved_default_system_is_local bit (1) aligned;
     2504 dcl  address_type fixed binary;
     2505 dcl  idx fixed binary;
     2506 
     2507 
     2508 	p_date_time_created, envelope.date_time_mailed, envelope.date_time_delivered = 0;
     2509 	envelope.sender, envelope.trace, envelope.delivered_by, envelope.acknowledge_to = null ();
     2510 
     2511 	if p_is_redistribution then
     2512 	     additional_info = "The redistribution which starts with:";
     2513 	else additional_info = "The message which starts with:";
     2514 
     2515 
     2516 /* First parse the Date, Posted-Date, and Delivery-Date fields: there can be at most one of each of these fields and all
     2517*   of them must parse.  If the Posted-Date field is missing, it is set to the value of the Date field; if the
     2518*   Delivery-Date field is missing, it is set to the value of the Posted-Date field */
     2519 
     2520 	if (field_lists.types (DATE_FIELD).n_fields = 0) & (field_lists.types (POSTED_DATE_FIELD).n_fields = 0)
     2521 	     & (field_lists.types (DELIVERY_DATE_FIELD).n_fields = 0) then
     2522 	     call message_parse_error (p_pto, mlsys_et_$cant_determine_dtc,
     2523 		header_field_list.fields (first_field_idx).complete_field_start,
     2524 		header_field_list.fields (first_field_idx).complete_field_lth, additional_info);
     2525 
     2526 	if field_lists.types (DATE_FIELD).n_fields = 1 then do;
     2527 	     field_idx = field_lists.types (DATE_FIELD).field_idxs (1);
     2528 	     call parse_date_time_text (p_pto, p_ipo, header_field_value, p_date_time_created, code);
     2529 	     if code ^= 0 then
     2530 		call message_parse_error (p_pto, code, header_field_list.fields (field_idx).complete_field_start,
     2531 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2532 	end;
     2533 	else if field_lists.types (DATE_FIELD).n_fields > 1 then do;
     2534 	     do idx = 1 to field_lists.types (DATE_FIELD).n_fields;
     2535 		field_idx = field_lists.types (DATE_FIELD).field_idxs (idx);
     2536 		call message_parse_error (p_pto, mlsys_et_$extra_restricted_field,
     2537 		     header_field_list.fields (field_idx).complete_field_start,
     2538 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2539 	     end;
     2540 	end;
     2541 
     2542 	if field_lists.types (POSTED_DATE_FIELD).n_fields = 1 then do;
     2543 	     field_idx = field_lists.types (POSTED_DATE_FIELD).field_idxs (1);
     2544 	     call parse_date_time_text (p_pto, p_ipo, header_field_value, envelope.date_time_mailed, code);
     2545 	     if code ^= 0 then
     2546 		call message_parse_error (p_pto, code, header_field_list.fields (field_idx).complete_field_start,
     2547 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2548 	end;
     2549 	else if field_lists.types (POSTED_DATE_FIELD).n_fields > 1 then do;
     2550 	     do idx = 1 to field_lists.types (POSTED_DATE_FIELD).n_fields;
     2551 		field_idx = field_lists.types (POSTED_DATE_FIELD).field_idxs (idx);
     2552 		call message_parse_error (p_pto, mlsys_et_$extra_restricted_field,
     2553 		     header_field_list.fields (field_idx).complete_field_start,
     2554 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2555 	     end;
     2556 	end;
     2557 
     2558 	if field_lists.types (DELIVERY_DATE_FIELD).n_fields = 1 then do;
     2559 	     field_idx = field_lists.types (DELIVERY_DATE_FIELD).field_idxs (1);
     2560 	     call parse_date_time_text (p_pto, p_ipo, header_field_value, envelope.date_time_delivered, code);
     2561 	     if code ^= 0 then
     2562 		call message_parse_error (p_pto, code, header_field_list.fields (field_idx).complete_field_start,
     2563 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2564 	end;
     2565 	else if field_lists.types (DELIVERY_DATE_FIELD).n_fields > 1 then do;
     2566 	     do idx = 1 to field_lists.types (DELIVERY_DATE_FIELD).n_fields;
     2567 		field_idx = field_lists.types (DELIVERY_DATE_FIELD).field_idxs (idx);
     2568 		call message_parse_error (p_pto, mlsys_et_$extra_restricted_field,
     2569 		     header_field_list.fields (field_idx).complete_field_start,
     2570 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2571 	     end;
     2572 	end;
     2573 
     2574 	if p_date_time_created = 0 then		/* Date really should be there but ... */
     2575 	     if envelope.date_time_mailed ^= 0 then	/* ... so supply one */
     2576 		p_date_time_created = envelope.date_time_mailed;
     2577 	     else p_date_time_created = envelope.date_time_delivered;
     2578 
     2579 	if envelope.date_time_mailed = 0 then		/* Posted-Date defaults to Date */
     2580 	     envelope.date_time_mailed = p_date_time_created;
     2581 
     2582 	if envelope.date_time_delivered = 0 then	/* Delivery-Date defaults to Posted-Date */
     2583 	     envelope.date_time_delivered = envelope.date_time_mailed;
     2584 
     2585 
     2586 /* Parse the From and Sender fields: both must contain only valid addresses; in addition, there may only be one Sender
     2587*   field and it is allowed to contain only a single address.  After parsing, determine the default system to be used to
     2588*   parse other addresses in the header or redistribution */
     2589 
     2590 	p_ipo.default_system_name = mlsys_nit_interface_$get_local_system_name ();
     2591 	p_ipo.default_system_is_local = "1"b;		/* local system is the default default system */
     2592 
     2593 	string (local_pto.flags) = ""b;		/* requires it to parse properly */
     2594 
     2595 	if field_lists.types (SENDER_FIELD).n_fields = 1 then do;
     2596 	     field_idx = field_lists.types (SENDER_FIELD).field_idxs (1);
     2597 	     call parse_address_text_internal (local_pto, p_ipo, header_field_value, envelope.sender, code);
     2598 	     if code ^= 0 then
     2599 		call message_parse_error (p_pto, code, header_field_list.fields (field_idx).complete_field_start,
     2600 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2601 	end;
     2602 	else if field_lists.types (SENDER_FIELD).n_fields > 1 then do;
     2603 	     do idx = 1 to field_lists.types (SENDER_FIELD).n_fields;
     2604 		field_idx = field_lists.types (SENDER_FIELD).field_idxs (idx);
     2605 		call message_parse_error (p_pto, mlsys_et_$extra_restricted_field,
     2606 		     header_field_list.fields (field_idx).complete_field_start,
     2607 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2608 	     end;
     2609 	end;
     2610 
     2611 	if envelope.sender ^= null () then do;		/* we have a Sender: extract the default system */
     2612 	     call mail_system_$get_address_type (envelope.sender, address_type, (0));
     2613 	     if address_type = FOREIGN_ADDRESS then do;	/* ... only if it's foreign, however */
     2614 		call mail_system_$get_address_system (envelope.sender, p_ipo.default_system_name, (0));
     2615 		p_ipo.default_system_is_local = mlsys_nit_interface_$is_local_system (p_ipo.default_system_name);
     2616 	     end;
     2617 	end;
     2618 
     2619 	if p_is_redistribution then
     2620 	     full_fieldname = REDISTRIBUTED_PREFIX || FROM_FIELDNAME;
     2621 	else full_fieldname = FROM_FIELDNAME;
     2622 
     2623 	call parse_address_list_field (p_pto, p_ipo, full_fieldname, addr (field_lists.types (FROM_FIELD)), p_from);
     2624 
     2625 	if envelope.sender = null () then		/* no Sender: use From field to get default system */
     2626 	     if p_from -> address_list.n_addresses = 1 then do;
     2627 		call mail_system_$get_address_type (p_from -> address_list.addresses (1), address_type, (0));
     2628 		if address_type = FOREIGN_ADDRESS then do;
     2629 		     call mail_system_$get_address_system (p_from -> address_list.addresses (1),
     2630 			p_ipo.default_system_name, (0));
     2631 		     p_ipo.default_system_is_local = mlsys_nit_interface_$is_local_system (p_ipo.default_system_name);
     2632 		end;
     2633 	     end;
     2634 
     2635 	     else do;				/* no Sender and the From field has multiple addresses */
     2636 		call message_parse_error (p_pto, mlsys_et_$cant_determine_sender,
     2637 		     header_field_list.fields (first_field_idx).complete_field_start,
     2638 		     header_field_list.fields (first_field_idx).complete_field_lth, additional_info);
     2639 	     end;					/* ... so continue to claim local system is the default */
     2640 
     2641 
     2642 /* Parse the Delivery-By and Acknowledge-To fields (if present): each must appear only once and contain exactly one valid
     2643*   address */
     2644 
     2645 	saved_default_system = p_ipo.default_system_name;
     2646 	saved_default_system_is_local = p_ipo.default_system_is_local;
     2647 	p_ipo.default_system_name = mlsys_nit_interface_$get_local_system_name ();
     2648 	p_ipo.default_system_is_local = "1"b;		/* Delivery-By must be an absolute address */
     2649 
     2650 	if field_lists.types (DELIVERY_BY_FIELD).n_fields = 1 then do;
     2651 	     field_idx = field_lists.types (DELIVERY_BY_FIELD).field_idxs (1);
     2652 	     call parse_address_text_internal (local_pto, p_ipo, header_field_value, envelope.delivered_by, code);
     2653 	     if code ^= 0 then
     2654 		call message_parse_error (p_pto, code, header_field_list.fields (field_idx).complete_field_start,
     2655 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2656 	end;
     2657 	else if field_lists.types (DELIVERY_BY_FIELD).n_fields > 1 then do;
     2658 	     do idx = 1 to field_lists.types (DELIVERY_BY_FIELD).n_fields;
     2659 		field_idx = field_lists.types (DELIVERY_BY_FIELD).field_idxs (idx);
     2660 		call message_parse_error (p_pto, mlsys_et_$extra_restricted_field,
     2661 		     header_field_list.fields (field_idx).complete_field_start,
     2662 		     header_field_list.fields (field_idx).complete_field_lth, "");
     2663 	     end;
     2664 	end;
     2665 
     2666 	p_ipo.default_system_name = saved_default_system;
     2667 	p_ipo.default_system_is_local = saved_default_system_is_local;
     2668 
     2669 	if p_ipo.requests_acknowledgement then		/* don't both to look unless it's going to be acknowledged */
     2670 	     if field_lists.types (ACKNOWLEDGE_TO_FIELD).n_fields = 1 then do;
     2671 		field_idx = field_lists.types (ACKNOWLEDGE_TO_FIELD).field_idxs (1);
     2672 		call parse_address_text_internal (local_pto, p_ipo, header_field_value, envelope.acknowledge_to, code)
     2673 		     ;
     2674 		if code ^= 0 then
     2675 		     call message_parse_error (p_pto, code, header_field_list.fields (field_idx).complete_field_start,
     2676 			header_field_list.fields (field_idx).complete_field_lth, "");
     2677 	     end;
     2678 	     else if field_lists.types (ACKNOWLEDGE_TO_FIELD).n_fields > 1 then do;
     2679 		do idx = 1 to field_lists.types (ACKNOWLEDGE_TO_FIELD).n_fields;
     2680 		     field_idx = field_lists.types (ACKNOWLEDGE_TO_FIELD).field_idxs (idx);
     2681 		     call message_parse_error (p_pto, mlsys_et_$extra_restricted_field,
     2682 			header_field_list.fields (field_idx).complete_field_start,
     2683 			header_field_list.fields (field_idx).complete_field_lth, "");
     2684 		end;
     2685 	     end;
     2686 
     2687 
     2688 /* Supply a default From field (equal to the Sender) and eliminate redundant Sender and/or Delivery-By addresses */
     2689 
     2690 	if p_from -> address_list.n_addresses = 0 then do;/* no From field supplied */
     2691 	     call add_address (p_from, envelope.sender, ADDRESS_LIST_VERSION_2, code);
     2692 	     if code ^= 0 then call message_parse_error_fatal (code);
     2693 	     envelope.sender = null ();		/* ... let's not be redundant */
     2694 	end;
     2695 
     2696 	if p_from -> address_list.n_addresses = 1 then do;/* try to eliminate redundant Sender/Delivery-By */
     2697 	     if envelope.sender ^= null () then
     2698 		if mail_system_$compare_addresses (p_from -> address_list.addresses (1), envelope.sender, (0)) then
     2699 		     call mail_system_$free_address (envelope.sender, (0));
     2700 	     if envelope.delivered_by ^= null () then
     2701 		if mail_system_$compare_addresses (p_from -> address_list.addresses (1), envelope.delivered_by, (0))
     2702 		     then
     2703 		     call mail_system_$free_address (envelope.delivered_by, (0));
     2704 	end;					/* ... OK to free as parser never reuses addresses */
     2705 
     2706 	if envelope.sender ^= null () then		/* check for redundant Delivery-By */
     2707 	     if envelope.delivered_by ^= null () then
     2708 		if mail_system_$compare_addresses (envelope.sender, envelope.delivered_by, (0)) then
     2709 		     call mail_system_$free_address (envelope.delivered_by, (0));
     2710 
     2711 
     2712 /* Finally, parse the message trace if present */
     2713 
     2714 	if (field_lists.types (ROUTE_FIELD).n_fields > 0) | (field_lists.types (RELAYED_FIELD).n_fields > 0) then
     2715 	     call parse_trace ();
     2716 
     2717 	return;
     2718 
     2719 /* Internal to parse_envelope: parses the fields in a message trace; any errors in a message trace are considered
     2720*   non-fatal and the information in the trace is thrown away */
     2721 
     2722 parse_trace:
     2723 	procedure () /* options (quick) */;
     2724 
     2725 dcl  1 current_relay aligned based (current_relay_ptr) like message_trace.relays;
     2726 dcl  current_relay_ptr pointer;
     2727 
     2728 dcl  1 local_ipo aligned like internal_parse_options;
     2729 
     2730 dcl  the_route_ptr pointer;
     2731 dcl  address_system character (256) varying;
     2732 dcl  (start_of_id_string, end_of_id_string, bracket_level, message_id_string_lth, date_time_string_start) fixed
     2733 	binary (21);
     2734 dcl  (relay_idx, idx) fixed binary;
     2735 
     2736 
     2737 	     message_trace_n_relays = max (field_lists.types (RELAYED_FIELD).n_fields, 1);
     2738 						/* PL/I abhors a vacuum */
     2739 
     2740 	     allocate message_trace in (system_area) set (message_trace_ptr);
     2741 
     2742 	     message_trace.version = MESSAGE_TRACE_VERSION_2;
     2743 	     message_trace.implicit_route = null ();
     2744 	     message_trace.relays (*).date_time_relayed = 0;
     2745 	     message_trace.relays (*).sending_host = "";
     2746 	     message_trace.relays (*).receiving_host = "";
     2747 	     message_trace.relays (*).communications_media = "";
     2748 	     message_trace.relays (*).communications_protocol = "";
     2749 	     message_trace.relays (*).mail_protocol = "";
     2750 	     message_trace.relays (*).relay_id = ""b;
     2751 	     message_trace.relays (*).relay_recipient = null ();
     2752 
     2753 	     envelope.trace = message_trace_ptr;	/* cleanup handler will now work OK */
     2754 
     2755 
     2756 /* Find the route by which this message/redistribution arrived at this system by parsing the Route field:  If there are
     2757*   multiple Route fields, all but the first are ignored as many systems add extraneous Route fields during transmission */
     2758 
     2759 	     trace_address = null ();			/* for cleanup handler */
     2760 
     2761 	     if field_lists.types (ROUTE_FIELD).n_fields ^= 0 then do;
     2762 
     2763 		field_idx = field_lists.types (ROUTE_FIELD).field_idxs (1);
     2764 
     2765 		call lex_and_parse_prologue (header_field_value, "1"b, "0"b);
     2766 						/* no cleanup handler here: caller's set one up already */
     2767 
     2768 		call lex_address (p_pto, p_ipo, code);	/* convert into tokens */
     2769 		if code ^= 0 then call bypass_implicit_route (code, "1"b);
     2770 
     2771 		token_idx = 0;			/* start at the first non-comment token */
     2772 		call next_real_token ();
     2773 
     2774 		if current.type = LEFTBRACKET_TOKEN then do;
     2775 		     /*** RFC822 style route -- Return-Path: <@HOST,@HOST,...:STRING@HOST> */
     2776 		     call parse_address (p_pto, p_ipo, (token_idx - 1), trace_address, code);
     2777 		     call lex_and_parse_epilogue ("1"b);/* ... won't need the token list any longer ... */
     2778 		     call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     2779 		     if code ^= 0 then call bypass_implicit_route (code, "1"b);
     2780 		     call mail_system_$get_address_route (trace_address, ADDRESS_ROUTE_VERSION_1, the_route_ptr, code)
     2781 			;
     2782 		     if code ^= 0 then call bypass_implicit_route (code, "0"b);
     2783 		     call mail_system_$get_address_system (trace_address, address_system, code);
     2784 		     if code ^= 0 then call bypass_implicit_route (code, "0"b);
     2785 		     address_route_n_relays = the_route_ptr -> address_route.n_relays + 1;
     2786 		     allocate address_route in (system_area) set (address_route_ptr);
     2787 		     message_trace.implicit_route = address_route_ptr;
     2788 		     address_route.version = ADDRESS_ROUTE_VERSION_1;
     2789 		     do idx = 1 to address_route.n_relays - 1;
     2790 			address_route.relays (idx) = the_route_ptr -> address_route.relays (idx);
     2791 		     end;
     2792 		     address_route.relays (address_route.n_relays) = address_system;
     2793 		     call mail_system_$free_address (trace_address, (0));
     2794 		end;
     2795 
     2796 		else if current.type = AT_TOKEN then do;
     2797 		     /*** Multics style route:  [via RelayN ...] via Relay1 */
     2798 		     address_route_n_relays = 0;
     2799 		     do while (current.type = AT_TOKEN);
     2800 			address_route_n_relays = address_route_n_relays + 1;
     2801 			call next_real_token ();	/* ... to the system name */
     2802 			if current.type ^= WORD_TOKEN then
     2803 			     call bypass_implicit_route (mlsys_et_$missing_host_name, "1"b);
     2804 			host_indeces (address_route_n_relays) = token_idx;
     2805 			call next_real_token ();	/* ... to the next "via" or the end of the string */
     2806 		     end;
     2807 		     if current.type ^= END_OF_TEXT_TOKEN then
     2808 			call bypass_implicit_route (mlsys_et_$text_follows_route, "1"b);
     2809 		     allocate address_route in (system_area) set (address_route_ptr);
     2810 		     message_trace.implicit_route = address_route_ptr;
     2811 		     address_route.version = ADDRESS_ROUTE_VERSION_1;
     2812 		     do idx = 1 to address_route_n_relays;
     2813 			call make_token_current (host_indeces (idx));
     2814 			address_route.relays (address_route_n_relays - idx + 1) = current_token;
     2815 		     end;				/* ... the printed representation is backward */
     2816 		     call lex_and_parse_epilogue ("1"b);
     2817 		     call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     2818 		end;
     2819 
     2820 		else call bypass_implicit_route (mlsys_et_$invalid_route_field_syntax, "1"b);
     2821 	     end;
     2822 
     2823 
     2824 /* Determine the set of relay operations which took place to get the message here by parsing the Relayed fields */
     2825 
     2826 BYPASS_IMPLICIT_ROUTE:
     2827 	     relay_idx = 1;				/* in case we have to bypass some fields */
     2828 
     2829 	     do idx = 1 to field_lists.types (RELAYED_FIELD).n_fields;
     2830 
     2831 		field_idx = field_lists.types (RELAYED_FIELD).field_idxs (idx);
     2832 		current_relay_ptr = addr (message_trace.relays (relay_idx));
     2833 
     2834 		call lex_and_parse_prologue (header_field_value, "1"b, "0"b);
     2835 		call lex_address (p_pto, p_ipo, code);
     2836 		if code ^= 0 then call bypass_relay_operation (code, "1"b);
     2837 
     2838 		token_idx = 0;			/* start at the beginning */
     2839 		call next_real_token ();
     2840 
     2841 		do while (current.type ^= SEMICOLON_TOKEN);
     2842 		     if current.type = WORD_TOKEN then
     2843 			if translate (current_token, UPPERCASE, LOWERCASE) = "FROM" then do;
     2844 			     call next_real_token ();
     2845 			     if current.type = WORD_TOKEN then
     2846 				current_relay.sending_host = current_token;
     2847 			     else call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2848 			end;
     2849 			else if (translate (current_token, UPPERCASE, LOWERCASE) = "BY")
     2850 			     | (translate (current_token, UPPERCASE, LOWERCASE) = "TO") then do;
     2851 			     call next_real_token ();
     2852 			     if current.type = WORD_TOKEN then
     2853 				current_relay.receiving_host = current_token;
     2854 			     else call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2855 			end;
     2856 			else if translate (current_token, UPPERCASE, LOWERCASE) = "USING" then do;
     2857 			     call next_real_token ();
     2858 			     if current.type = WORD_TOKEN then
     2859 				current_relay.mail_protocol = current_token;
     2860 			     else call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2861 			end;
     2862 			else if translate (current_token, UPPERCASE, LOWERCASE) = "WITH" then do;
     2863 			     call next_real_token ();
     2864 			     if current.type = WORD_TOKEN then
     2865 				current_relay.communications_protocol = current_token;
     2866 			     else call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2867 			end;
     2868 			else if translate (current_token, UPPERCASE, LOWERCASE) = "VIA" then do;
     2869 			     call next_real_token ();
     2870 			     if current.type = WORD_TOKEN then
     2871 				current_relay.communications_media = current_token;
     2872 			     else call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2873 			end;
     2874 			else if translate (current_token, UPPERCASE, LOWERCASE) = "ID" then do;
     2875 			     /*** ID <message-id> */
     2876 			     if current_relay.receiving_host = "" then
     2877 				call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2878 			     call next_real_token ();
     2879 			     start_of_id_string = token_idx;
     2880 			     if current.type = WORD_TOKEN then end_of_id_string = token_idx;
     2881 			     else if current.type = LEFTBRACKET_TOKEN then do;
     2882 				bracket_level = 1;
     2883 				do while (bracket_level > 1);
     2884 				     call next_real_token ();
     2885 				     if current.type = LEFTBRACKET_TOKEN then bracket_level = bracket_level + 1;
     2886 				     else if current.type = RIGHTBRACKET_TOKEN then
     2887 					bracket_level = bracket_level - 1;
     2888 				end;
     2889 				end_of_id_string = token_idx;
     2890 			     end;
     2891 			     else call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2892 			     message_id_string_lth =
     2893 				token_list.tokens (end_of_id_string).original_start
     2894 				- token_list.tokens (start_of_id_string).original_start
     2895 				+ token_list.tokens (end_of_id_string).original_lth;
     2896 			     begin;
     2897 dcl  message_id_string character (message_id_string_lth) unaligned defined (header_field_value)
     2898 	position (token_list.tokens (start_of_id_string).original_start);
     2899 				call encode_foreign_id (message_id_string, current_relay.receiving_host,
     2900 				     current_relay.relay_id);
     2901 			     end;
     2902 			end;
     2903 			else if translate (current_token, UPPERCASE, LOWERCASE) = "FOR" then do;
     2904 			     /*** FOR <address>: must be last thing before semicolon */
     2905 			     local_ipo = p_ipo;
     2906 			     string (local_ipo.delimiters) = ""b;
     2907 			     call parse_address (p_pto, local_ipo, (token_idx + 1), current_relay.relay_recipient,
     2908 				code);
     2909 			     if code ^= 0 then call bypass_relay_operation (code, "1"b);
     2910 			     go to HAVE_FOUND_DATE_TIME_RELAYED;
     2911 			end;
     2912 			else do;			/* kludge: assume other word is proceeded by WITH */
     2913 			     current_relay.communications_protocol = current_token;
     2914 			end;
     2915 		     else call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2916 		     call next_real_token ();
     2917 		end;
     2918 
     2919 HAVE_FOUND_DATE_TIME_RELAYED:
     2920 		if (current_relay.sending_host = "") | (current_relay.receiving_host = "") then
     2921 		     call bypass_relay_operation (mlsys_et_$invalid_relayed_field_syntax, "1"b);
     2922 
     2923 		/*** Have everything now but the date/time relayed which uses a different lex/parse */
     2924 		date_time_string_start = current.original_start + 1;
     2925 
     2926 		call lex_and_parse_epilogue ("1"b);	/* get rid of the old token list */
     2927 		call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     2928 
     2929 		begin;
     2930 dcl  date_time_string character (length (header_field_value) - date_time_string_start + 1) unaligned
     2931 	defined (header_field_value) position (date_time_string_start);
     2932 		     call parse_date_time_text (p_pto, p_ipo, date_time_string, current_relay.date_time_relayed, code)
     2933 			;
     2934 		     if code ^= 0 then call bypass_relay_operation (code, "1"b);
     2935 		end;
     2936 
     2937 		relay_idx = relay_idx + 1;		/* success */
     2938 
     2939 BYPASS_RELAY_OPERATION:
     2940 	     end;
     2941 
     2942 	     relay_idx = relay_idx - 1;		/* above loop sets this value one too high */
     2943 
     2944 
     2945 /* Insure that the trace isn't empty */
     2946 
     2947 	     if (message_trace.implicit_route = null ()) & (relay_idx = 0) then do;
     2948 		free message_trace in (system_area);
     2949 		envelope.trace = null ();		/* nothing in it */
     2950 	     end;
     2951 
     2952 	     else message_trace.n_relays = relay_idx;	/* insure it claims the right # of relays */
     2953 
     2954 	     return;
     2955 
     2956 
     2957 /* Internal to parse_trace: aborts the parse of the Route field and continues to the parse of the Relayed fields */
     2958 
     2959 bypass_implicit_route:
     2960 	     procedure (p_code, p_list_error) /* options (quick) */;
     2961 
     2962 dcl  p_code fixed binary (35) parameter;
     2963 dcl  p_list_error bit (1) aligned;
     2964 
     2965 		call lex_and_parse_epilogue ("1"b);	/* most likely we interrupted something */
     2966 		call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     2967 
     2968 		if trace_address ^= null () then call mail_system_$free_address (trace_address, (0));
     2969 
     2970 		if message_trace.implicit_route ^= null () then
     2971 		     free message_trace.implicit_route -> address_route in (system_area);
     2972 
     2973 		if p_list_error & p_pto.list_errors then
     2974 		     call message_parse_error (p_pto, p_code,
     2975 			header_field_list.fields (field_idx).complete_field_start,
     2976 			header_field_list.fields (field_idx).complete_field_lth, "");
     2977 
     2978 		go to BYPASS_IMPLICIT_ROUTE;
     2979 
     2980 	     end bypass_implicit_route;
     2981 
     2982 
     2983 
     2984 /* Internal to parse_trace: aborts the parse of the current Relayed field and proceeds to the next one */
     2985 
     2986 bypass_relay_operation:
     2987 	     procedure (p_code, p_list_error) /* options (quick) */;
     2988 
     2989 dcl  p_code fixed binary (35);
     2990 dcl  p_list_error bit (1) aligned parameter;
     2991 
     2992 		call lex_and_parse_epilogue ("1"b);	/* most likely we interrupted something */
     2993 		call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     2994 
     2995 		if trace_address ^= null () then call mail_system_$free_address (trace_address, (0));
     2996 
     2997 		if current_relay.relay_recipient ^= null () then
     2998 		     call mail_system_$free_address (current_relay.relay_recipient, (0));
     2999 
     3000 		if p_list_error & p_pto.list_errors then
     3001 		     call message_parse_error (p_pto, p_code,
     3002 			header_field_list.fields (field_idx).complete_field_start,
     3003 			header_field_list.fields (field_idx).complete_field_lth, "");
     3004 
     3005 		go to BYPASS_RELAY_OPERATION;
     3006 
     3007 	     end bypass_relay_operation;
     3008 
     3009 	end parse_trace;
     3010 
     3011      end parse_envelope;
     3012 
     3013 /* Parse the address lists in the header corresponding to the given field */
     3014 
     3015 parse_address_list_field:
     3016      procedure (p_pto, p_ipo, p_fieldname, p_field_list_ptr, p_address_list_ptr);
     3017 
     3018 dcl  1 p_pto aligned like parse_text_options parameter;
     3019 dcl  1 p_ipo aligned like internal_parse_options parameter;
     3020 dcl  p_fieldname character (*) varying parameter;
     3021 dcl  p_field_list_ptr pointer parameter;
     3022 dcl  p_address_list_ptr pointer parameter;
     3023 
     3024 dcl  1 field_list aligned based (p_field_list_ptr) like field_by_type_lists.types;
     3025 dcl  idx fixed binary;
     3026 
     3027 
     3028 	call create_address_list (ADDRESS_LIST_VERSION_2, p_address_list_ptr, code);
     3029 	if code ^= 0 then call message_parse_error_fatal (code);
     3030 						/* all our software assumes address lists are never null */
     3031 
     3032 	do idx = 1 to field_list.n_fields;
     3033 	     field_idx = field_list.field_idxs (idx);
     3034 	     call parse_address_list_text_internal (p_pto, p_ipo, header_field_value, p_address_list_ptr, code);
     3035 	     if code ^= 0 then call message_parse_error_fatal (code);
     3036 						/* only happens if caller asked not to continue on error */
     3037 	     call merge_error_lists (p_fieldname);	/* if listing errors: add any errors we find to the list */
     3038 	end;
     3039 
     3040 	return;
     3041 
     3042 
     3043 
     3044 /* Internal to parse_address_list_field: merge the results of an address list parse into the running results for the
     3045*   message parse */
     3046 
     3047 merge_error_lists:
     3048 	procedure (p_fieldname);
     3049 
     3050 dcl  p_fieldname character (*) varying parameter;
     3051 
     3052 dcl  new_ptel_ptr pointer;
     3053 dcl  (n_previous_errors, text_offset, idx, offset_idx) fixed binary;
     3054 
     3055 	     if parse_text_options.list_errors & (lex_and_parse_pointers.sel_ptr ^= null ()) & (n_syntax_errors > 0)
     3056 	     then do;				/* something did go wrong */
     3057 		message_parse_fails = "1"b;		/* ... be sure global code will be set properly */
     3058 
     3059 		if parse_text_error_list_ptr = null () then
     3060 		     parse_text_error_list_n_errors = n_syntax_errors;
     3061 		else parse_text_error_list_n_errors = parse_text_error_list.n_errors + n_syntax_errors;
     3062 		n_previous_errors = parse_text_error_list_n_errors - n_syntax_errors;
     3063 
     3064 		allocate parse_text_error_list in (user_area) set (new_ptel_ptr);
     3065 
     3066 		do idx = 1 to n_previous_errors;
     3067 		     new_ptel_ptr -> parse_text_error_list.errors (idx) = parse_text_error_list.errors (idx);
     3068 		end;
     3069 
     3070 		if parse_text_error_list_ptr ^= null () then free parse_text_error_list in (user_area);
     3071 		parse_text_error_list_ptr = new_ptel_ptr;
     3072 
     3073 		text_offset = charno (addr (header_field_value)) - charno (representation_ptr);
     3074 
     3075 		do idx = 1 to n_syntax_errors;
     3076 		     offset_idx = idx + n_previous_errors;
     3077 						/* ... get right place in the complete list */
     3078 		     parse_text_error_list.errors (offset_idx).text_start = sel (idx).text_start + text_offset;
     3079 		     parse_text_error_list.errors (offset_idx).text_lth = sel (idx).text_lth;
     3080 		     parse_text_error_list.errors (offset_idx).code = sel (idx).code;
     3081 		     if length (p_fieldname) > 0 then
     3082 			parse_text_error_list.errors (offset_idx).additional_info =
     3083 			     "In the " || p_fieldname || " field:";
     3084 		     else parse_text_error_list.errors (offset_idx).additional_info = "";
     3085 		end;
     3086 	     end;
     3087 
     3088 	     call lex_and_parse_epilogue ("1"b);	/* get rid of syntax error list */
     3089 
     3090 	     return;
     3091 
     3092 	end merge_error_lists;
     3093 
     3094      end parse_address_list_field;
     3095 
     3096 /* Parse a single address */
     3097 
     3098 parse_address:
     3099      procedure (p_pto, p_ipo, p_token_idx, p_address_ptr, p_code);
     3100 
     3101 dcl  1 p_pto aligned like parse_text_options parameter;
     3102 dcl  1 p_ipo aligned like internal_parse_options parameter;
     3103 dcl  p_token_idx fixed binary (21) parameter;		/* where the address starts/stops */
     3104 dcl  p_address_ptr pointer parameter;			/* set -> the address generated (if any) */
     3105 dcl  p_code fixed binary (35) parameter;
     3106 
     3107 dcl  1 saved_p_ipo aligned like internal_parse_options;
     3108 
     3109 dcl  foreign_system_name character (256) varying;
     3110 dcl  address_pathname character (200);
     3111 dcl  address_dirname character (168);
     3112 dcl  (address_ename, address_component) character (32);
     3113 dcl  trimmed_address_ename character (32) varying;
     3114 dcl  new_host_indeces_ptr pointer;
     3115 dcl  (first_token_in_address, last_token_in_address, delimiting_token, address_name_start, address_name_end, idx)
     3116 	fixed binary (21);
     3117 dcl  (in_named_address, seen_route, address_is_local, is_mte, done) bit (1) aligned;
     3118 dcl  error_table_$noentry fixed bin(35) ext static;
     3119 dcl  search_paths_$find_dir entry (char(*), ptr, char(*), char(*), char(*), fixed bin(35));
     3120 dcl  suffixed_name_$make entry (char(*), char(*), char(32), fixed bin(35));
     3121           
     3122 
     3123 	p_address_ptr = null ();			/* in case it fails */
     3124 
     3125 	saved_p_ipo = p_ipo;			/* for cleanup handler */
     3126 	new_host_indeces_ptr, address_route_ptr = null ();
     3127 
     3128 	on condition (cleanup)
     3129 	     begin;
     3130 	     p_ipo = saved_p_ipo;
     3131 	     if new_host_indeces_ptr ^= null () then free new_host_indeces_ptr -> host_indeces in (system_area);
     3132 	     if address_route_ptr ^= null () then free address_route in (system_area);
     3133 	end;
     3134 
     3135 	call make_token_current (p_token_idx);
     3136 	delimiting_token = 0;			/* haven't gotten that far yet */
     3137 
     3138 	address_name_start, address_name_end = 0;	/* no address name as yet */
     3139 	in_named_address = "0"b;
     3140 
     3141 	seen_route = "0"b;				/* no RFC822 address route */
     3142 
     3143 
     3144 START_ADDRESS_PARSE:
     3145 	n_hosts, n_reversed_hosts = 0;		/* haven't seen any routing information */
     3146 
     3147 	first_token_in_address = token_idx + 1;
     3148 
     3149 	call next_real_token ();			/* move to the first token */
     3150 
     3151 START_ADDRESS_PARSE_WITH_ROUTE:
     3152 	if ^in_named_address & end_of_address () then
     3153 	     /*** No non-comment tokens in the address (sigh) */
     3154 	     call bad_address_syntax (mlsys_et_$empty_address_text);
     3155 
     3156 	else if current.type = COLON_TOKEN then
     3157 	     /*** an RFC733 structured address: no one understands them anymore */
     3158 	     call bad_address_syntax (mlsys_et_$obsolete_address_syntax);
     3159 
     3160 	else if in_named_address & (current.type = AT_TOKEN) then
     3161 	     /*** RFC822-style explicit route (@HOST,@HOST,...:ADDR) */
     3162 	     if seen_route then
     3163 		call bad_address_syntax (mlsys_et_$multiple_address_routes);
     3164 	     else do;
     3165 		seen_route = "1"b;			/* don't let this happen again */
     3166 		done = "0"b;
     3167 		do while (^done);
     3168 		     n_hosts, n_reversed_hosts = n_hosts + 1;
     3169 		     host_indeces (n_hosts) = token_idx;
     3170 		     call next_real_token ();
     3171 		     if current.type ^= WORD_TOKEN then call bad_address_syntax (mlsys_et_$missing_host_name);
     3172 		     call next_real_token ();		/* skip past the host name */
     3173 		     if current.type = COLON_TOKEN then done = "1"b;
     3174 		     else if current.type = COMMA_TOKEN then do;
     3175 						/* more of the route follows */
     3176 			call next_real_token ();
     3177 			if current.type ^= AT_TOKEN then
     3178 			     call bad_address_syntax (mlsys_et_$only_address_route_allowed);
     3179 		     end;
     3180 		     else call bad_address_syntax (mlsys_et_$only_address_route_allowed);
     3181 		end;
     3182 		first_token_in_address = token_idx + 1; /* address starts after the colon */
     3183 		call next_real_token ();		/* skip over the colon to the address itself */
     3184 		go to START_ADDRESS_PARSE_WITH_ROUTE;
     3185 	     end;
     3186 
     3187 	else if current.type = LEFTBRACE_TOKEN then do;
     3188 	     /*** A structured address */
     3189 	     do while (current.type ^= RIGHTBRACE_TOKEN); /* lex has guarenteed that the braces balance */
     3190 		call next_real_token ();		/* move to the end of the structured part */
     3191 	     end;
     3192 	     call next_real_token ();			/* move past the } */
     3193 	     do while (^end_of_address ());		/* may be followed by routing information only */
     3194 		if current.type ^= AT_TOKEN then call bad_address_syntax (mlsys_et_$only_address_route_allowed);
     3195 		n_hosts = n_hosts + 1;
     3196 		host_indeces (n_hosts) = token_idx;
     3197 		call next_real_token ();		/* past the AT ... */
     3198 		if current.type ^= WORD_TOKEN then call bad_address_syntax (mlsys_et_$missing_host_name);
     3199 		call next_real_token ();		/* ... and the host name following it */
     3200 	     end;
     3201 	end;
     3202 
     3203 	else do;
     3204 
     3205 	     /*** Simple address, named address, or a named group address */
     3206 	     do while (^end_of_address ());
     3207 
     3208 		if current.type = LEFTBRACKET_TOKEN then
     3209 		     /*** A named address */
     3210 		     if in_named_address then
     3211 			call bad_address_syntax (mlsys_et_$recursive_named_addresses);
     3212 		     else do;			/* ... looks OK: start parse over terminating at ">" */
     3213 			address_name_start = first_token_in_address;
     3214 			address_name_end = token_idx - 1;
     3215 			in_named_address = "1"b;
     3216 			string (p_ipo.delimiters) = ""b;
     3217 			p_ipo.delimiters.angle_bracket = "1"b;
     3218 			go to START_ADDRESS_PARSE;
     3219 		     end;
     3220 
     3221 		else if current.type = COLON_TOKEN then
     3222 		     /*** A named group */
     3223 		     if in_named_address then
     3224 			call bad_address_syntax (mlsys_et_$recursive_named_addresses);
     3225 		     else do;
     3226 			call parse_named_group ();
     3227 			go to RETURN_FROM_PARSE_ADDRESS;
     3228 		     end;				/* ... the internal procedure does all the necessary work */
     3229 
     3230 		else if current.type = AT_TOKEN then do;
     3231 		     /*** A possible host name: remember it for later */
     3232 		     n_hosts = n_hosts + 1;
     3233 		     host_indeces (n_hosts) = token_idx;
     3234 		     call next_real_token ();
     3235 		     if current.type ^= WORD_TOKEN then call bad_address_syntax (mlsys_et_$missing_host_name);
     3236 		end;
     3237 
     3238 		else if current.type = WORD_TOKEN
     3239 		/*** Part of the address proper */
     3240 		     then
     3241 		     ;
     3242 
     3243 		else call bad_address_syntax (mlsys_et_$invalid_address_syntax);
     3244 
     3245 		call next_real_token ();		/* move right along */
     3246 	     end;
     3247 	end;
     3248 
     3249 	if in_named_address then do;
     3250 	     /*** End of named address processing: insure that proper delimiter follows the ">" */
     3251 	     last_token_in_address = token_idx - 1;	/* ... don't include the ">" as part of the address */
     3252 	     in_named_address = "0"b;
     3253 	     p_ipo = saved_p_ipo;
     3254 	     call next_real_token ();
     3255 	     if ^end_of_address () then call bad_address_syntax (mlsys_et_$text_follows_address);
     3256 	end;
     3257 	else last_token_in_address = 0;		/* don't know where it ends yet */
     3258 
     3259 
     3260 /* Determine the system of residence and construct the address route */
     3261 
     3262 	delimiting_token = token_idx;
     3263 
     3264 	if n_hosts = 0 then do;			/* no system/route given: use the default */
     3265 	     if last_token_in_address = 0 then		/* ... haven't seen the end because of a named address ... */
     3266 		last_token_in_address = token_idx - 1;	/* ... so it's all address */
     3267 	     address_is_local = p_ipo.default_system_is_local;
     3268 	     foreign_system_name = p_ipo.default_system_name;
     3269 	end;
     3270 
     3271 	else do;					/* have system and/or route */
     3272 	     address_is_local = "0"b;			/* ... can't be sure until we try to validate it */
     3273 	     if n_reversed_hosts > 0 then do;		/* ... need to put host names into proper order */
     3274 		allocate host_indeces in (system_area) set (new_host_indeces_ptr);
     3275 		do idx = 1 to n_reversed_hosts;
     3276 		     new_host_indeces_ptr -> host_indeces (n_hosts - idx + 1) = host_indeces (idx);
     3277 		end;
     3278 		do idx = (n_reversed_hosts + 1) to n_hosts;
     3279 		     new_host_indeces_ptr -> host_indeces (idx - n_reversed_hosts) = host_indeces (idx);
     3280 		end;
     3281 		if baseno (lex_and_parse_pointers.host_indeces_ptr) ^= baseno (stackframeptr ()) then
     3282 		     free host_indeces in (system_area);
     3283 		lex_and_parse_pointers.host_indeces_ptr = new_host_indeces_ptr;
     3284 		new_host_indeces_ptr = null ();
     3285 	     end;
     3286 	     last_token_in_address = host_indeces (1) - 1;
     3287 	     call make_token_current (host_indeces (1));
     3288 	     call next_real_token ();			/* ... first host name is the foreign system */
     3289 	     foreign_system_name = current_token;	/* ... above code insured this is the right kind of token */
     3290 	     do idx = 2 to n_hosts;			/* ... move the remaining hosts (the route) down by 1 */
     3291 		host_indeces (idx - 1) = host_indeces (idx);
     3292 	     end;
     3293 	     n_hosts = n_hosts - 1;
     3294 	end;
     3295 
     3296 	if n_hosts = 0 then				/* no explicit route */
     3297 	     address_route_ptr = null ();
     3298 	else do;
     3299 	     address_route_n_relays = n_hosts;
     3300 	     allocate address_route in (system_area) set (address_route_ptr);
     3301 	     address_route.version = ADDRESS_ROUTE_VERSION_1;
     3302 	     do idx = 1 to n_hosts;
     3303 		call make_token_current (host_indeces (idx));
     3304 		call next_real_token ();
     3305 		address_route.relays (n_hosts - idx + 1) = current_token;
     3306 	     end;					/* ... the printed representation is backward */
     3307 	end;
     3308 
     3309 
     3310 /* Get the address name and comment */
     3311 
     3312 	if address_name_start = 0 then
     3313 	     address_name = "";			/* no address name */
     3314 	else call build_string (address_name_start, address_name_end, "1"b, "0"b, "1"b, address_name);
     3315 
     3316 	call build_string ((p_token_idx + 1), (delimiting_token - 1), "0"b, "1"b, "1"b, address_comment);
     3317 
     3318 
     3319 /* Construct the actual address */
     3320 
     3321 	if address_is_local then do;			/* a local address */
     3322 	     call make_token_current (first_token_in_address);
     3323 						/* back to the beginning */
     3324 
     3325 	     if current.type = COMMENT_TOKEN then	/* skip past comment to the first real token */
     3326 		call next_real_token ();
     3327 
     3328 	     if token_idx > last_token_in_address then	/* a null address */
     3329 		call bad_address_syntax (mlsys_et_$empty_address_text);
     3330 
     3331 	     else if current.type = LEFTBRACE_TOKEN then do;
     3332 		/*** A structued address: validate it ... */
     3333 		call next_real_token ();		/* should be followed by the type of address */
     3334 		if current.type ^= WORD_TOKEN then
     3335 		     call bad_address_syntax (mlsys_et_$unknown_structured_address_type);
     3336 
     3337 		if translate (current_token, UPPERCASE, LOWERCASE) = "LOGBOX" then do;
     3338 		     /*** The user's logbox ... */
     3339 		     call next_real_token ();		/* should be the close brace */
     3340 		     if current.type ^= RIGHTBRACE_TOKEN then
     3341 			call bad_address_syntax (mlsys_et_$text_follows_address);
     3342 		     call mail_system_$create_logbox_address (mlsys_data_$user_id, address_name, address_comment,
     3343 			p_address_ptr, code);
     3344 		     if code ^= 0 then call bad_address_syntax (code);
     3345 		end;
     3346 
     3347 		else if translate (current_token, UPPERCASE, LOWERCASE) = "SAVE" then do;
     3348 		     /*** One of the user's saveboxes ... */
     3349 		     call next_real_token ();		/* should be the savebox pathname */
     3350 		     if current.type ^= WORD_TOKEN then call bad_address_syntax (mlsys_et_$address_pathname_expected);
     3351 		     if has_suffix (current_token, ".sv") then
     3352 			address_pathname = substr (current_token, 1, (length (current_token) - length (".sv")));
     3353 		     else address_pathname = current_token;
     3354 		     call next_real_token ();		/* should be the closing brace */
     3355 		     if current.type ^= RIGHTBRACE_TOKEN then
     3356 			call bad_address_syntax (mlsys_et_$text_follows_address);
     3357 		     if search (address_pathname, "<>") = 0 then do;
     3358 			call suffixed_name_$make (address_pathname, "sv.mbx", address_ename, code);
     3359 			if code ^= 0 then call bad_address_syntax (code);
     3360 			call search_paths_$find_dir ("mlsys", null(), address_ename, "", address_dirname, code);
     3361 			if code = error_table_$noentry then 
     3362 			     call expand_pathname_$add_suffix (address_pathname, "sv.mbx", address_dirname, address_ename, code);
     3363 			if code ^= 0 then address_dirname = "";
     3364 			end;
     3365 		     else
     3366 			call expand_pathname_$add_suffix (address_pathname, "sv.mbx", address_dirname, address_ename,
     3367 			code);
     3368 		     if code ^= 0 then call bad_address_syntax (code);
     3369 		     call reject_starnames (address_ename, "");
     3370 		     call mail_system_$create_savebox_address (mlsys_data_$user_id, address_dirname, address_ename,
     3371 			address_name, address_comment, p_address_ptr, code);
     3372 		     if code ^= 0 then call bad_address_syntax (code);
     3373 		end;
     3374 
     3375 		else if translate (current_token, UPPERCASE, LOWERCASE) = "MBX" then do;
     3376 		     /*** A random mailbox ... */
     3377 		     call next_real_token ();		/* should be the mailbox pathname */
     3378 		     if current.type ^= WORD_TOKEN then call bad_address_syntax (mlsys_et_$address_pathname_expected);
     3379 		     address_pathname = current_token;
     3380 		     call next_real_token ();		/* should be the closing brace */
     3381 		     if current.type ^= RIGHTBRACE_TOKEN then
     3382 			call bad_address_syntax (mlsys_et_$text_follows_address);
     3383      		     if search (address_pathname, "<>") = 0 then do;
     3384 			call suffixed_name_$make (address_pathname, "mbx", address_ename, code);
     3385 			if code ^= 0 then call bad_address_syntax (code);
     3386 			call search_paths_$find_dir ("mlsys", null(), address_ename, "", address_dirname, code);
     3387 			if code = error_table_$noentry then 
     3388 			     call expand_pathname_$add_suffix (address_pathname, "mbx", address_dirname, address_ename, code);
     3389 			if code ^= 0 then address_dirname = "";
     3390 			end;
     3391 		     else
     3392 			call expand_pathname_$add_suffix (address_pathname, "mbx", address_dirname, address_ename, code);
     3393 		     if code ^= 0 then call bad_address_syntax (code);
     3394 		     call reject_starnames (address_ename, "");
     3395 		     call mail_system_$create_mailbox_address (address_dirname, address_ename, address_name,
     3396 			address_comment, p_address_ptr, code);
     3397 		     if code ^= 0 then call bad_address_syntax (code);
     3398 		end;
     3399 
     3400 		else if translate (current_token, UPPERCASE, LOWERCASE) = "FORUM" then do;
     3401 		     /*** A forum meeting ... */
     3402 		     call next_real_token ();		/* should be the meeting pathname */
     3403 		     if current.type ^= WORD_TOKEN then call bad_address_syntax (mlsys_et_$address_pathname_expected);
     3404 		     address_pathname = current_token;
     3405 		     call next_real_token ();		/* should be the closing brace */
     3406 		     if current.type ^= RIGHTBRACE_TOKEN then
     3407 			call bad_address_syntax (mlsys_et_$text_follows_address);
     3408 		     if search (address_pathname, "<>") = 0 then do;
     3409 			/*** ... not a pathname: must find the meeting by search list */
     3410 			if length (rtrim (address_pathname)) > length (address_ename) then
     3411 			     call bad_address_syntax (error_table_$entlong);
     3412 			address_ename = substr (address_pathname, 1, length (address_ename));
     3413 			if ^(has_suffix (address_ename, ".forum") | has_suffix (address_ename, ".control")) then
     3414 			     if length (rtrim (address_ename)) > (length (address_ename) - length (".forum")) then
     3415 				call bad_address_syntax (error_table_$entlong);
     3416 			call reject_starnames (address_ename, "");
     3417 			if mlsys_psp_$forum_not_available () then
     3418 			     /*** ... Forum PSP not here: we've done all we can; mlsys_transmit_ will do the rest */
     3419 			     address_dirname = "";
     3420 			else do;
     3421 			     /*** ... time to scan the search list */
     3422 			     if forum_search_list_ptr = null () then do;
     3423 				call search_paths_$get ("forum", sl_control_default, "", null (), system_area_ptr,
     3424 				     sl_info_version_1, forum_search_list_ptr, code);
     3425 				if code ^= 0 then call bad_address_syntax (code);
     3426 			     end;
     3427 			     if has_suffix (address_ename, ".forum") | has_suffix (address_ename, ".control") then
     3428 				call search_forum_list (address_ename, address_dirname, code);
     3429 			     else do;		/* ... try version 2 then version 1 meeting ... */
     3430 				trimmed_address_ename = rtrim (address_ename);
     3431 				call search_forum_list ((trimmed_address_ename || ".forum"), address_dirname,
     3432 				     code);
     3433 				if code = 0 then
     3434 				     address_ename = trimmed_address_ename || ".forum";
     3435 				else do;
     3436 				     call search_forum_list ((trimmed_address_ename || ".control"),
     3437 					address_dirname, code);
     3438 				     if code = 0 then address_ename = trimmed_address_ename || ".control";
     3439 				end;
     3440 			     end;
     3441 			     if code ^= 0 then	/* ... couldn't be found */
     3442 				address_dirname = "";
     3443 			end;
     3444 		     end;
     3445 		     else do;
     3446 			/*** .... a pathname */
     3447 			call expand_pathname_ (address_pathname, address_dirname, address_ename, code);
     3448 			if code ^= 0 then call bad_address_syntax (code);
     3449 			if ^(has_suffix (address_ename, ".forum") | has_suffix (address_ename, ".control")) then
     3450 			     if length (rtrim (address_ename)) > (length (address_ename) - length (".forum")) then
     3451 				call bad_address_syntax (error_table_$entlong);
     3452 			call reject_starnames (address_ename, "");
     3453 			if mlsys_psp_$forum_not_available () then
     3454 			     ;			/* ... no Forum PSP: we've done all we can */
     3455 			else do;
     3456 			     if ^(has_suffix (address_ename, ".forum") | has_suffix (address_ename, ".control"))
     3457 			     then do;
     3458 				/*** ... must determine the meeting version */
     3459 				trimmed_address_ename = rtrim (address_ename);
     3460 				address_ename = trimmed_address_ename || ".forum";
     3461 				call forum_$get_forum_path (address_dirname, address_ename, ((168)" "), ((32)" "),
     3462 				     code);
     3463 				if code ^= 0 then	/* ... not version 2 */
     3464 				     if (length (trimmed_address_ename) + length (".control"))
     3465 					<= length (address_ename) then
     3466 					address_ename = trimmed_address_ename || ".control";
     3467 			     end;
     3468 			end;
     3469 		     end;
     3470 		     call mail_system_$create_forum_address (address_dirname, address_ename, address_name,
     3471 			address_comment, p_address_ptr, code);
     3472 		     if code ^= 0 then call bad_address_syntax (code);
     3473 		end;
     3474 
     3475 		else if translate (current_token, UPPERCASE, LOWERCASE) = "LIST" then do;
     3476 		     /*** A mailing list ... */
     3477 		     call next_real_token ();		/* should be the mailing list pathname */
     3478 		     if current.type ^= WORD_TOKEN then call bad_address_syntax (mlsys_et_$address_pathname_expected);
     3479 		     address_pathname = current_token;
     3480 		     call next_real_token ();		/* should be the closing brace */
     3481 		     if current.type ^= RIGHTBRACE_TOKEN then
     3482 			call bad_address_syntax (mlsys_et_$text_follows_address);
     3483 		     call expand_pathname_$component_add_suffix (address_pathname, "mls", address_dirname,
     3484 			address_ename, address_component, code);
     3485 		     if code ^= 0 then call bad_address_syntax (code);
     3486      		     if search (address_pathname, "<>") = 0 then do;
     3487 			address_dirname = "";
     3488 			call search_paths_$find_dir ("mlsys", null(), address_ename, "", address_dirname, code);
     3489 			if code = error_table_$noentry then 
     3490 			     call expand_pathname_$component_add_suffix (address_pathname, "mls", address_dirname,
     3491 			     address_ename, address_component, code);
     3492 			if code ^= 0 then address_dirname = "";
     3493 			end;
     3494 		     if code ^= 0 then call bad_address_syntax (code);
     3495 		     call reject_starnames (address_ename, address_component);
     3496 		     call mail_system_$create_mailing_list_address (address_dirname, address_ename, address_component,
     3497 			address_name, address_comment, p_address_ptr, code);
     3498 		     if code ^= 0 then call bad_address_syntax (code);
     3499 		end;
     3500 
     3501 		else call bad_address_syntax (mlsys_et_$unknown_structured_address_type);
     3502 	     end;
     3503 
     3504 	     else do;				/* all text: user or mail table */
     3505 		call build_string (first_token_in_address, last_token_in_address, "1"b, "0"b, "1"b, address_string);
     3506 		call mlsys_user_mte_syntax_$classify_and_validate (address_string, is_mte, ((32)" "), ((32)" "), code)
     3507 		     ;
     3508 		if code ^= 0 then call bad_address_syntax (code);
     3509 		if is_mte then
     3510 		     call mail_system_$create_mail_table_address (address_string, address_name, address_comment,
     3511 			p_address_ptr, code);
     3512 		else call mail_system_$create_user_mailbox_address (address_string, address_name, address_comment,
     3513 			p_address_ptr, code);
     3514 		if code ^= 0 then call bad_address_syntax (code);
     3515 	     end;
     3516 	end;
     3517 
     3518 	else do;					/* a foreign address */
     3519 	     call build_string (first_token_in_address, last_token_in_address, "1"b, "0"b, "1"b, address_string);
     3520 	     call mail_system_$create_foreign_address (address_string, foreign_system_name, address_route_ptr,
     3521 		address_name, address_comment, p_address_ptr, code);
     3522 	     if code ^= 0 then call bad_address_syntax (code);
     3523 	end;
     3524 
     3525 	if p_pto.validate_addresses then do;		/* caller wants to be sure we can send it mail */
     3526 	     call mail_system_$validate_address (p_address_ptr, "1"b, code);
     3527 	     if code ^= 0 then do;			/* ... invalid */
     3528 		if ^p_pto.include_invalid_addresses then call mail_system_$free_address (p_address_ptr, (0));
     3529 		call bad_address_syntax (code);
     3530 	     end;
     3531 	end;
     3532 
     3533 	code = 0;					/* success */
     3534 
     3535 
     3536 /* Parse completed */
     3537 
     3538 RETURN_FROM_PARSE_ADDRESS:
     3539 	p_ipo = saved_p_ipo;			/* cleanup */
     3540 	if new_host_indeces_ptr ^= null () then free new_host_indeces_ptr -> host_indeces in (system_area);
     3541 	if address_route_ptr ^= null () then free address_route in (system_area);
     3542 
     3543 	call make_token_current (delimiting_token);	/* show the delimiter to our caller */
     3544 	p_token_idx = delimiting_token;
     3545 
     3546 	p_code = code;
     3547 
     3548 	return;
     3549 
     3550 
     3551 
     3552 /* Internal to parse_address: reports syntax errors in the address */
     3553 
     3554 bad_address_syntax:
     3555 	procedure (p_code);
     3556 
     3557 dcl  p_code fixed binary (35) parameter;
     3558 
     3559 dcl  (brace_level, bracket_level, group_level) fixed binary (21);
     3560 dcl  string_lth fixed binary (21);
     3561 
     3562 	     if delimiting_token = 0 then do;		/* must determine last token now */
     3563 		brace_level, bracket_level, group_level = 0;
     3564 		call make_token_current (first_token_in_address);
     3565 		if current.type = COMMENT_TOKEN then	/* skip to the first real token */
     3566 		     call next_real_token ();
     3567 		if (current.type = COLON_TOKEN) then do;/* an RFC733 structured address */
     3568 		     call next_real_token ();
     3569 		     call next_real_token ();		/* past the structure type ... */
     3570 		     call next_real_token ();		/* ... and the other colon */
     3571 		end;
     3572 		do while ((current.type ^= END_OF_TEXT_TOKEN) & (delimiting_token = 0));
     3573 		     if (brace_level <= 0) & (bracket_level <= 0) & (group_level <= 0) then
     3574 			if end_of_address () then	/* found the end of the address */
     3575 			     delimiting_token = token_idx;
     3576 		     if (current.type = LEFTBRACE_TOKEN) then
     3577 						/* keep track of nesting in order to find proper terminator */
     3578 			brace_level = brace_level + 1;
     3579 		     else if (current.type = RIGHTBRACE_TOKEN) then brace_level = brace_level - 1;
     3580 		     else if (current.type = LEFTBRACKET_TOKEN) then bracket_level = bracket_level + 1;
     3581 		     else if (current.type = RIGHTBRACKET_TOKEN) then bracket_level = bracket_level - 1;
     3582 		     else if (current.type = COLON_TOKEN) then group_level = group_level + 1;
     3583 		     else if (current.type = SEMICOLON_TOKEN) then group_level = group_level - 1;
     3584 		     call next_real_token ();		/* keep looking */
     3585 		end;
     3586 		if delimiting_token = 0 then		/* hit the end */
     3587 		     delimiting_token = token_idx;
     3588 	     end;
     3589 
     3590 	     string_lth =				/* may use this value in several places ... */
     3591 		token_list.tokens (delimiting_token - 1).original_start
     3592 		- token_list.tokens (p_token_idx + 1).original_start
     3593 		+ token_list.tokens (delimiting_token - 1).original_lth;
     3594 	     string_lth = max (string_lth, 0);		/* ... above is negative if original_text is a null string */
     3595 
     3596 	     n_syntax_errors = n_syntax_errors + 1;
     3597 	     if p_pto.list_errors then do;		/* caller wants to see the bad text */
     3598 		sel (n_syntax_errors).text_start = token_list.tokens (p_token_idx + 1).original_start;
     3599 		sel (n_syntax_errors).text_lth = string_lth;
     3600 		sel (n_syntax_errors).code = p_code;
     3601 	     end;
     3602 
     3603 	     if p_pto.include_invalid_addresses & (p_address_ptr = null ()) then do;
     3604 		begin;				/* caller wants it in the address list and it isn't already */
     3605 dcl  the_string char (string_lth) defined (original_text) position (token_list.tokens (p_token_idx + 1).original_start);
     3606 		     call mail_system_$create_invalid_address ((the_string), "", "", p_address_ptr, (0));
     3607 		end;
     3608 	     end;
     3609 
     3610 	     code = p_code;				/* set parse_address's output value */
     3611 
     3612 	     go to RETURN_FROM_PARSE_ADDRESS;
     3613 
     3614 	end bad_address_syntax;
     3615 
     3616 
     3617 
     3618 /* Internal to parse_address: determines if the end of the address has been reached */
     3619 
     3620 end_of_address:
     3621 	procedure () returns (bit (1) aligned);
     3622 
     3623 	     if p_ipo.delimiters.eos & (current.type = END_OF_TEXT_TOKEN) then return ("1"b);
     3624 
     3625 	     else if (current.type = END_OF_TEXT_TOKEN) then do;
     3626 						/* shouldn't have reached the end: syntax error */
     3627 		delimiting_token = token_idx;		/* clearly the address stops here */
     3628 		call bad_address_syntax (mlsys_et_$incomplete_address_text);
     3629 	     end;
     3630 
     3631 	     else if p_ipo.delimiters.comma & (current.type = COMMA_TOKEN) then return ("1"b);
     3632 
     3633 	     else if p_ipo.delimiters.angle_bracket & (current.type = RIGHTBRACKET_TOKEN) then return ("1"b);
     3634 
     3635 	     else if p_ipo.delimiters.semicolon & (current.type = SEMICOLON_TOKEN) then return ("1"b);
     3636 
     3637 	     else return ("0"b);
     3638 
     3639 	end end_of_address;
     3640 
     3641 
     3642 
     3643 /* Internal to parse_address: parses a named group */
     3644 
     3645 parse_named_group:
     3646 	procedure ();
     3647 
     3648 dcl  1 local_pto aligned like parse_text_options;
     3649 dcl  1 local_ipo aligned like internal_parse_options;
     3650 
     3651 dcl  an_address_list_ptr pointer;
     3652 dcl  (saved_n_syntax_errors, second_half_comment_start) fixed binary (21);
     3653 
     3654 	     address_name_start = first_token_in_address;
     3655 	     address_name_end = token_idx - 1;		/* up to but not including the ":" */
     3656 
     3657 	     an_address_list_ptr = null ();		/* parse_address_list will set it up */
     3658 
     3659 	     string (local_pto.flags) = ""b;		/* don't list errors, etc. */
     3660 
     3661 	     local_ipo = p_ipo;			/* copy most internal options */
     3662 	     string (local_ipo.delimiters) = ""b;	/* ... except only stop on a semi-colon */
     3663 	     local_ipo.delimiters.semicolon = "1"b;
     3664 
     3665 	     saved_n_syntax_errors = n_syntax_errors;	/* we'll convert all errors into a single error */
     3666 	     call parse_address_list (local_pto, local_ipo, token_idx, an_address_list_ptr, code);
     3667 	     n_syntax_errors = saved_n_syntax_errors;
     3668 
     3669 	     if code ^= 0 then			/* named group is bad: report a single, global error */
     3670 		if code = mlsys_et_$incomplete_address_list_text then
     3671 		     call bad_address_syntax (mlsys_et_$incomplete_named_group_text);
     3672 		else call bad_address_syntax (mlsys_et_$invalid_named_group_text);
     3673 
     3674 	     second_half_comment_start = token_idx + 1;	/* any comment after the semicolon is global */
     3675 
     3676 	     call next_real_token ();			/* must be at the end now */
     3677 	     if ^end_of_address () then do;
     3678 		call free_address_list (an_address_list_ptr, (0));
     3679 		call bad_address_syntax (mlsys_et_$text_follows_address);
     3680 	     end;
     3681 
     3682 	     delimiting_token = token_idx;		/* for cleanup */
     3683 
     3684 	     call build_string (address_name_start, address_name_end, "1"b, "0"b, "1"b, address_name);
     3685 	     call build_string (address_name_start, address_name_end, "0"b, "1"b, "1"b, address_comment);
     3686 	     call build_string (second_half_comment_start, (delimiting_token - 1), "0"b, "1"b, "0"b, address_comment);
     3687 						/* pick up any remaining comment text */
     3688 
     3689 	     call mail_system_$create_named_group_address (address_name, an_address_list_ptr, "1"b, address_comment,
     3690 		p_address_ptr, code);
     3691 	     if code ^= 0 then call bad_address_syntax (code);
     3692 
     3693 	     return;
     3694 
     3695 	end parse_named_group;
     3696 
     3697 
     3698 
     3699 /* Internal to parse_address: construct the text string consisting of all the tokens within the specified range */
     3700 
     3701 build_string:
     3702 	procedure (p_first_token, p_last_token, p_include_non_comments, p_include_comments, p_initialize_string,
     3703 	     p_string);
     3704 
     3705 dcl  (p_first_token, p_last_token) fixed binary (21) parameter;
     3706 dcl  (p_include_non_comments, p_include_comments, p_initialize_string) bit (1) aligned parameter;
     3707 dcl  p_string character (*) varying parameter;
     3708 dcl  saved_current_token fixed binary (21);
     3709 
     3710 	     if p_initialize_string then p_string = "";
     3711 
     3712 	     saved_current_token = token_idx;		/* want to get back here when done */
     3713 	     call make_token_current (p_first_token);	/* start here please */
     3714 
     3715 	     do while (token_idx <= p_last_token);	/* for all tokens in the string */
     3716 		if current.type = COMMENT_TOKEN then
     3717 		     if p_include_comments then do;
     3718 			p_string = p_string || current_token;
     3719 			p_string = p_string || " ";
     3720 		     end;
     3721 		     else ;
     3722 		else do;
     3723 		     if p_include_non_comments then do;
     3724 			p_string = p_string || current_token;
     3725 			p_string = p_string || " ";
     3726 		     end;
     3727 		     else ;
     3728 		end;
     3729 		call next_token ();			/* next, please */
     3730 	     end;
     3731 
     3732 	     if length (p_string) > 0 then		/* it's one larger than it should be */
     3733 		p_string = substr (p_string, 1, (length (p_string) - 1));
     3734 
     3735 	     call make_token_current (saved_current_token);
     3736 						/* back to where we were */
     3737 
     3738 	     return;
     3739 
     3740 	end build_string;
     3741 
     3742 
     3743 
     3744 /* Internal to parse_address: rejects pathnames containing starnames */
     3745 
     3746 reject_starnames:
     3747 	procedure (p_ename, p_component);
     3748 
     3749 dcl  (p_ename, p_component) character (32) parameter;
     3750 dcl  code fixed binary (35);
     3751 
     3752 	     call check_star_name_$entry (p_ename, code); /* first check the entryname */
     3753 	     if code = 0 then			/* ... entryname OK: check the component name (if present) */
     3754 		if p_component ^= "" then call check_star_name_$entry (p_component, code);
     3755 
     3756 	     if (code = 1) | (code = 2) then code = error_table_$nostars;
     3757 
     3758 	     if code ^= 0 then			/* either a starname or invalid syntax */
     3759 		call bad_address_syntax (code);
     3760 
     3761 	     return;
     3762 
     3763 	end reject_starnames;
     3764 
     3765 
     3766 
     3767 /* Internal to parse_address: returns "1"b if the given suffix is present on the supplied name */
     3768 
     3769 has_suffix:
     3770 	procedure (p_name, p_suffix) returns (bit (1) aligned);
     3771 
     3772 dcl  (p_name, p_suffix) character (*) parameter;
     3773 
     3774 	     return ((index (reverse (rtrim (p_name)), reverse (p_suffix)) = 1));
     3775 
     3776 	end has_suffix;
     3777 
     3778 
     3779 
     3780 /* Internal to parse_address: scans the forum search list (already obtained above) for the given entryname */
     3781 
     3782 search_forum_list:
     3783 	procedure (p_ename, p_dirname, p_code);
     3784 
     3785 dcl  (p_ename, p_dirname) character (*) parameter;
     3786 dcl  p_code fixed binary (35) parameter;
     3787 
     3788 dcl  ename character (32) initial ("");
     3789 dcl  idx fixed binary;
     3790 
     3791 	     if length (rtrim (p_ename)) > length (ename) then do;
     3792 		p_code = error_table_$entlong;	/* ... constructed entry name is too long */
     3793 		return;
     3794 	     end;
     3795 
     3796 	     p_code = 1;				/* need do until ... */
     3797 
     3798 	     do idx = 1 to forum_search_list_ptr -> sl_info.num_paths while (p_code ^= 0);
     3799 		if forum_search_list_ptr -> sl_info.paths (idx).code = 0 then
     3800 		     call forum_$get_forum_path (forum_search_list_ptr -> sl_info.paths (idx).pathname, p_ename,
     3801 			((168)" "), ((32)" "), p_code);
     3802 		if p_code = 0 then p_dirname = forum_search_list_ptr -> sl_info.paths (idx).pathname;
     3803 	     end;
     3804 
     3805 	     return;
     3806 
     3807 	end search_forum_list;
     3808 
     3809      end parse_address;
     3810 
     3811 /* Parse an address list */
     3812 
     3813 parse_address_list:
     3814      procedure (p_pto, p_ipo, p_token_idx, p_address_list_ptr, p_code);
     3815 
     3816 dcl  1 p_pto aligned like parse_text_options parameter;
     3817 dcl  1 p_ipo aligned like internal_parse_options parameter;
     3818 dcl  p_token_idx fixed binary (21) parameter;
     3819 dcl  p_address_list_ptr pointer;
     3820 dcl  p_code fixed binary (35) parameter;
     3821 
     3822 dcl  1 local_ipo aligned like internal_parse_options;
     3823 
     3824 dcl  an_address pointer;
     3825 dcl  (first_token_in_address_list, last_token_in_address_list) fixed binary (21);
     3826 dcl  (previous_n_addresses) fixed binary;
     3827 dcl  (created_address_list, done) bit (1) aligned;
     3828 
     3829 
     3830 	local_ipo = p_ipo;				/* use caller's options ... */
     3831 	local_ipo.delimiters.comma = "1"b;		/* ... but also allow a comma delimter */
     3832 
     3833 	if p_address_list_ptr = null () then do;	/* must create the list */
     3834 	     call create_address_list (ADDRESS_LIST_VERSION_2, p_address_list_ptr, code);
     3835 	     if code ^= 0 then do;
     3836 		p_code = code;
     3837 		return;
     3838 	     end;
     3839 	     created_address_list = "1"b;
     3840 	end;
     3841 	else do;					/* already something in the list ... */
     3842 	     created_address_list = "0"b;
     3843 	     previous_n_addresses = p_address_list_ptr -> address_list.n_addresses;
     3844 	end;					/* ... in case we have to flush what we add */
     3845 
     3846 	call make_token_current (p_token_idx);		/* peek ahead to the first token of the list ... */
     3847 	call next_token ();				/* ... to see if it's an empty list: only if at end-of-list */
     3848 
     3849 	first_token_in_address_list = token_idx;	/* here's where the list starts ... */
     3850 	last_token_in_address_list = token_idx;		/* ... and for now: it also ends here */
     3851 
     3852 	done = end_of_address_list ();		/* check for end-of-list before the first address */
     3853 
     3854 	do while (^done);
     3855 
     3856 	     call parse_address (p_pto, local_ipo, p_token_idx, an_address, code);
     3857 	     last_token_in_address_list = token_idx - 1;	/* ... the list now goes at least this far */
     3858 
     3859 	     if an_address ^= null () then do;		/* have an address */
     3860 		call add_address (p_address_list_ptr, an_address, ADDRESS_LIST_VERSION_2, code);
     3861 		if code ^= 0 then call bad_address_list_syntax (code);
     3862 	     end;
     3863 
     3864 	     else if ^p_pto.list_errors & ^p_pto.include_invalid_addresses then
     3865 		if code = 0 then			/* caller hasn't asked us to continue */
     3866 		     call bad_address_list_syntax (mlsys_et_$invalid_address_list_syntax);
     3867 		else if code = mlsys_et_$incomplete_address_text then
     3868 		     call bad_address_list_syntax (mlsys_et_$incomplete_address_list_text);
     3869 		else call bad_address_list_syntax (code);
     3870 
     3871 	     done = end_of_address_list ();		/* check if we're done yet */
     3872 	end;
     3873 
     3874 	code = 0;					/* success: caller will really set the code */
     3875 
     3876 RETURN_FROM_PARSE_ADDRESS_LIST:
     3877 	p_code = code;
     3878 	return;
     3879 
     3880 
     3881 /* Internal to parse_address_list: reports syntax errors in the address list */
     3882 
     3883 bad_address_list_syntax:
     3884 	procedure (p_code);
     3885 
     3886 dcl  p_code fixed binary (35) parameter;
     3887 
     3888 dcl  string_lth fixed binary (21);
     3889 dcl  idx fixed binary;
     3890 
     3891 	     if created_address_list then		/* we created it; we destroy it */
     3892 		call free_address_list (p_address_list_ptr, (0));
     3893 	     else do;				/* we didn't create it: delete what we added */
     3894 		do idx = p_address_list_ptr -> address_list.n_addresses to (previous_n_addresses + 1) by -1;
     3895 		     call delete_address (p_address_list_ptr, idx, (0));
     3896 		end;
     3897 	     end;
     3898 
     3899 	     string_lth =				/* may use this value in several places ... */
     3900 		token_list.tokens (last_token_in_address_list).original_start
     3901 		- token_list.tokens (first_token_in_address_list).original_start
     3902 		+ token_list.tokens (last_token_in_address_list).original_lth;
     3903 	     string_lth = max (string_lth, 0);		/* ... above is negative if original_text is a null string */
     3904 
     3905 	     n_syntax_errors = n_syntax_errors + 1;
     3906 	     if p_pto.list_errors then do;		/* caller wants to see the bad text */
     3907 		sel (n_syntax_errors).text_start = token_list.tokens (first_token_in_address_list).original_start;
     3908 		sel (n_syntax_errors).text_lth = string_lth;
     3909 		sel (n_syntax_errors).code = p_code;
     3910 	     end;
     3911 
     3912 	     code = p_code;				/* set parse_address_list's output value */
     3913 
     3914 	     go to RETURN_FROM_PARSE_ADDRESS_LIST;
     3915 
     3916 	end bad_address_list_syntax;
     3917 
     3918 
     3919 
     3920 /* Internal to parse_address_list: determines if the end of the address list has been reached */
     3921 
     3922 end_of_address_list:
     3923 	procedure () returns (bit (1) aligned);
     3924 
     3925 	     if p_ipo.delimiters.eos & (current.type = END_OF_TEXT_TOKEN) then return ("1"b);
     3926 
     3927 	     else if current.type = END_OF_TEXT_TOKEN then do;
     3928 		last_token_in_address_list = token_idx - 1;
     3929 		call bad_address_list_syntax (mlsys_et_$incomplete_address_list_text);
     3930 	     end;
     3931 
     3932 	     else if p_ipo.delimiters.comma & (current.type = COMMA_TOKEN) then return ("1"b);
     3933 
     3934 	     else if p_ipo.delimiters.angle_bracket & (current.type = RIGHTBRACKET_TOKEN) then return ("1"b);
     3935 
     3936 	     else if p_ipo.delimiters.semicolon & (current.type = SEMICOLON_TOKEN) then return ("1"b);
     3937 
     3938 	     else return ("0"b);
     3939 
     3940 	end end_of_address_list;
     3941 
     3942      end parse_address_list;
     3943 
     3944 /* Convert the printed representation of a date/time into its internal form */
     3945 
     3946 parse_date_time_text:
     3947      procedure (p_pto, p_ipo, p_date_time_text, p_date_time, p_code) /* options (quick) */;
     3948 
     3949 dcl  1 p_pto aligned like parse_text_options parameter;
     3950 dcl  1 p_ipo aligned like internal_parse_options parameter;
     3951 dcl  p_date_time_text character (*) parameter;
     3952 dcl  p_date_time fixed binary (71) parameter;
     3953 dcl  p_code fixed binary (35) parameter;
     3954 
     3955 dcl  date_time fixed binary (71);
     3956 
     3957 dcl  zone_name character (3);
     3958 dcl  zone_offset fixed binary (71);
     3959 dcl  (recognized_zone, standard_multics_zone, negative_offset) bit (1) aligned;
     3960 
     3961 dcl  code fixed binary (35);
     3962 dcl  start fixed binary (21);
     3963 dcl  (day_of_week, day_of_month, month, year, hour, minute, second, hour_offset, minute_offset, idx) fixed binary;
     3964 
     3965 
     3966 	call lex_and_parse_prologue (p_date_time_text, "0"b, "0"b);
     3967 						/* no cleanup handler here: caller's set one up already */
     3968 
     3969 	call lex_date_time (p_pto, p_ipo, code);	/* "-", "+", ":", and whitespace are delimiters */
     3970 	if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     3971 
     3972 
     3973 /* Syntax of a date is:  [ <day-of-week> [ "," ] ] <date> [ "," ] <time> */
     3974 
     3975 	token_idx = 0;				/* start at beginning */
     3976 	call next_token ();
     3977 
     3978 	if current.type ^= WORD_TOKEN then go to TRY_CONVERT_DATE_TO_BINARY;
     3979 
     3980 	day_of_week = 0;				/* assume not a day of week */
     3981 	do idx = lbound (DAY_OF_WEEKS, 1) to hbound (DAY_OF_WEEKS, 1) while (day_of_week = 0);
     3982 	     if translate (current_token, UPPERCASE, LOWERCASE) = DAY_OF_WEEKS (idx) then
     3983 		day_of_week = DAY_OF_WEEK_VALUES (idx);
     3984 	end;
     3985 
     3986 	if day_of_week ^= 0 then do;			/* a day of week is present */
     3987 	     call next_token ();			/* ... next token may be a comma */
     3988 	     if current.type = COMMA_TOKEN then call next_token ();
     3989 	end;
     3990 
     3991 
     3992 /* Syntax of <date> is:  1*2<digits> [ "-" ] <month> [ "-" ] { 2<digits> | 4<digits> } */
     3993 
     3994 	if current.type ^= WORD_TOKEN then go to TRY_CONVERT_DATE_TO_BINARY;
     3995 	if (current.token_lth < 1) | (current.token_lth > 2) then go to TRY_CONVERT_DATE_TO_BINARY;
     3996 						/* digits will appear as a 2 or 4 character word */
     3997 	day_of_month = cv_dec_check_ (current_token, code);
     3998 	if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     3999 
     4000 	call next_token ();				/* may be followed by an optional hyphen ... */
     4001 	if current.type = HYPHEN_TOKEN then call next_token ();
     4002 
     4003 	if current.type ^= WORD_TOKEN then go to TRY_CONVERT_DATE_TO_BINARY;
     4004 	month = 0;				/* must be a month name */
     4005 	do idx = lbound (MONTHS, 1) to hbound (MONTHS, 1) while (month = 0);
     4006 	     if translate (current_token, UPPERCASE, LOWERCASE) = MONTHS (idx) then month = MONTH_VALUES (idx);
     4007 	end;
     4008 	if month = 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     4009 
     4010 	call next_token ();				/* may be followed by an optional hyphen ... */
     4011 	if current.type = HYPHEN_TOKEN then call next_token ();
     4012 
     4013 	if current.type ^= WORD_TOKEN then go to TRY_CONVERT_DATE_TO_BINARY;
     4014 	if (current.token_lth ^= 2) & (current.token_lth ^= 4) then go to TRY_CONVERT_DATE_TO_BINARY;
     4015 						/* year must be two or four digits ... */
     4016 	if current.token_lth = 2 then			/* ... assume 20th century if 2 digits */
     4017 	     year = cv_dec_check_ (current_token, code) + 1900;
     4018 	else year = cv_dec_check_ (current_token, code);
     4019 	if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     4020 
     4021 	call next_token ();				/* an optional comma may appear here */
     4022 	if current.type = COMMA_TOKEN then call next_token ();
     4023 
     4024 
     4025 /* Syntax of <time> is:  <hour> <zone> */
     4026 
     4027 /* Syntax of <hour> is:  <1*2digits> [ ":" ] <1*2digits> [ ":" <1*2digits> ] */
     4028 
     4029 	if current.type ^= WORD_TOKEN then go to TRY_CONVERT_DATE_TO_BINARY;
     4030 	if current.token_lth <= 2 then do;		/* hour is separate */
     4031 	     hour = cv_dec_check_ (current_token, code);
     4032 	     if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     4033 	     call next_token ();			/* ... skip to the minute/second and/or ":" */
     4034 	     if current.type = COLON_TOKEN then call next_token ();
     4035 	     start = 1;				/* ... minute starts at the beginning of the word */
     4036 	end;
     4037 	else if (current.token_lth >= 3) & (current.token_lth <= 6) then do;
     4038 						/* hour, minute, and seconds all in one word */
     4039 	     if mod (current.token_lth, 2) = 1 then do;	/* a single digit hour ... */
     4040 		hour = cv_dec_check_ ((substr (current_token, 1, 1)), code);
     4041 		start = 2;			/* ... minute starts in the middle of the word */
     4042 	     end;
     4043 	     else do;
     4044 		hour = cv_dec_check_ ((substr (current_token, 1, 2)), code);
     4045 		start = 3;			/* ... minute starts in the middle of the word */
     4046 	     end;
     4047 	     if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     4048 	end;
     4049 	else go to TRY_CONVERT_DATE_TO_BINARY;		/* can't be part of the time */
     4050 
     4051 	if current.type ^= WORD_TOKEN then go to TRY_CONVERT_DATE_TO_BINARY;
     4052 	if (current.token_lth - start + 1) <= 2 then do;	/* minute ends this token */
     4053 	     minute = cv_dec_check_ ((substr (current_token, start)), code);
     4054 	     if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     4055 	     call next_token ();			/* ... skip to the seconds (maybe) */
     4056 	     if current.type = COLON_TOKEN then call next_token ();
     4057 	     start = 1;				/* ... try it as seconds */
     4058 	end;
     4059 	else if (current.token_lth - start + 1) <= 4 then do;
     4060 						/* minutes and seconds together */
     4061 	     if mod ((current.token_lth - start + 1), 2) = 1 then do;
     4062 		minute = cv_dec_check_ ((substr (current_token, start, 1)), code);
     4063 		start = start + 1;			/* ... skip to the seconds */
     4064 	     end;
     4065 	     else do;				/* two digit minutes */
     4066 		minute = cv_dec_check_ ((substr (current_token, start, 2)), code);
     4067 		start = start + 2;			/* ... skip to the seconds */
     4068 	     end;
     4069 	     if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     4070 	end;
     4071 	else go to TRY_CONVERT_DATE_TO_BINARY;		/* can't be a time */
     4072 
     4073 	if current.type = WORD_TOKEN then		/* there may be seconds here */
     4074 	     if (current.token_lth - start + 1) <= 2 then do;
     4075 						/* ... it's the right length */
     4076 		second = cv_dec_check_ ((substr (current_token, start)), code);
     4077 		if code = 0 then call next_token ();	/* ... it worked */
     4078 		else if start ^= 1 then		/* ... middle of a word: bad syntax */
     4079 		     go to TRY_CONVERT_DATE_TO_BINARY;
     4080 		else second = 0;			/* ... probably a time zone */
     4081 	     end;
     4082 	     else if start ^= 1 then			/* ... wrong length for seconds in the middle of a word */
     4083 		go to TRY_CONVERT_DATE_TO_BINARY;
     4084 	     else second = 0;			/* ... probably a time zone */
     4085 	else second = 0;				/* ... hopefully a time zone */
     4086 
     4087 
     4088 /* Syntax of <zone> is:  { [ "-" ] <zone-name> } | { { "+" | "-" } 4<digits> } */
     4089 
     4090 	if current.type = WORD_TOKEN then do;		/* must be a time zone */
     4091 TRY_AS_TIME_ZONE_NAME:
     4092 	     if current.token_lth > 3 then		/* ... too long to be a time zone name */
     4093 		go to TRY_CONVERT_DATE_TO_BINARY;
     4094 	     zone_name = translate (current_token, UPPERCASE, LOWERCASE);
     4095 	     recognized_zone, standard_multics_zone = "0"b;
     4096 	     if p_ipo.multics_format then do;		/* ... try the Multics time zones first */
     4097 		call lookup_multics_zone_name ();
     4098 		if ^recognized_zone then call lookup_rfc822_zone_name ();
     4099 	     end;
     4100 	     else do;				/* ... try the RFC822 zone names first */
     4101 		call lookup_rfc822_zone_name ();
     4102 		if ^recognized_zone then call lookup_multics_zone_name ();
     4103 	     end;
     4104 	     if ^recognized_zone then go to TRY_CONVERT_DATE_TO_BINARY;
     4105 	end;
     4106 
     4107 	else if (current.type = PLUS_TOKEN) | (current.type = HYPHEN_TOKEN) then do;
     4108 	     negative_offset = (current.type = HYPHEN_TOKEN);
     4109 	     call next_token ();			/* ... could be an explicit offset or a zone name */
     4110 	     if current.type ^= WORD_TOKEN then		/* ... sorry: must be digits or a zone name */
     4111 		go to TRY_CONVERT_DATE_TO_BINARY;
     4112 	     if current.token_lth ^= 4 then		/* ... an offset is exactly four digits ... */
     4113 		if negative_offset then
     4114 		     go to TRY_AS_TIME_ZONE_NAME;	/* ... preceeded by a "-": assume it's a time zone name */
     4115 		else go to TRY_CONVERT_DATE_TO_BINARY;	/* ... preceeded by a "+": can't be a zone name either */
     4116 	     hour_offset = cv_dec_check_ ((substr (current_token, 1, 2)), code);
     4117 	     if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     4118 	     minute_offset = cv_dec_check_ ((substr (current_token, 3, 2)), code);
     4119 	     if code ^= 0 then go to TRY_CONVERT_DATE_TO_BINARY;
     4120 	     if ((hour_offset < 12) & (minute_offset > 59)) | ((hour_offset = 12) & (minute_offset ^= 0)) then
     4121 		go to TRY_CONVERT_DATE_TO_BINARY;	/* ... offset isn't valid */
     4122 	     standard_multics_zone = "0"b;		/* ... might be a standard zone but don't bother to check */
     4123 	     zone_offset = ((60 * hour_offset) + minute_offset) * ONE_MINUTE;
     4124 	     if negative_offset then zone_offset = -zone_offset;
     4125 	end;					/* ... west of GMT */
     4126 
     4127 	else go to TRY_CONVERT_DATE_TO_BINARY;		/* bad zone */
     4128 
     4129 	call next_token ();				/* shouldn't be anything else left ... */
     4130 	if current.type ^= END_OF_TEXT_TOKEN then go to TRY_CONVERT_DATE_TO_BINARY;
     4131 
     4132 	call lex_and_parse_epilogue ("1"b);
     4133 	call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     4134 
     4135 
     4136 /* Control arrives here if the date string parsed properly: try to convert the results into an actual clock reading */
     4137 
     4138 	if ^standard_multics_zone then		/* will add offset later...  */
     4139 	     zone_name = "GMT";			/* ... so act like it's universal time */
     4140 
     4141 	call encode_clock_value_ (month, day_of_month, year, hour, minute, second, 0, day_of_week, zone_name, date_time,
     4142 	     code);
     4143 
     4144 	if code = 0 then				/* it converted ... */
     4145 	     if standard_multics_zone then		/* ... and it's a recognized time zone */
     4146 		p_date_time = date_time;
     4147 	     else p_date_time = date_time - zone_offset;	/* ... zone known only to us: offset alreay applied once */
     4148 
     4149 	p_code = code;				/* reflect success or failure */
     4150 
     4151 	return;
     4152 
     4153 
     4154 /* Control arrives here if and only if the date/time string wasn't parseable: try the Multics standard encoding routine
     4155*   just to be certain */
     4156 
     4157 TRY_CONVERT_DATE_TO_BINARY:
     4158 	call lex_and_parse_epilogue ("1"b);
     4159 	call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     4160 
     4161 	call convert_date_to_binary_ (p_date_time_text, p_date_time, p_code);
     4162 
     4163 	return;
     4164 
     4165 
     4166 
     4167 /* Internal to parse_date_time_text: determines if the given zone name is a Multics standard time zone */
     4168 
     4169 lookup_multics_zone_name:
     4170 	procedure ();
     4171 
     4172 dcl  (idx, jdx) fixed binary;
     4173 
     4174 	     standard_multics_zone = "0"b;		/* need do until */
     4175 
     4176 	     do idx = 1 to ti_zone.number_lang while (^standard_multics_zone);
     4177 		do jdx = 1 to ti_zone.number_zone while (^standard_multics_zone);
     4178 		     if zone_name = translate (ti_zone.short (idx, jdx), UPPERCASE, LOWERCASE) then
     4179 			recognized_zone, standard_multics_zone = "1"b;
     4180 		end;
     4181 	     end;
     4182 
     4183 	     return;
     4184 
     4185 	end lookup_multics_zone_name;
     4186 
     4187 
     4188 
     4189 /* Internal to parse_date_time_text: determines if the given zone name is an RFC822 standard time zone */
     4190 
     4191 lookup_rfc822_zone_name:
     4192 	procedure ();
     4193 
     4194 dcl  (zone_idx, idx) fixed binary;
     4195 
     4196 	     zone_idx = 0;
     4197 
     4198 	     do idx = lbound (RFC822_ZONES, 1) to hbound (RFC822_ZONES, 1) while (zone_idx = 0);
     4199 		if zone_name = RFC822_ZONES (idx) then zone_idx = idx;
     4200 	     end;
     4201 
     4202 	     if zone_idx ^= 0 then do;		/* found it */
     4203 		recognized_zone = "1"b;
     4204 		zone_offset = RFC822_ZONE_OFFSETS (zone_idx) * ONE_MINUTE;
     4205 	     end;
     4206 
     4207 	     return;
     4208 
     4209 	end lookup_rfc822_zone_name;
     4210 
     4211      end parse_date_time_text;
     4212 
     4213 /* Convert the printed representation of a Message-ID into its internal form */
     4214 
     4215 parse_message_id_text:
     4216      procedure (p_pto, p_ipo, p_message_id_text, p_message_id) /* options (quick) */;
     4217 
     4218 dcl  1 p_pto aligned like parse_text_options parameter;
     4219 dcl  1 p_ipo aligned like internal_parse_options parameter;
     4220 dcl  p_message_id_text character (*) parameter;
     4221 dcl  p_message_id bit (72) aligned;
     4222 
     4223 dcl  1 request_id aligned,				/* a request ID broken into its component parts */
     4224        2 year character (2) unaligned,
     4225        2 month character (2) unaligned,
     4226        2 day_of_month character (2) unaligned,
     4227        2 hour character (2) unaligned,
     4228        2 minute character (2) unaligned,
     4229        2 second character (2) unaligned,
     4230        2 period character (1) unaligned,		/* a "." must be in here */
     4231        2 microsecond character (6) unaligned;
     4232 
     4233 dcl  system_name character (256) varying;
     4234 dcl  (system_is_local, continue) bit (1) aligned;
     4235 dcl  (date_time, microsecond) fixed binary (71);
     4236 dcl  (start_of_string, end_of_string) fixed binary (21);
     4237 dcl  (day_of_month, month, year, hour, minute, second) fixed binary;
     4238 
     4239 
     4240 	call lex_and_parse_prologue (p_message_id_text, "1"b, "0"b);
     4241 						/* no cleanup handler here: caller's set one up already */
     4242 
     4243 	call lex_message_id (p_pto, p_ipo, code);	/* standard address breaks without preserving comments */
     4244 
     4245 	if code ^= 0 then do;			/* unable to lexically analyze the string */
     4246 CANT_INTERPRET_MESSAGE_ID:				/* ... most errors during the parse will come here */
     4247 	     call encode_foreign_id (p_message_id_text, p_ipo.default_system_name, p_message_id);
     4248 	     call lex_and_parse_epilogue ("1"b);
     4249 	     call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     4250 	     return;
     4251 	end;
     4252 
     4253 
     4254 /* format: off */
     4255 /* The general syntax of a message identifier is
     4256*
     4257*		< STRING at HOST >
     4258*
     4259*   If the HOST is the local system or is ommitted and the default host is the local system, the STRING is expected to be a
     4260*   standard Multics request identifier (ie: YYMMDDHHMMSS.FFFFFF) */
     4261 /* format: on */
     4262 
     4263 	token_idx = 0;				/* start at the beginning */
     4264 	call next_token ();
     4265 
     4266 	if current.type ^= LEFTBRACKET_TOKEN then go to CANT_INTERPRET_MESSAGE_ID;
     4267 	call next_token ();
     4268 
     4269 	start_of_string = token_idx;			/* the string portion starts here if all goes well */
     4270 
     4271 	continue = "1"b;
     4272 	do while (continue);
     4273 	     if current.type = END_OF_TEXT_TOKEN then go to CANT_INTERPRET_MESSAGE_ID;
     4274 	     else if current.type = RIGHTBRACKET_TOKEN then continue = "0"b;
     4275 	     else if current.type = AT_TOKEN then continue = "0"b;
     4276 	     else call next_token ();			/* part of the string ... */
     4277 	end;
     4278 
     4279 	end_of_string = token_idx - 1;		/* string part is everything up to here ... */
     4280 
     4281 	if current.type = AT_TOKEN then do;		/* a host name should follow */
     4282 	     call next_token ();
     4283 	     if current.type ^= WORD_TOKEN then go to CANT_INTERPRET_MESSAGE_ID;
     4284 	     system_name = current_token;
     4285 	     call next_token ();
     4286 	end;
     4287 	else system_name = "";			/* we'll use the default system here */
     4288 
     4289 	if current.type ^= RIGHTBRACKET_TOKEN then go to CANT_INTERPRET_MESSAGE_ID;
     4290 
     4291 	call next_token ();
     4292 	if current.type ^= END_OF_TEXT_TOKEN then go to CANT_INTERPRET_MESSAGE_ID;
     4293 
     4294 
     4295 /* Have the text portion of the ID and its system name */
     4296 
     4297 	address_string = "";			/* build the actual text portion of the ID */
     4298 	call make_token_current (start_of_string);
     4299 	do while (token_idx <= end_of_string);
     4300 	     if token_idx > start_of_string then	/* ... 1 space between tokens */
     4301 		address_string = address_string || " ";
     4302 	     address_string = address_string || current_token;
     4303 	     call next_token ();
     4304 	end;
     4305 
     4306 	if system_name = "" then do;			/* no explicit system name: use the default */
     4307 	     system_name = p_ipo.default_system_name;
     4308 	     system_is_local = p_ipo.default_system_is_local;
     4309 	end;
     4310 	else system_is_local = mlsys_nit_interface_$is_local_system (system_name);
     4311 
     4312 	if system_is_local & (length (address_string) = length (string (request_id))) then do;
     4313 	     string (request_id) = address_string;	/* should be a Multics request ID */
     4314 	     if request_id.period ^= PERIOD then go to ENCODE_FOREIGN_ID;
     4315 	     year = cv_dec_check_ (request_id.year, code) + 1900;
     4316 	     if code = 0 then month = cv_dec_check_ (request_id.month, code);
     4317 	     if code = 0 then day_of_month = cv_dec_check_ (request_id.day_of_month, code);
     4318 	     if code = 0 then hour = cv_dec_check_ (request_id.hour, code);
     4319 	     if code = 0 then minute = cv_dec_check_ (request_id.minute, code);
     4320 	     if code = 0 then second = cv_dec_check_ (request_id.second, code);
     4321 	     if code = 0 then microsecond = cv_dec_check_ (request_id.microsecond, code);
     4322 	     if code = 0 then
     4323 		call encode_clock_value_ (month, day_of_month, year, hour, minute, second, microsecond, 0, "GMT",
     4324 		     date_time, code);
     4325 	     if code ^= 0 then			/* wasn't really a request ID */
     4326 		go to ENCODE_FOREIGN_ID;
     4327 	     call encode_local_id (date_time, p_message_id);
     4328 	end;
     4329 
     4330 	else					/* either not a request ID or not local */
     4331 ENCODE_FOREIGN_ID:
     4332 	     call encode_foreign_id ((address_string), system_name, p_message_id);
     4333 
     4334 	call lex_and_parse_epilogue ("1"b);
     4335 	call cu_$shrink_stack_frame (stack_extension_ptr, (0));
     4336 
     4337 	return;
     4338 
     4339      end parse_message_id_text;
     4340 
     4341 /* Initialize data required to lex/parse a given string */
     4342 
     4343 lex_and_parse_prologue:
     4344      procedure (p_original_text, p_address_parse, p_address_list_parse);
     4345 
     4346 dcl  p_original_text character (*) parameter;
     4347 dcl  p_address_parse bit (1) aligned parameter;		/* ON => create data necessary to parse an address */
     4348 dcl  p_address_list_parse bit (1) aligned parameter;	/* ON => create data necessary to parse an address list */
     4349 
     4350 	original_text_ptr = addr (p_original_text);
     4351 	original_text_lth = length (p_original_text);
     4352 
     4353 	lex_and_parse_pointers = null ();		/* be sure the ones we don't set here are null */
     4354 
     4355 	call cu_$grow_stack_frame (STACK_EXTENSION, stack_extension_ptr, (0));
     4356 	stack_extension_used = 0;
     4357 
     4358 	call get_space (size (token_list), lex_and_parse_pointers.token_list_ptr);
     4359 
     4360 	call get_space (size (unquoted_text), lex_and_parse_pointers.unquoted_text_ptr);
     4361 
     4362 	if p_address_parse then do;			/* need host name list and a work string */
     4363 	     call get_space (size (host_indeces), lex_and_parse_pointers.host_indeces_ptr);
     4364 	     call get_space (size (address_string), lex_and_parse_pointers.address_string_ptr);
     4365 	     call get_space (size (address_name), lex_and_parse_pointers.address_name_ptr);
     4366 	     call get_space (size (address_comment), lex_and_parse_pointers.address_comment_ptr);
     4367 	end;
     4368 
     4369 	if p_address_list_parse then			/* need list of syntax errors for caller */
     4370 	     call get_space (size (sel), lex_and_parse_pointers.sel_ptr);
     4371 
     4372 	stack_truncation_ptr =
     4373 	     addwordno (stack_extension_ptr, (stack_extension_used + 16 - mod (stack_extension_used, 16)));
     4374 	call cu_$shrink_stack_frame (stack_truncation_ptr, (0));
     4375 
     4376 	n_syntax_errors = 0;			/* count errors in the string no matter what */
     4377 
     4378 	return;
     4379 
     4380 
     4381 
     4382 /* Internal to lex_and_parse_prologue: gets the requested amount of space on the stack or in the system free area */
     4383 
     4384 get_space:
     4385 	procedure (p_n_words, p_pointer);
     4386 
     4387 dcl  p_n_words fixed binary (18) parameter;
     4388 dcl  p_pointer pointer parameter;
     4389 dcl  words (p_n_words) bit (36) aligned based (p_pointer);
     4390 
     4391 	     if (p_n_words + stack_extension_used) <= STACK_EXTENSION then do;
     4392 		p_pointer = addwordno (stack_extension_ptr, stack_extension_used);
     4393 		stack_extension_used = stack_extension_used + p_n_words + mod (p_n_words, 2);
     4394 	     end;
     4395 
     4396 	     else allocate words in (system_area) set (p_pointer);
     4397 
     4398 	     return;
     4399 
     4400 	end get_space;
     4401 
     4402      end lex_and_parse_prologue;
     4403 
     4404 /* Cleanup after a lex/parse operation */
     4405 
     4406 lex_and_parse_epilogue:
     4407      procedure (p_release_sel);
     4408 
     4409 dcl  p_release_sel bit (1) aligned;
     4410 
     4411 	if lex_and_parse_pointers.token_list_ptr ^= null () then
     4412 	     if baseno (lex_and_parse_pointers.token_list_ptr) ^= baseno (stackframeptr ()) then
     4413 		free token_list in (system_area);
     4414 
     4415 	if lex_and_parse_pointers.unquoted_text_ptr ^= null () then
     4416 	     if baseno (lex_and_parse_pointers.unquoted_text_ptr) ^= baseno (stackframeptr ()) then
     4417 		free unquoted_text in (system_area);
     4418 
     4419 	if lex_and_parse_pointers.host_indeces_ptr ^= null () then
     4420 	     if baseno (lex_and_parse_pointers.host_indeces_ptr) ^= baseno (stackframeptr ()) then
     4421 		free host_indeces in (system_area);
     4422 
     4423 	if lex_and_parse_pointers.address_string_ptr ^= null () then
     4424 	     if baseno (lex_and_parse_pointers.address_string_ptr) ^= baseno (stackframeptr ()) then
     4425 		free address_string in (system_area);
     4426 	if lex_and_parse_pointers.address_name_ptr ^= null () then
     4427 	     if baseno (lex_and_parse_pointers.address_name_ptr) ^= baseno (stackframeptr ()) then
     4428 		free address_name in (system_area);
     4429 	if lex_and_parse_pointers.address_comment_ptr ^= null () then
     4430 	     if baseno (lex_and_parse_pointers.address_comment_ptr) ^= baseno (stackframeptr ()) then
     4431 		free address_comment in (system_area);
     4432 
     4433 	lex_and_parse_pointers.all_but_sel_ptr = null (); /* don't free the above more than once */
     4434 
     4435 	if p_release_sel & (lex_and_parse_pointers.sel_ptr ^= null ()) then do;
     4436 	     if baseno (lex_and_parse_pointers.sel_ptr) ^= baseno (stackframeptr ()) then free sel in (system_area);
     4437 	     lex_and_parse_pointers.sel_ptr = null ();	/* caller doesn't want to use the list */
     4438 	end;
     4439 
     4440 	return;
     4441 
     4442      end lex_and_parse_epilogue;
     4443 
     4444 /* Lexical analysis */
     4445 
     4446 lex_string:
     4447      procedure (p_pto, p_ipo, p_code);
     4448 
     4449 	return;					/* not an entrypoint */
     4450 
     4451 dcl  1 p_pto aligned like parse_text_options parameter;
     4452 dcl  1 p_ipo aligned like internal_parse_options parameter;
     4453 dcl  p_code fixed binary (35) parameter;
     4454 
     4455 dcl  remaining_text character (original_text_lth - text_used) unaligned based (addcharno (original_text_ptr, text_used));
     4456 dcl  text_used fixed binary (21);			/* amount of text already lex'ed */
     4457 
     4458 dcl  unquoted_used fixed binary (21);			/* amount of workspace occupied by unquoting quoted strings */
     4459 
     4460 dcl  use_date_time_breaks bit (1) aligned;		/* ON => use special breaks for date/time sequences */
     4461 dcl  save_comments bit (1) aligned;			/* ON => make tokens for any comments */
     4462 dcl  braces_special bit (1) aligned;			/* ON => treat braces as structured delimiters */
     4463 
     4464 dcl  (original_start, unquoted_start, parenthesis_level, brace_level, idx) fixed binary (21);
     4465 
     4466 
     4467 /* Lexical analysis for address and address-list strings: the accepted delimiters are whitespace, comments, and the
     4468*   address break characters (",", ":", ";", "{", "}", "<", ">". and "@"); quoted strings are also recognized; braces are
     4469*   treated as balanced delimiters which may be nested; comments are placed in the token list to aid in the construction of
     4470*   the address's printed representation */
     4471 
     4472 lex_address:
     4473      entry (p_pto, p_ipo, p_code);
     4474 
     4475 	use_date_time_breaks = "0"b;
     4476 	save_comments = "1"b;			/* comments are preserved for printed representations */
     4477 	braces_special = "1"b;			/* braces nest */
     4478 	go to LEXICAL_ANALYSIS_SETUP;
     4479 
     4480 
     4481 /* Lexical analysis for date/time strings: the accepted delimiters are whitespace, comments, ",", "-", "+", and ":";
     4482*   quoted strings are also recognized; comments are not placed in the token list, however */
     4483 
     4484 lex_date_time:
     4485      entry (p_pto, p_ipo, p_code);
     4486 
     4487 	use_date_time_breaks = "1"b;			/* use special break characters */
     4488 	save_comments = "0"b;
     4489 	braces_special = "0"b;
     4490 	go to LEXICAL_ANALYSIS_SETUP;
     4491 
     4492 
     4493 /* Lexical analysis for message-id strings: the accepted delimiters are whitespace, comments, and the address breaks (see
     4494*   above); quoted strings are also recognized; comments are not placed in the token list, however */
     4495 
     4496 lex_message_id:
     4497      entry (p_pto, p_ipo, p_code);
     4498 
     4499 	use_date_time_breaks = "0"b;			/* use the normal address break characters */
     4500 	save_comments = "0"b;
     4501 	braces_special = "0"b;
     4502 	go to LEXICAL_ANALYSIS_SETUP;
     4503 
     4504 
     4505 LEXICAL_ANALYSIS_SETUP:
     4506 	token_list.n_tokens_used = -1;		/* haven't found anything yet */
     4507 
     4508 	call make_token (0, 0);			/* the start of text marker */
     4509 	token.type = START_OF_TEXT_TOKEN;
     4510 	token.token_ptr = addr (NL);
     4511 	token.token_lth = 0;
     4512 
     4513 	unquoted_used = 0;
     4514 	text_used = 0;
     4515 
     4516 	brace_level = 0;				/* at top level of the parse */
     4517 
     4518 	do while (text_used < original_text_lth);	/* while there's something left */
     4519 
     4520 	     idx = verify (remaining_text, WHITESPACE);	/* skip leading whitespace */
     4521 
     4522 	     if idx = 0 then			/* end of the meaningfull text */
     4523 		text_used = original_text_lth;
     4524 
     4525 	     else do;				/* something still there */
     4526 
     4527 		text_used = text_used + idx - 1;	/* pass the whitespace, please */
     4528 
     4529 		if substr (remaining_text, 1, 1) = OPEN_PAREN then call collect_comment ();
     4530 						/* start of a comment */
     4531 
     4532 		else if substr (remaining_text, 1, 1) = CLOSE_PAREN then go to UNBALANCED_COMMENT_DELIMITERS;
     4533 						/* end of comment without a beginning */
     4534 
     4535 		else if braces_special & (substr (remaining_text, 1, 1) = LEFT_BRACE) then do;
     4536 						/* another level of structured addresses */
     4537 		     brace_level = brace_level + 1;
     4538 		     call make_token ((text_used + 1), 1);
     4539 						/* make a token for it */
     4540 		     token.token_ptr = addr (substr (remaining_text, 1, 1));
     4541 		     token.token_lth = 1;
     4542 		     token.type = LEFTBRACE_TOKEN;
     4543 		     text_used = text_used + 1;	/* skip the open brace */
     4544 		end;
     4545 
     4546 		else if braces_special & (substr (remaining_text, 1, 1) = RIGHT_BRACE) then
     4547 		     if brace_level = 0 then		/* end of structured address without a beginning */
     4548 			go to UNBALANCED_BRACES;
     4549 		     else do;			/* end of a level of structuring */
     4550 			brace_level = brace_level - 1;
     4551 			call make_token ((text_used + 1), 1);
     4552 			token.token_ptr = addr (substr (remaining_text, 1, 1));
     4553 			token.token_lth = 1;
     4554 			token.type = RIGHTBRACE_TOKEN;
     4555 			text_used = text_used + 1;
     4556 		     end;
     4557 
     4558 		else if substr (remaining_text, 1, 1) = QUOTE then call collect_word ();
     4559 						/* a word starting with a quote */
     4560 
     4561 		else				/* a word or a delimiter clearly follows ... */
     4562 		     if use_date_time_breaks then	/* date/time strings have strange break characters */
     4563 		     if index (DATE_TIME_BREAKS, substr (remaining_text, 1, 1)) ^= 0 then do;
     4564 						/* a date/time string delimiter: make a token */
     4565 			call make_token ((text_used + 1), 1);
     4566 			token.token_ptr = addr (substr (remaining_text, 1, 1));
     4567 			token.token_lth = 1;	/* by definition */
     4568 			token.type = index (DATE_TIME_BREAKS, substr (remaining_text, 1, 1));
     4569 			text_used = text_used + 1;	/* skip over it */
     4570 		     end;
     4571 		     else call collect_word ();	/* simple token */
     4572 
     4573 		else				/* non-date/time string */
     4574 		     if (brace_level = 0) & (index (NORMAL_BREAKS, substr (remaining_text, 1, 1)) ^= 0) then do;
     4575 						/* a normal delimiter: make a token for it */
     4576 		     call make_token ((text_used + 1), 1);
     4577 		     token.token_ptr = addr (substr (remaining_text, 1, 1));
     4578 		     token.token_lth = 1;		/* by definition */
     4579 		     token.type = index (NORMAL_BREAKS, substr (remaining_text, 1, 1));
     4580 		     text_used = text_used + 1;	/* skip over it */
     4581 		end;
     4582 
     4583 		else call collect_word ();		/* simple token */
     4584 	     end;
     4585 	end;
     4586 
     4587 	if brace_level > 0 then			/* started a structured address and never finished it */
     4588 	     go to UNBALANCED_BRACES;
     4589 
     4590 
     4591 /* Lex is complete: add a final token to represent the end of the string */
     4592 
     4593 	call make_token ((original_text_lth + 1), 0);	/* this token isn't really in the string at all */
     4594 	token.token_ptr = addr (NL);			/* need to point somewhere ... */
     4595 	token.token_lth = 0;			/* ... even though it doesn't comprise anything */
     4596 	token.type = END_OF_TEXT_TOKEN;		/* obviously */
     4597 
     4598 	p_code = 0;				/* it parsed */
     4599 
     4600 	return;
     4601 
     4602 
     4603 /* Control arrives at one of the following labels when some form of unbalanced delimiter is found in the string */
     4604 
     4605 UNBALANCED_BRACES:
     4606 	p_code = mlsys_et_$unbalanced_braces;
     4607 	return;
     4608 
     4609 UNBALANCED_COMMENT_DELIMITERS:
     4610 	p_code = mlsys_et_$unbalanced_parentheses;
     4611 	return;
     4612 
     4613 UNBALANCED_QUOTES:
     4614 	p_code = mlsys_et_$unbalanced_quotes;
     4615 	return;
     4616 
     4617 /* Internal to lex_string: add a new token to the token list */
     4618 
     4619 make_token:
     4620 	procedure (p_original_start, p_original_lth);
     4621 
     4622 dcl  p_original_start fixed binary (21) parameter;	/* where it starts in the input string */
     4623 dcl  p_original_lth fixed binary (21) parameter;		/* and how long it is */
     4624 
     4625 	     token_list.n_tokens_used = token_list.n_tokens_used + 1;
     4626 
     4627 	     token_ptr = addr (token_list.tokens (token_list.n_tokens_used));
     4628 
     4629 	     token.original_start = p_original_start;
     4630 	     token.original_lth = p_original_lth;
     4631 	     string (token.flags) = ""b;		/* be nice to caller */
     4632 
     4633 	     return;
     4634 
     4635 	end make_token;
     4636 
     4637 
     4638 
     4639 /* Internal to lex_string: collect the text which comprises a comment; ie: any text between balanced parentheses */
     4640 
     4641 collect_comment:
     4642 	procedure ();
     4643 
     4644 	     original_start = text_used + 1;		/* the supplied form starts at the ( */
     4645 	     unquoted_start = unquoted_used + 1;
     4646 
     4647 	     parenthesis_level = 1;			/* in first level of parens */
     4648 	     text_used = text_used + 1;		/* and move past the starting ( */
     4649 
     4650 	     do while ((parenthesis_level > 0) & (text_used < original_text_lth));
     4651 
     4652 		if p_ipo.multics_format then
     4653 		     idx = search (remaining_text, QUOTE_PARENS_NL);
     4654 		else idx = search (remaining_text, BACKSLASH_PARENS_NL);
     4655 						/* find next delimiter */
     4656 
     4657 		if idx = 0 then			/* doesn't terminate properly: punt */
     4658 		     go to UNBALANCED_COMMENT_DELIMITERS;
     4659 
     4660 		if idx > 1 then do;			/* something to put into the comment */
     4661 		     substr (unquoted_text, (unquoted_used + 1), (idx - 1)) = substr (remaining_text, 1, (idx - 1));
     4662 		     unquoted_used = unquoted_used + idx - 1;
     4663 		     text_used = text_used + idx - 1;	/* skip to the "delimiter" */
     4664 		end;
     4665 
     4666 		if substr (remaining_text, 1, 1) = OPEN_PAREN then do;
     4667 						/* nested parens (sigh) */
     4668 		     substr (unquoted_text, (unquoted_used + 1), 1) = OPEN_PAREN;
     4669 						/* include it */
     4670 		     unquoted_used = unquoted_used + 1;
     4671 		     text_used = text_used + 1;
     4672 		     parenthesis_level = parenthesis_level + 1;
     4673 						/* need another ) now */
     4674 		end;
     4675 
     4676 		else if substr (remaining_text, 1, 1) = CLOSE_PAREN then do;
     4677 						/* end of comment (or a nesting) */
     4678 		     if parenthesis_level > 1 then do;	/* nested ): put it into comment text */
     4679 			substr (unquoted_text, (unquoted_used + 1), 1) = CLOSE_PAREN;
     4680 			unquoted_used = unquoted_used + 1;
     4681 		     end;
     4682 		     text_used = text_used + 1;	/* move on by */
     4683 		     parenthesis_level = parenthesis_level - 1;
     4684 		end;
     4685 
     4686 		else if substr (remaining_text, 1, 1) = NL then do;
     4687 						/* newline: must be followed by whitespace (folding) */
     4688 NEWLINE_EMBEDDED_IN_COMMENT_TEXT:
     4689 		     substr (unquoted_text, (unquoted_used + 1), 1) = NL;
     4690 						/* add the newline */
     4691 		     unquoted_used = unquoted_used + 1;
     4692 		     text_used = text_used + 1;	/* skip past the newline */
     4693 		     if text_used = original_text_lth then go to UNBALANCED_COMMENT_DELIMITERS;
     4694 		     idx = verify (remaining_text, HTSP);
     4695 						/* try to skip past whitespace */
     4696 		     if (idx = 0) | (idx = 1) then	/* all whitespace (no close paren) or no ... */
     4697 			go to UNBALANCED_COMMENT_DELIMITERS;
     4698 						/* ... whitespace after newline */
     4699 		     text_used = text_used + idx - 1;	/* move over the whitespace */
     4700 		end;
     4701 
     4702 		else if substr (remaining_text, 1, 1) = BACKSLASH then do;
     4703 						/* one character is quoted */
     4704 		     text_used = text_used + 1;	/* past the \ */
     4705 		     if text_used = original_text_lth then go to UNBALANCED_COMMENT_DELIMITERS;
     4706 		     if substr (remaining_text, 1, 1) = NL then
     4707 						/* special case newlines */
     4708 			go to NEWLINE_EMBEDDED_IN_COMMENT_TEXT;
     4709 		     substr (unquoted_text, (unquoted_used + 1), 1) = substr (remaining_text, 1, 1);
     4710 		     unquoted_used = unquoted_used + 1;
     4711 		     text_used = text_used + 1;	/* past the quoted character */
     4712 		end;
     4713 
     4714 		else call collect_quoted_piece ();	/* must be a quote: start of a quoted string in the comment */
     4715 	     end;
     4716 
     4717 	     if parenthesis_level > 0 then		/* comment never ended */
     4718 		go to UNBALANCED_COMMENT_DELIMITERS;
     4719 
     4720 	     if save_comments then do;		/* caller wants comments made into tokens */
     4721 		call make_token (original_start, (text_used - original_start + 1));
     4722 		token.token_ptr = addr (substr (unquoted_text, unquoted_start, 1));
     4723 		token.token_lth = unquoted_used - unquoted_start + 1;
     4724 		token.type = COMMENT_TOKEN;
     4725 		if p_ipo.no_copy then
     4726 		     begin;			/* try to use original if possible */
     4727 dcl  the_original_text character (token.original_lth) unaligned defined (original_text) position (token.original_start);
     4728 dcl  the_unquoted_text character (token.token_lth) unaligned based (token.token_ptr);
     4729 		     if the_unquoted_text = the_original_text then do;
     4730 			unquoted_used = unquoted_start - 1;
     4731 			token.token_ptr = addr (the_original_text);
     4732 			token.token_lth = length (the_original_text);
     4733 			token.in_unquoted = "0"b;
     4734 		     end;
     4735 		     else token.in_unquoted = "1"b;
     4736 		end;
     4737 		else token.in_unquoted = "1"b;	/* not the original text */
     4738 	     end;
     4739 
     4740 	     else unquoted_used = unquoted_start - 1;	/* don't save the comment anywhere */
     4741 
     4742 	     return;
     4743 
     4744 	end collect_comment;
     4745 
     4746 
     4747 
     4748 /* format: off */
     4749 /* Internal to lex_string: collect the text which comprises a single word; a word is composed of one or more pieces of
     4750*   juxtaposed text, some of which may be quoted strings.  EG:
     4751*		foo"bar bar"mumble
     4752*   is a single word */
     4753 /* format: on */
     4754 
     4755 collect_word:
     4756 	procedure ();
     4757 
     4758 dcl  (in_unquoted, done) bit (1) aligned;
     4759 
     4760 	     unquoted_start = unquoted_used + 1;	/* might need this */
     4761 	     in_unquoted = "0"b;			/* but it starts out using caller's text */
     4762 
     4763 	     original_start = text_used + 1;		/* starts at the first character */
     4764 
     4765 	     done = "0"b;				/* have some work to do */
     4766 
     4767 	     do while (^done & (text_used < original_text_lth));
     4768 
     4769 		if use_date_time_breaks then		/* find the end of this piece */
     4770 		     if p_ipo.multics_format then
     4771 			idx = search (remaining_text, DATE_TIME_DELIMITERS);
     4772 		     else idx = search (remaining_text, DATE_TIME_RFC822_DELIMITERS);
     4773 		else if brace_level = 0 then		/* parsing at top level */
     4774 		     if p_ipo.multics_format then
     4775 			idx = search (remaining_text, NORMAL_DELIMITERS);
     4776 		     else idx = search (remaining_text, NORMAL_RFC822_DELIMITERS);
     4777 		else				/* in the middle of a structred address */
     4778 		     if p_ipo.multics_format then idx = search (remaining_text, STRUCTURED_DELIMITERS);
     4779 		else idx = search (remaining_text, STRUCTURED_RFC822_DELIMITERS);
     4780 		if idx = 0 then			/* rest of the input is this word ... */
     4781 		     idx = original_text_lth - text_used + 1;
     4782 						/* ... so it's delimited by something over the edge */
     4783 
     4784 		if idx > 1 then do;			/* something before the delimiter */
     4785 		     if in_unquoted then do;		/* must copy it over */
     4786 			substr (unquoted_text, (unquoted_used + 1), (idx - 1)) =
     4787 			     substr (remaining_text, 1, (idx - 1));
     4788 			unquoted_used = unquoted_used + idx - 1;
     4789 		     end;
     4790 		     text_used = text_used + idx - 1;
     4791 		end;
     4792 
     4793 		if text_used = original_text_lth then done = "1"b;
     4794 						/* used up the remainder of the string */
     4795 
     4796 		else if ^p_ipo.multics_format & (substr (remaining_text, 1, 1) = BACKSLASH) then do;
     4797 						/* RFC822 escapes the next character */
     4798 		     if ^in_unquoted then call make_unquoted ();
     4799 						/* must copy the original now */
     4800 		     text_used = text_used + 1;	/* skip the escape character */
     4801 		     if text_used = original_text_lth then go to UNBALANCED_QUOTES;
     4802 		     substr (unquoted_text, (unquoted_used + 1), 1) = substr (remaining_text, 1, 1);
     4803 		     unquoted_used = unquoted_used + 1;
     4804 		     if substr (remaining_text, 1, 1) = NL then do;
     4805 						/* quoted char is a newline: insure proper folding */
     4806 			text_used = text_used + 1;	/* ... go past it */
     4807 			idx = verify (remaining_text, HTSP);
     4808 						/* skip leading whitespace: it doesn't count */
     4809 			if (idx = 0) | (idx = 1) then /* no whitespace or all whitespace */
     4810 			     go to UNBALANCED_QUOTES;
     4811 			text_used = text_used + idx - 1;
     4812 		     end;
     4813 		end;
     4814 
     4815 		else if substr (remaining_text, 1, 1) = QUOTE then do;
     4816 						/* a piece of quoted text in the middle */
     4817 		     if ^in_unquoted then call make_unquoted ();
     4818 		     call collect_quoted_piece ();
     4819 		end;
     4820 
     4821 		else done = "1"b;			/* something which terminates the word */
     4822 	     end;
     4823 
     4824 	     if text_used > original_text_lth then	/* normalize me please */
     4825 		text_used = original_text_lth;
     4826 
     4827 	     call make_token (original_start, (text_used - original_start + 1));
     4828 
     4829 	     if in_unquoted then do;			/* had to copy the text */
     4830 		token.token_ptr = addr (substr (unquoted_text, unquoted_start, 1));
     4831 		token.token_lth = unquoted_used - unquoted_start + 1;
     4832 	     end;
     4833 	     else do;				/* text stayed in the original */
     4834 		token.token_ptr = addcharno (original_text_ptr, (original_start - 1));
     4835 		token.token_lth = text_used - original_start + 1;
     4836 	     end;
     4837 
     4838 	     token.type = WORD_TOKEN;
     4839 	     token.in_unquoted = in_unquoted;
     4840 
     4841 	     if ^token.in_unquoted & (token.token_lth = 2) & ^use_date_time_breaks then
     4842 		if translate (substr (original_text, token.original_start, 2), UPPERCASE, LOWERCASE) = "AT" then do;
     4843 						/* special case "host" delimiter */
     4844 		     token.type = AT_TOKEN;
     4845 		     token.in_unquoted = "1"b;	/* flags it as ordinary text for later */
     4846 		end;
     4847 
     4848 	     if ^token.in_unquoted & (token.token_lth = 3) & ^use_date_time_breaks then
     4849 		if translate (substr (original_text, token.original_start, 3), UPPERCASE, LOWERCASE) = "VIA" then do;
     4850 		     token.type = AT_TOKEN;
     4851 		     token.in_unquoted = "1"b;
     4852 		end;
     4853 
     4854 	     return;
     4855 
     4856 
     4857 
     4858 /* Internal to collect_word: place what exists so far into the unquoted area */
     4859 
     4860 make_unquoted:
     4861 	     procedure ();
     4862 
     4863 		in_unquoted = "1"b;
     4864 
     4865 		substr (unquoted_text, (unquoted_used + 1), (text_used - original_start + 1)) =
     4866 		     substr (original_text, original_start, (text_used - original_start + 1));
     4867 
     4868 		unquoted_used = unquoted_used + text_used - original_start + 1;
     4869 
     4870 		return;
     4871 
     4872 	     end make_unquoted;
     4873 
     4874 	end collect_word;
     4875 
     4876 
     4877 
     4878 /* Internal to lex_string: gather a piece of quoted text and add it to the current token */
     4879 
     4880 collect_quoted_piece:
     4881 	procedure ();
     4882 
     4883 dcl  done bit (1) aligned;
     4884 
     4885 	     done = "0"b;				/* haven't reached the end of the string */
     4886 
     4887 	     text_used = text_used + 1;		/* skip the leading quote */
     4888 
     4889 	     do while (^done & (text_used < original_text_lth));
     4890 
     4891 		if p_ipo.multics_format then
     4892 		     idx = search (remaining_text, QUOTE_NL);
     4893 		else idx = search (remaining_text, BACKSLASH_QUOTE_NL);
     4894 						/* find the end or a quoted character */
     4895 
     4896 		if idx = 0 then			/* quoted string never terminates */
     4897 		     go to UNBALANCED_QUOTES;
     4898 
     4899 		if idx > 1 then do;			/* some ordinary text to gather in */
     4900 		     substr (unquoted_text, (unquoted_used + 1), (idx - 1)) = substr (remaining_text, 1, (idx - 1));
     4901 		     unquoted_used = unquoted_used + idx - 1;
     4902 		     text_used = text_used + idx - 1;	/* past the good stuff */
     4903 		end;
     4904 
     4905 		if substr (remaining_text, 1, 1) = NL then do;
     4906 						/* newline: must ensure proper folding */
     4907 NEWLINE_EMBEDDED_IN_QUOTED_STRING:
     4908 		     substr (unquoted_text, (unquoted_used + 1), 1) = NL;
     4909 						/* add it to the string */
     4910 		     unquoted_used = unquoted_used + 1;
     4911 		     text_used = text_used + 1;	/* past the newline */
     4912 		     if text_used = original_text_lth then go to UNBALANCED_QUOTES;
     4913 		     idx = verify (remaining_text, HTSP);
     4914 						/* leading space on next line is ignored */
     4915 		     if (idx = 0) | (idx = 1) then	/* no whitespace or all whitespace ... */
     4916 			go to UNBALANCED_QUOTES;
     4917 		     text_used = text_used + idx - 1;
     4918 		end;
     4919 
     4920 		else if substr (remaining_text, 1, 1) = BACKSLASH then do;
     4921 						/* RFC822 convention for an escaped character */
     4922 		     text_used = text_used + 1;
     4923 		     if text_used = original_text_lth then go to UNBALANCED_QUOTES;
     4924 		     if substr (remaining_text, 1, 1) = NL then
     4925 						/* newline is special cased */
     4926 			go to NEWLINE_EMBEDDED_IN_QUOTED_STRING;
     4927 		     substr (unquoted_text, (unquoted_used + 1), 1) = substr (remaining_text, 1, 1);
     4928 		     unquoted_used = unquoted_used + 1;
     4929 		     text_used = text_used + 1;
     4930 		end;
     4931 
     4932 		else if ^p_ipo.multics_format then do;	/* end of an RFC822 quoted string */
     4933 		     text_used = text_used + 1;	/* ... past the last quote in the string */
     4934 		     done = "1"b;
     4935 		end;
     4936 
     4937 		else do;				/* normal quoted string */
     4938 		     text_used = text_used + 1;	/* past the quote */
     4939 		     if text_used = original_text_lth then done = "1"b;
     4940 						/* end of the input: quoted string terminated OK */
     4941 		     else if substr (remaining_text, 1, 1) = QUOTE then do;
     4942 						/* a literal quote is part of the string */
     4943 			substr (unquoted_text, (unquoted_used + 1), 1) = QUOTE;
     4944 			unquoted_used = unquoted_used + 1;
     4945 			text_used = text_used + 1;	/* past the second quote */
     4946 		     end;
     4947 		     else done = "1"b;		/* end of the quoted piece */
     4948 		end;
     4949 	     end;
     4950 
     4951 	     if ^done then				/* ran off the end */
     4952 		go to UNBALANCED_QUOTES;
     4953 
     4954 	     return;
     4955 
     4956 	end collect_quoted_piece;
     4957 
     4958      end lex_string;
     4959 
     4960 /* Move to the next token (including comments) in the string: do not move past the end-of-text token, however */
     4961 
     4962 next_token:
     4963      procedure ();
     4964 
     4965 	if token_idx = token_list.n_tokens_used then return;
     4966 						/* at the last token */
     4967 
     4968 	token_idx = token_idx + 1;			/* to the next one please */
     4969 
     4970 	current_token_ptr = addr (token_list.tokens (token_idx));
     4971 
     4972 	return;
     4973 
     4974      end next_token;
     4975 
     4976 
     4977 
     4978 /* Move to the next token in the string: do not move past the end-of-text token and ignore comment tokens */
     4979 
     4980 next_real_token:
     4981      procedure ();
     4982 
     4983 	if token_idx = token_list.n_tokens_used then return;
     4984 						/* at the last token */
     4985 
     4986 	token_idx = token_idx + 1;			/* to the next one please */
     4987 	current_token_ptr = addr (token_list.tokens (token_idx));
     4988 
     4989 	do while (current.type = COMMENT_TOKEN);	/* ignore comments */
     4990 	     token_idx = token_idx + 1;
     4991 	     current_token_ptr = addr (token_list.tokens (token_idx));
     4992 	end;
     4993 
     4994 	return;
     4995 
     4996      end next_real_token;
     4997 
     4998 
     4999 
     5000 /* Make the specified token be the current token */
     5001 
     5002 make_token_current:
     5003      procedure (p_token_idx);
     5004 
     5005 dcl  p_token_idx fixed binary (21) parameter;
     5006 
     5007 	token_idx = min (token_list.n_tokens_used, max (p_token_idx, lbound (token_list.tokens, 1)));
     5008 						/* make it a valid index */
     5009 
     5010 	current_token_ptr = addr (token_list.tokens (token_idx));
     5011 
     5012 	return;
     5013 
     5014      end make_token_current;
     5015 
     5016 /* Compare two date/times for equality with appropriate fuzz factor */
     5017 
     5018 date_time_equal:
     5019      procedure (p_date_time_1, p_date_time_2) returns (bit (1) aligned);
     5020 
     5021 dcl  (p_date_time_1, p_date_time_2) fixed binary (71) parameter;
     5022 
     5023 	return (abs ((p_date_time_1 - p_date_time_2)) < ONE_MINUTE);
     5024 
     5025      end date_time_equal;
     5026 
     5027 
     5028 
     5029 /* Compare two date/times to see if the first occurred before the second */
     5030 
     5031 date_time_before:
     5032      procedure (p_date_time_1, p_date_time_2) returns (bit (1) aligned);
     5033 
     5034 dcl  (p_date_time_1, p_date_time_2) fixed binary (71) parameter;
     5035 
     5036 	return ((p_date_time_1 < p_date_time_2) & ^date_time_equal (p_date_time_1, p_date_time_2));
     5037 
     5038      end date_time_before;
     5039 
  1     1 /* BEGIN INCLUDE FILE ... mlsys_parse_txt_options.incl.pl1 */
  1     2 /* Created:  June 1983 by G. Palter */
  1     3 
  1     4 /* Options for the mlsys_utils_$parse_address_list_text and mlsys_utils_$parse_message_text entrypoints */
  1     5 
  1     6 dcl  1 parse_text_options aligned based (parse_text_options_ptr),
  1     7        2 version character (8) unaligned,
  1     8        2 area_ptr pointer,				/* -> area for following structures; null => system free */
  1     9        2 flags, 
  1    10          3 list_errors bit (1) unaligned,		/* ON => return the list of errors in the input text */
  1    11          3 validate_addresses bit (1) unaligned,		/* ON => validate the existence of the addresses in the
  1    12*						         address list or message */
  1    13          3 include_invalid_addresses bit (1) unaligned,	/* ON => create an invalid address for each unparseable
  1    14*						         substring of the input text */
  1    15          3 mbz bit (33) unaligned;			/* must be set to ""b by the caller */
  1    16 
  1    17 dcl  PARSE_TEXT_OPTIONS_VERSION_1 character (8) static options (constant) initial ("mlsptxt1");
  1    18 
  1    19 dcl  parse_text_options_ptr pointer;
  1    20 
  1    21 
  1    22 /* Describes the errors detected while parsing the printed representation of an address list or message */
  1    23 
  1    24 dcl  1 parse_text_error_list aligned based (parse_text_error_list_ptr),
  1    25        2 n_errors fixed binary,			/* set to # of errors detected */
  1    26        2 errors (parse_text_error_list_n_errors refer (parse_text_error_list.n_errors)),
  1    27          3 text_start fixed binary (21),		/* ... set to index of first character in the substring */
  1    28          3 text_lth fixed binary (21),			/* ... set to length of this invalid substring */
  1    29          3 code fixed binary (35),			/* ... set to an error code which describes what is wrong with
  1    30*						       this substring */
  1    31          3 additional_info character (128) varying;	/* ... and extra information to clarify the error */
  1    32 
  1    33 dcl  parse_text_error_list_ptr pointer;
  1    34 
  1    35 dcl  parse_text_error_list_n_errors fixed binary;		/* used to allocate the above structure */
  1    36 
  1    37 /* END INCLUDE FILE ... mlsys_parse_txt_options.incl.pl1 */
     5040 
     5041 
  2     1 /* BEGIN INCLUDE FILE ... mlsys_data.incl.pl1 */
  2     2 /* Created:  20 Decembber 1978 by G. Palter */
  2     3 /* Modified: 1 July 1983 by G. Palter to merge with mlsys_internal_data_ */
  2     4 
  2     5 /* Constants defined by the Multics mail system for external use */
  2     6 
  2     7 dcl  mlsys_data_$system_directory character (168) external; /* directory containing per-system data (mail table/queues) */
  2     8 
  2     9 
  2    10 /* Static data defined by the Multics mail system for external use */
  2    11 
  2    12 dcl  mlsys_data_$user_default_mailbox_address pointer external;
  2    13 						/* -> the address of the user's default mailbox */
  2    14 dcl  mlsys_data_$user_mail_table_address pointer external;	/* -> the address of the user's entry in the mail table */
  2    15 dcl  mlsys_data_$user_logbox_address pointer external;	/* -> the address of the user's logbox */
  2    16 
  2    17 /* END INCLUDE FILE ... mlsys_data.incl.pl1 */
     5042 
     5043 
  3     1 /* BEGIN INCLUDE FILE ... mlsys_internal_data.incl.pl1 */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(86-06-11,Mills), approve(86-06-11,MCR7419),
  3     6*     audit(86-06-17,Margolin), install(86-06-30,MR12.0-1080):
  3     7*     Added mlsys_data_$domains_available.
  3     8*                                                   END HISTORY COMMENTS */
  3     9 
  3    10 
  3    11 /* Created:  May 1981 by G. Palter */
  3    12 /* Modified: July 1983 by G. Palter to merge with mlsys_data_ */
  3    13 
  3    14 /* Constants used internally by the Multics mail system */
  3    15 
  3    16 dcl  mlsys_data_$max_opening_retries fixed binary external; /* maximum number of times to reopen a mailbox if it gets
  3    17*                                                               damaged and salvaged while open */
  3    18 
  3    19 dcl  mlsys_data_$max_lock_wait_retries fixed binary external;
  3    20                                                             /* maximum number of times to try to send a message while the
  3    21*                                                               mailbox is locked (being salvaged?) */
  3    22 
  3    23 
  3    24 /* Allocation overhead factors:  When allocating those structures with refer extents, insure that the variable portion of
  3    25*   the structure contains a multiple of the appropriate constant number of slots.  These extra slots will be used for
  3    26*   later additions to the structure; when a new element must be added to a full structure, add this many new slots (rather
  3    27*   than a single new slot)
  3    28*
  3    29*   The following expression should be used to determine the initial allocation:
  3    30*
  3    31*          n_slots_to_allocate = n_slots_needed + CONSTANT - mod (n_slots_needed, CONSTANT); */
  3    32 
  3    33 dcl (mlsys_data_$mailbox_allocation,                        /* mailbox.messages */
  3    34      mlsys_data_$message_body_sections_allocation,          /* message.body_sections */
  3    35      mlsys_data_$message_redistributions_list_allocation,   /* message_redistributions_list.redistributions */
  3    36      mlsys_data_$message_user_fields_allocation,            /* message_user_fields_list.user_fields */
  3    37      mlsys_data_$message_references_list_allocation,        /* message_references_list.references */
  3    38      mlsys_data_$address_list_allocation)                   /* address_list.addresses */
  3    39           fixed binary external;
  3    40 
  3    41 
  3    42 /* Static data user by the Multics mail system */
  3    43 
  3    44 dcl (mlsys_data_$forum_not_available,                       /* 1 => forum isn't available on the system or in this ring */
  3    45      mlsys_data_$ism_not_available,                         /* 1 => no inter-system mailer on this system */
  3    46      mlsys_data_$domains_available)                         /* 1 =>  domain name system software on this sytem */
  3    47           fixed binary (1) external;
  3    48 
  3    49 dcl (mlsys_data_$subsystem_ring,                            /* ring in which the mail system is secured */
  3    50      mlsys_data_$highest_usable_ring,                       /* highest ring of execution which may use the mail system */
  3    51      mlsys_data_$lowest_forum_ring)                         /* lowest ring of execution with access to forum */
  3    52           fixed binary (3) external;
  3    53 
  3    54 dcl  mlsys_data_$temp_segment_list_ptr pointer external;    /* -> list of all mail system temporary segments */
  3    55 
  3    56 dcl  mlsys_data_$valid_segments (0:4095) bit (1) unaligned external;
  3    57                                                             /* indicates which segments have been used by the mail system
  3    58*                                                               for the allocation of user-visible data in order to
  3    59*                                                               validate that pointers passed from the user-ring are OK */
  3    60 
  3    61 dcl  mlsys_area area based (mlsys_data_$subsystem_area_ptr);/* area used for all user-visible allocations ... */
  3    62 dcl  mlsys_data_$subsystem_area_ptr pointer external;       /* ... and the pointer on which it is based */
  3    63 
  3    64 dcl  mlsys_data_$hash_tables_segment_ptr pointer external;  /* -> hash tables used by the mail system */
  3    65 
  3    66 dcl  mlsys_data_$transmit_cache_ptr pointer external;       /* -> cache of recently used mailboxes for mlsys_transmit_ */
  3    67 
  3    68 dcl  mlsys_data_$user_is_anonymous bit (1) aligned external;/* ON => the user is an anonymous user */
  3    69 
  3    70 dcl  mlsys_data_$person_id character (24) varying external; /* the user's Person_id */
  3    71 dcl  mlsys_data_$project_id character (12) varying external;/* the user's Project_id */
  3    72 dcl  mlsys_data_$user_id character (32) varying external;   /* the user's User_id (Person_id.Project_id) */
  3    73 
  3    74 /* END INCLUDE FILE ... mlsys_internal_data.incl.pl1 */
     5044 
     5045 
  4     1 /* BEGIN INCLUDE FILE ... mlsys_address_types.incl.pl1 */
  4     2 /* Created:  June 1983 by G. Palter */
  4     3 
  4     4 /* Types of addresses supported by the Multics Mail System */
  4     5 
  4     6 dcl  (INVALID_ADDRESS	initial (0),		/* a syntactically invalid address: used as a place holder
  4     7*						   when parsing printed representations */
  4     8       USER_MAILBOX_ADDRESS	initial (1),		/* identifies a user's default mailbox */
  4     9       LOGBOX_ADDRESS	initial (2),		/* identifies a user's logbox */
  4    10       SAVEBOX_ADDRESS	initial (3),		/* identifies one of a user's saveboxes by pathname */
  4    11       MAILBOX_ADDRESS	initial (4),		/* identifies some other mailbox by pathname */
  4    12       FORUM_ADDRESS		initial (5),		/* identifies a forum meeting by pathname */
  4    13       FOREIGN_ADDRESS	initial (6),		/* identifies a user (or group) on another compute system */
  4    14       MAIL_TABLE_ADDRESS	initial (7),		/* identifies an entry in the system's mail table */
  4    15       MAILING_LIST_ADDRESS	initial (8),		/* identifies a mailing list by pathname */
  4    16       NAMED_GROUP_ADDRESS	initial (9))		/* identifies a named group of addresses */
  4    17 	fixed binary static options (constant);
  4    18 
  4    19 /* END INCLUDE FILE ... mlsys_address_types.incl.pl1 */
     5046 
     5047 
  5     1 /* BEGIN INCLUDE FILE ... mlsys_field_types.incl.pl1 */
  5     2 /* Created:  July 1983 by G. Palter */
  5     3 
  5     4 /* Defined field types */
  5     5 
  5     6 dcl (USER_DEFINED_FIELD  initial ( 0),			/* user-defined field */
  5     7      ACCESS_CLASS_FIELD  initial (16),		ACKNOWLEDGE_TO_FIELD     initial ( 7),
  5     8      BCC_FIELD	     initial (14),		CC_FIELD		     initial (13),
  5     9      DATE_FIELD	     initial ( 8),		DELIVERY_DATE_FIELD	     initial ( 5),
  5    10      POSTED_DATE_FIELD   initial ( 1),		DELIVERY_BY_FIELD	     initial ( 6),
  5    11      FROM_FIELD	     initial ( 9),		ROUTE_FIELD	     initial ( 3),
  5    12      MESSAGE_ID_FIELD    initial (18),		RELAYED_FIELD	     initial ( 4),
  5    13      IN_REPLY_TO_FIELD   initial (15),		REPLY_TO_FIELD	     initial (11),
  5    14      SENDER_FIELD	     initial ( 2),		SUBJECT_FIELD	     initial (10),
  5    15      TO_FIELD	     initial (12),		COMMENT_FIELD	     initial (17),
  5    16 
  5    17      N_ORDINARY_FIELDS   initial (18))			/* # of defined field types */
  5    18 	fixed binary static options (constant);
  5    19 
  5    20 
  5    21 /* Defined classes of header fields */
  5    22 
  5    23 dcl (ORDINARY_FIELDS_BASE		initial (  0),
  5    24      REDISTRIBUTED_FIELDS_BASE	initial (100),	/* fields in a redistribution */
  5    25      COMMENT_FIELDS_BASE		initial (200))	/* fields in a comment */
  5    26 	fixed binary static options (constant);
  5    27 
  5    28 /* END INCLUDE FILE ... mlsys_field_types.incl.pl1 */
     5048 
     5049 
  6     1 /* BEGIN INCLUDE FILE ... mlsys_field_names.incl.pl1 */
  6     2 /* Created:  June 1983 by G. Palter */
  6     3 
  6     4 /* Standard names for all message envelope, header, and redistributions list fields supported by the mail system */
  6     5 
  6     6 dcl  (ACCESS_CLASS_FIELDNAME		initial ("Access-Class"),
  6     7       ACKNOWLEDGE_TO_FIELDNAME	initial ("Acknowledge-To"),
  6     8       BCC_FIELDNAME			initial ("bcc"),
  6     9       CC_FIELDNAME			initial ("cc"),
  6    10       DATE_TIME_CREATED_FIELDNAME	initial ("Date"),
  6    11       DATE_TIME_DELIVERED_FIELDNAME	initial ("Delivery-Date"),
  6    12       DATE_TIME_MAILED_FIELDNAME	initial ("Posted-Date"),
  6    13       DELIVERED_BY_FIELDNAME		initial ("Delivery-By"),
  6    14       FROM_FIELDNAME		initial ("From"),
  6    15       IMPLICIT_ROUTE_FIELDNAME	initial ("Route"),
  6    16       MESSAGE_ID_FIELDNAME		initial ("Message-ID"),
  6    17       RELAY_FIELDNAME		initial ("Relayed"),
  6    18       REPLY_REFERENCES_FIELDNAME	initial ("In-Reply-To"),
  6    19       REPLY_TO_FIELDNAME		initial ("Reply-To"),
  6    20       SENDER_FIELDNAME		initial ("Sender"),
  6    21       SUBJECT_FIELDNAME		initial ("Subject"),
  6    22       TO_FIELDNAME			initial ("To"),
  6    23 
  6    24 
  6    25 /* Prefix to apply to a field name to produce the field name of the equivalent field in the redistributions list.  Ie:
  6    26*
  6    27*        call mlsys_utils_$print_address_field
  6    28*	        (REDISTRIBUTED_PREFIX || FROM_FIELDNAME, ...) */
  6    29 
  6    30      REDISTRIBUTED_PREFIX		initial ("Redistributed-"),
  6    31 
  6    32 
  6    33 /* Fields in a redistribution which do not have a corresponding non-redistributed field */
  6    34 
  6    35      REDISTRIBUTED_COMMENT_FIELDNAME	initial ("Redistributed-Comment"))
  6    36 
  6    37 	character (32) varying static options (constant);
  6    38 
  6    39 
  6    40 /* END INCLUDE FILE ... mlsys_field_names.incl.pl1 */
     5050 
     5051 
  7     1 /* BEGIN INCLUDE FILE ... mlsys_message.incl.pl1 */
  7     2 
  7     3 
  7     4 /****^  HISTORY COMMENTS:
  7     5*  1) change(85-12-19,Herbst), approve(86-03-25,MCR7367),
  7     6*     audit(86-04-28,Margolin), install(86-05-22,MR12.0-1059):
  7     7*     Added seen switch to message.
  7     8*                                                   END HISTORY COMMENTS */
  7     9 
  7    10 
  7    11 /* Created:  June 1983 by G. Palter */
  7    12 
  7    13 /* Definition of a message as used by the Multics Mail System */
  7    14 
  7    15 dcl  1 message aligned based (message_ptr),
  7    16        2 version character (8) unaligned,
  7    17        2 reserved bit (144),				/* for exclusive use of the mail system */
  7    18        2 n_reply_references fixed binary,		/* # of messages for which this is a reply */
  7    19        2 n_user_fields fixed binary,			/* # of non-standard header fields in this message */
  7    20        2 n_redistributions fixed binary,		/* # of times this message has been forwarded */
  7    21        2 n_body_sections fixed binary,			/* # of sections in the body */
  7    22        2 flags,
  7    23          3 interactive bit (1) unaligned,		/* ON => this is an interactive message */
  7    24          3 can_be_deleted bit (1) unaligned,		/* ON => the user can delete this message if desired */
  7    25          3 marked_for_deletion bit (1) unaligned,		/* ON => message will be deleted when mailbox is closed */
  7    26          3 must_be_acknowledged bit (1) unaligned,	/* ON => an ACK should be generated when message is read */
  7    27          3 seen bit (1) unaligned,			/* ON => user has printed message at least once */
  7    28          3 reserved bit (31) unaligned,			/* for use by the mail system */
  7    29        2 pad bit (36),
  7    30        2 envelope like message_envelope,		/* who/when/how the message was mailed & delivered */
  7    31        2 header,
  7    32          3 message_id bit (72),			/* ID of this message (same value for all copies) */
  7    33          3 access_class bit (72),			/* AIM access class of this message */
  7    34          3 date_time_created fixed binary (71),		/* date/time this message was composed */
  7    35          3 from pointer,				/* -> address list of author(s) of the message */
  7    36          3 reply_to pointer,				/* -> address list of recipients for reply (if not authors) */
  7    37          3 to pointer,				/* -> address list of primary recipients */
  7    38          3 cc pointer,				/* -> address list of secondary recipients */
  7    39          3 bcc pointer,				/* -> address list of blind recipients */
  7    40          3 subject like message_text_field,		/* subject of the message */
  7    41          3 reply_references pointer,			/* -> list of messages for which this message is a reply */
  7    42          3 user_fields_list pointer,			/* -> list of user-defined fields in this message */
  7    43        2 redistributions_list pointer,			/* -> redistributions list for this message */
  7    44        2 body,
  7    45          3 total_lines fixed binary (21),		/* total # of lines in the body or -1 if indeterminate */
  7    46          3 pad bit (36),
  7    47          3 body_sections (message_n_body_sections refer (message.n_body_sections)) like message_body_section;
  7    48 
  7    49 dcl  MESSAGE_VERSION_2 character (8) static options (constant) initial ("mlsmsg02");
  7    50 
  7    51 dcl  message_subject character (message.header.subject.text_lth) unaligned based (message.header.subject.text_ptr);
  7    52 
  7    53 dcl  message_ptr pointer;
  7    54 
  7    55 dcl (message_n_body_sections, message_trace_n_relays, message_n_redistributions, message_n_user_fields,
  7    56      message_references_list_n_references)
  7    57 	fixed binary;				/* for exclusive use of the mail system */
  7    58 
  7    59 /* Definition of a message envelope: describes when, by whom, and by what route the message was mailed */
  7    60 
  7    61 dcl  1 message_envelope aligned based (message_envelope_ptr),
  7    62        2 date_time_mailed fixed binary (71),		/* date/time this message was entered into the mail system */
  7    63        2 sender pointer,				/* -> address of entity that mailed the message */
  7    64        2 trace pointer,				/* -> message_trace describing how it got here */
  7    65        2 date_time_delivered fixed binary (71),		/* date/time this message was delivered */
  7    66        2 delivered_by pointer,			/* -> address of entity that delivered the message */
  7    67        2 acknowledge_to pointer;			/* -> address of entity to receive ACK when message is read */
  7    68 
  7    69 dcl  message_envelope_ptr pointer;
  7    70 
  7    71 
  7    72 /* Structure used in calls to mail_system_daemon_ entrypoints which manipulate the message envelope */
  7    73 
  7    74 dcl  1 message_envelope_parameter aligned based (message_envelope_parameter_ptr),
  7    75        2 pad pointer,				/* forces even word alignment */
  7    76        2 version character (8) unaligned,
  7    77        2 envelope like message_envelope;
  7    78 
  7    79 dcl  MESSAGE_ENVELOPE_PARAMETER_VERSION_2 character (8) static options (constant) initial ("mlsenv02");
  7    80 
  7    81 dcl  message_envelope_parameter_ptr pointer;
  7    82 
  7    83 
  7    84 /* Definition of a message trace: describes the route and each relay operation by which a message was passed through the
  7    85*   networks to reach this recipient */
  7    86 
  7    87 dcl  1 message_trace aligned based (message_trace_ptr),
  7    88        2 version character (8) unaligned,
  7    89        2 reserved bit (144),				/* ... exclusively for use by the mail system */
  7    90        2 implicit_route pointer,			/* -> an address_route which defines the route it took */
  7    91        2 pad bit (36),
  7    92        2 n_relays fixed binary,			/* # of relay operations required to reach this site */
  7    93        2 relays (message_trace_n_relays refer (message_trace.n_relays)),
  7    94          3 date_time_relayed fixed binary (71),		/* ... when this relay operation took place */
  7    95          3 sending_host character (256) varying,		/* ... the host which relayed the message */
  7    96          3 receiving_host character (256) varying,	/* ... the host which received it */
  7    97          3 communications_media character (32) unaligned,	/* ... medium over which relay took place (ARPA, Tymnet) */
  7    98          3 communications_protocol character (32) unaligned,/* ... low-level protocol used (TCP, X.25) */
  7    99          3 mail_protocol character (32) unaligned,	/* ... mailer protocol used (SMTP, NBS) */
  7   100          3 relay_id bit (72),				/* ... unique ID assigned by receiving system or ""b */
  7   101          3 relay_recipient pointer;			/* ... -> address of recipient as given by sending system */
  7   102 
  7   103 dcl  MESSAGE_TRACE_VERSION_2 character (8) static options (constant) initial ("mlstrc02");
  7   104 
  7   105 dcl  message_trace_ptr pointer;
  7   106 
  7   107 /* Definition of a message's redistributions list */
  7   108 
  7   109 dcl  1 message_redistributions_list aligned based (message.redistributions_list),
  7   110        2 version character (8) unaligned,
  7   111        2 reserved bit (144),				/* ... exclusively for use by the mail system */
  7   112        2 pad bit (36),
  7   113        2 n_redistributions fixed binary,		/* # of redistributions */
  7   114        2 redistributions (message_n_redistributions refer (message_redistributions_list.n_redistributions))
  7   115               like message_redistribution;		/* the redistributions: oldest first */
  7   116 
  7   117 dcl  MESSAGE_REDISTRIBUTIONS_LIST_VERSION_2 character (8) static options (constant) initial ("mlsrl002");
  7   118 
  7   119 
  7   120 /* Definition of a single redistribution (forwarding) of a message */
  7   121 
  7   122 dcl  1 message_redistribution aligned based (message_redistribution_ptr),
  7   123        2 envelope like message_envelope,
  7   124        2 header,
  7   125          3 message_id bit (72),			/* ID of this redistribution (same for all copies) */
  7   126          3 date_time_created fixed binary (71),		/* date/time when this redistribution was made */
  7   127          3 from pointer,				/* -> address list of authors of this redistribution */
  7   128          3 to pointer,				/* -> address list of recipients of the redistribution */
  7   129          3 comment like message_text_field;		/* optional comment associated with the redistribution */
  7   130 
  7   131 dcl  message_redistribution_comment character (message_redistribution.comment.text_lth) unaligned
  7   132 	based (message_redistribution.comment.text_ptr);
  7   133 
  7   134 dcl  message_redistribution_ptr pointer;
  7   135 
  7   136 
  7   137 /* Structure used in calls to mail_system_daemon_ entrypoints which manipulate the redistributions of a message */
  7   138 
  7   139 dcl  1 message_redistribution_parameter aligned based (message_redistribution_parameter_ptr),
  7   140        2 pad pointer,				/* forces even word alignment */
  7   141        2 version character (8) unaligned,
  7   142        2 redistribution like message_redistribution;
  7   143 
  7   144 dcl MESSAGE_REDISTRIBUTION_PARAMETER_VERSION_2 character (8) static options (constant) initial ("mlsdist2");
  7   145 
  7   146 dcl  message_redistribution_parameter_ptr pointer;
  7   147 
  7   148 /* Definition of the list of user-defined fields in a message */
  7   149 
  7   150 dcl  1 message_user_fields_list aligned based (message.user_fields_list),
  7   151        2 version character (8) unaligned,
  7   152        2 reserved bit (144),				/* ... exclusively for use by the mail system */
  7   153        2 pad bit (36),
  7   154        2 n_user_fields fixed binary,			/* # of user-defined fields in the message */
  7   155        2 user_fields (message_n_user_fields refer (message_user_fields_list.n_user_fields))
  7   156               like message_user_field;			/* the actual user-defined fields */
  7   157 
  7   158 dcl  MESSAGE_USER_FIELDS_LIST_VERSION_2 character (8) static options (constant) initial ("mlsufl02");
  7   159 
  7   160 
  7   161 /* Definition of a user defined message header field */
  7   162 
  7   163 dcl  1 message_user_field aligned based (message_user_field_ptr),
  7   164        2 header,
  7   165          3 field_id bit (36) aligned,			/* identifies the purpose of this field */
  7   166          3 field_type fixed binary,			/* type of data contained in this field */
  7   167        2 field_type_variable bit (144);			/* the actual data (see below) */
  7   168 
  7   169 dcl  message_user_field_ptr pointer;
  7   170 
  7   171 
  7   172 /* Defined types of user defined fields */
  7   173 
  7   174 dcl (MESSAGE_TEXT_USER_FIELD		initial (1),	/* content of the field is a text string */
  7   175      MESSAGE_ADDRESS_LIST_USER_FIELD	initial (2),	/* content of the field is an address list */
  7   176      MESSAGE_DATE_USER_FIELD		initial (3),	/* content of the field is a date/time */
  7   177      MESSAGE_INTEGER_USER_FIELD	initial (4))	/* content of the filed is a fixed binary value */
  7   178 	fixed binary static options (constant);
  7   179 
  7   180 
  7   181 /* Structures used to access the data for the different types of user defined fields */
  7   182 
  7   183 dcl  1 message_text_user_field aligned based (message_user_field_ptr),
  7   184        2 header like message_user_field.header,
  7   185        2 text like message_text_field;			/* the message text */
  7   186 
  7   187 dcl  message_text_user_field_text character (message_text_user_field.text.text_lth) unaligned
  7   188 	based (message_text_user_field.text.text_ptr);
  7   189 
  7   190 dcl  1 message_address_list_user_field aligned based (message_user_field_ptr),
  7   191        2 header like message_user_field.header,
  7   192        2 address_list_ptr pointer,			/* -> the address list */
  7   193        2 pad bit (72);
  7   194 
  7   195 dcl  1 message_date_user_field aligned based (message_user_field_ptr),
  7   196        2 header like message_user_field.header,
  7   197        2 date_time fixed binary (71),			/* the clock reading */
  7   198        2 pad bit (72);
  7   199 
  7   200 dcl  1 message_integer_user_field aligned based (message_user_field_ptr),
  7   201        2 header like message_user_field.header,
  7   202        2 value fixed binary (35),			/* the integer value */
  7   203        2 pad bit (108);
  7   204 
  7   205 
  7   206 /* Structure used in calls to mail_system_ entrypoints which manipulate the user-defined fields of a message */
  7   207 
  7   208 dcl  1 message_user_field_parameter aligned based (message_user_field_parameter_ptr),
  7   209        2 pad pointer,				/* forces even word alignment */
  7   210        2 version character (8) unaligned,
  7   211        2 user_field like message_user_field;
  7   212 
  7   213 dcl  MESSAGE_USER_FIELD_PARAMETER_VERSION_2 character (8) static options (constant) initial ("mlsudf02");
  7   214 
  7   215 dcl  message_user_field_parameter_ptr pointer;
  7   216 
  7   217 /* Definition of a list of message references used as the value of message header fields (eg: In-Reply-To) */
  7   218 
  7   219 dcl  1 message_references_list aligned based (message_references_list_ptr),
  7   220        2 version character (8) unaligned,
  7   221        2 reserved bit (144),				/* ... exclusively for use by the mail system */
  7   222        2 pad bit (36),
  7   223        2 n_references fixed binary,			/* # of references in this list */
  7   224        2 references (message_references_list_n_references refer (message_references_list.n_references))
  7   225               like message_reference;			/* the references themselves */
  7   226 
  7   227 dcl  MESSAGE_REFERENCES_LIST_VERSION_2 character (8) static options (constant) initial ("mlsref02");
  7   228 
  7   229 dcl  message_references_list_ptr pointer;
  7   230 
  7   231 
  7   232 /* Definition of a reference to another message */
  7   233 
  7   234 dcl  1 message_reference aligned based (message_reference_ptr),
  7   235        2 message_id bit (72),				/* ID of the other message */
  7   236        2 date_time_created fixed binary (71),		/* date/time the other message was created */
  7   237        2 from pointer,				/* -> address list of authors of the other message */
  7   238        2 subject like message_text_field;		/* subject of the other message */
  7   239 
  7   240 dcl  message_reference_subject character (message_reference.subject.text_lth) unaligned
  7   241 	based (message_reference.subject.text_ptr);
  7   242 
  7   243 dcl  message_reference_ptr pointer;
  7   244 
  7   245 
  7   246 /* Structure used in calls to mail_system_daemon_ entrypoints which manipulate message references */
  7   247 
  7   248 dcl  1 message_reference_parameter aligned based (message_reference_parameter_ptr),
  7   249        2 pad pointer,				/* forces even word alignment */
  7   250        2 version character (8) unaligned,
  7   251        2 reference like message_reference;
  7   252 
  7   253 dcl  MESSAGE_REFERENCE_PARAMETER_VERSION_2 character (8) static options (constant) initial ("mlsref02");
  7   254 
  7   255 dcl  message_reference_parameter_ptr pointer;
  7   256 
  7   257 
  7   258 /* Definition of a text field in a message (Subject, Comment, or a user defined field) */
  7   259 
  7   260 dcl  1 message_text_field aligned based (message_text_field_ptr),
  7   261        2 text_ptr pointer,				/* -> the actual text */
  7   262        2 text_lth fixed binary (21),			/* length of said text */
  7   263        2 flags,
  7   264          3 multiline_text bit (1) unaligned,		/* ON => the text of this field may span multiple lines;
  7   265*						   OFF => the text will always be a single line */
  7   266          3 reserved bit (35) unaligned;			/* for exclusive use of the mail system */
  7   267 
  7   268 dcl  message_text_field_text character (message_text_field.text_lth) unaligned based (message_text_field.text_ptr);
  7   269 
  7   270 dcl  message_text_field_ptr pointer;
  7   271 
  7   272 /* Definition of a section of the body of a message */
  7   273 
  7   274 dcl  1 message_body_section aligned based (message_body_section_ptr),
  7   275        2 header,
  7   276          3 section_type fixed binary,			/* type of "text" stored in this section */
  7   277          3 section_n_lines fixed binary (21),		/* # of lines in this section or -1 if indeterminate */
  7   278        2 section_type_variable bit (144);		/* the actual data (see below) */
  7   279 
  7   280 dcl  message_body_section_ptr pointer;
  7   281 
  7   282 
  7   283 /* Defined types of message body sections */
  7   284 
  7   285 dcl (MESSAGE_PREFORMATTED_BODY_SECTION	     initial (1),	/* text formatted by the authors/sender */
  7   286      MESSAGE_BIT_STRING_BODY_SECTION	     initial (2))	/* arbitrary bit string */
  7   287 	fixed binary static options (constant);
  7   288 
  7   289 
  7   290 /* Structures used to access the data for the different types of message body sections */
  7   291 
  7   292 dcl  1 message_preformatted_body_section aligned based (message_body_section_ptr),
  7   293        2 header like message_body_section.header,
  7   294        2 text_ptr pointer,				/* -> the text */
  7   295        2 text_lth fixed binary (21),			/* length of said text in characters */
  7   296        2 reserved bit (36);				/* for exclusive use of the mail system */
  7   297 
  7   298 dcl  message_preformatted_body_section_text character (message_preformatted_body_section.text_lth) unaligned
  7   299 	based (message_preformatted_body_section.text_ptr);
  7   300 
  7   301 dcl  1 message_bit_string_body_section aligned based (message_body_section_ptr),
  7   302        2 header like message_body_section.header,
  7   303        2 bit_string_ptr pointer,			/* -> the bit string */
  7   304        2 bit_string_lth fixed binary (24),		/* length of said bit string in bits (obviously) */
  7   305        2 reserved bit (36);				/* for exclusive use of the mail system */
  7   306 
  7   307 dcl  message_bit_string_body_section_bit_string bit (message_bit_string_body_section.bit_string_lth) unaligned
  7   308 	based (message_bit_string_body_section.bit_string_ptr);
  7   309 
  7   310 
  7   311 /* Structure used in calls to mail_system_ entrypoints which manipulate the sections of a message's body */
  7   312 
  7   313 dcl  1 message_body_section_parameter aligned based (message_body_section_parameter_ptr),
  7   314        2 pad pointer,				/* forces even word alignment */
  7   315        2 version character (8) unaligned,
  7   316        2 section like message_body_section;
  7   317 
  7   318 dcl  MESSAGE_BODY_SECTION_PARAMETER_VERSION_2 character (8) static options (constant) initial ("mlsmbs02");
  7   319 
  7   320 dcl  message_body_section_parameter_ptr pointer;
  7   321 
  7   322 /* END INCLUDE FILE ... mlsys_message.incl.pl1 */
     5052 
     5053 
  8     1 /* BEGIN INCLUDE FILE ... mlsys_address_route.incl.pl1 */
  8     2 /* Created:  June 1983 by G. Palter */
  8     3 
  8     4 /* Definition of a mail system address route */
  8     5 
  8     6 dcl  1 address_route aligned based (address_route_ptr),
  8     7        2 header,
  8     8          3 version character (8) unaligned,
  8     9          3 reserved bit (144),			/* ... exclusively for use by the mail system */
  8    10          3 n_relays fixed binary,			/* # of relay systems in the route */
  8    11        2 relays (address_route_n_relays refer (address_route.n_relays)) character (256) varying;
  8    12 						/* the relays: relays(1) is closest to the local host */
  8    13 
  8    14 dcl  ADDRESS_ROUTE_VERSION_1 character (8) static options (constant) initial ("mlsrte01");
  8    15 
  8    16 dcl  address_route_ptr pointer;
  8    17 
  8    18 dcl  address_route_n_relays fixed binary;		/* for allocating above structure (users do on occasion) */
  8    19 
  8    20 /* END INCLUDE FILE ... mlsys_address_route.incl.pl1 */
     5054 
     5055 
  9     1 /* BEGIN INCLUDE FILE ... mlsys_address_list.incl.pl1 */
  9     2 /* Created:  June 1983 by G. Palter */
  9     3 
  9     4 /* Definition of an address list -- a collection of addresses used as the value of certain message fields, etc. */
  9     5 
  9     6 dcl  1 address_list aligned based (address_list_ptr),
  9     7        2 version character (8) unaligned,
  9     8        2 reserved bit (144),				/* ... exclusively for use by the mail system */
  9     9        2 n_addresses fixed binary,			/* # of address in this list */
  9    10        2 addresses (address_list_n_addresses refer (address_list.n_addresses)) pointer;
  9    11 
  9    12 dcl  ADDRESS_LIST_VERSION_2 character (8) static options (constant) initial ("mlsals02");
  9    13 
  9    14 dcl  address_list_ptr pointer;
  9    15 
  9    16 dcl  address_list_n_addresses fixed binary;		/* reserved exclusively for use by the mail system */
  9    17 
  9    18 /* END INCLUDE FILE ... mlsys_address_list.incl.pl1 */
     5056 
     5057 
 10     1 /* BEGIN INCLUDE FILE . . . sl_info.incl.pl1 */
 10     2 
 10     3      
 10     4 
 10     5 /****^  HISTORY COMMENTS:
 10     6*  1) change(87-11-16,Lippard), approve(87-12-21,MCR7822),
 10     7*     audit(88-02-09,Blair), install(88-02-16,MR12.2-1023):
 10     8*     Modified to add INITIATED_SEGS type.
 10     9*  2) change(87-11-19,Lippard), approve(87-12-21,MCR7822),
 10    10*     audit(88-02-09,Blair), install(88-02-16,MR12.2-1023):
 10    11*     Added uid to sl_info structure.
 10    12*                                                   END HISTORY COMMENTS */
 10    13 
 10    14 
 10    15 declare 1 sl_info	      aligned based (sl_info_p),
 10    16 	     2 version	      fixed binary,		/* Must be 1 */
 10    17 	     2 num_paths	      fixed binary,		/* Number of search paths */
 10    18 	     2 change_index_p     pointer,		/* Pointer to search list's update count */
 10    19 	     2 change_index	      fixed binary (71),	/* This search list's update count */
 10    20 	     2 pad1	      (6) bit (36),		/* Must be zero */
 10    21 	     2 paths	      (sl_info_num_paths refer (sl_info.num_paths)),
 10    22 	       3 type	      fixed binary,		/* Type of search path */
 10    23 	       3 code	      fixed binary (35),	/* Standard status code of search path */
 10    24 	       3 uid	      bit (36),		/* Unique ID */
 10    25 	       3 pathname	      char (168) unaligned;	/* Search pathname */
 10    26 
 10    27      declare sl_info_num_paths      fixed binary;
 10    28      declare sl_info_p	      pointer;
 10    29      declare sl_info_version_1      fixed binary internal static options (constant) initial (1);
 10    30 
 10    31 /* Keyword Types */
 10    32 
 10    33      declare ABSOLUTE_PATH	      fixed binary internal static options (constant) initial (0);
 10    34      declare UNEXPANDED_PATH	      fixed binary internal static options (constant) initial (1);
 10    35      declare REFERENCING_DIR	      fixed binary internal static options (constant) initial (3);
 10    36      declare WORKING_DIR	      fixed binary internal static options (constant) initial (4);
 10    37      declare PROCESS_DIR	      fixed binary internal static options (constant) initial (5);
 10    38      declare HOME_DIR	      fixed binary internal static options (constant) initial (6);
 10    39      declare INITIATED_SEGS	      fixed binary internal static options (constant) initial (7);
 10    40 
 10    41 /* END INCLUDE FILE . . . sl_info.incl.pl1 */
     5058 
     5059 
 11     1 /* BEGIN INCLUDE FILE . . . sl_control_s.incl.pl1 */
 11     2 
 11     3      declare 1 sl_control_s	      unaligned based (addr (sl_control)),
 11     4 	     2 af_pathname	      bit (1),		/* "1"b => expand active functions */
 11     5 	     2 pad1	      bit (1),		/* Must be zero */
 11     6 	     2 key_ref_dir	      bit (1),		/* "1"b => expand -referencing_dir keyword */
 11     7 	     2 key_work_dir	      bit (1),		/* "1"b => expand -working_dir keyword */
 11     8 	     2 key_proc_dir	      bit (1),		/* "1"b => expand -process_dir keyword */
 11     9 	     2 key_home_dir	      bit (1),		/* "1"b => expand -home_dir keyword */
 11    10 	     2 pad2	      bit (30);		/* Must be zero */
 11    11 
 11    12      declare sl_control	      bit (36);
 11    13      declare sl_control_default     bit (36) internal static options (constant) initial ("101111"b);
 11    14 
 11    15 /* END INCLUDE FILE . . . sl_control_s.incl.pl1 */
     5060 
     5061 
 12     1 	/* START OF:	time_names_.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 12     2 
 12     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 12     4 	/*									*/
 12     5 	/* Name:  time_names_.incl.pl1						*/
 12     6 	/*									*/
 12     7 	/* This include file defines the structure of values in the time_table_.  The table	*/
 12     8 	/* includes a list of time zones known to the system, as well as lists of month names	*/
 12     9 	/* and names of days of the week.  All names are expressed in several different languages */
 12    10 	/* to facilitate transliteration of dates into these languages.  The table includes	*/
 12    11 	/* the list of languages in which dates may be expressed.				*/
 12    12 	/*									*/
 12    13 	/* Status									*/
 12    14 	/*									*/
 12    15 	/* 0) Created  06/07/78:  J. Falksen						*/
 12    16 	/* 1) Modified 07/04/78:  G. Dixon						*/
 12    17 	/*									*/
 12    18 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 12    19 
 12    20 
 12    21 dcl time_info_$version	char (8) ext static;	/* Version number of all structures in the	*/
 12    22 						/* time_info_.  Currently = 1.		*/
 12    23 dcl Vtime_info_2		char (8) int static options(constant) init("tinfo002");




 12    24 
 12    25 dcl time_info_$gmt_zone_index fixed bin (17) ext static;
 12    26 dcl time_info_$default_language_index fixed bin (17) ext static;
 12    27 
 12    28 dcl time_info_$date_time_keywords fixed bin ext static;	/* Table of named date/time format strings	*/
 12    29 dcl 1 ti_keyword	based (addr (time_info_$date_time_keywords)),
 12    30       2 number_kwd		fixed bin,		/* number of keywords present		*/
 12    31       2 pad		fixed bin,
 12    32       2 e (0 refer (ti_keyword.number_kwd)),
 12    33         3 name		char (32),
 12    34         3 str		char (128)var;
 12    35 dcl (site_date	init (1),
 12    36      site_date_time init (2),
 12    37      site_time	init (3)
 12    38     )		fixed bin int static options (constant);
 12    39 
 12    40 dcl time_info_$language_names fixed bin ext static;	/* Table of language names, in various languages	*/
 12    41 
 12    42 dcl 1 ti_language	based (addr (time_info_$language_names)),
 12    43       2 number_lang		fixed bin,		/* number of language names present 		*/
 12    44       2 pad		fixed bin,
 12    45       2 name (0 refer (ti_language.number_lang), 0 refer (ti_language.number_lang))
 12    46 			char(32) varying;		/* Name of the language.			*/
 12    47 			/* All language names are expressed in all languages.  name(i,j) gives the	*/
 12    48 			/*  jth language name in language i.  name(i,i) gives a language name in its	*/
 12    49 			/*  own language.							*/




 12    50 dcl time_info_$month_names   fixed bin ext static;	/* Table of month  names in various languages. 	*/
 12    51 
 12    52 dcl 1 ti_month based (addr (time_info_$month_names)),
 12    53       2 number_lang		fixed bin,		/* number of languages in the table.		*/
 12    54       2 pad		fixed bin,
 12    55       2 e (0 refer (ti_month.number_lang), 12),
 12    56         3 short       	char(8) var,		/* short form of a month name, i.e., Nov 	*/
 12    57         3 long        	char(32) var;		/* long form of a month name, i.e. November 	*/




 12    58 dcl time_info_$day_names     fixed bin ext static;	/* Table of day names in various languages.	*/
 12    59 
 12    60 dcl 1 ti_day based (addr (time_info_$day_names)),
 12    61       2 number_lang		fixed bin,		/* number of languages in the table.		*/
 12    62       2 pad		fixed bin,
 12    63       2 e (0 refer (ti_day.number_lang), 7),
 12    64         3 short       	char(8) var,		/* short for of a day name, i.e. Sat 		*/
 12    65         3 long        	char(32) var;		/* long form of a day name, i.e. Saturday 	*/




 12    66 dcl time_info_$offset_names  fixed bin ext static;	/* Table of offset names in various languages.	*/
 12    67 
 12    68 dcl 1 ti_offset based (addr (time_info_$offset_names)),
 12    69       2 number_lang		fixed bin,		/* number of languages in the table.		*/
 12    70       2 number_offset	fixed bin,
 12    71       2 e (0 refer (ti_offset.number_lang), 0 refer (ti_offset.number_offset)),
 12    72         3 short        	char(32) var,		/* short form of an offset name, i.e. min 	*/
 12    73         3 plural        	char(32) var,		/* plural form of an offset name, i.e. minutes 	*/
 12    74         3 singular       	char(32) var,		/* singular for of an offset name, i.e. minute	*/
 12    75         3 this		char(32) var;		/* "this" which goes with singular		*/




 12    76 dcl time_info_$word_names    fixed bin ext static;	/* Table of word names in various languages.	*/
 12    77 
 12    78 dcl 1 ti_word based (addr (time_info_$word_names)),
 12    79       2 number_lang		fixed bin,		/* number of languages in the table.		*/
 12    80       2 number_word		fixed bin,
 12    81       2 short (0 refer (ti_word.number_lang), 0 refer (ti_word.number_word))
 12    82 			char (8) var,
 12    83       2 word (0 refer (ti_word.number_lang), 0 refer (ti_word.number_word))
 12    84 			char(32) var;		/* a "word", i.e. Midnight			*/
 12    85 
 12    86 dcl time_info_$zone_names    fixed bin ext static;	/* Table of known time zones.			*/
 12    87 
 12    88 dcl 1 ti_zone based (addr (time_info_$zone_names)),
 12    89       2 number_lang    	fixed bin,		/* number of languages in which zone names	*/
 12    90 						/* are defined.				*/
 12    91       2 number_zone       	fixed bin,		/* number of zone names in the table.		*/
 12    92       2 e (0 refer (ti_zone.number_lang), 0 refer (ti_zone.number_zone)),
 12    93         3 short		char(4) var,		/* short form of the zone name.		*/
 12    94         3 long        	char(64) var,		/* long form of the zone name 		*/
 12    95         3 pad		fixed bin,
 12    96         3 delta		fixed bin(71);		/* offset, in microseconds, of this time zone	*/
 12    97 						/* from GMT (Greenwich mean time).  This value	*/
 12    98 						/* should be subtracted from a clock value	*/
 12    99 						/* (which is expressed in GMT by definition).	*/
 12   100 						/* to obtain a date/time expressed in the	*/
 12   101 						/* named time zone.				*/
 12   102 						/* NOTE:  zones are listed in order of descending */
 12   103 						/* delta, from +11 to -12.  print_time_zones	*/
 12   104 						/* requires this.				*/
 12   105 
 12   106 
 12   107 dcl (tiw_FiscalIndicator init (11)
 12   108     )		fixed bin int static options (constant);
 12   109 
 12   110 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 12   111 /* NOTE TO MAINTAINER: Before changing this file, see the comments in	       */
 12   112 /*		        time_info_cds.incl.pl1		       */
 12   113 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 12   114 
 12   115 /* END OF:	time_names_.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     5062 
     5063 
 13     1 /* BEGIN INCLUDE FILE ... mlsys_special_chars.incl.pl1 */
 13     2 /* Created:  June 1981 by G. Palter */
 13     3 /* Modified: July 1983 by G. Palter for new mail interfaces and RFC822 */
 13     4 
 13     5 /* Sets of characters with special meanings to the Multics mail system: */
 13     6 
 13     7 /* The definition of whitespace used by the mail system */
 13     8 
 13     9 dcl  WHITESPACE character (5) static options (constant) initial ("	 
 13    10 ");						/* horizontal tab, space, newline, vertical tab, formfeed */
 13    11 
 13    12 dcl  BACKSLASH_PARENS_NL character (4) static options (constant) initial ("\()
 13    13 ");
 13    14 
 13    15 dcl  BACKSLASH_QUOTE_NL character (3) static options (constant) initial ("\""
 13    16 ");
 13    17 
 13    18 dcl  QUOTE_PARENS_NL character (4) static options (constant) initial ("""()
 13    19 ");
 13    20 
 13    21 
 13    22 /* Address, date/time, and message-id parsing self-defining tokens and token delimiters */
 13    23 
 13    24 dcl  DATE_TIME_BREAKS character (4) static options (constant) initial (",:+-");
 13    25 
 13    26 dcl  NORMAL_BREAKS character (8) static options (constant) initial (",:;{}<>@");
 13    27 
 13    28 dcl  DATE_TIME_RFC822_DELIMITERS character (13) static options (constant) initial (",:+-()""\	 
 13    29 ");						/* last five are: tab, space, newline, vertical tab, formfeed */
 13    30 
 13    31 dcl  DATE_TIME_DELIMITERS character (12) static options (constant) initial (",:+-()""	 
 13    32 ");
 13    33 
 13    34 dcl  NORMAL_RFC822_DELIMITERS character (17) static options (constant) initial (",:;{}<>@()""\	 
 13    35 ");
 13    36 
 13    37 dcl  NORMAL_DELIMITERS character (16) static options (constant) initial (",:;{}<>@()""	 
 13    38 ");
 13    39 
 13    40 dcl  STRUCTURED_RFC822_DELIMITERS character (11) static options (constant) initial ("{}()""\	 
 13    41 ");
 13    42 
 13    43 dcl  STRUCTURED_DELIMITERS character (10) static options (constant) initial ("{}()""	 
 13    44 ");
 13    45 
 13    46 
 13    47 /* Characters which must be requoted within the printed or RFC822 representation of addresses */
 13    48 
 13    49 dcl  COMMENT_REQUOTE character (7) static options (constant) initial ("()""	
 13    50 ");
 13    51 
 13    52 dcl  COMMENT_RFC822_REQUOTE character (7) static options (constant) initial ("()\	
 13    53 ");
 13    54 
 13    55 dcl  STRUCTURED_REQUOTE character (10) static options (constant) initial ("{}()"" 	
 13    56 ");
 13    57 
 13    58 dcl  STRUCTURED_RFC822_REQUOTE character (11) static options (constant) initial ("{}()""\ 	
 13    59 ");
 13    60 
 13    61 dcl  TOP_LEVEL_REQUOTE character (15) static options (constant) initial (",:;<>(){}@""	
 13    62 ");
 13    63 
 13    64 dcl  TOP_LEVEL_RFC822_REQUOTE character (18) static options (constant) initial (",:;<>(){}[]@""\	
 13    65 ");
 13    66 
 13    67 
 13    68 /* Common sequences used when constructing printed and RFC822 representations */
 13    69 
 13    70 dcl (ATSIGN		initial ("@"),
 13    71      BACKSLASH		initial ("\"),
 13    72      CLOSE_PAREN		initial (")"),
 13    73      COMMA		initial (","),
 13    74      SEMICOLON		initial (";"),
 13    75      HT			initial ("	"),
 13    76      BS			initial (""),
 13    77      LEFT_ANGLE_BRACKET	initial ("<"),
 13    78      LEFT_BRACE		initial ("{"),
 13    79      OPEN_PAREN		initial ("("),
 13    80      PERIOD		initial ("."),
 13    81      QUOTE		initial (""""),
 13    82      RIGHT_ANGLE_BRACKET	initial (">"),
 13    83      RIGHT_BRACE		initial ("}"),
 13    84      SP			initial (" "),
 13    85      COLON		initial (":"),
 13    86      HYPHEN		initial ("-"),
 13    87      PLUS		 	initial ("+"),
 13    88      NL			initial ("
 13    89 "),
 13    90      CR			initial (""),
 13    91      VT			initial (""),
 13    92      FF			initial (""))
 13    93 	character (1) static options (constant);
 13    94 
 13    95 dcl (ANGLE_BRACKETS		initial ("<>"),
 13    96      BACKSLASH_QUOTE	initial ("\"""),
 13    97      HTSP			initial ("	 "),
 13    98      NLSP			initial ("
 13    99  "),
 13   100      QUOTE_LEFT_BRACE	initial ("""{"),
 13   101      QUOTE_NL		initial ("""
 13   102 "),
 13   103      QUOTE_QUOTE		initial (""""""),
 13   104      RIGHT_BRACE_QUOTE	initial ("}"""),
 13   105      SP_LEFT_ANGLE_BRACKET	initial (" <"),
 13   106      SP_OPEN_PAREN		initial (" ("),
 13   107      COLON_SP		initial (": "),
 13   108      COMMA_SP		initial (", "),
 13   109      SPSP			initial ("  "),
 13   110      NLNL			initial ("
 13   111 
 13   112 "))
 13   113 	character (2) static options (constant);
 13   114 
 13   115 dcl  SP_AT_SP character (4) static options (constant) initial (" at ");
 13   116 
 13   117 dcl  SP_VIA_SP character (5) static options (constant) initial (" via ");
 13   118 
 13   119 /* END INCLUDE FILE ... mlsys_special_chars.incl.pl1 */
     5064 
     5065 
     5066      end mlsys_parse_text_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/26/88  1011.7  mlsys_parse_text_.pl1             >spec>install>1069>mlsys_parse_text_.pl1
5040         1    10/27/83  2104.2  mlsys_parse_txt_options.incl.pl1  >ldd>include>mlsys_parse_txt_options.incl.pl1
5042         2    10/27/83  2104.2  mlsys_data.incl.pl1               >ldd>include>mlsys_data.incl.pl1
5044         3    06/30/86  2023.8  mlsys_internal_data.incl.pl1      >ldd>include>mlsys_internal_data.incl.pl1
5046         4    10/27/83  2104.2  mlsys_address_types.incl.pl1      >ldd>include>mlsys_address_types.incl.pl1
5048         5    10/27/83  2104.2  mlsys_field_types.incl.pl1        >ldd>include>mlsys_field_types.incl.pl1
5050         6    10/27/83  2104.2  mlsys_field_names.incl.pl1        >ldd>include>mlsys_field_names.incl.pl1
5052         7    05/22/86  1225.8  mlsys_message.incl.pl1            >ldd>include>mlsys_message.incl.pl1
5054         8    10/27/83  2104.2  mlsys_address_route.incl.pl1      >ldd>include>mlsys_address_route.incl.pl1
5056         9    10/27/83  2104.2  mlsys_address_list.incl.pl1       >ldd>include>mlsys_address_list.incl.pl1
5058        10    02/18/88  2023.8  sl_info.incl.pl1                  >ldd>include>sl_info.incl.pl1
5060        11    01/09/79  1617.9  sl_control_s.incl.pl1             >ldd>include>sl_control_s.incl.pl1
5062        12    09/06/84  0850.2  time_names.incl.pl1               >ldd>include>time_names.incl.pl1
5064        13    11/30/83  1737.3  mlsys_special_chars.incl.pl1      >ldd>include>mlsys_special_chars.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACCESS_CLASS_FIELD                     constant        fixed bin(17,0)          initial dcl 5-6 ref 656 656
ACKNOWLEDGE_TO_FIELD                   constant        fixed bin(17,0)          initial dcl 5-6 ref 657 657 2669 2671 2678 2679 2680
ADDRESS_LIST_VERSION_2          000044 constant        char(8)                  initial packed unaligned dcl 9-12 set ref 1543*
                                                                                  2691* 3028* 3834* 3860*
ADDRESS_ROUTE_VERSION_1         000046 constant        char(8)                  initial packed unaligned dcl 8-14 set ref 2780* 2788
                                                                                  2811 3301
AT_TOKEN                               constant        fixed bin(17,0)          initial dcl 419 ref 2796 2799 3160 3177 3194 3230
                                                                                  4275 4281 4844 4850
BACKSLASH                              constant        char(1)                  initial packed unaligned dcl 13-70 ref 4702 4796
                                                                                  4920
BACKSLASH_PARENS_NL             000037 constant        char(4)                  initial packed unaligned dcl 13-12 ref 4654
BACKSLASH_QUOTE_NL              000036 constant        char(3)                  initial packed unaligned dcl 13-15 ref 4893
BCC_FIELD                              constant        fixed bin(17,0)          initial dcl 5-6 ref 771 772 772
BCC_FIELDNAME                   000152 constant        varying char(32)         initial dcl 6-6 set ref 772*
CC_FIELD                               constant        fixed bin(17,0)          initial dcl 5-6 ref 759 760 760
CC_FIELDNAME                    000141 constant        varying char(32)         initial dcl 6-6 set ref 760*
CLOSE_PAREN                            constant        char(1)                  initial packed unaligned dcl 13-70 ref 4532 4676
                                                                                  4679
COLON                                  constant        char(1)                  initial packed unaligned dcl 13-70 ref 1767 1838
COLON_TOKEN                            constant        fixed bin(17,0)          initial dcl 419 ref 3156 3173 3221 3567 3582 4034
                                                                                  4056
COMMA_TOKEN                            constant        fixed bin(17,0)          initial dcl 419 ref 3174 3631 3932 3988 4022
COMMENT_FIELD                          constant        fixed bin(17,0)          initial dcl 5-6 ref 917 917 1022 1022 1022 1082 1082
                                                                                  1082
COMMENT_FIELDS_BASE                    constant        fixed bin(17,0)          initial dcl 5-23 ref 1931 1931 1933
COMMENT_TOKEN                          constant        fixed bin(17,0)          initial dcl 419 ref 3325 3565 3716 4724 4989
CONTINUATION_INDICATOR          043760 constant        char(2)                  initial packed unaligned dcl 2328 ref 2433
DATE_FIELD                             constant        fixed bin(17,0)          initial dcl 5-6 ref 658 658 915 1038 1047 2520 2526
                                                                                  2527 2533 2534 2535
DATE_TIME_BREAKS                000034 constant        char(4)                  initial packed unaligned dcl 13-24 ref 4561 4568
DATE_TIME_DELIMITERS            000022 constant        char(12)                 initial packed unaligned dcl 13-31 ref 4769
DATE_TIME_RFC822_DELIMITERS     000025 constant        char(13)                 initial packed unaligned dcl 13-28 ref 4772
DAY_OF_WEEKS                    000631 constant        char(32)                 initial array packed unaligned dcl 464 ref 3981 3981
                                                                                  3982
DAY_OF_WEEK_VALUES              000613 constant        fixed bin(17,0)          initial array dcl 467 ref 3982
DELIVERY_BY_FIELD                      constant        fixed bin(17,0)          initial dcl 5-6 ref 659 659 2650 2651 2657 2658 2659
DELIVERY_DATE_FIELD                    constant        fixed bin(17,0)          initial dcl 5-6 ref 660 660 2520 2558 2559 2565 2566
                                                                                  2567
END_OF_TEXT_TOKEN               043765 constant        fixed bin(17,0)          initial dcl 419 ref 2807 3572 3623 3625 3925 3927
                                                                                  4130 4273 4292 4596
FIELDNAME_SUFFIX                000000 constant        char(3)                  initial packed unaligned dcl 2326 ref 2404
FOREIGN_ADDRESS                        constant        fixed bin(17,0)          initial dcl 4-6 ref 2613 2628
FROM_FIELD                             constant        fixed bin(17,0)          initial dcl 5-6 ref 646 646 2623 2623
FROM_FIELDNAME                  000130 constant        varying char(32)         initial dcl 6-6 set ref 646* 2619 2621
HTSP                            043761 constant        char(2)                  initial packed unaligned dcl 13-95 ref 1846 1849
                                                                                  1854 1866 1879 2399 2419 2433 4694 4807 4913
HTSP_COMMA                      001077 constant        char(3)                  initial packed unaligned dcl 186 ref 836 839
HYPHEN_TOKEN                           constant        fixed bin(17,0)          initial dcl 419 ref 4001 4011 4107 4108
IN_REPLY_TO_FIELD                      constant        fixed bin(17,0)          initial dcl 5-6 ref 798 804 805 824 825
LEFTBRACE_TOKEN                        constant        fixed bin(17,0)          initial dcl 419 ref 3187 3331 3576 4542
LEFTBRACKET_TOKEN                      constant        fixed bin(17,0)          initial dcl 419 ref 2774 2881 2885 3208 3580 4266
LEFT_BRACE                             constant        char(1)                  initial packed unaligned dcl 13-70 ref 4535
LINE_DELIMITERS                 001076 constant        char(4)                  initial packed unaligned dcl 188 ref 866
LOWERCASE                       001014 constant        char(26)                 initial packed unaligned dcl 200 ref 2842 2849 2849
                                                                                  2856 2862 2868 2874 2903 3337 3347 3375 3400 3475
                                                                                  3982 4006 4094 4178 4841 4848
MESSAGE_ADDRESS_LIST_USER_FIELD        constant        fixed bin(17,0)          initial dcl 7-174 ref 1269
MESSAGE_BODY_SECTION_PARAMETER_VERSION_2
                                000050 constant        char(8)                  initial packed unaligned dcl 7-318 ref 631
MESSAGE_ENVELOPE_PARAMETER_VERSION_2
                                000062 constant        char(8)                  initial packed unaligned dcl 7-79 ref 678
MESSAGE_ID_FIELD                       constant        fixed bin(17,0)          initial dcl 5-6 ref 661 661 702 703 708 709 710 994
                                                                                  995 999 1000 1001 1924
MESSAGE_PREFORMATTED_BODY_SECTION      constant        fixed bin(17,0)          initial dcl 7-285 ref 634
MESSAGE_REDISTRIBUTION_PARAMETER_VERSION_2
                                000056 constant        char(8)                  initial packed unaligned dcl 7-144 ref 981
MESSAGE_REFERENCE_PARAMETER_VERSION_2
                                000052 constant        char(8)                  initial packed unaligned dcl 7-253 ref 819
MESSAGE_TEXT_USER_FIELD                constant        fixed bin(17,0)          initial dcl 7-174 ref 860 904
MESSAGE_TRACE_VERSION_2         000060 constant        char(8)                  initial packed unaligned dcl 7-103 ref 2742
MESSAGE_USER_FIELD_PARAMETER_VERSION_2
                                000054 constant        char(8)                  initial packed unaligned dcl 7-213 ref 858 897
MONTHS                          000323 constant        char(32)                 initial array packed unaligned dcl 471 ref 4005 4005
                                                                                  4006
MONTH_VALUES                    000274 constant        fixed bin(17,0)          initial array dcl 475 ref 4006
MULTIPLE_FIELDS_PER_COMMENT     001032 constant        bit(1)                   initial array dcl 196 ref 1935
MULTIPLE_FIELDS_PER_REDISTRIBUTION
                                001054 constant        bit(1)                   initial array dcl 192 ref 1921
NL                              000002 constant        char(1)                  initial packed unaligned dcl 13-70 set ref 831 1354
                                                                                  1413 1749 1764 1778 1783 1790 1833 1863 1982 2373
                                                                                  2399 2401 2411 2447 2447 4510 4594 4686 4688 4706
                                                                                  4804 4905 4907 4924
NLNL                                   constant        char(2)                  initial packed unaligned dcl 13-95 ref 1760
NORMAL_BREAKS                   000032 constant        char(8)                  initial packed unaligned dcl 13-26 ref 4573 4579
NORMAL_DELIMITERS               000011 constant        char(16)                 initial packed unaligned dcl 13-37 ref 4773
NORMAL_RFC822_DELIMITERS        000015 constant        char(17)                 initial packed unaligned dcl 13-34 ref 4776
N_ORDINARY_FIELDS                      constant        fixed bin(17,0)          initial dcl 5-6 ref 919 948 955 1808 1809 1908 1916
                                                                                  1931 2003 2006 2021 2024 2041 2046 2054 2180
ONE_MINUTE                      001012 constant        fixed bin(71,0)          initial dcl 461 ref 4123 4204 5023
OPEN_PAREN                             constant        char(1)                  initial packed unaligned dcl 13-70 ref 4529 4666
                                                                                  4668
ORDINARY_FIELDS_BASE                   constant        fixed bin(17,0)          initial dcl 5-23 ref 1908
PARSE_TEXT_OPTIONS_VERSION_1    000164 constant        char(8)                  initial packed unaligned dcl 1-17 ref 500 555 1436
PERIOD                                 constant        char(1)                  initial packed unaligned dcl 13-70 ref 4314
PLUS_TOKEN                             constant        fixed bin(17,0)          initial dcl 419 ref 4107
POSTED_DATE_FIELD                      constant        fixed bin(17,0)          initial dcl 5-6 ref 662 662 2520 2542 2543 2549 2550
                                                                                  2551
P_address_list_ptr                     parameter       pointer                  dcl 82 set ref 1307 1424* 1431 1503*
P_address_list_version                 parameter       char(8)                  packed unaligned dcl 81 set ref 1307 1344* 1431
                                                                                  1477*
P_address_ptr                          parameter       pointer                  dcl 87 set ref 1556 1591*
P_code                                 parameter       fixed bin(35,0)          dcl 57 set ref 494 540* 548 556* 560* 596* 1296*
                                                                                  1298* 1307 1346* 1425* 1431 1437* 1441* 1479*
                                                                                  1506* 1508* 1556 1594* 2134*
P_im_message_info_ptr                  parameter       pointer                  dcl 72 set ref 494 538*
P_last_date_time_delivered             parameter       fixed bin(71,0)          dcl 74 ref 494 512
P_last_delivered_by                    parameter       pointer                  dcl 73 ref 494 511
P_message_ptr                          parameter       pointer                  dcl 67 set ref 494 548 1291* 2133*
P_message_version                      parameter       char(8)                  packed unaligned dcl 66 set ref 494 538* 548 594*
P_multics_format                       parameter       bit(1)                   dcl 76 ref 494 507
P_parse_text_error_list_ptr            parameter       pointer                  dcl 61 set ref 548 1293* 1431 1504* 2130*
P_parse_text_options_ptr               parameter       pointer                  dcl 60 ref 548 554 1431 1435
P_representation                       parameter       char                     packed unaligned dcl 59 set ref 494 548 604 606 1307
                                                                                  1350 1351 1431 1483* 1556 1588*
P_requests_acknowledgement             parameter       bit(1)                   dcl 75 ref 494 513
QUOTE                           043763 constant        char(1)                  initial packed unaligned dcl 13-70 ref 4558 4815
                                                                                  4941 4943
QUOTE_NL                               constant        char(2)                  initial packed unaligned dcl 13-95 ref 4891
QUOTE_PARENS_NL                 000035 constant        char(4)                  initial packed unaligned dcl 13-18 ref 4652
REDISTRIBUTED_COMMENT_FIELDNAME 000064 constant        varying char(32)         initial dcl 6-6 ref 1022 1022
REDISTRIBUTED_FIELDS_BASE              constant        fixed bin(17,0)          initial dcl 5-23 ref 1916 1916 1919
REDISTRIBUTED_PREFIX            000075 constant        varying char(32)         initial dcl 6-6 ref 1017 2619
RELAYED_FIELD                          constant        fixed bin(17,0)          initial dcl 5-6 ref 663 663 2714 2737 2829 2831
REPLY_TO_FIELD                         constant        fixed bin(17,0)          initial dcl 5-6 ref 735 736 736
REPLY_TO_FIELDNAME              000117 constant        varying char(32)         initial dcl 6-6 set ref 736*
RFC822_ZONES                    000231 constant        char(4)                  initial array packed unaligned dcl 480 ref 4198 4198
                                                                                  4199
RFC822_ZONE_OFFSETS             000166 constant        fixed bin(17,0)          initial array dcl 485 ref 4204
RIGHTBRACE_TOKEN                       constant        fixed bin(17,0)          initial dcl 419 ref 3189 3340 3355 3381 3406 3481
                                                                                  3579 4554
RIGHTBRACKET_TOKEN                     constant        fixed bin(17,0)          initial dcl 419 ref 2886 3581 3633 3934 4274 4289
RIGHT_BRACE                            constant        char(1)                  initial packed unaligned dcl 13-70 ref 4546
ROUTE_FIELD                            constant        fixed bin(17,0)          initial dcl 5-6 ref 664 664 2714 2761 2763
SEMICOLON_TOKEN                        constant        fixed bin(17,0)          initial dcl 419 ref 2841 3583 3635 3936
SENDER_FIELD                           constant        fixed bin(17,0)          initial dcl 5-6 ref 665 665 915 1038 1061 2595 2596
                                                                                  2602 2603 2604
SP                              043762 constant        char(1)                  initial packed unaligned dcl 13-70 ref 2283 2429
STACK_EXTENSION                 001100 constant        fixed bin(18,0)          initial dcl 184 in procedure "mlsys_parse_text_" set
                                                                                  ref 4355* 4391
STACK_EXTENSION                 000001 constant        fixed bin(18,0)          initial dcl 2324 in procedure
                                                                                  "prepare_multiline_field" set ref 2334* 2335 2346*
                                                                                  2347 2468* 2469
STANDARD_MULTILINE_INDENTATION         constant        fixed bin(17,0)          initial dcl 2327 ref 2400
START_OF_TEXT_TOKEN                    constant        fixed bin(17,0)          initial dcl 419 ref 4509
STRUCTURED_DELIMITERS           000003 constant        char(10)                 initial packed unaligned dcl 13-43 ref 4777
STRUCTURED_RFC822_DELIMITERS    000006 constant        char(11)                 initial packed unaligned dcl 13-40 ref 4779
SUBJECT_FIELD                          constant        fixed bin(17,0)          initial dcl 5-6 ref 786 787 787 791
TO_FIELD                               constant        fixed bin(17,0)          initial dcl 5-6 ref 747 748 748 1018 1018 1018
TO_FIELDNAME                    000106 constant        varying char(32)         initial dcl 6-6 set ref 748* 1017
UPPERCASE                       001023 constant        char(26)                 initial packed unaligned dcl 200 ref 2842 2849 2849
                                                                                  2856 2862 2868 2874 2903 3337 3347 3375 3400 3475
                                                                                  3982 4006 4094 4178 4841 4848
USER_DEFINED_FIELD                     constant        fixed bin(17,0)          initial dcl 5-6 ref 1896
WHITESPACE                      000040 constant        char(5)                  initial packed unaligned dcl 13-9 ref 1363 1393 4520
WORD_TOKEN                      043764 constant        fixed bin(17,0)          initial dcl 419 ref 2802 2842 2845 2852 2858 2864
                                                                                  2870 2880 3171 3198 3235 3238 3334 3350 3378 3403
                                                                                  3478 3978 3994 4003 4013 4029 4051 4073 4090 4110
                                                                                  4283 4838
abs                                                    builtin function         dcl 311 ref 5023
acknowledge_to           16     000366 automatic       pointer                  level 3 in structure "local_mep" dcl 156
                                                                                  in procedure "mlsys_parse_text_" set ref 1169 1174
                                                                                  1174 1174* 1176* 1193 1193 1193* 1195* 1240* 1631*
                                                                                  1666 1666*
acknowledge_to           16            based           pointer                  level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 1248*
acknowledge_to                  000600 automatic       pointer                  dcl 175 in procedure "mlsys_parse_text_" set ref
                                                                                  1160* 1163 1166* 1169 1169* 1170 1170* 1174 1176
                                                                                  1181 1184 1188 1193
acknowledge_to           16            based           pointer                  array level 4 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 982* 1166
                                                                                  1166 1181 1181 1181* 1184* 1188 1188 1188* 1190*
                                                                                  1684 1684*
acknowledge_to           12            based           pointer                  level 2 in structure "envelope" dcl 2498
                                                                                  in procedure "parse_envelope" set ref 2509* 2672*
add_address                     000120 automatic       entry variable           level 2 dcl 108 set ref 515* 580* 1328* 1445* 1543
                                                                                  1559* 2691 3860
add_body_section          4     000120 automatic       entry variable           level 2 dcl 108 set ref 516* 581* 638
add_redistribution       10     000120 automatic       entry variable           level 2 dcl 108 set ref 517* 1246
add_reply_reference      14     000120 automatic       entry variable           level 2 dcl 108 set ref 518* 844
add_user_field           20     000120 automatic       entry variable           level 2 dcl 108 set ref 519* 582* 880 931
addcharno                                              builtin function         dcl 311 ref 1752 1774 1786 1842 1874 4520 4529 4532
                                                                                  4535 4540 4546 4552 4558 4561 4566 4568 4573 4577
                                                                                  4579 4652 4654 4661 4666 4676 4686 4694 4702 4706
                                                                                  4709 4769 4772 4773 4776 4777 4779 4786 4796 4802
                                                                                  4804 4807 4815 4834 4891 4893 4900 4905 4913 4920
                                                                                  4924 4927 4941
additional_info                 001237 automatic       varying char(128)        dcl 2501 in procedure "parse_envelope" set ref 2511*
                                                                                  2513* 2520* 2636*
additional_info           4            based           varying char(128)        array level 3 in structure "parse_text_error_list"
                                                                                  dcl 1-24 in procedure "mlsys_parse_text_" set ref
                                                                                  1496* 2103* 2129* 3081* 3084*
addr                                                   builtin function         dcl 311 ref 504 604 633 638 638 646 646 656 656 657
                                                                                  657 658 658 659 659 660 660 661 661 662 662 663
                                                                                  663 664 664 665 665 680 680 736 736 748 748 760
                                                                                  760 772 772 787 787 791 844 844 859 875 880 880
                                                                                  886 898 917 917 931 931 936 949 949 956 956 986
                                                                                  991 991 1018 1018 1022 1022 1082 1082 1107 1221
                                                                                  1238 1238 1244 1249 1268 1276 1314 1350 1566 1778
                                                                                  1790 2269 2383 2443 2443 2447 2447 2623 2623 2832
                                                                                  3073 4176 4177 4178 4350 4510 4540 4552 4566 4577
                                                                                  4594 4627 4722 4731 4830 4970 4987 4991 5010
address_comment                        based           varying char             dcl 456 set ref 3316* 3342* 3370* 3395* 3470* 3496*
                                                                                  3509* 3512* 3520* 3685* 3686* 3689* 4366 4366 4429
address_comment_ptr      12     000670 automatic       pointer                  level 3 dcl 379 set ref 3316 3342 3370 3395 3470
                                                                                  3496 3509 3512 3520 3685 3686 3689 4366 4366 4366*
                                                                                  4429 4429 4429
address_component               000455 automatic       char(32)                 packed unaligned dcl 3112 set ref 3483* 3489* 3495*
                                                                                  3496*
address_dirname                 000373 automatic       char(168)                packed unaligned dcl 3111 set ref 3360* 3361* 3363*
                                                                                  3365* 3370* 3386* 3387* 3389* 3391* 3395* 3417*
                                                                                  3427* 3431* 3436* 3441* 3447* 3461* 3470* 3483*
                                                                                  3487* 3488* 3489* 3492* 3496*
address_ename                   000445 automatic       char(32)                 packed unaligned dcl 3112 set ref 3358* 3360* 3361*
                                                                                  3365* 3369* 3370* 3384* 3386* 3387* 3391* 3394*
                                                                                  3395* 3410 3412* 3412 3413* 3413* 3413 3413 3416*
                                                                                  3427* 3427* 3427* 3430 3433* 3438* 3447* 3449*
                                                                                  3449* 3449 3449 3452* 3456* 3456* 3459 3460* 3461*
                                                                                  3463 3463* 3470* 3483* 3488* 3489* 3495* 3496*
address_is_local                000510 automatic       bit(1)                   dcl 3117 set ref 3267* 3272* 3321
address_list                           based           structure                level 1 dcl 9-6
address_list_field              000570 automatic       pointer                  dcl 175 set ref 646* 648 649* 651 651* 653* 680* 687
                                                                                  688* 690 690* 692* 736* 738 739* 741 741* 743*
                                                                                  748* 750 751* 753 753* 755* 760* 762 763* 765 765*
                                                                                  767* 772* 774 775* 777 777* 779* 1631* 1651 1651*
address_list_ptr                000744 automatic       pointer                  dcl 9-14 in procedure "mlsys_parse_text_" set ref
                                                                                  1333* 1338 1338* 1344* 1365* 1373* 1373 1381* 1381
                                                                                  1393* 1393 1424 1466* 1471 1471* 1477* 1483* 1486*
                                                                                  1503
address_list_ptr          2            based           pointer                  level 2 in structure
                                                                                  "message_address_list_user_field" dcl 7-190
                                                                                  in procedure "mlsys_parse_text_" set ref 1269*
address_name                           based           varying char             dcl 455 set ref 3312* 3314* 3342* 3370* 3395* 3470*
                                                                                  3496* 3509* 3512* 3520* 3684* 3689* 4365 4365 4426
address_name_end                000504 automatic       fixed bin(21,0)          dcl 3115 set ref 3138* 3214* 3314* 3655* 3684* 3685*
address_name_ptr         10     000670 automatic       pointer                  level 3 dcl 379 set ref 3312 3314 3342 3370 3395
                                                                                  3470 3496 3509 3512 3520 3684 3689 4365 4365 4365*
                                                                                  4426 4426 4426
address_name_start              000503 automatic       fixed bin(21,0)          dcl 3115 set ref 3138* 3213* 3312 3314* 3654* 3684*
                                                                                  3685*
address_pathname                000311 automatic       char(200)                packed unaligned dcl 3110 set ref 3351* 3353* 3357
                                                                                  3358* 3361* 3365* 3379* 3383 3384* 3387* 3391*
                                                                                  3404* 3408 3410 3412 3447* 3479* 3483* 3486 3489*
address_ptr                     000114 automatic       pointer                  dcl 100 set ref 1588* 1591
address_route                          based           structure                level 1 dcl 8-6 set ref 1655 1672 2786 2809 2970
                                                                                  3132 3300 3541
address_route_n_relays          000742 automatic       fixed bin(17,0)          dcl 8-18 set ref 2785* 2786 2786 2798* 2800* 2800
                                                                                  2804 2809 2809 2812 2814 3299* 3300 3300
address_route_ptr               000740 automatic       pointer                  dcl 8-16 set ref 2786* 2787 2788 2789 2790 2792 2792
                                                                                  2809* 2810 2811 2814 3126* 3132 3132 3296* 3300*
                                                                                  3301 3305 3520* 3541 3541
address_string                         based           varying char             dcl 454 set ref 3505* 3506* 3509* 3512* 3519* 3520*
                                                                                  4297* 4300* 4300 4302* 4302 4312 4313 4330 4364
                                                                                  4364 4423
address_string_ptr        6     000670 automatic       pointer                  level 3 dcl 379 set ref 3505 3506 3509 3512 3519
                                                                                  3520 4297 4300 4300 4302 4302 4312 4313 4330 4364
                                                                                  4364 4364* 4423 4423 4423
address_system                  001534 automatic       varying char(256)        dcl 2731 set ref 2783* 2792
address_type                    001402 automatic       fixed bin(17,0)          dcl 2504 set ref 2612* 2613 2627* 2628
addresses                10            based           pointer                  array level 2 dcl 9-6 set ref 1076 1212* 1230* 2201*
                                                                                  2627* 2629* 2697* 2700*
addwordno                                              builtin function         dcl 311 ref 4372 4392
all_but_sel_ptr                 000670 automatic       structure                level 2 dcl 379 set ref 4433*
amount_good                     000616 automatic       fixed bin(21,0)          dcl 180 set ref 1375* 1383* 1385* 1397* 1400* 1403*
                                                                                  1406* 1409 1416 1417
an_address                      000210 automatic       pointer                  dcl 3824 set ref 3856* 3859 3860*
an_address_list_ptr             000652 automatic       pointer                  dcl 3651 set ref 3657* 3666* 3678* 3689*
angle_bracket           107(02)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3102 in procedure "parse_address" set ref
                                                                                  3217* 3633
angle_bracket           107(02)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3817 in procedure "parse_address_list" ref
                                                                                  3934
area_ptr                  2     000106 automatic       pointer                  level 2 in structure "local_pto" dcl 98 in procedure
                                                                                  "mlsys_parse_text_" set ref 501* 1310*
area_ptr                  2            based           pointer                  level 2 in structure "parse_text_options" dcl 1-6
                                                                                  in procedure "mlsys_parse_text_" set ref 564 566
                                                                                  1452 1454
array_pointers            6     000636 automatic       structure                level 2 dcl 316 set ref 1631* 2061*
bad_address                     001026 automatic       pointer                  dcl 1525 set ref 1542* 1543*
baseno                                                 builtin function         dcl 311 ref 3281 3281 4411 4411 4415 4415 4419 4419
                                                                                  4423 4423 4426 4426 4429 4429 4436 4436
bcc                      46            based           pointer                  level 3 dcl 7-15 set ref 777 1266*
before                                                 builtin function         dcl 311 ref 2399
body                      2     000636 automatic       structure                level 2 dcl 316
body_lth                  4     000636 automatic       fixed bin(21,0)          level 3 dcl 316 set ref 636 1779* 1791* 1795*
body_ptr                  2     000636 automatic       pointer                  level 3 dcl 316 set ref 635 1778* 1790* 1794*
brace_level                     002160 automatic       fixed bin(21,0)          dcl 4464 in procedure "lex_string" set ref 4516*
                                                                                  4537* 4537 4546 4550* 4550 4573 4587 4773
brace_level                     000100 automatic       fixed bin(21,0)          dcl 3559 in procedure "bad_address_syntax" set ref
                                                                                  3563* 3573 3576* 3576 3579* 3579
braces_special                  002154 automatic       bit(1)                   dcl 4462 set ref 4477* 4489* 4501* 4535 4546
bracket_level                   001637 automatic       fixed bin(21,0)          dcl 2732 in procedure "parse_trace" set ref 2882*
                                                                                  2883 2885* 2885 2886* 2886
bracket_level                   000101 automatic       fixed bin(21,0)          dcl 3559 in procedure "bad_address_syntax" set ref
                                                                                  3563* 3573 3580* 3580 3581* 3581
cc                       44            based           pointer                  level 3 dcl 7-15 set ref 765 1265*
charno                                                 builtin function         dcl 311 ref 1758 1758 3073 3073
check_star_name_$entry          000122 constant        entry                    external dcl 219 ref 3752 3753
cleanup                         000630 stack reference condition                dcl 309 ref 617 1336 1469 1581 3128
code                      3            based           fixed bin(35,0)          array level 3 in structure "parse_text_error_list"
                                                                                  dcl 1-24 in procedure "mlsys_parse_text_" set ref
                                                                                  1495* 2102* 2128* 3080*
code                     15            based           fixed bin(35,0)          array level 3 in structure "sl_info" dcl 10-15
                                                                                  in procedure "mlsys_parse_text_" ref 3799
code                            001735 automatic       fixed bin(35,0)          dcl 3961 in procedure "parse_date_time_text" set ref
                                                                                  3969* 3970 3997* 3998 4016* 4018* 4019 4031* 4032
                                                                                  4040* 4044* 4047 4053* 4054 4062* 4066* 4069 4076*
                                                                                  4077 4116* 4117 4118* 4119 4141* 4144 4149
code                            000100 automatic       fixed bin(35,0)          dcl 92 in procedure "mlsys_parse_text_" set ref 538*
                                                                                  539 540 594* 595 596 638* 639 639* 649* 650 650*
                                                                                  684* 685 685* 688* 689 689* 727* 728 728* 739* 740
                                                                                  740* 751* 752 752* 763* 764 764* 775* 776 776*
                                                                                  790* 793 793* 844* 845 845* 880* 881 883* 900* 901
                                                                                  901 901* 931* 932 934* 1048* 1050 1051* 1062* 1064
                                                                                  1065* 1238* 1239 1239* 1246* 1247 1247* 1344* 1345
                                                                                  1346 1365* 1477* 1478 1479 1483* 1486 1588* 1591
                                                                                  1594 1887* 1888 1889* 1903* 1905 1905 1905* 2528*
                                                                                  2529 2529* 2544* 2545 2545* 2560* 2561 2561* 2597*
                                                                                  2598 2598* 2652* 2653 2653* 2672* 2674 2674* 2691*
                                                                                  2692 2692* 2768* 2769 2769* 2776* 2779 2779* 2780*
                                                                                  2782 2782* 2783* 2784 2784* 2835* 2836 2836* 2907*
                                                                                  2909 2909* 2932* 2934 2934* 3028* 3029 3029* 3034*
                                                                                  3035 3035* 3342* 3344 3344* 3358* 3359 3359* 3360*
                                                                                  3361 3361* 3363 3365* 3368 3368* 3370* 3372 3372*
                                                                                  3384* 3385 3385* 3386* 3387 3387* 3389 3391* 3393
                                                                                  3393* 3395* 3397 3397* 3423* 3425 3425* 3427*
                                                                                  3431* 3433 3436* 3438 3441 3447* 3448 3448* 3461*
                                                                                  3463 3470* 3472 3472* 3483* 3485 3485* 3488* 3489
                                                                                  3489* 3492 3494 3494* 3496* 3498 3498* 3506* 3508
                                                                                  3508* 3509* 3512* 3514 3514* 3520* 3522 3522*
                                                                                  3526* 3527 3529* 3533* 3546 3610* 3666* 3669 3669
                                                                                  3689* 3691 3691* 3834* 3835 3836 3856* 3860* 3861
                                                                                  3861* 3864 3867 3869* 3874* 3876 3912* 4243* 4245
                                                                                  4315* 4316 4316* 4317 4317* 4318 4318* 4319 4319*
                                                                                  4320 4320* 4321 4321* 4322 4322* 4325
code                      2            based           fixed bin(35,0)          array level 2 in structure "sel" dcl 444
                                                                                  in procedure "mlsys_parse_text_" set ref 1371 1371
                                                                                  1371 1378 1387 1495 1539* 3080 3600* 3909*
code                            000674 automatic       fixed bin(35,0)          dcl 3750 in procedure "reject_starnames" set ref
                                                                                  3752* 3753 3753* 3756 3756 3756* 3758 3758*
column                          000124 automatic       fixed bin(21,0)          dcl 2397 set ref 2425* 2427 2429* 2429 2430 2430*
                                                                                  2430 2431* 2431 2431 2433
comma                   107(01)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3817 in procedure "parse_address_list" ref
                                                                                  3932
comma                   107(01)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3102 in procedure "parse_address" set ref 3631
comma                   107(01) 000100 automatic       bit(1)                   level 3 in structure "local_ipo" packed packed
                                                                                  unaligned dcl 3822 in procedure
                                                                                  "parse_address_list" set ref 3831*
comment                  30            based           structure                array level 4 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 1082*
comment                  24            based           structure                level 3 in structure "message_redistribution"
                                                                                  dcl 7-122 in procedure "mlsys_parse_text_"
comment                  30            based           structure                level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 1022*
comment_date_time_created       000606 automatic       fixed bin(71,0)          dcl 177 set ref 1048* 1079*
comment_info                           based           structure                level 1 dcl 364 set ref 919 2021 2054
comment_info_list                      based           structure                level 1 dcl 359 set ref 1814 2056
comment_info_list_ptr
                         14     000636 automatic       pointer                  level 3 dcl 316 set ref 911 913 920 921 921 923 923
                                                                                  953 954 963 964 965 1034 1035 1814* 1815 2019 2019
                                                                                  2022 2022 2051 2052 2053 2056
comment_info_ptr                000662 automatic       pointer                  dcl 365 set ref 913* 915 915 917 917 919 954* 956
                                                                                  956 965* 966* 1035* 1036* 1038 1038 1047 1061 1082
                                                                                  1082 1082 1935 1940 1940 1941 2021* 2022 2024
                                                                                  2053* 2054
comment_info_ptrs         2            based           pointer                  array level 2 dcl 359 set ref 913 921* 921 954 965
                                                                                  1035 2022* 2053
comment_sender                  000574 automatic       pointer                  dcl 175 set ref 1062* 1079* 1085* 1631* 1707 1707*
communications_media    204            based           char(32)                 level 2 in structure "current_relay" packed packed
                                                                                  unaligned dcl 2725 in procedure "parse_trace" set
                                                                                  ref 2870*
communications_media    216            based           char(32)                 array level 3 in structure "message_trace" packed
                                                                                  packed unaligned dcl 7-87 in procedure
                                                                                  "mlsys_parse_text_" set ref 2747*
communications_protocol
                        226            based           char(32)                 array level 3 in structure "message_trace" packed
                                                                                  packed unaligned dcl 7-87 in procedure
                                                                                  "mlsys_parse_text_" set ref 2748*
communications_protocol
                        214            based           char(32)                 level 2 in structure "current_relay" packed packed
                                                                                  unaligned dcl 2725 in procedure "parse_trace" set
                                                                                  ref 2864* 2913*
complete_field_lth        6            based           fixed bin(21,0)          array level 3 dcl 330 set ref 711* 721* 806* 967*
                                                                                  1002* 1011* 1038* 1051* 1054* 1065* 1068* 1091*
                                                                                  1883* 1889* 2156* 2520* 2529* 2536* 2545* 2552*
                                                                                  2561* 2568* 2598* 2605* 2636* 2653* 2660* 2674*
                                                                                  2681* 2973* 3000*
complete_field_start      5            based           fixed bin(21,0)          array level 3 dcl 330 set ref 711* 721* 806* 967*
                                                                                  1002* 1011* 1038* 1051* 1054* 1065* 1068* 1091*
                                                                                  1882* 1889* 2156* 2520* 2529* 2536* 2545* 2552*
                                                                                  2561* 2568* 2598* 2605* 2636* 2653* 2660* 2674*
                                                                                  2681* 2973* 3000*
continuation_found              001066 automatic       bit(1)                   dcl 1737 set ref 1861* 1862 1866* 1868*
continue                        002111 automatic       bit(1)                   dcl 4234 set ref 4271* 4272 4274* 4275*
convert_date_to_binary_         000124 constant        entry                    external dcl 220 ref 4161
create_address_list      24     000120 automatic       entry variable           level 2 dcl 108 set ref 520* 583* 1329* 1446* 1560*
                                                                                  3028 3834
created_address_list            000215 automatic       bit(1)                   dcl 3827 set ref 3839* 3842* 3891
cu_$grow_stack_frame            000126 constant        entry                    external dcl 221 ref 2334 2346 2468 4355
cu_$shrink_stack_frame          000130 constant        entry                    external dcl 222 ref 1620 2778 2817 2927 2966 2993
                                                                                  4133 4159 4249 4335 4374
current                                based           structure                level 1 dcl 403
current_field_list_idx          000622 automatic       fixed bin(17,0)          dcl 181 set ref 909* 911 913 920 926* 926 946* 947*
                                                                                  953* 954* 964* 965* 985* 986 988* 1034* 1035*
                                                                                  1106* 1107 1121* 1135* 1136* 1163* 1165* 1186*
                                                                                  1187* 1242* 1243*
current_relay                          based           structure                level 1 dcl 2725
current_relay_ptr               001420 automatic       pointer                  dcl 2726 set ref 2832* 2845 2852 2858 2864 2870 2876
                                                                                  2899 2899 2907 2913 2919 2919 2932 2997 2997
current_token                          based           char                     packed unaligned dcl 407 set ref 2814 2842 2845 2849
                                                                                  2849 2852 2856 2858 2862 2864 2868 2870 2874 2903
                                                                                  2913 3289 3305 3337 3347 3351* 3351 3351 3353 3375
                                                                                  3379 3400 3404 3475 3479 3718 3724 3982 3997* 4006
                                                                                  4016* 4018* 4031* 4040 4044 4053 4062 4066 4076
                                                                                  4094 4116 4118 4284 4302
current_token_ptr               000710 automatic       pointer                  dcl 404 set ref 2774 2796 2799 2802 2807 2814 2814
                                                                                  2841 2842 2842 2842 2845 2845 2845 2849 2849 2849
                                                                                  2849 2852 2852 2852 2856 2856 2858 2858 2858 2862
                                                                                  2862 2864 2864 2864 2868 2868 2870 2870 2870 2874
                                                                                  2874 2880 2881 2885 2886 2903 2903 2913 2913 2924
                                                                                  3156 3160 3171 3173 3174 3177 3187 3189 3194 3198
                                                                                  3208 3221 3230 3235 3238 3289 3289 3305 3305 3325
                                                                                  3331 3334 3337 3337 3340 3347 3347 3350 3351 3351
                                                                                  3351 3351 3351 3351 3351 3353 3353 3355 3375 3375
                                                                                  3378 3379 3379 3381 3400 3400 3403 3404 3404 3406
                                                                                  3475 3475 3478 3479 3479 3481 3565 3567 3572 3576
                                                                                  3579 3580 3581 3582 3583 3623 3625 3631 3633 3635
                                                                                  3716 3718 3718 3724 3724 3925 3927 3932 3934 3936
                                                                                  3978 3982 3982 3988 3994 3995 3995 3997 3997 3997
                                                                                  4001 4003 4006 4006 4011 4013 4014 4014 4016 4016
                                                                                  4016 4016 4018 4018 4018 4022 4029 4030 4031 4031
                                                                                  4031 4034 4037 4037 4039 4040 4040 4044 4044 4051
                                                                                  4052 4053 4053 4056 4059 4061 4062 4062 4066 4066
                                                                                  4073 4073 4076 4076 4090 4091 4094 4094 4107 4107
                                                                                  4108 4110 4112 4116 4116 4118 4118 4130 4266 4273
                                                                                  4274 4275 4281 4283 4284 4284 4289 4292 4302 4302
                                                                                  4970* 4987* 4989 4991* 5010*
cv_dec_check_                   000132 constant        entry                    external dcl 223 ref 3997 4016 4018 4031 4040 4044
                                                                                  4053 4062 4066 4076 4116 4118 4315 4316 4317 4318
                                                                                  4319 4320 4321
date_time                       002112 automatic       fixed bin(71,0)          dcl 4235 in procedure "parse_message_id_text" set
                                                                                  ref 4322* 4327*
date_time                       001724 automatic       fixed bin(71,0)          dcl 3955 in procedure "parse_date_time_text" set ref
                                                                                  4141* 4144 4147
date_time_created        22            based           fixed bin(71,0)          array level 4 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 1079*
                                                                                  1111* 1137* 1139 1148
date_time_created               000604 automatic       fixed bin(71,0)          dcl 177 in procedure "mlsys_parse_text_" set ref
                                                                                  680* 684*
date_time_created        34            based           fixed bin(71,0)          level 3 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_" set ref 718 718* 2221*
date_time_created         6     000406 automatic       fixed bin(71,0)          level 3 in structure "local_mrp" dcl 157
                                                                                  in procedure "mlsys_parse_text_" set ref 820*
date_time_created        22            based           fixed bin(71,0)          level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 991* 1008 1008* 1111*
date_time_delivered      12     000366 automatic       fixed bin(71,0)          level 3 in structure "local_mep" dcl 156
                                                                                  in procedure "mlsys_parse_text_" set ref 1204*
date_time_delivered       6            based           fixed bin(71,0)          level 2 in structure "envelope" dcl 2498
                                                                                  in procedure "parse_envelope" set ref 2508* 2560*
                                                                                  2577 2582 2582*
date_time_delivered      12            based           fixed bin(71,0)          level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 1222*
date_time_last_relayed          000610 automatic       fixed bin(71,0)          dcl 177 set ref 1133* 1137*
date_time_mailed                       based           fixed bin(71,0)          level 2 dcl 2498 set ref 2508* 2544* 2574 2574 2579
                                                                                  2579* 2582
date_time_relayed                      based           fixed bin(71,0)          level 2 in structure "current_relay" dcl 2725
                                                                                  in procedure "parse_trace" set ref 2932*
date_time_relayed        12            based           fixed bin(71,0)          array level 3 in structure "message_trace" dcl 7-87
                                                                                  in procedure "mlsys_parse_text_" set ref 1133
                                                                                  2744*
date_time_string                       defined         char                     packed unaligned dcl 2930 set ref 2932*
date_time_string_start          001641 automatic       fixed bin(21,0)          dcl 2732 set ref 2924* 2930 2932
day_of_month              1     002002 automatic       char(2)                  level 2 in structure "request_id" packed packed
                                                                                  unaligned dcl 4223 in procedure
                                                                                  "parse_message_id_text" set ref 4317*
day_of_month                    001740 automatic       fixed bin(17,0)          dcl 3963 in procedure "parse_date_time_text" set ref
                                                                                  3997* 4141*
day_of_month                    002120 automatic       fixed bin(17,0)          dcl 4237 in procedure "parse_message_id_text" set
                                                                                  ref 4317* 4322*
day_of_week                     001737 automatic       fixed bin(17,0)          dcl 3963 set ref 3980* 3981 3982* 3986 4141*
default_system_is_local
                        106            parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 4219 in procedure "parse_message_id_text" set
                                                                                  ref 4308
default_system_is_local
                        106     000250 automatic       bit(1)                   level 3 in structure "internal_parse_options" packed
                                                                                  packed unaligned dcl 132 in procedure
                                                                                  "mlsys_parse_text_" set ref 572* 1032* 1320* 1460*
                                                                                  1572*
default_system_is_local
                        106            parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 2492 in procedure "parse_envelope" set ref
                                                                                  2591* 2615* 2631* 2646 2648* 2667*
default_system_is_local
                        106            parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3102 in procedure "parse_address" set ref 3267
default_system_name                    parameter       varying char(256)        level 2 in structure "p_ipo" dcl 4219 in procedure
                                                                                  "parse_message_id_text" set ref 4246* 4307
default_system_name                    parameter       varying char(256)        level 2 in structure "p_ipo" dcl 2492 in procedure
                                                                                  "parse_envelope" set ref 2590* 2614* 2615* 2629*
                                                                                  2631* 2645 2647* 2666*
default_system_name                    parameter       varying char(256)        level 2 in structure "p_ipo" dcl 3102 in procedure
                                                                                  "parse_address" set ref 3268
default_system_name             000250 automatic       varying char(256)        level 2 in structure "internal_parse_options"
                                                                                  dcl 132 in procedure "mlsys_parse_text_" set ref
                                                                                  573* 718* 1008* 1031* 1321* 1461* 1573*
delete_address           30     000120 automatic       entry variable           level 2 dcl 108 set ref 521* 584* 1330* 1447* 1561*
                                                                                  3895
delimiters              107            parameter       structure                level 2 in structure "p_ipo" dcl 3102 in procedure
                                                                                  "parse_address" set ref 3216*
delimiters              107     000542 automatic       structure                level 2 in structure "local_ipo" dcl 3649
                                                                                  in procedure "parse_named_group" set ref 3662*
delimiters              107            parameter       structure                level 2 in structure "p_ipo" dcl 3817 in procedure
                                                                                  "parse_address_list"
delimiters              107     001422 automatic       structure                level 2 in structure "local_ipo" dcl 2728
                                                                                  in procedure "parse_trace" set ref 2906*
delimiters              107     000100 automatic       structure                level 2 in structure "local_ipo" dcl 3822
                                                                                  in procedure "parse_address_list"
delimiters              107     000250 automatic       structure                level 2 in structure "internal_parse_options"
                                                                                  dcl 132 in procedure "mlsys_parse_text_" set ref
                                                                                  608* 1323* 1463* 1575*
delimiting_token                000502 automatic       fixed bin(21,0)          dcl 3115 set ref 3136* 3262* 3316 3543* 3544 3562
                                                                                  3572 3573* 3586 3586* 3590 3590 3627* 3682* 3686
delivered_by             14     000366 automatic       pointer                  level 3 in structure "local_mep" dcl 156
                                                                                  in procedure "mlsys_parse_text_" set ref 1205
                                                                                  1205* 1211* 1217* 1240* 1631* 1665 1665*
delivered_by             14            based           pointer                  array level 4 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 982* 1682
                                                                                  1682*
delivered_by             14            based           pointer                  level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 1223 1223* 1229* 1235*
                                                                                  1248*
delivered_by             10            based           pointer                  level 2 in structure "envelope" dcl 2498
                                                                                  in procedure "parse_envelope" set ref 2509* 2652*
                                                                                  2700 2700* 2700* 2706 2706* 2706*
done                            000216 automatic       bit(1)                   dcl 3827 in procedure "parse_address_list" set ref
                                                                                  3852* 3854 3871*
done                            002207 automatic       bit(1)                   dcl 4758 in procedure "collect_word" set ref 4765*
                                                                                  4767 4793* 4821*
done                            000512 automatic       bit(1)                   dcl 3117 in procedure "parse_address" set ref 3166*
                                                                                  3167 3173*
done                            002224 automatic       bit(1)                   dcl 4883 in procedure "collect_quoted_piece" set ref
                                                                                  4885* 4889 4934* 4939* 4947* 4951
e                         2            based           structure                array level 2 unaligned dcl 12-88
empty_text                             defined         char                     packed unaligned dcl 1391 ref 1393
ename                           000100 automatic       char(32)                 initial packed unaligned dcl 3788 set ref 3788* 3791
encode_clock_value_             000134 constant        entry                    external dcl 224 ref 4141 4322
encode_foreign_id        34     000120 automatic       entry variable           level 2 dcl 108 set ref 522* 842 2899 4246 4330
encode_local_id          40     000120 automatic       entry variable           level 2 dcl 108 set ref 523* 4327
encode_psuedo_id         44     000120 automatic       entry variable           level 2 dcl 108 set ref 524* 718 1008
end_of_id_string                001636 automatic       fixed bin(21,0)          dcl 2732 set ref 2880* 2889* 2892 2892
end_of_string                   002117 automatic       fixed bin(21,0)          dcl 4236 set ref 4279* 4299
envelope                  4            based           structure                array level 3 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_"
envelope                               based           structure                level 1 dcl 2498 in procedure "parse_envelope"
envelope                               based           structure                level 2 in structure "message_redistribution"
                                                                                  dcl 7-122 in procedure "mlsys_parse_text_"
envelope                  4            based           structure                level 3 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 991 991
envelope                  4     000366 automatic       structure                level 2 in structure "local_mep" dcl 156
                                                                                  in procedure "mlsys_parse_text_" set ref 680 680
envelope                 14            based           structure                level 2 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_"
eol_idx                         000614 automatic       fixed bin(21,0)          dcl 180 in procedure "mlsys_parse_text_" set ref
                                                                                  831* 832 832* 835 849 1354* 1355 1355* 1361 1368
                                                                                  1411 1413 1414 1416* 1416
eol_idx                         001072 automatic       fixed bin(21,0)          dcl 1739 in procedure "scan_message_text" set ref
                                                                                  1833* 1835 1838 1863* 1864 1865
eos                     107     000250 automatic       bit(1)                   level 3 in structure "internal_parse_options" packed
                                                                                  packed unaligned dcl 132 in procedure
                                                                                  "mlsys_parse_text_" set ref 609* 1324* 1464* 1576*
eos                     107            parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3102 in procedure "parse_address" set ref 3623
eos                     107            parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3817 in procedure "parse_address_list" ref
                                                                                  3925
error_table_$bad_subr_arg       000010 external static fixed bin(35,0)          dcl 204 ref 560 1441
error_table_$entlong            000012 external static fixed bin(35,0)          dcl 204 set ref 3410* 3413* 3449* 3792
error_table_$noentry            000344 external static fixed bin(35,0)          dcl 3118 ref 3361 3387 3489
error_table_$nostars            000014 external static fixed bin(35,0)          dcl 204 ref 3756
error_table_$smallarg           000016 external static fixed bin(35,0)          dcl 204 ref 901 1905
error_table_$unimplemented_version
                                000020 external static fixed bin(35,0)          dcl 204 ref 556 1437
errors                    1            based           structure                array level 2 dcl 1-24 set ref 2092* 2092 3067* 3067
expand_pathname_                000136 constant        entry                    external dcl 227 ref 3447
expand_pathname_$add_suffix     000140 constant        entry                    external dcl 228 ref 3361 3365 3387 3391
expand_pathname_$component_add_suffix
                                000142 constant        entry                    external dcl 229 ref 3483 3489
field_by_type_lists                    based           structure                level 1 dcl 343 set ref 1808 2041
field_by_type_lists_ptr
                         10     000636 automatic       pointer                  level 3 dcl 316 set ref 646 646 656 656 657 657 658
                                                                                  658 659 659 660 660 661 661 662 662 663 663 664
                                                                                  664 665 665 680* 702 703 708 709 710 735 736 736
                                                                                  747 748 748 759 760 760 771 772 772 786 787 787
                                                                                  791 798 804 805 824 825 994 995 999 1000 1001
                                                                                  1808* 1809 1911 1911 1913 2041 2041
field_id                               based           bit(36)                  level 3 in structure "message_text_user_field"
                                                                                  dcl 7-183 in procedure "mlsys_parse_text_" set ref
                                                                                  868*
field_id                  1            based           bit(36)                  array level 3 in structure "user_field_list" dcl 367
                                                                                  in procedure "mlsys_parse_text_" set ref 864 1903*
field_id                               based           bit(36)                  level 3 in structure "message_user_field" dcl 7-163
                                                                                  in procedure "mlsys_parse_text_" set ref 864* 900*
field_idx                       000656 automatic       fixed bin(17,0)          dcl 340 set ref 703* 704 704 704 710* 711 711 805*
                                                                                  806 806 825* 828 828 830 830 831 831 832 832 836
                                                                                  836 839 839 842 842 863* 866 866 871 871 871 875
                                                                                  875 876 876 966* 967 967 995* 996 996 996 1001*
                                                                                  1002 1002 1047* 1048 1048 1048 1051 1051 1061*
                                                                                  1062 1062 1062 1065 1065 1871* 1874 1877 1879 1879
                                                                                  1879 1882 1883 1883 1889 1889 1891* 2155* 2156
                                                                                  2156 2268* 2269 2269 2270 2270 2276* 2277 2277
                                                                                  2286* 2287 2287 2287 2287 2288 2288 2351* 2352
                                                                                  2352 2352 2527* 2528 2528 2528 2529 2529 2535*
                                                                                  2536 2536 2543* 2544 2544 2544 2545 2545 2551*
                                                                                  2552 2552 2559* 2560 2560 2560 2561 2561 2567*
                                                                                  2568 2568 2596* 2597 2597 2597 2598 2598 2604*
                                                                                  2605 2605 2651* 2652 2652 2652 2653 2653 2659*
                                                                                  2660 2660 2671* 2672 2672 2672 2674 2674 2680*
                                                                                  2681 2681 2763* 2765 2765 2765 2831* 2834 2834
                                                                                  2834 2899 2899 2930 2930 2932 2932 2973 2973 3000
                                                                                  3000 3033* 3034 3034 3034 3073 3073
field_idxs                1            based           fixed bin(17,0)          array level 3 in structure "field_lists" dcl 2497
                                                                                  in procedure "parse_envelope" set ref 2527 2535
                                                                                  2543 2551 2559 2567 2596 2604 2651 2659 2671 2680
                                                                                  2763 2831
field_idxs                1            based           fixed bin(17,0)          array level 2 in structure "field_list" dcl 3024
                                                                                  in procedure "parse_address_list_field" ref 3033
field_idxs                1            based           fixed bin(17,0)          array level 2 in structure "field_list" dcl 2151
                                                                                  in procedure "mark_as_in_mailbox_field" ref 2155
field_idxs                1            based           fixed bin(17,0)          array level 3 in structure "comment_info" dcl 364
                                                                                  in procedure "mlsys_parse_text_" set ref 1047 1061
                                                                                  1941*
field_idxs                1            based           fixed bin(17,0)          array level 3 in structure "forwarding_info" dcl 355
                                                                                  in procedure "mlsys_parse_text_" set ref 1928*
field_idxs                1            based           fixed bin(17,0)          array level 3 in structure "field_by_type_lists"
                                                                                  dcl 343 in procedure "mlsys_parse_text_" set ref
                                                                                  703 710 805 825 995 1001 1913*
field_idxs                1            based           fixed bin(17,0)          array level 2 in structure "field_list" dcl 2251
                                                                                  in procedure "prepare_single_line_field" ref 2268
                                                                                  2276 2286
field_idxs                1            based           fixed bin(17,0)          array level 2 in structure "field_list" dcl 2310
                                                                                  in procedure "prepare_multiline_field" ref 2351
field_idxs                1            based           fixed bin(17,0)          array level 3 in structure "field_lists" dcl 2175
                                                                                  in procedure "find_first_field_in_list" ref 2182
field_list                             based           structure                level 1 dcl 2310 in procedure
                                                                                  "prepare_multiline_field"
field_list                             based           structure                level 1 dcl 3024 in procedure
                                                                                  "parse_address_list_field"
field_list                             based           structure                level 1 dcl 2151 in procedure
                                                                                  "mark_as_in_mailbox_field"
field_list                             based           structure                level 1 dcl 2251 in procedure
                                                                                  "prepare_single_line_field"
field_lists                            based           structure                level 1 dcl 2175 in procedure
                                                                                  "find_first_field_in_list"
field_lists                            based           structure                level 1 dcl 2497 in procedure "parse_envelope"
field_name                             based           char                     packed unaligned dcl 1733 set ref 1846 1849 1887*
                                                                                  1903
field_name_lth                  001062 automatic       fixed bin(21,0)          dcl 1734 set ref 1844* 1846 1849* 1849 1887 1887
                                                                                  1903
field_name_ptr                  001064 automatic       pointer                  dcl 1735 set ref 1842* 1846 1849 1887 1903
field_name_start                001075 automatic       fixed bin(21,0)          dcl 1739 set ref 1843* 1882 1883
field_type                1            based           fixed bin(17,0)          level 3 in structure "message_user_field" dcl 7-163
                                                                                  in procedure "mlsys_parse_text_" set ref 860* 904*
                                                                                  1269
field_type                      001100 automatic       fixed bin(17,0)          dcl 1741 in procedure "scan_message_text" set ref
                                                                                  1887* 1896 1908 1908 1911 1911 1913 1916 1916
                                                                                  1919* 1919 1921 1921 1927 1927 1928 1931 1931
                                                                                  1933* 1933 1935 1935 1940 1940 1941
field_value_idx           2            based           fixed bin(17,0)          array level 3 dcl 367 set ref 863 1902*
field_value_lth           4            based           fixed bin(21,0)          array level 3 dcl 330 set ref 704 704 828 830 831
                                                                                  832 836 839 842 866 871 871 875 876 996 996 1048
                                                                                  1048 1062 1062 1877* 1879* 1879 1883 2269 2270
                                                                                  2277 2287 2287 2288 2352 2352 2528 2528 2544 2544
                                                                                  2560 2560 2597 2597 2652 2652 2672 2672 2765 2765
                                                                                  2834 2834 2899 2930 2932 3034 3034 3073
field_value_ptr           2            based           pointer                  array level 3 dcl 330 set ref 704 828 830 831 832
                                                                                  836 839 842 866 871 875 876 996 1048 1062 1874*
                                                                                  1879 2269 2270 2277 2287 2287 2288 2352 2528 2544
                                                                                  2560 2597 2652 2672 2765 2834 2899 2930 2932 3034
                                                                                  3073
field_value_start               001076 automatic       fixed bin(21,0)          dcl 1739 set ref 1859* 1874 1877 1883
fields                    2            based           structure                array level 2 dcl 330
first_field_idx                 000623 automatic       fixed bin(17,0)          dcl 181 set ref 676* 989* 1011 1011 1036* 1038 1038
                                                                                  1054 1054 1068 1068 1091 1091 2520 2520 2636 2636
first_token_in_address          000500 automatic       fixed bin(21,0)          dcl 3115 set ref 3147* 3182* 3213 3322* 3505* 3519*
                                                                                  3564* 3654
first_token_in_address_list     000212 automatic       fixed bin(21,0)          dcl 3825 set ref 3849* 3899 3907
flags                     4            parameter       structure                level 2 in structure "p_pto" dcl 3101 in procedure
                                                                                  "parse_address"
flags                   106            parameter       structure                level 2 in structure "p_ipo" dcl 4219 in procedure
                                                                                  "parse_message_id_text"
flags                   106     000250 automatic       structure                level 2 in structure "internal_parse_options"
                                                                                  dcl 132 in procedure "mlsys_parse_text_" set ref
                                                                                  506* 568* 1316* 1456*
flags                     4     001232 automatic       structure                level 2 in structure "local_pto" dcl 2500
                                                                                  in procedure "parse_envelope" set ref 2593*
flags                     4            parameter       structure                level 2 in structure "p_pto" dcl 3816 in procedure
                                                                                  "parse_address_list"
flags                     4            parameter       structure                level 2 in structure "p_pto" dcl 2072 in procedure
                                                                                  "message_parse_error"
flags                     3            parameter       structure                level 2 in structure "p_tf" dcl 2306 in procedure
                                                                                  "prepare_multiline_field"
flags                     4     000106 automatic       structure                level 2 in structure "local_pto" dcl 98 in procedure
                                                                                  "mlsys_parse_text_" set ref 502* 1311* 1567*
flags                   106            parameter       structure                level 2 in structure "p_ipo" dcl 3950 in procedure
                                                                                  "parse_date_time_text"
flags                   106            parameter       structure                level 2 in structure "p_ipo" dcl 4452 in procedure
                                                                                  "lex_string"
flags                     4            parameter       structure                level 2 in structure "p_pto" dcl 1519 in procedure
                                                                                  "parse_address_list_text_internal"
flags                   106            parameter       structure                level 2 in structure "p_ipo" dcl 2492 in procedure
                                                                                  "parse_envelope"
flags                     4            parameter       structure                level 2 in structure "p_pto" dcl 2491 in procedure
                                                                                  "parse_envelope"
flags                     6            based           structure                level 2 in structure "token" dcl 392 in procedure
                                                                                  "mlsys_parse_text_" set ref 4631*
flags                     4     000534 automatic       structure                level 2 in structure "local_pto" dcl 3648
                                                                                  in procedure "parse_named_group" set ref 3659*
flags                     5            based           structure                level 3 in structure "message_text_user_field"
                                                                                  dcl 7-183 in procedure "mlsys_parse_text_"
flags                   106            parameter       structure                level 2 in structure "p_ipo" dcl 3102 in procedure
                                                                                  "parse_address"
flags                     4            based           structure                level 2 in structure "parse_text_options" dcl 1-6
                                                                                  in procedure "mlsys_parse_text_"
flags                     3            parameter       structure                level 2 in structure "p_tf" dcl 2248 in procedure
                                                                                  "prepare_single_line_field"
foreign_system_name             000210 automatic       varying char(256)        dcl 3109 set ref 3268* 3289* 3520*
forum_$get_forum_path           000144 constant        entry                    external dcl 231 ref 3461 3799
forum_search_list_ptr           000460 automatic       pointer                  dcl 169 set ref 1333* 1340 1340 1341* 1466* 1473
                                                                                  1473 1474* 1578* 1584 1584 1585* 1631* 1648 1648
                                                                                  1649* 3422 3423* 3798 3799 3799 3802
forwarding_info                        based           structure                level 1 dcl 355 set ref 2003 2046
forwarding_info_list                   based           structure                level 1 dcl 350 set ref 1811 2048
forwarding_info_list_ptr
                         12     000636 automatic       pointer                  level 3 dcl 316 set ref 946 947 963 976 978 979 981
                                                                                  982 982 982 982 982 982 982 985 988 1075 1106 1130
                                                                                  1135 1148 1148 1150 1163 1173 1180 1186 1202 1221
                                                                                  1242 1669 1696 1701 1811* 1812 2001 2001 2004 2004
                                                                                  2043 2044 2045 2048
forwarding_info_ptr             000660 automatic       pointer                  dcl 356 set ref 947* 949 949 988* 989* 991* 1018
                                                                                  1018 1018 1022 1022 1022 1921 1924 1927 1927 1928
                                                                                  2003* 2004 2006 2045* 2046
forwarding_info_ptrs      2            based           pointer                  array level 2 dcl 350 set ref 947 988 2004* 2045
free_address_list        50     000120 automatic       entry variable           level 2 dcl 108 set ref 525* 585* 653 692 743 755
                                                                                  767 779 1331* 1448* 1562* 1651 1686 1687 3678 3891
free_message             54     000120 automatic       entry variable           level 2 dcl 108 set ref 526* 586* 620 2118
from                     24            based           pointer                  array level 4 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 982* 1076
                                                                                  1686 1686*
from                     10     000406 automatic       pointer                  level 3 in structure "local_mrp" dcl 157
                                                                                  in procedure "mlsys_parse_text_" set ref 821*
from                     24            based           pointer                  level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 991* 1008 1008* 1230
                                                                                  1250 1250*
from                     20            based           pointer                  level 3 in structure "message_redistribution"
                                                                                  dcl 7-122 in procedure "mlsys_parse_text_" set ref
                                                                                  1250 1280*
from                     36            based           pointer                  level 3 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_" set ref 651 690 718 718* 1212
                                                                                  1262*
full_fieldname                  000467 automatic       varying char(256)        dcl 174 set ref 868* 871 871 1017* 1018* 2619* 2621*
                                                                                  2623*
get_system_free_area_           000146 constant        entry                    external dcl 232 ref 564 613 1326 1450 1452 1564
group_level                     000102 automatic       fixed bin(21,0)          dcl 3559 set ref 3563* 3573 3582* 3582 3583* 3583
hbound                                                 builtin function         dcl 311 ref 3981 4005 4198
header                    4            based           structure                level 3 in structure "message_user_field_parameter"
                                                                                  dcl 7-208 in procedure "mlsys_parse_text_"
header                    4            based           structure                level 3 in structure
                                                                                  "message_body_section_parameter" dcl 7-313
                                                                                  in procedure "mlsys_parse_text_"
header                                 based           structure                level 2 in structure "message_user_field" dcl 7-163
                                                                                  in procedure "mlsys_parse_text_"
header                                 based           structure                level 2 in structure "message_text_user_field"
                                                                                  dcl 7-183 in procedure "mlsys_parse_text_"
header                                 based           structure                level 2 in structure "message_body_section"
                                                                                  dcl 7-274 in procedure "mlsys_parse_text_"
header                    4     000436 automatic       structure                level 3 in structure "local_mbsp" dcl 159
                                                                                  in procedure "mlsys_parse_text_"
header                                 based           structure                level 2 in structure "address_route" dcl 8-6
                                                                                  in procedure "mlsys_parse_text_"
header                   20            based           structure                array level 3 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_"
header                   30            based           structure                level 2 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_"
header                   14            based           structure                level 2 in structure "message_redistribution"
                                                                                  dcl 7-122 in procedure "mlsys_parse_text_"
header                   10            based           structure                array level 3 in structure
                                                                                  "message_user_fields_list" dcl 7-150 in procedure
                                                                                  "mlsys_parse_text_"
header                   20            based           structure                level 3 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_"
header                    4     000424 automatic       structure                level 3 in structure "local_mufp" dcl 158
                                                                                  in procedure "mlsys_parse_text_"
header                   64            based           structure                array level 4 in structure "message" dcl 7-15
                                                                                  in procedure "mlsys_parse_text_"
header                                 based           structure                level 2 in structure
                                                                                  "message_preformatted_body_section" dcl 7-292
                                                                                  in procedure "mlsys_parse_text_"
header_field_list                      based           structure                level 1 dcl 330 set ref 1805 2039
header_field_list_ptr
                          6     000636 automatic       pointer                  level 3 dcl 316 set ref 704 704 704 711 711 721 721
                                                                                  806 806 828 828 830 830 831 831 832 832 836 836
                                                                                  839 839 842 842 866 866 871 871 871 875 875 876
                                                                                  876 967 967 996 996 996 1002 1002 1011 1011 1038
                                                                                  1038 1048 1048 1048 1051 1051 1054 1054 1062 1062
                                                                                  1062 1065 1065 1068 1068 1091 1091 1805* 1806 1871
                                                                                  1871 1874 1877 1879 1879 1879 1882 1883 1883 1889
                                                                                  1889 1891 1891 1902 1913 1928 1941 2039 2039 2156
                                                                                  2156 2269 2269 2270 2270 2277 2277 2287 2287 2287
                                                                                  2287 2288 2288 2352 2352 2352 2520 2520 2528 2528
                                                                                  2528 2529 2529 2536 2536 2544 2544 2544 2545 2545
                                                                                  2552 2552 2560 2560 2560 2561 2561 2568 2568 2597
                                                                                  2597 2597 2598 2598 2605 2605 2636 2636 2652 2652
                                                                                  2652 2653 2653 2660 2660 2672 2672 2672 2674 2674
                                                                                  2681 2681 2765 2765 2765 2834 2834 2834 2899 2899
                                                                                  2930 2930 2932 2932 2973 2973 3000 3000 3034 3034
                                                                                  3034 3073 3073
header_field_value                     based           char                     packed unaligned dcl 338 set ref 704* 828 830 831
                                                                                  831 832 832 836 836 839 839 842 842 866 871* 875
                                                                                  876 996* 1048* 1062* 1879 2269 2270 2277 2287 2287
                                                                                  2288 2352* 2528* 2544* 2560* 2597* 2652* 2672*
                                                                                  2765* 2834* 2899 2899 2930 2932 2932 3034* 3073
header_offset                   000636 automatic       fixed bin(21,0)          level 2 dcl 316 set ref 1747* 1758* 2100
host_indeces                           based           fixed bin(21,0)          array dcl 450 set ref 2804* 2813* 3131 3169* 3196*
                                                                                  3233* 3274 3276* 3276 3279* 3279 3281 3286 3287*
                                                                                  3291* 3291 3303* 3540 4363 4363 4419
host_indeces_ptr          4     000670 automatic       pointer                  level 3 dcl 379 set ref 2804 2813 3169 3196 3233
                                                                                  3276 3279 3281 3281 3283* 3286 3287 3291 3291 3303
                                                                                  4363 4363 4363* 4419 4419 4419
hour                      1(18) 002002 automatic       char(2)                  level 2 in structure "request_id" packed packed
                                                                                  unaligned dcl 4223 in procedure
                                                                                  "parse_message_id_text" set ref 4318*
hour                            001743 automatic       fixed bin(17,0)          dcl 3963 in procedure "parse_date_time_text" set ref
                                                                                  4031* 4040* 4044* 4141*
hour                            002123 automatic       fixed bin(17,0)          dcl 4237 in procedure "parse_message_id_text" set
                                                                                  ref 4318* 4322*
hour_offset                     001746 automatic       fixed bin(17,0)          dcl 3963 set ref 4116* 4120 4120 4123
idx                             001204 automatic       fixed bin(17,0)          dcl 2198 in procedure "set_implicit_route" set ref
                                                                                  2200* 2201*
idx                             000626 automatic       fixed bin(17,0)          dcl 182 in procedure "mlsys_parse_text_" set ref
                                                                                  709* 710* 804* 805* 824* 825* 862* 863 864* 920*
                                                                                  921 921* 948* 949 949* 955* 956 956* 1000* 1001*
                                                                                  1075* 1076 1076 1078 1079 1082* 1110* 1111 1111*
                                                                                  1117* 1118 1118* 1136* 1137 1138 1139 1140 1141
                                                                                  1165* 1166 1166 1180* 1181 1181 1181 1184 1187*
                                                                                  1188 1188 1188 1190 1243* 1244 1267* 1268* 1275*
                                                                                  1276* 1492* 1493 1493 1494 1494 1495 1495 1496*
idx                             001773 automatic       fixed bin(17,0)          dcl 4194 in procedure "lookup_rfc822_zone_name" set
                                                                                  ref 4198* 4199 4199*
idx                             002161 automatic       fixed bin(21,0)          dcl 4464 in procedure "lex_string" set ref 4520*
                                                                                  4522 4527 4652* 4654* 4657 4660 4661 4661 4662
                                                                                  4663 4694* 4696 4696 4699 4769* 4772* 4773* 4776*
                                                                                  4777* 4779* 4780 4780* 4784 4786 4786 4788 4790
                                                                                  4807* 4809 4809 4811 4891* 4893* 4896 4899 4900
                                                                                  4900 4901 4902 4913* 4915 4915 4917
idx                             001220 automatic       fixed bin(17,0)          dcl 2257 in procedure "prepare_single_line_field"
                                                                                  set ref 2275* 2276* 2281* 2282 2286*
idx                             000110 automatic       fixed bin(17,0)          dcl 2322 in procedure "prepare_multiline_field" set
                                                                                  ref 2350* 2351*
idx                             001643 automatic       fixed bin(17,0)          dcl 2734 in procedure "parse_trace" set ref 2789*
                                                                                  2790 2790* 2812* 2813 2814* 2829* 2831*
idx                             001162 automatic       fixed bin(17,0)          dcl 2152 in procedure "mark_as_in_mailbox_field" set
                                                                                  ref 2154* 2155*
idx                             001750 automatic       fixed bin(17,0)          dcl 3963 in procedure "parse_date_time_text" set ref
                                                                                  3981* 3982 3982* 4005* 4006 4006*
idx                             001112 automatic       fixed bin(21,0)          dcl 1972 in procedure "count_lines_in_text" set ref
                                                                                  1982* 1983 1983* 1986
idx                             001676 automatic       fixed bin(17,0)          dcl 3025 in procedure "parse_address_list_field" set
                                                                                  ref 3032* 3033*
idx                             001172 automatic       fixed bin(17,0)          dcl 2176 in procedure "find_first_field_in_list" set
                                                                                  ref 2180* 2181 2182*
idx                             000227 automatic       fixed bin(17,0)          dcl 3889 in procedure "bad_address_list_syntax" set
                                                                                  ref 3894* 3895*
idx                             001403 automatic       fixed bin(17,0)          dcl 2505 in procedure "parse_envelope" set ref 2534*
                                                                                  2535* 2550* 2551* 2566* 2567* 2603* 2604* 2658*
                                                                                  2659* 2679* 2680*
idx                             001073 automatic       fixed bin(21,0)          dcl 1739 in procedure "scan_message_text" set ref
                                                                                  1749* 1750 1750 1752 1753 1760* 1761 1761 1764*
                                                                                  1765 1767* 1767 1769 1783* 1784 1785 1786 1787
                                                                                  1838* 1839 1844 1852 1854* 1855 1858 1900* 1902
                                                                                  1903 1911* 1913 1927* 1928 1940* 1941
idx                             000100 automatic       fixed bin(17,0)          dcl 1646 in procedure "cleanup_message_parse_data"
                                                                                  set ref 1657* 1658 1658* 1669* 1670 1670 1671 1672
                                                                                  1672 1674 1675 1675 1679 1680 1682 1682 1684 1684
                                                                                  1686 1686 1687 1687 1688* 1692 1692 1692 1693
idx                             000110 automatic       fixed bin(17,0)          dcl 3789 in procedure "search_forum_list" set ref
                                                                                  3798* 3799 3799 3802*
idx                             000505 automatic       fixed bin(21,0)          dcl 3115 in procedure "parse_address" set ref 3275*
                                                                                  3276 3276* 3278* 3279 3279* 3290* 3291 3291* 3302*
                                                                                  3303 3305*
idx                             001760 automatic       fixed bin(17,0)          dcl 4172 in procedure "lookup_multics_zone_name" set
                                                                                  ref 4176* 4178*
idx                             001144 automatic       fixed bin(17,0)          dcl 2078 in procedure "message_parse_error" set ref
                                                                                  2091* 2092 2092* 2098* 2100 2101 2102 2103
idx                             001712 automatic       fixed bin(17,0)          dcl 3053 in procedure "merge_error_lists" set ref
                                                                                  3066* 3067 3067* 3075* 3076 3078 3079 3080*
idx                             000114 automatic       fixed bin(17,0)          dcl 2037 in procedure "cleanup_message_scan" set ref
                                                                                  2044* 2045* 2052* 2053*
idx2                            001074 automatic       fixed bin(21,0)          dcl 1739 set ref 1846* 1847
implicit_route                  000602 automatic       pointer                  dcl 175 in procedure "mlsys_parse_text_" set ref
                                                                                  1261* 1262* 1263* 1264* 1265* 1266* 1269* 1279*
                                                                                  1280* 1281*
implicit_route            6            based           pointer                  level 2 in structure "message_trace" dcl 7-87
                                                                                  in procedure "mlsys_parse_text_" set ref 1259 1261
                                                                                  1277 1279 1655 1655 1672 1672 2743* 2787* 2810*
                                                                                  2947 2970 2970
in_comment_info                 001070 automatic       bit(1)                   dcl 1737 set ref 1828* 1897* 1910* 1926* 1934 1938*
in_forwarding_info              001067 automatic       bit(1)                   dcl 1737 set ref 1827* 1897* 1910* 1920 1925* 1939*
in_named_address                000506 automatic       bit(1)                   dcl 3117 set ref 3139* 3151 3160 3208 3215* 3221
                                                                                  3249 3252*
in_unquoted               6            based           bit(1)                   level 3 in structure "token" packed packed unaligned
                                                                                  dcl 392 in procedure "mlsys_parse_text_" set ref
                                                                                  4733* 4735* 4737* 4839* 4841 4845* 4848 4851*
in_unquoted                     002206 automatic       bit(1)                   dcl 4758 in procedure "collect_word" set ref 4761*
                                                                                  4785 4798 4817 4829 4839 4863*
include_invalid_addresses
                          4(02)        parameter       bit(1)                   level 3 in structure "p_pto" packed packed unaligned
                                                                                  dcl 3816 in procedure "parse_address_list" set ref
                                                                                  3864
include_invalid_addresses
                          4(02)        parameter       bit(1)                   level 3 in structure "p_pto" packed packed unaligned
                                                                                  dcl 3101 in procedure "parse_address" ref 3528
                                                                                  3603
include_invalid_addresses
                          4(02) 000106 automatic       bit(1)                   level 3 in structure "local_pto" packed packed
                                                                                  unaligned dcl 98 in procedure "mlsys_parse_text_"
                                                                                  set ref 503* 1313*
include_invalid_addresses
                          4(02)        parameter       bit(1)                   level 3 in structure "p_pto" packed packed unaligned
                                                                                  dcl 1519 in procedure
                                                                                  "parse_address_list_text_internal" set ref 1541
index                                                  builtin function         dcl 311 ref 831 1354 1413 1760 1764 1767 1833 1838
                                                                                  1863 1866 1982 2401 2411 3774 4561 4568 4573 4579
internal_parse_options          000250 automatic       structure                level 1 dcl 132 set ref 626* 646* 680* 704* 736*
                                                                                  748* 760* 772* 991* 996* 1018* 1048* 1062* 1365*
                                                                                  1483* 1588*
is_mte                          000511 automatic       bit(1)                   dcl 3117 set ref 3506* 3509
jdx                             000101 automatic       fixed bin(17,0)          dcl 1646 in procedure "cleanup_message_parse_data"
                                                                                  set ref 1674* 1675 1675*
jdx                             001761 automatic       fixed bin(17,0)          dcl 4172 in procedure "lookup_multics_zone_name" set
                                                                                  ref 4177* 4178*
jdx                             001173 automatic       fixed bin(17,0)          dcl 2176 in procedure "find_first_field_in_list" set
                                                                                  ref 2181* 2182*
last_date_time_delivered
                        104     000250 automatic       fixed bin(71,0)          level 2 dcl 132 set ref 512* 576* 1204 1222
last_delivered_by       102     000250 automatic       pointer                  level 2 dcl 132 set ref 511* 575* 1170 1202 1207*
                                                                                  1211 1212* 1217 1225* 1229 1230* 1235
last_token_in_address           000501 automatic       fixed bin(21,0)          dcl 3115 set ref 3251* 3257* 3265 3265* 3286* 3328
                                                                                  3505* 3519*
last_token_in_address_list      000213 automatic       fixed bin(21,0)          dcl 3825 set ref 3850* 3857* 3899 3899 3928*
lbound                                                 builtin function         dcl 311 ref 3981 4005 4198 5007
length                                                 builtin function         dcl 311 ref 606 828 830 832 839 871 871 876 917 917
                                                                                  1022 1022 1082 1082 1351 1355 1378 1385 1388 1397
                                                                                  1400 1403 1406 1414 1538 1849 1879 1983 2270 2277
                                                                                  2287 2288 2372 2373 2374 2384 2404 2408 2410 2412
                                                                                  2427 2437 2437 2443 2443 2930 3081 3351 3351 3410
                                                                                  3410 3412 3413 3413 3413 3449 3449 3449 3463 3463
                                                                                  3463 3732 3732 3791 3791 4312 4312 4351 4732
lex_and_parse_pointers          000670 automatic       structure                level 1 dcl 379 set ref 1333* 1466* 1578* 1631*
                                                                                  4353*
line                                   defined         char                     packed unaligned dcl 2418 ref 2419 2433 2433
line_end                        000620 automatic       fixed bin(21,0)          dcl 180 set ref 839* 841
line_lth                        000122 automatic       fixed bin(21,0)          dcl 2397 set ref 2411* 2412 2412* 2416 2418 2420
                                                                                  2433 2442 2450
line_start                      000617 automatic       fixed bin(21,0)          dcl 180 set ref 836* 837 841 842
list_errors               4            parameter       bit(1)                   level 3 in structure "p_pto" packed packed unaligned
                                                                                  dcl 3101 in procedure "parse_address" ref 3597
list_errors               4            parameter       bit(1)                   level 3 in structure "p_pto" packed packed unaligned
                                                                                  dcl 1519 in procedure
                                                                                  "parse_address_list_text_internal" set ref 1536
list_errors               4            based           bit(1)                   level 3 in structure "parse_text_options" packed
                                                                                  packed unaligned dcl 1-6 in procedure
                                                                                  "mlsys_parse_text_" set ref 1293 1489 2123 3055
list_errors               4            parameter       bit(1)                   level 3 in structure "p_pto" packed packed unaligned
                                                                                  dcl 2491 in procedure "parse_envelope" set ref
                                                                                  2973 3000
list_errors               4            parameter       bit(1)                   level 3 in structure "p_pto" packed packed unaligned
                                                                                  dcl 2072 in procedure "message_parse_error" ref
                                                                                  2080
list_errors               4     000106 automatic       bit(1)                   level 3 in structure "local_pto" packed packed
                                                                                  unaligned dcl 98 in procedure "mlsys_parse_text_"
                                                                                  set ref 1312*
list_errors               4            parameter       bit(1)                   level 3 in structure "p_pto" packed packed unaligned
                                                                                  dcl 3816 in procedure "parse_address_list" set ref
                                                                                  3864 3906
local_ipo                       000100 automatic       structure                level 1 dcl 3822 in procedure "parse_address_list"
                                                                                  set ref 3830* 3856*
local_ipo                       000542 automatic       structure                level 1 dcl 3649 in procedure "parse_named_group"
                                                                                  set ref 3661* 3666*
local_ipo                       001422 automatic       structure                level 1 dcl 2728 in procedure "parse_trace" set ref
                                                                                  2905* 2907*
local_mbsp                      000436 automatic       structure                level 1 dcl 159 set ref 638 638
local_mep                       000366 automatic       structure                level 1 dcl 156 set ref 1238 1238
local_mrp                       000406 automatic       structure                level 1 dcl 157 set ref 844 844
local_mtf                       000450 automatic       structure                level 1 dcl 161 set ref 787*
local_mufp                      000424 automatic       structure                level 1 dcl 158 set ref 880 880 931 931
local_pto                       000106 automatic       structure                level 1 dcl 98 in procedure "mlsys_parse_text_" set
                                                                                  ref 504 1314 1566
local_pto                       000534 automatic       structure                level 1 dcl 3648 in procedure "parse_named_group"
                                                                                  set ref 3666*
local_pto                       001232 automatic       structure                level 1 dcl 2500 in procedure "parse_envelope" set
                                                                                  ref 2597* 2652* 2672*
mail_protocol           224            based           char(32)                 level 2 in structure "current_relay" packed packed
                                                                                  unaligned dcl 2725 in procedure "parse_trace" set
                                                                                  ref 2858*
mail_protocol           236            based           char(32)                 array level 3 in structure "message_trace" packed
                                                                                  packed unaligned dcl 7-87 in procedure
                                                                                  "mlsys_parse_text_" set ref 2749*
mail_system_$add_address        000150 constant        entry                    external dcl 233 ref 580 1445 1559
mail_system_$add_body_section   000152 constant        entry                    external dcl 234 ref 581
mail_system_$add_user_field     000154 constant        entry                    external dcl 235 ref 582
mail_system_$compare_addresses  000156 constant        entry                    external dcl 236 ref 1079 1207 1212 1225 1230 2697
                                                                                  2700 2706
mail_system_$create_address_list
                                000160 constant        entry                    external dcl 237 ref 583 1446 1477 1560
mail_system_$create_foreign_address
                                000162 constant        entry                    external dcl 238 ref 3520
mail_system_$create_forum_address
                                000164 constant        entry                    external dcl 241 ref 3470
mail_system_$create_invalid_address
                                000166 constant        entry                    external dcl 243 ref 1542 3606
mail_system_$create_logbox_address
                                000170 constant        entry                    external dcl 245 ref 3342
mail_system_$create_mail_table_address
                                000172 constant        entry                    external dcl 247 ref 3509
mail_system_$create_mailbox_address
                                000174 constant        entry                    external dcl 249 ref 3395
mail_system_$create_mailing_list_address
                                000176 constant        entry                    external dcl 251 ref 3496
mail_system_$create_message     000200 constant        entry                    external dcl 254 ref 594
mail_system_$create_named_group_address
                                000202 constant        entry                    external dcl 255 ref 3689
mail_system_$create_savebox_address
                                000204 constant        entry                    external dcl 257 ref 3370
mail_system_$create_user_mailbox_address
                                000206 constant        entry                    external dcl 260 ref 3512
mail_system_$delete_address     000210 constant        entry                    external dcl 262 ref 584 1447 1561
mail_system_$free_address       000212 constant        entry                    external dcl 263 ref 1085 1174 1181 1188 1193 1205
                                                                                  1223 1653 1658 1665 1666 1670 1675 1682 1684 1705
                                                                                  1707 2697 2700 2706 2793 2968 2995 2997 3528
mail_system_$free_address_list  000214 constant        entry                    external dcl 264 ref 585 1448 1471 1486 1562
mail_system_$free_message       000216 constant        entry                    external dcl 265 ref 586
mail_system_$get_address_route  000220 constant        entry                    external dcl 266 ref 2780
mail_system_$get_address_system 000222 constant        entry                    external dcl 267 ref 2614 2629 2783
mail_system_$get_address_type   000224 constant        entry                    external dcl 268 ref 2612 2627
mail_system_$get_user_field_id  000226 constant        entry                    external dcl 269 ref 900 1903
mail_system_$get_user_field_name
                                000230 constant        entry                    external dcl 270 ref 868
mail_system_$replace_bcc        000232 constant        entry                    external dcl 271 ref 587
mail_system_$replace_cc         000234 constant        entry                    external dcl 272 ref 588
mail_system_$replace_from       000236 constant        entry                    external dcl 273 ref 589
mail_system_$replace_reply_to   000240 constant        entry                    external dcl 274 ref 590
mail_system_$replace_subject    000242 constant        entry                    external dcl 275 ref 591
mail_system_$replace_to         000244 constant        entry                    external dcl 276 ref 592
mail_system_$validate_address   000246 constant        entry                    external dcl 277 ref 3526
max                                                    builtin function         dcl 311 ref 2737 3594 3903 5007
mbz                       4(03)        based           bit(33)                  level 3 packed packed unaligned dcl 1-6 set ref 559
                                                                                  1440
message                                based           structure                level 1 dcl 7-15
message_address_list_user_field        based           structure                level 1 dcl 7-190
message_body                           based           char                     packed unaligned dcl 1729 ref 1783
message_body_lth                001056 automatic       fixed bin(21,0)          dcl 1730 set ref 1746* 1753* 1775* 1775 1777 1783
                                                                                  1784* 1787* 1787 1789 1795
message_body_ptr                001060 automatic       pointer                  dcl 1731 set ref 1744* 1752 1752* 1774* 1774 1783
                                                                                  1786* 1786 1794
message_body_section                   based           structure                level 1 dcl 7-274
message_body_section_parameter         based           structure                level 1 dcl 7-313
message_body_section_ptr        000736 automatic       pointer                  dcl 7-280 set ref 633* 634 635 636
message_envelope                       based           structure                level 1 dcl 7-61
message_envelope_parameter             based           structure                level 1 dcl 7-74
message_header                         based           char                     packed unaligned dcl 1725 ref 1749 1760 1764 1767
                                                                                  1833 1838 1854 1863 1866
message_header_lth              001052 automatic       fixed bin(21,0)          dcl 1726 set ref 1746* 1749 1753 1753* 1760 1761*
                                                                                  1764 1767 1774 1775 1802* 1831 1833 1838 1854 1863
                                                                                  1866
message_header_ptr              001054 automatic       pointer                  dcl 1727 set ref 1744* 1749 1752* 1758 1760 1764
                                                                                  1767 1802* 1833 1838 1842 1854 1863 1866 1874
message_id                4     000406 automatic       bit(72)                  level 3 in structure "local_mrp" dcl 157
                                                                                  in procedure "mlsys_parse_text_" set ref 842*
message_id               30            based           bit(72)                  level 3 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_" set ref 2236*
message_id                      000612 automatic       bit(72)                  dcl 178 in procedure "mlsys_parse_text_" set ref
                                                                                  700* 704* 718* 726 727*
message_id               20            based           bit(72)                  level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 996* 1008*
message_id_string                      defined         char                     packed unaligned dcl 2897 set ref 2899*
message_id_string_lth           001640 automatic       fixed bin(21,0)          dcl 2732 set ref 2892* 2897
message_parse_fails             000117 automatic       bit(1)                   dcl 106 set ref 611* 1296 2083* 3057*
message_preformatted_body_section      based           structure                level 1 dcl 7-292
message_ptr                     000724 automatic       pointer                  dcl 7-53 set ref 538* 594* 620 620* 638* 649* 651
                                                                                  684* 688* 690 718 718 718 718 727* 739* 741 751*
                                                                                  753 763* 765 775* 777 790* 791 844* 880* 886 931*
                                                                                  936 1212 1238* 1246* 1249 1259 1259 1261 1262 1263
                                                                                  1264 1265 1266 1267 1268 1275 1276 1291 2118 2118*
                                                                                  2221 2236
message_redistribution                 based           structure                level 1 dcl 7-122
message_redistribution_parameter       based           structure                level 1 dcl 7-139
message_redistribution_ptr      000732 automatic       pointer                  dcl 7-134 set ref 1249* 1250 1251 1252 1276* 1277
                                                                                  1277 1279 1280 1281
message_redistributions_list           based           structure                level 1 dcl 7-109
message_reference                      based           structure                level 1 dcl 7-234
message_reference_parameter            based           structure                level 1 dcl 7-248
message_scan                    000636 automatic       structure                level 1 dcl 316
message_subject                        based           char                     packed unaligned dcl 789 set ref 790* 791 791
message_text_field                     based           structure                level 1 dcl 7-260
message_text_user_field                based           structure                level 1 dcl 7-183
message_text_user_field_text           based           char                     packed unaligned dcl 7-187 ref 882 886 933 936
message_trace                          based           structure                level 1 dcl 7-87 set ref 1662 1679 2740 2948
message_trace_n_relays          000726 automatic       fixed bin(17,0)          dcl 7-55 set ref 2737* 2740 2740
message_trace_ptr               000730 automatic       pointer                  dcl 7-105 set ref 1132* 1133 1133 2740* 2742 2743
                                                                                  2744 2745 2746 2747 2748 2749 2750 2751 2753 2787
                                                                                  2810 2832 2947 2948 2952 2970 2970
message_type_specific_operations
                                000120 automatic       structure                level 1 dcl 108
message_user_field                     based           structure                level 1 dcl 7-163
message_user_field_parameter           based           structure                level 1 dcl 7-208
message_user_field_ptr          000734 automatic       pointer                  dcl 7-169 set ref 859* 860 864 866 867 868 869 870
                                                                                  871 875 876 882 882 882 882 886 886 886 886 886
                                                                                  898* 900 904 905 906 907 917 929 933 933 933 936
                                                                                  936 936 936 1268* 1269 1269
message_user_fields_list               based           structure                level 1 dcl 7-150
microsecond                     002114 automatic       fixed bin(71,0)          dcl 4235 in procedure "parse_message_id_text" set
                                                                                  ref 4321* 4322*
microsecond               3(09) 002002 automatic       char(6)                  level 2 in structure "request_id" packed packed
                                                                                  unaligned dcl 4223 in procedure
                                                                                  "parse_message_id_text" set ref 4321*
min                                                    builtin function         dcl 311 ref 2182 5007
minute                    2     002002 automatic       char(2)                  level 2 in structure "request_id" packed packed
                                                                                  unaligned dcl 4223 in procedure
                                                                                  "parse_message_id_text" set ref 4319*
minute                          002124 automatic       fixed bin(17,0)          dcl 4237 in procedure "parse_message_id_text" set
                                                                                  ref 4319* 4322*
minute                          001744 automatic       fixed bin(17,0)          dcl 3963 in procedure "parse_date_time_text" set ref
                                                                                  4053* 4062* 4066* 4141*
minute_offset                   001747 automatic       fixed bin(17,0)          dcl 3963 set ref 4118* 4120 4120 4123
mlsys_address_list_mgr_$add_address
                                000250 constant        entry                    external dcl 278 ref 515 1328
mlsys_address_list_mgr_$create_read_only_address_list
                                000252 constant        entry                    external dcl 279 ref 520
mlsys_address_list_mgr_$create_user_freeable_address_list
                                000254 constant        entry                    external dcl 280 ref 1329 1344
mlsys_address_list_mgr_$delete_address
                                000256 constant        entry                    external dcl 281 ref 521 1330 1373 1381 1393
mlsys_address_list_mgr_$free_address_list
                                000260 constant        entry                    external dcl 282 ref 525 1331 1338
mlsys_address_mgr_$set_address_implicit_route
                                000262 constant        entry                    external dcl 283 ref 534
mlsys_data_$user_id             000340 external static varying char(32)         dcl 3-72 set ref 3342* 3370*
mlsys_et_$address_pathname_expected
                                000022 external static fixed bin(35,0)          dcl 204 set ref 3350* 3378* 3403* 3478*
mlsys_et_$cant_determine_dtc    000024 external static fixed bin(35,0)          dcl 204 set ref 2520*
mlsys_et_$cant_determine_msgid  000026 external static fixed bin(35,0)          dcl 204 set ref 721* 1011*
mlsys_et_$cant_determine_sender 000030 external static fixed bin(35,0)          dcl 204 set ref 2636*
mlsys_et_$cant_parse_irt_field  000032 external static fixed bin(35,0)          dcl 204 set ref 806*
mlsys_et_$comment_ignored       000034 external static fixed bin(35,0)          dcl 204 set ref 1054* 1068*
mlsys_et_$empty_address_text    000036 external static fixed bin(35,0)          dcl 204 set ref 1387 3151* 3328*
mlsys_et_$extra_restricted_field
                                000040 external static fixed bin(35,0)          dcl 204 set ref 711* 1002* 2536* 2552* 2568* 2605*
                                                                                  2660* 2681*
mlsys_et_$in_mailbox_only_field 000042 external static fixed bin(35,0)          dcl 204 set ref 2156*
mlsys_et_$incomplete_address_list_text
                                000044 external static fixed bin(35,0)          dcl 204 set ref 3669 3867* 3929*
mlsys_et_$incomplete_address_text
                                000046 external static fixed bin(35,0)          dcl 204 set ref 3628* 3867
mlsys_et_$incomplete_comment    000050 external static fixed bin(35,0)          dcl 204 set ref 1038*
mlsys_et_$incomplete_named_group_text
                                000052 external static fixed bin(35,0)          dcl 204 set ref 3669*
mlsys_et_$invalid_address_list_syntax
                                000054 external static fixed bin(35,0)          dcl 204 set ref 3864*
mlsys_et_$invalid_address_syntax
                                000056 external static fixed bin(35,0)          dcl 204 set ref 3243*
mlsys_et_$invalid_named_group_text
                                000060 external static fixed bin(35,0)          dcl 204 set ref 1378 3672*
mlsys_et_$invalid_relayed_field_syntax
                                000062 external static fixed bin(35,0)          dcl 204 set ref 2847* 2854* 2860* 2866* 2872* 2876*
                                                                                  2891* 2915* 2919*
mlsys_et_$invalid_route_field_syntax
                                000064 external static fixed bin(35,0)          dcl 204 set ref 2820*
mlsys_et_$missing_host_name     000066 external static fixed bin(35,0)          dcl 204 set ref 2802* 3171* 3198* 3235*
mlsys_et_$multiple_address_routes
                                000070 external static fixed bin(35,0)          dcl 204 set ref 3160*
mlsys_et_$no_comment_redistribution
                                000072 external static fixed bin(35,0)          dcl 204 set ref 967* 1091*
mlsys_et_$no_message_header     000074 external static fixed bin(35,0)          dcl 204 set ref 1956*
mlsys_et_$obsolete_address_syntax
                                000076 external static fixed bin(35,0)          dcl 204 set ref 3156*
mlsys_et_$only_address_route_allowed
                                000100 external static fixed bin(35,0)          dcl 204 set ref 3177* 3180* 3194*
mlsys_et_$recursive_named_addresses
                                000102 external static fixed bin(35,0)          dcl 204 set ref 3208* 3221*
mlsys_et_$text_follows_address  000104 external static fixed bin(35,0)          dcl 204 set ref 3255* 3340* 3355* 3381* 3406* 3481*
                                                                                  3679*
mlsys_et_$text_follows_route    000106 external static fixed bin(35,0)          dcl 204 set ref 2807*
mlsys_et_$text_parse_failed     000110 external static fixed bin(35,0)          dcl 204 ref 1296 1506 2134
mlsys_et_$unbalanced_braces     000112 external static fixed bin(35,0)          dcl 204 ref 1371 4605
mlsys_et_$unbalanced_parentheses
                                000114 external static fixed bin(35,0)          dcl 204 ref 1371 4609
mlsys_et_$unbalanced_quotes     000116 external static fixed bin(35,0)          dcl 204 ref 1371 4613
mlsys_et_$unknown_structured_address_type
                                000120 external static fixed bin(35,0)          dcl 204 set ref 3334* 3501*
mlsys_field_id_mgr_$get_system_field_type
                                000264 constant        entry                    external dcl 284 ref 1887
mlsys_message_id_mgr_$encode_foreign_id
                                000266 constant        entry                    external dcl 285 ref 522
mlsys_message_id_mgr_$encode_local_id
                                000270 constant        entry                    external dcl 286 ref 523
mlsys_message_id_mgr_$encode_psuedo_id
                                000272 constant        entry                    external dcl 287 ref 524
mlsys_message_mgr_$add_body_section_no_copy
                                000274 constant        entry                    external dcl 288 ref 516
mlsys_message_mgr_$add_redistribution_no_copy
                                000276 constant        entry                    external dcl 289 ref 517
mlsys_message_mgr_$add_reply_reference
                                000300 constant        entry                    external dcl 290 ref 518
mlsys_message_mgr_$add_user_field_no_copy
                                000302 constant        entry                    external dcl 291 ref 519
mlsys_message_mgr_$create_im_message
                                000304 constant        entry                    external dcl 292 ref 538
mlsys_message_mgr_$free_message 000306 constant        entry                    external dcl 293 ref 526
mlsys_message_mgr_$replace_bcc_no_copy
                                000310 constant        entry                    external dcl 294 ref 527
mlsys_message_mgr_$replace_cc_no_copy
                                000312 constant        entry                    external dcl 295 ref 528
mlsys_message_mgr_$replace_from_no_copy
                                000314 constant        entry                    external dcl 296 ref 529
mlsys_message_mgr_$replace_message_envelope
                                000316 constant        entry                    external dcl 297 ref 530
mlsys_message_mgr_$replace_reply_to_no_copy
                                000320 constant        entry                    external dcl 298 ref 531
mlsys_message_mgr_$replace_subject_no_copy
                                000322 constant        entry                    external dcl 299 ref 532
mlsys_message_mgr_$replace_to_no_copy
                                000324 constant        entry                    external dcl 300 ref 533
mlsys_nit_interface_$get_local_system_name
                                000326 constant        entry                    external dcl 301 ref 573 842 1031 1321 1461 1573
                                                                                  2590 2647
mlsys_nit_interface_$is_local_system
                                000330 constant        entry                    external dcl 302 ref 2615 2631 4310
mlsys_psp_$forum_not_available  000332 constant        entry                    external dcl 303 ref 3417 3453
mlsys_user_mte_syntax_$classify_and_validate
                                000334 constant        entry                    external dcl 304 ref 3506
mod                                                    builtin function         dcl 311 ref 2430 2431 4039 4061 4372 4393
month                           001741 automatic       fixed bin(17,0)          dcl 3963 in procedure "parse_date_time_text" set ref
                                                                                  4004* 4005 4006* 4008 4141*
month                     0(18) 002002 automatic       char(2)                  level 2 in structure "request_id" packed packed
                                                                                  unaligned dcl 4223 in procedure
                                                                                  "parse_message_id_text" set ref 4316*
month                           002121 automatic       fixed bin(17,0)          dcl 4237 in procedure "parse_message_id_text" set
                                                                                  ref 4316* 4322*
mr_sort                                based           fixed bin(17,0)          array dcl 153 set ref 978 1111 1118* 1118 1121* 1136
                                                                                  1165 1180 1187 1221 1243 1701
mr_sort_ptr                     000364 automatic       pointer                  dcl 154 set ref 978* 1111 1118 1118 1121 1136 1165
                                                                                  1180 1187 1221 1243 1631* 1700 1701 1702*
mrps                                   based           structure                array level 1 dcl 149 set ref 979 986 1107 1221 1244
                                                                                  1696
mrps_ptr                        000360 automatic       pointer                  dcl 151 set ref 979* 981 982 982 982 982 982 982 982
                                                                                  986 1076 1076 1078 1079 1082 1107 1111 1137 1139
                                                                                  1140 1141 1148 1148 1150 1166 1166 1181 1181 1181
                                                                                  1184 1188 1188 1188 1190 1221 1244 1631* 1668 1670
                                                                                  1670 1671 1672 1672 1674 1675 1675 1679 1680 1682
                                                                                  1682 1684 1684 1686 1686 1687 1687 1688 1692 1692
                                                                                  1692 1693 1696 1697*
multics_format          106(01) 000250 automatic       bit(1)                   level 3 in structure "internal_parse_options" packed
                                                                                  packed unaligned dcl 132 in procedure
                                                                                  "mlsys_parse_text_" set ref 507* 569* 1317* 1457*
                                                                                  1569*
multics_format          106(01)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3950 in procedure "parse_date_time_text" set
                                                                                  ref 4096
multics_format          106(01)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 4452 in procedure "lex_string" ref 4652 4769
                                                                                  4773 4777 4796 4891 4932
multiline_text            5            based           bit(1)                   level 4 in structure "message_text_user_field"
                                                                                  packed packed unaligned dcl 7-183 in procedure
                                                                                  "mlsys_parse_text_" set ref 866* 867 882 886 905*
multiline_text            3            parameter       bit(1)                   level 3 in structure "p_tf" packed packed unaligned
                                                                                  dcl 2248 in procedure "prepare_single_line_field"
                                                                                  set ref 2260*
multiline_text            3            parameter       bit(1)                   level 3 in structure "p_tf" packed packed unaligned
                                                                                  dcl 2306 in procedure "prepare_multiline_field"
                                                                                  set ref 2360*
n_addresses               6            based           fixed bin(17,0)          level 2 dcl 9-6 set ref 718 1008 1373* 1381* 1393*
                                                                                  2200 2625 2690 2696 3843 3894
n_comment_infos                        based           fixed bin(17,0)          level 2 dcl 359 set ref 911 920 923* 923 953 963 964
                                                                                  1034 1815* 2019* 2019 2022 2052
n_errors                               based           fixed bin(17,0)          level 2 dcl 1-24 set ref 1491* 1492 2087 2089* 2095
                                                                                  2120 2125* 3061 3064* 3070
n_fields                               based           fixed bin(17,0)          array level 3 in structure "field_lists" dcl 2497
                                                                                  in procedure "parse_envelope" set ref 2520 2520
                                                                                  2520 2526 2533 2534 2542 2549 2550 2558 2565 2566
                                                                                  2595 2602 2603 2650 2657 2658 2669 2678 2679 2714
                                                                                  2714 2737 2761 2829
n_fields                               based           fixed bin(17,0)          array level 3 in structure "field_lists" dcl 2175
                                                                                  in procedure "find_first_field_in_list" ref 2181
n_fields                               based           fixed bin(17,0)          level 2 in structure "field_list" dcl 2151
                                                                                  in procedure "mark_as_in_mailbox_field" ref 2154
n_fields                               based           fixed bin(17,0)          array level 3 in structure "forwarding_info" dcl 355
                                                                                  in procedure "mlsys_parse_text_" set ref 1018 1022
                                                                                  1921 1924 1927 1927* 2006*
n_fields                               based           fixed bin(17,0)          level 2 in structure "header_field_list" dcl 330
                                                                                  in procedure "mlsys_parse_text_" set ref 1806*
                                                                                  1871 1871* 1891 1891* 1902 1913 1928 1941
n_fields                               based           fixed bin(17,0)          array level 3 in structure "field_by_type_lists"
                                                                                  dcl 343 in procedure "mlsys_parse_text_" set ref
                                                                                  702 708 709 735 747 759 771 786 791 798 804 824
                                                                                  994 999 1000 1809* 1911 1911*
n_fields                               based           fixed bin(17,0)          level 2 in structure "field_list" dcl 3024
                                                                                  in procedure "parse_address_list_field" ref 3032
n_fields                               based           fixed bin(17,0)          level 2 in structure "field_list" dcl 2251
                                                                                  in procedure "prepare_single_line_field" ref 2262
                                                                                  2267 2275 2281
n_fields                               based           fixed bin(17,0)          level 2 in structure "field_list" dcl 2310
                                                                                  in procedure "prepare_multiline_field" ref 2350
n_fields                               based           fixed bin(17,0)          array level 3 in structure "comment_info" dcl 364
                                                                                  in procedure "mlsys_parse_text_" set ref 915 915
                                                                                  1038 1038 1082 1935 1940 1940* 2024*
n_forwarding_infos                     based           fixed bin(17,0)          level 2 dcl 350 set ref 946 963 976 978 979 981 982
                                                                                  982 982 982 982 982 982 985 1075 1106 1130 1135
                                                                                  1148 1148 1150 1163 1173 1180 1186 1202 1221 1242
                                                                                  1669 1696 1701 1812* 2001* 2001 2004 2044
n_header_fields_allocated
                          5     000636 automatic       fixed bin(17,0)          level 2 dcl 316 set ref 646 646 646 646 656 656 656
                                                                                  656 657 657 657 657 658 658 658 658 659 659 659
                                                                                  659 660 660 660 660 661 661 661 661 662 662 662
                                                                                  662 663 663 663 663 664 664 664 664 665 665 665
                                                                                  665 702 702 703 703 708 708 709 709 710 710 735
                                                                                  735 736 736 736 736 747 747 748 748 748 748 759
                                                                                  759 760 760 760 760 771 771 772 772 772 772 786
                                                                                  786 787 787 787 787 791 791 798 798 804 804 805
                                                                                  805 824 824 825 825 915 915 915 915 917 917 917
                                                                                  917 919 949 949 949 949 956 956 956 956 994 994
                                                                                  995 995 999 999 1000 1000 1001 1001 1018 1018 1018
                                                                                  1018 1018 1018 1022 1022 1022 1022 1022 1022 1038
                                                                                  1038 1038 1038 1047 1047 1061 1061 1082 1082 1082
                                                                                  1082 1082 1082 1802* 1805 1808 1809 1809 1811 1814
                                                                                  1817 1911 1911 1911 1911 1913 1913 1921 1921 1924
                                                                                  1924 1927 1927 1927 1927 1928 1928 1935 1935 1940
                                                                                  1940 1940 1940 1941 1941 2003 2006 2006 2021 2024
                                                                                  2024 2039 2041 2046 2048 2054 2056 2059 2178 2181
                                                                                  2181 2182 2182 2520 2520 2520 2520 2520 2520 2526
                                                                                  2526 2527 2527 2533 2533 2534 2534 2535 2535 2542
                                                                                  2542 2543 2543 2549 2549 2550 2550 2551 2551 2558
                                                                                  2558 2559 2559 2565 2565 2566 2566 2567 2567 2595
                                                                                  2595 2596 2596 2602 2602 2603 2603 2604 2604 2623
                                                                                  2623 2623 2623 2650 2650 2651 2651 2657 2657 2658
                                                                                  2658 2659 2659 2669 2669 2671 2671 2678 2678 2679
                                                                                  2679 2680 2680 2714 2714 2714 2714 2737 2737 2761
                                                                                  2761 2763 2763 2829 2829 2831 2831
n_hosts                         000714 automatic       fixed bin(17,0)          dcl 451 set ref 3144* 3168 3168* 3169 3195* 3195
                                                                                  3196 3232* 3232 3233 3264 3276 3278 3290 3293*
                                                                                  3293 3296 3299 3302 3305
n_lines                         001110 automatic       fixed bin(21,0)          dcl 1972 set ref 1974* 1985* 1985 1990
n_previous_errors               001710 automatic       fixed bin(17,0)          dcl 3053 set ref 3062* 3066 3076
n_redistributions        10            based           fixed bin(17,0)          level 2 dcl 7-15 ref 1275
n_relays                  6            based           fixed bin(17,0)          level 3 in structure "address_route" dcl 8-6
                                                                                  in procedure "mlsys_parse_text_" set ref 1655 1672
                                                                                  2785 2786* 2789 2792 2809* 2970 3132 3300* 3541
n_relays                 11            based           fixed bin(17,0)          level 2 in structure "message_trace" dcl 7-87
                                                                                  in procedure "mlsys_parse_text_" set ref 1130 1133
                                                                                  1657 1662 1674 1679 2740* 2744 2745 2746 2747 2748
                                                                                  2749 2750 2751 2948 2952*
n_reversed_hosts                000715 automatic       fixed bin(17,0)          dcl 452 set ref 3144* 3168* 3273 3275 3278 3279
n_sorted                        000624 automatic       fixed bin(17,0)          dcl 182 set ref 1104* 1110 1114 1117 1122* 1122
n_syntax_errors                 000713 automatic       fixed bin(21,0)          dcl 448 set ref 1363* 1368 1378 1378 1378 1383 1387
                                                                                  1388 1388 1391 1393 1489 1490 1506 1535* 3055 3059
                                                                                  3061 3062 3075 3596* 3596 3598 3599 3600 3665
                                                                                  3667* 3905* 3905 3907 3908 3909 4376*
n_tokens_allocated                     based           fixed bin(21,0)          level 2 dcl 410 ref 4411
n_tokens_used             1            based           fixed bin(21,0)          level 2 dcl 410 set ref 4505* 4625* 4625 4627 4965
                                                                                  4983 5007
n_user_fields                          based           fixed bin(17,0)          level 2 in structure "user_field_list" dcl 367
                                                                                  in procedure "mlsys_parse_text_" set ref 862 1818*
                                                                                  1900 1900*
n_user_fields             7            based           fixed bin(17,0)          level 2 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_" ref 1267
negative_offset                 001734 automatic       bit(1)                   dcl 3959 set ref 4108* 4112 4124
new_host_indeces_ptr            000476 automatic       pointer                  dcl 3114 set ref 3126* 3131 3131 3274* 3276 3279
                                                                                  3283 3284* 3540 3540
new_message                     000116 automatic       bit(1)                   dcl 105 set ref 498* 552* 642 798 942
new_ptel_ptr                    001706 automatic       pointer                  dcl 3052 in procedure "merge_error_lists" set ref
                                                                                  3064* 3067 3071
new_ptel_ptr                    001142 automatic       pointer                  dcl 2077 in procedure "message_parse_error" set ref
                                                                                  2089* 2092 2096
next_eol_idx                    000615 automatic       fixed bin(21,0)          dcl 180 set ref 1413* 1414 1414* 1416
next_line                              defined         char                     packed unaligned dcl 835 ref 836 839
no_copy                 106(02) 000250 automatic       bit(1)                   level 3 in structure "internal_parse_options" packed
                                                                                  packed unaligned dcl 132 in procedure
                                                                                  "mlsys_parse_text_" set ref 509* 570* 1318* 1458*
                                                                                  1570*
no_copy                 106(02)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 4452 in procedure "lex_string" ref 4725
null                                                   builtin function         dcl 311 ref 501 564 575 620 648 651 687 690 738 741
                                                                                  750 753 762 765 774 777 821 869 906 929 982 1076
                                                                                  1130 1140 1142 1148 1151 1160 1163 1166 1169 1170
                                                                                  1174 1181 1188 1190 1193 1195 1202 1205 1207 1223
                                                                                  1225 1240 1248 1250 1251 1252 1259 1259 1277 1277
                                                                                  1310 1333 1338 1340 1341 1452 1466 1471 1473 1474
                                                                                  1499 1578 1584 1585 1631 1648 1649 1651 1653 1654
                                                                                  1655 1658 1663 1665 1666 1668 1670 1671 1672 1675
                                                                                  1680 1682 1684 1686 1687 1688 1693 1697 1700 1702
                                                                                  1705 1707 2039 2041 2043 2051 2059 2061 2085 2095
                                                                                  2118 2120 2133 2263 2362 2468 2509 2611 2625 2693
                                                                                  2697 2700 2706 2706 2743 2751 2759 2947 2949 2968
                                                                                  2970 2995 2997 3055 3059 3070 3123 3126 3131 3132
                                                                                  3284 3296 3360 3360 3386 3386 3422 3423 3423 3488
                                                                                  3488 3540 3541 3603 3657 3833 3859 4353 4411 4415
                                                                                  4419 4423 4426 4429 4433 4435 4437
num_paths                 1            based           fixed bin(17,0)          level 2 dcl 10-15 ref 1340 1473 1584 1648 3798
number_lang                            based           fixed bin(17,0)          level 2 dcl 12-88 ref 4176
number_zone               1            based           fixed bin(17,0)          level 2 dcl 12-88 ref 4177 4178 4178
offset_idx                      001713 automatic       fixed bin(17,0)          dcl 3053 set ref 3076* 3078 3079 3080 3081 3084
original_lth              6            based           fixed bin(21,0)          array level 3 in structure "token_list" dcl 410
                                                                                  in procedure "mlsys_parse_text_" set ref 2892 3590
                                                                                  3899
original_lth              4            based           fixed bin(21,0)          level 2 in structure "token" dcl 392 in procedure
                                                                                  "mlsys_parse_text_" set ref 4630* 4727
original_start                  002155 automatic       fixed bin(21,0)          dcl 4464 in procedure "lex_string" set ref 4644*
                                                                                  4721* 4721 4763* 4827* 4827 4834 4835 4865 4865
                                                                                  4865 4868
original_start            5            based           fixed bin(21,0)          array level 3 in structure "token_list" dcl 410
                                                                                  in procedure "mlsys_parse_text_" set ref 2892 2892
                                                                                  2899 3590 3590 3598 3606 3899 3899 3907
original_start            3            based           fixed bin(21,0)          level 2 in structure "current" dcl 403 in procedure
                                                                                  "mlsys_parse_text_" ref 2924
original_start            3            based           fixed bin(21,0)          level 2 in structure "token" dcl 392 in procedure
                                                                                  "mlsys_parse_text_" set ref 4629* 4729 4731 4732
                                                                                  4841 4848
original_text                          based           char                     packed unaligned dcl 375 ref 3606 3606 4729 4729
                                                                                  4731 4731 4732 4732 4841 4848 4865
original_text_lth               000664 automatic       fixed bin(21,0)          dcl 376 set ref 3131 3274 3281 3312 3314 3316 3342
                                                                                  3342 3370 3370 3395 3395 3470 3470 3496 3496 3505
                                                                                  3506 3509 3509 3509 3512 3512 3512 3519 3520 3520
                                                                                  3520 3540 3606 3684 3685 3686 3689 3689 4297 4300
                                                                                  4302 4351* 4358 4358 4360 4360 4360 4360 4363 4363
                                                                                  4364 4364 4365 4365 4366 4366 4369 4369 4415 4415
                                                                                  4419 4423 4426 4429 4436 4518 4520 4522 4529 4532
                                                                                  4535 4540 4546 4552 4558 4561 4566 4568 4573 4577
                                                                                  4579 4593 4650 4652 4654 4661 4661 4666 4668 4676
                                                                                  4679 4686 4688 4693 4694 4702 4705 4706 4709 4709
                                                                                  4722 4729 4731 4732 4767 4769 4772 4773 4776 4777
                                                                                  4779 4780 4786 4786 4793 4796 4801 4802 4802 4804
                                                                                  4807 4815 4824 4824 4830 4841 4848 4865 4865 4889
                                                                                  4891 4893 4900 4900 4905 4907 4912 4913 4920 4923
                                                                                  4924 4927 4927 4939 4941 4943
original_text_ptr               000666 automatic       pointer                  dcl 377 set ref 3606 4350* 4520 4529 4532 4535 4540
                                                                                  4546 4552 4558 4561 4566 4568 4573 4577 4579 4652
                                                                                  4654 4661 4666 4676 4686 4694 4702 4706 4709 4729
                                                                                  4731 4732 4769 4772 4773 4776 4777 4779 4786 4796
                                                                                  4802 4804 4807 4815 4834 4841 4848 4865 4891 4893
                                                                                  4900 4905 4913 4920 4924 4927 4941
p_additional_info                      parameter       varying char             dcl 2075 ref 2069 2103
p_address_list_parse                   parameter       bit(1)                   dcl 4348 ref 4343 4369
p_address_list_ptr                     parameter       pointer                  dcl 3022 in procedure "parse_address_list_field" set
                                                                                  ref 3015 3028* 3034*
p_address_list_ptr                     parameter       pointer                  dcl 3819 in procedure "parse_address_list" set ref
                                                                                  3813 3833 3834* 3843 3860* 3891* 3894 3895*
p_address_list_ptr                     parameter       pointer                  dcl 2195 in procedure "set_implicit_route" ref 2192
                                                                                  2200 2201
p_address_list_ptr                     parameter       pointer                  dcl 1522 in procedure
                                                                                  "parse_address_list_text_internal" set ref 1516
                                                                                  1532* 1543*
p_address_parse                        parameter       bit(1)                   dcl 4347 ref 4343 4362
p_address_ptr                          parameter       pointer                  dcl 3104 in procedure "parse_address" set ref 3098
                                                                                  3123* 3342* 3370* 3395* 3470* 3496* 3509* 3512*
                                                                                  3520* 3526* 3528* 3603 3606* 3689*
p_address_ptr                          parameter       pointer                  dcl 1608 in procedure "parse_address_text_internal"
                                                                                  set ref 1602 1616*
p_code                                 parameter       fixed bin(35,0)          dcl 2234 in procedure "set_message_id_directly" set
                                                                                  ref 2229 2237*
p_code                                 parameter       fixed bin(35,0)          dcl 1609 in procedure "parse_address_text_internal"
                                                                                  set ref 1602 1614* 1616 1616*
p_code                                 parameter       fixed bin(35,0)          dcl 2962 in procedure "bypass_implicit_route" set
                                                                                  ref 2959 2973*
p_code                                 parameter       fixed bin(35,0)          dcl 3557 in procedure "bad_address_syntax" ref 3554
                                                                                  3600 3610
p_code                                 parameter       fixed bin(35,0)          dcl 3820 in procedure "parse_address_list" set ref
                                                                                  3813 3836* 3876*
p_code                                 parameter       fixed bin(35,0)          dcl 3105 in procedure "parse_address" set ref 3098
                                                                                  3546*
p_code                                 parameter       fixed bin(35,0)          dcl 2219 in procedure
                                                                                  "set_date_time_created_directly" set ref 2214
                                                                                  2222*
p_code                                 parameter       fixed bin(35,0)          dcl 4453 in procedure "lex_string" set ref 4446 4472
                                                                                  4484 4496 4598* 4605* 4609* 4613*
p_code                                 parameter       fixed bin(35,0)          dcl 2989 in procedure "bypass_relay_operation" set
                                                                                  ref 2986 3000*
p_code                                 parameter       fixed bin(35,0)          dcl 1523 in procedure
                                                                                  "parse_address_list_text_internal" set ref 1516
                                                                                  1530* 1532 1532* 1539 1544*
p_code                                 parameter       fixed bin(35,0)          dcl 3953 in procedure "parse_date_time_text" set ref
                                                                                  3946 4149* 4161*
p_code                                 parameter       fixed bin(35,0)          dcl 2073 in procedure "message_parse_error" set ref
                                                                                  2069 2080* 2102
p_code                                 parameter       fixed bin(35,0)          dcl 2114 in procedure "message_parse_error_fatal"
                                                                                  ref 2111 2128
p_code                                 parameter       fixed bin(35,0)          dcl 3786 in procedure "search_forum_list" set ref
                                                                                  3782 3792* 3796* 3798 3799* 3802
p_code                                 parameter       fixed bin(35,0)          dcl 3886 in procedure "bad_address_list_syntax" ref
                                                                                  3883 3909 3912
p_component                            parameter       char(32)                 packed unaligned dcl 3749 set ref 3746 3753 3753*
p_date_time                            parameter       fixed bin(71,0)          dcl 3952 set ref 3946 4144* 4147* 4161*
p_date_time_1                          parameter       fixed bin(71,0)          dcl 5021 in procedure "date_time_equal" ref 5018
                                                                                  5023
p_date_time_1                          parameter       fixed bin(71,0)          dcl 5034 in procedure "date_time_before" set ref
                                                                                  5031 5036 5036*
p_date_time_2                          parameter       fixed bin(71,0)          dcl 5021 in procedure "date_time_equal" ref 5018
                                                                                  5023
p_date_time_2                          parameter       fixed bin(71,0)          dcl 5034 in procedure "date_time_before" set ref
                                                                                  5031 5036 5036*
p_date_time_created                    parameter       fixed bin(71,0)          dcl 2495 in procedure "parse_envelope" set ref 2487
                                                                                  2508* 2528* 2574 2574* 2577* 2579
p_date_time_created                    parameter       fixed bin(71,0)          dcl 2218 in procedure
                                                                                  "set_date_time_created_directly" ref 2214 2221
p_date_time_text                       parameter       char                     packed unaligned dcl 3951 set ref 3946 3966* 4161*
p_dirname                              parameter       char                     packed unaligned dcl 3785 set ref 3782 3802*
p_ename                                parameter       char                     packed unaligned dcl 3785 in procedure
                                                                                  "search_forum_list" set ref 3782 3791 3799*
p_ename                                parameter       char(32)                 packed unaligned dcl 3749 in procedure
                                                                                  "reject_starnames" set ref 3746 3752*
p_envelope_ptr                         parameter       pointer                  dcl 2494 ref 2487 2508 2508 2509 2509 2509 2509 2544
                                                                                  2560 2574 2574 2577 2579 2579 2582 2582 2582 2597
                                                                                  2611 2612 2614 2625 2652 2672 2691 2693 2697 2697
                                                                                  2697 2700 2700 2700 2706 2706 2706 2706 2706 2753
                                                                                  2949
p_field_list_ptr                       parameter       pointer                  dcl 2149 in procedure "mark_as_in_mailbox_field" ref
                                                                                  2146 2154 2155
p_field_list_ptr                       parameter       pointer                  dcl 3021 in procedure "parse_address_list_field" ref
                                                                                  3015 3032 3033
p_field_list_ptr                       parameter       pointer                  dcl 2249 in procedure "prepare_single_line_field"
                                                                                  ref 2245 2262 2267 2268 2275 2276 2281 2286
p_field_list_ptr                       parameter       pointer                  dcl 2308 in procedure "prepare_multiline_field" ref
                                                                                  2343 2350 2351
p_field_lists_ptr                      parameter       pointer                  dcl 2172 in procedure "find_first_field_in_list" ref
                                                                                  2169 2181 2182
p_field_lists_ptr                      parameter       pointer                  dcl 2494 in procedure "parse_envelope" ref 2487 2520
                                                                                  2520 2520 2526 2527 2533 2534 2535 2542 2543 2549
                                                                                  2550 2551 2558 2559 2565 2566 2567 2595 2596 2602
                                                                                  2603 2604 2623 2623 2650 2651 2657 2658 2659 2669
                                                                                  2671 2678 2679 2680 2714 2714 2737 2761 2763 2829
                                                                                  2831
p_field_value                          parameter       char                     packed unaligned dcl 2307 set ref 2331 2338*
p_fieldname                            parameter       varying char             dcl 3050 in procedure "merge_error_lists" ref 3047
                                                                                  3081 3081
p_fieldname                            parameter       varying char             dcl 3020 in procedure "parse_address_list_field" set
                                                                                  ref 3015 3037*
p_fieldname_lth                        parameter       fixed bin(17,0)          dcl 2305 ref 2331 2343 2404
p_first_field_idx                      parameter       fixed bin(17,0)          dcl 2173 set ref 2169 2178* 2182* 2182
p_first_token                          parameter       fixed bin(21,0)          dcl 3705 set ref 3701 3713*
p_from                                 parameter       pointer                  dcl 2494 set ref 2487 2623* 2625 2627 2629 2690
                                                                                  2691* 2696 2697 2700
p_implicit_route                       parameter       pointer                  dcl 2196 set ref 2192 2201*
p_include_comments                     parameter       bit(1)                   dcl 3706 ref 3701 3716
p_include_non_comments                 parameter       bit(1)                   dcl 3706 ref 3701 3723
p_initialize_string                    parameter       bit(1)                   dcl 3706 ref 3701 3710
p_ipo                                  parameter       structure                level 1 dcl 2492 in procedure "parse_envelope" set
                                                                                  ref 2487 2528* 2544* 2560* 2597* 2623* 2652* 2672*
                                                                                  2768* 2776* 2835* 2905 2932*
p_ipo                                  parameter       structure                level 1 dcl 3950 in procedure "parse_date_time_text"
                                                                                  set ref 3946 3969*
p_ipo                                  parameter       structure                level 1 dcl 3019 in procedure
                                                                                  "parse_address_list_field" set ref 3015 3034*
p_ipo                                  parameter       structure                level 1 dcl 1606 in procedure
                                                                                  "parse_address_text_internal" set ref 1602 1614*
                                                                                  1616*
p_ipo                                  parameter       structure                level 1 dcl 1723 in procedure "scan_message_text"
                                                                                  ref 1719
p_ipo                                  parameter       structure                level 1 dcl 4219 in procedure
                                                                                  "parse_message_id_text" set ref 4215 4243*
p_ipo                                  parameter       structure                level 1 dcl 3817 in procedure "parse_address_list"
                                                                                  ref 3813 3830
p_ipo                                  parameter       structure                level 1 dcl 4452 in procedure "lex_string" ref 4446
                                                                                  4472 4484 4496
p_ipo                                  parameter       structure                level 1 dcl 1520 in procedure
                                                                                  "parse_address_list_text_internal" set ref 1516
                                                                                  1530* 1532*
p_ipo                                  parameter       structure                level 1 dcl 3102 in procedure "parse_address" set
                                                                                  ref 3098 3125 3130* 3253* 3538* 3661
p_is_redistribution                    parameter       bit(1)                   dcl 2493 ref 2487 2511 2619
p_last_token                           parameter       fixed bin(21,0)          dcl 3705 ref 3701 3715
p_list_error                           parameter       bit(1)                   dcl 2963 in procedure "bypass_implicit_route" ref
                                                                                  2959 2973
p_list_error                           parameter       bit(1)                   dcl 2990 in procedure "bypass_relay_operation" ref
                                                                                  2986 3000
p_message_id                           parameter       bit(72)                  dcl 4221 in procedure "parse_message_id_text" set
                                                                                  ref 4215 4246* 4327* 4330*
p_message_id                           parameter       bit(72)                  dcl 2233 in procedure "set_message_id_directly" ref
                                                                                  2229 2236
p_message_id_text                      parameter       char                     packed unaligned dcl 4220 set ref 4215 4240* 4246*
p_message_ptr                          parameter       pointer                  dcl 2217 in procedure
                                                                                  "set_date_time_created_directly" ref 2214
p_message_ptr                          parameter       pointer                  dcl 2232 in procedure "set_message_id_directly" ref
                                                                                  2229
p_n_words                              parameter       fixed bin(18,0)          dcl 4387 ref 4384 4391 4393 4393 4396
p_name                                 parameter       char                     packed unaligned dcl 3772 ref 3769 3774
p_original_lth                         parameter       fixed bin(21,0)          dcl 4623 ref 4619 4630
p_original_start                       parameter       fixed bin(21,0)          dcl 4622 ref 4619 4629
p_original_text                        parameter       char                     packed unaligned dcl 4346 set ref 4343 4350 4351
p_pointer                              parameter       pointer                  dcl 4388 set ref 4384 4392* 4396*
p_pto                                  parameter       structure                level 1 dcl 1519 in procedure
                                                                                  "parse_address_list_text_internal" set ref 1516
                                                                                  1530* 1532*
p_pto                                  parameter       structure                level 1 dcl 1605 in procedure
                                                                                  "parse_address_text_internal" set ref 1602 1614*
                                                                                  1616*
p_pto                                  parameter       structure                level 1 dcl 4218 in procedure
                                                                                  "parse_message_id_text" set ref 4215 4243*
p_pto                                  parameter       structure                level 1 dcl 2072 in procedure "message_parse_error"
                                                                                  ref 2069
p_pto                                  parameter       structure                level 1 dcl 3816 in procedure "parse_address_list"
                                                                                  set ref 3813 3856*
p_pto                                  parameter       structure                level 1 dcl 2491 in procedure "parse_envelope" set
                                                                                  ref 2487 2520* 2528* 2529* 2536* 2544* 2545* 2552*
                                                                                  2560* 2561* 2568* 2598* 2605* 2623* 2636* 2653*
                                                                                  2660* 2674* 2681* 2768* 2776* 2835* 2907* 2932*
                                                                                  2973* 3000*
p_pto                                  parameter       structure                level 1 dcl 4451 in procedure "lex_string" ref 4446
                                                                                  4472 4484 4496
p_pto                                  parameter       structure                level 1 dcl 3949 in procedure "parse_date_time_text"
                                                                                  set ref 3946 3969*
p_pto                                  parameter       structure                level 1 dcl 1722 in procedure "scan_message_text"
                                                                                  set ref 1719 1889*
p_pto                                  parameter       structure                level 1 dcl 3018 in procedure
                                                                                  "parse_address_list_field" set ref 3015 3034*
p_pto                                  parameter       structure                level 1 dcl 3101 in procedure "parse_address" ref
                                                                                  3098
p_release_sel                          parameter       bit(1)                   dcl 4409 ref 4406 4435
p_representation                       parameter       char                     packed unaligned dcl 1521 in procedure
                                                                                  "parse_address_list_text_internal" set ref 1516
                                                                                  1527* 1538 1542
p_representation                       parameter       char                     packed unaligned dcl 1607 in procedure
                                                                                  "parse_address_text_internal" set ref 1602 1611*
p_string                               parameter       varying char             dcl 3707 set ref 3701 3710* 3718* 3718 3719* 3719
                                                                                  3724* 3724 3725* 3725 3732 3732* 3732 3732
p_suffix                               parameter       char                     packed unaligned dcl 3772 ref 3769 3774
p_text                                 parameter       char                     packed unaligned dcl 2396 in procedure
                                                                                  "prepare_single_field_for_multiline" ref 2393 2399
                                                                                  2401 2408 2410 2411 2411 2412 2412 2419 2419 2427
                                                                                  2427 2429 2429 2433 2433 2433 2433 2437 2437 2437
                                                                                  2437 2443 2443 2443 2443 2443 2443 2443 2443
p_text                                 based           char                     packed unaligned dcl 2465 in procedure
                                                                                  "add_to_work_string" ref 2472
p_text_lth                             parameter       fixed bin(21,0)          dcl 1970 in procedure "count_lines_in_text" ref 1965
                                                                                  1976 1980 1982 1983
p_text_lth                             parameter       fixed bin(21,0)          dcl 2074 in procedure "message_parse_error" ref 2069
                                                                                  2101
p_text_lth                             parameter       fixed bin(21,0)          dcl 2463 in procedure "add_to_work_string" ref 2459
                                                                                  2467 2472 2472 2474
p_text_ptr                             parameter       pointer                  dcl 2462 in procedure "add_to_work_string" ref 2459
                                                                                  2472
p_text_ptr                             parameter       pointer                  dcl 1969 in procedure "count_lines_in_text" ref 1965
                                                                                  1982 1983
p_text_start                           parameter       fixed bin(21,0)          dcl 2074 ref 2069 2100
p_tf                                   parameter       structure                level 1 dcl 2306 in procedure
                                                                                  "prepare_multiline_field" set ref 2331 2343
p_tf                                   parameter       structure                level 1 dcl 2248 in procedure
                                                                                  "prepare_single_line_field" set ref 2245
p_token_idx                            parameter       fixed bin(21,0)          dcl 5005 in procedure "make_token_current" ref 5002
                                                                                  5007
p_token_idx                            parameter       fixed bin(21,0)          dcl 3103 in procedure "parse_address" set ref 3098
                                                                                  3135* 3316 3544* 3590 3598 3606
p_token_idx                            parameter       fixed bin(21,0)          dcl 3818 in procedure "parse_address_list" set ref
                                                                                  3813 3846* 3856*
parenthesis_level               002157 automatic       fixed bin(21,0)          dcl 4464 set ref 4647* 4650 4672* 4672 4678 4683*
                                                                                  4683 4717
parse_text_error_list                  based           structure                level 1 dcl 1-24 set ref 1491 2089 2095 2120 2125
                                                                                  3064 3070
parse_text_error_list_n_errors  000722 automatic       fixed bin(17,0)          dcl 1-35 set ref 1490* 1491 1491 2085* 2087* 2089
                                                                                  2089 2091 2098 2124* 2125 2125 3059* 3061* 3062
                                                                                  3064 3064
parse_text_error_list_ptr       000720 automatic       pointer                  dcl 1-33 set ref 1293 1491* 1492 1493 1494 1495 1496
                                                                                  1499* 1504 1631* 2085 2087 2092 2095 2095 2096*
                                                                                  2100 2101 2102 2103 2120 2120 2125* 2126 2127 2128
                                                                                  2129 2130 3059 3061 3067 3070 3070 3071* 3078 3079
                                                                                  3080 3081 3084
parse_text_options                     based           structure                level 1 dcl 1-6 set ref 626* 646* 680* 704* 711*
                                                                                  721* 736* 748* 760* 772* 806* 967* 991* 996* 1002*
                                                                                  1011* 1018* 1038* 1048* 1051* 1054* 1062* 1065*
                                                                                  1068* 1091* 1365* 1483* 1588* 2156*
parse_text_options_ptr          000716 automatic       pointer                  dcl 1-19 set ref 504* 554* 555 559 564 566 626 646
                                                                                  680 704 711 721 736 748 760 772 806 967 991 996
                                                                                  1002 1011 1018 1038 1048 1051 1054 1062 1065 1068
                                                                                  1091 1293 1314* 1365 1435* 1436 1440 1452 1454
                                                                                  1483 1489 1566* 1588 2123 2156 3055
pathname                 17            based           char(168)                array level 3 packed packed unaligned dcl 10-15 set
                                                                                  ref 3799* 3802
paths                    14            based           structure                array level 2 dcl 10-15
period                    3     002002 automatic       char(1)                  level 2 packed packed unaligned dcl 4223 set ref
                                                                                  4314
position                        000627 automatic       fixed bin(17,0)          dcl 182 set ref 879* 880* 886 930* 931* 936 1245*
                                                                                  1246* 1249
previous_n_addresses            000214 automatic       fixed bin(17,0)          dcl 3826 set ref 3843* 3894
previous_text                          based           char                     packed unaligned dcl 2320 ref 2372 2372 2373 2374
                                                                                  2375
receiving_host          103            based           varying char(256)        level 2 in structure "current_relay" dcl 2725
                                                                                  in procedure "parse_trace" set ref 2852* 2876
                                                                                  2899* 2919
receiving_host          115            based           varying char(256)        array level 3 in structure "message_trace" dcl 7-87
                                                                                  in procedure "mlsys_parse_text_" set ref 2746*
recognized_zone                 001732 automatic       bit(1)                   dcl 3959 set ref 4095* 4098 4102 4104 4178* 4203*
redistribution            4            based           structure                array level 2 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_"
redistribution            4            based           structure                level 2 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_"
redistribution_sender           000576 automatic       pointer                  dcl 175 set ref 1076* 1078* 1079*
redistributions          10            based           structure                array level 2 dcl 7-109 set ref 1249 1276
redistributions_list     60            based           pointer                  level 2 dcl 7-15 ref 1249 1276
reference                 4     000406 automatic       structure                level 2 dcl 157
relay_id                234            based           bit(72)                  level 2 in structure "current_relay" dcl 2725
                                                                                  in procedure "parse_trace" set ref 2899*
relay_id                246            based           bit(72)                  array level 3 in structure "message_trace" dcl 7-87
                                                                                  in procedure "mlsys_parse_text_" set ref 2750*
relay_idx                       001642 automatic       fixed bin(17,0)          dcl 2734 set ref 2826* 2832 2937* 2937 2942* 2942
                                                                                  2947 2952
relay_recipient         236            based           pointer                  level 2 in structure "current_relay" dcl 2725
                                                                                  in procedure "parse_trace" set ref 2907* 2997
                                                                                  2997*
relay_recipient         250            based           pointer                  array level 3 in structure "message_trace" dcl 7-87
                                                                                  in procedure "mlsys_parse_text_" set ref 1658
                                                                                  1658* 1675 1675* 2751*
relays                    7            based           varying char(256)        array level 2 in structure "address_route" dcl 8-6
                                                                                  in procedure "mlsys_parse_text_" set ref 2790*
                                                                                  2790 2792* 2814* 3305*
relays                   12            based           structure                array level 2 in structure "message_trace" dcl 7-87
                                                                                  in procedure "mlsys_parse_text_" set ref 2832
remaining_text                         based           char                     packed unaligned dcl 4455 set ref 4520 4529 4532
                                                                                  4535 4540 4546 4552 4558 4561 4566 4568 4573 4577
                                                                                  4579 4652 4654 4661 4666 4676 4686 4694 4702 4706
                                                                                  4709 4769 4772 4773 4776 4777 4779 4786 4796 4802
                                                                                  4804 4807 4815 4891 4893 4900 4905 4913 4920 4924
                                                                                  4927 4941
replace_bcc              60     000120 automatic       entry variable           level 2 dcl 108 set ref 527* 587* 775
replace_cc               64     000120 automatic       entry variable           level 2 dcl 108 set ref 528* 588* 763
replace_from             70     000120 automatic       entry variable           level 2 dcl 108 set ref 529* 589* 649 688
replace_message_envelope
                         74     000120 automatic       entry variable           level 2 dcl 108 set ref 530* 1238
replace_reply_to        100     000120 automatic       entry variable           level 2 dcl 108 set ref 531* 590* 739
replace_subject         104     000120 automatic       entry variable           level 2 dcl 108 set ref 532* 591* 790
replace_to              110     000120 automatic       entry variable           level 2 dcl 108 set ref 533* 592* 751
reply_to                 40            based           pointer                  level 3 dcl 7-15 set ref 741 1263*
representation                         based           char                     packed unaligned dcl 94 ref 1354 1355 1363 1363 1365
                                                                                  1365 1378 1378 1385 1385 1388 1388 1393 1393 1397
                                                                                  1397 1400 1400 1403 1403 1406 1406 1413 1413 1414
                                                                                  1414
representation_lth              000104 automatic       fixed bin(21,0)          dcl 96 set ref 606* 1351* 1354 1355 1357 1363 1365
                                                                                  1368 1378 1385 1388 1393 1397 1400 1403 1406 1409
                                                                                  1411 1413 1414 1419 1746
representation_ptr              000102 automatic       pointer                  dcl 95 set ref 604* 1350* 1354 1355 1363 1365 1378
                                                                                  1385 1388 1393 1397 1400 1403 1406 1413 1414 1744
                                                                                  1758 3073
representation_used             000105 automatic       fixed bin(21,0)          dcl 96 set ref 1352* 1357 1363 1365 1368 1378 1385
                                                                                  1388 1393 1397 1400 1403 1406 1409 1411 1413 1414
                                                                                  1417* 1417 1419*
request_id                      002002 automatic       structure                level 1 dcl 4223 set ref 4312 4313*
requests_acknowledgement
                        106(03)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 2492 in procedure "parse_envelope" set ref
                                                                                  2669
requests_acknowledgement
                        106(03) 000250 automatic       bit(1)                   level 3 in structure "internal_parse_options" packed
                                                                                  packed unaligned dcl 132 in procedure
                                                                                  "mlsys_parse_text_" set ref 513* 577* 1162
rest_of_field                          defined         char                     packed unaligned dcl 830 ref 831 832
rest_of_representation                 defined         char                     packed unaligned dcl 1411 ref 1413 1414
rest_of_text                           defined         char                     packed unaligned dcl 1980
                                                                                  in begin block on line 1978 ref 1982 1983
rest_of_text                           defined         char                     packed unaligned dcl 2410
                                                                                  in begin block on line 2409 ref 2411 2412
reverse                                                builtin function         dcl 311 ref 3774 3774
rtrim                                                  builtin function         dcl 311 ref 839 1849 1879 3410 3413 3430 3449 3459
                                                                                  3774 3791
save_comments                   002153 automatic       bit(1)                   dcl 4461 set ref 4476* 4488* 4500* 4720
saved_current_token             000664 automatic       fixed bin(21,0)          dcl 3708 set ref 3712* 3735*
saved_default_system            001300 automatic       varying char(256)        dcl 2502 set ref 2645* 2666
saved_default_system_is_local   001401 automatic       bit(1)                   dcl 2503 set ref 2646* 2667
saved_n_syntax_errors           000654 automatic       fixed bin(21,0)          dcl 3652 set ref 3665* 3667
saved_p_ipo                     000100 automatic       structure                level 1 dcl 3107 set ref 3125* 3130 3253 3538
search                                                 builtin function         dcl 311 ref 866 3357 3383 3408 3486 4652 4654 4769
                                                                                  4772 4773 4776 4777 4779 4891 4893
search_paths_$find_dir          000346 constant        entry                    external dcl 3119 ref 3360 3386 3488
search_paths_$get               000336 constant        entry                    external dcl 306 ref 3423
second                          001745 automatic       fixed bin(17,0)          dcl 3963 in procedure "parse_date_time_text" set ref
                                                                                  4076* 4080* 4084* 4085* 4141*
second                    2(18) 002002 automatic       char(2)                  level 2 in structure "request_id" packed packed
                                                                                  unaligned dcl 4223 in procedure
                                                                                  "parse_message_id_text" set ref 4320*
second                          002125 automatic       fixed bin(17,0)          dcl 4237 in procedure "parse_message_id_text" set
                                                                                  ref 4320* 4322*
second_half_comment_start       000655 automatic       fixed bin(21,0)          dcl 3652 set ref 3674* 3686*
section                   4     000436 automatic       structure                level 2 dcl 159 set ref 633
section_type                           based           fixed bin(17,0)          level 3 dcl 7-292 set ref 634*
seen_route                      000507 automatic       bit(1)                   dcl 3117 set ref 3141* 3160 3165*
sel                                    based           structure                array level 1 dcl 444 set ref 4369 4369 4436
sel_ptr                  14     000670 automatic       pointer                  level 2 dcl 379 set ref 1371 1371 1371 1378 1378
                                                                                  1378 1383 1387 1388 1388 1391 1393 1493 1494 1495
                                                                                  1537 1538 1539 3055 3078 3079 3080 3598 3599 3600
                                                                                  3907 3908 3909 4369 4369 4369* 4435 4436 4436
                                                                                  4437*
semicolon               107(03) 000542 automatic       bit(1)                   level 3 in structure "local_ipo" packed packed
                                                                                  unaligned dcl 3649 in procedure
                                                                                  "parse_named_group" set ref 3663*
semicolon               107(03)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3817 in procedure "parse_address_list" ref
                                                                                  3936
semicolon               107(03)        parameter       bit(1)                   level 3 in structure "p_ipo" packed packed unaligned
                                                                                  dcl 3102 in procedure "parse_address" set ref 3635
sender                    6     000366 automatic       pointer                  level 3 in structure "local_mep" dcl 156
                                                                                  in procedure "mlsys_parse_text_" set ref 1207
                                                                                  1207* 1240* 1631* 1653 1653*
sender                    2            based           pointer                  level 2 in structure "envelope" dcl 2498
                                                                                  in procedure "parse_envelope" set ref 2509* 2597*
                                                                                  2611 2612* 2614* 2625 2691* 2693* 2697 2697* 2697*
                                                                                  2706 2706*
sender                    6            based           pointer                  level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 1225 1225* 1248*
sender                    6            based           pointer                  array level 4 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 982* 1076
                                                                                  1078 1670 1670*
sending_host             14            based           varying char(256)        array level 3 in structure "message_trace" dcl 7-87
                                                                                  in procedure "mlsys_parse_text_" set ref 2745*
sending_host              2            based           varying char(256)        level 2 in structure "current_relay" dcl 2725
                                                                                  in procedure "parse_trace" set ref 2845* 2919
set_address_implicit_route
                        114     000120 automatic       entry variable           level 2 dcl 108 set ref 534* 2201
set_date_time_created
                        120     000120 automatic       entry variable           level 2 dcl 108 set ref 535* 684
set_message_id          124     000120 automatic       entry variable           level 2 dcl 108 set ref 536* 727
short                     2            based           varying char(4)          array level 3 dcl 12-88 ref 4178
size                                                   builtin function         dcl 311 ref 4358 4358 4360 4360 4363 4363 4364 4364
                                                                                  4365 4365 4366 4366 4369 4369
sl_control_default              000042 constant        bit(36)                  initial packed unaligned dcl 11-13 set ref 3423*
sl_info                                based           structure                level 1 dcl 10-15 set ref 1340 1473 1584 1648
sl_info_version_1               000274 constant        fixed bin(17,0)          initial dcl 10-29 set ref 3423*
sort_idx                        000625 automatic       fixed bin(17,0)          dcl 182 set ref 1109* 1110 1111* 1114 1114* 1117
                                                                                  1121
stack_extension_ptr             000462 automatic       pointer                  dcl 171 set ref 1620* 2778* 2817* 2927* 2966* 2993*
                                                                                  4133* 4159* 4249* 4335* 4355* 4372 4392
stack_extension_used            000466 automatic       fixed bin(18,0)          dcl 172 set ref 4356* 4372 4372 4391 4392 4393* 4393
stack_truncation_ptr            000464 automatic       pointer                  dcl 171 set ref 4372* 4374*
stackframeptr                                          builtin function         dcl 311 ref 3281 4411 4415 4419 4423 4426 4429 4436
standard_multics_zone           001733 automatic       bit(1)                   dcl 3959 set ref 4095* 4122* 4138 4144 4174* 4176
                                                                                  4177 4178*
start                           001736 automatic       fixed bin(21,0)          dcl 3962 in procedure "parse_date_time_text" set ref
                                                                                  4035* 4041* 4045* 4052 4053 4057* 4059 4061 4062
                                                                                  4063* 4063 4066 4067* 4067 4073 4076 4078 4082
start                           001071 automatic       fixed bin(21,0)          dcl 1739 in procedure "scan_message_text" set ref
                                                                                  1823* 1831 1833 1838 1842 1843 1852* 1852 1854
                                                                                  1858* 1858 1859 1863 1865* 1865 1866 1877
start_of_id_string              001635 automatic       fixed bin(21,0)          dcl 2732 set ref 2879* 2892 2899
start_of_string                 002116 automatic       fixed bin(21,0)          dcl 4236 set ref 4269* 4298* 4300
start_of_text                   000123 automatic       fixed bin(21,0)          dcl 2397 set ref 2419* 2420 2420* 2424 2433 2433
                                                                                  2433 2437* 2437 2442 2443 2443 2443 2443
string                                                 builtin function         dcl 311 set ref 502* 506* 568* 608* 1311* 1316*
                                                                                  1323* 1456* 1463* 1567* 1575* 2593* 2906* 3216*
                                                                                  3659* 3662* 4312 4313* 4631*
string_lth                      000226 automatic       fixed bin(21,0)          dcl 3888 in procedure "bad_address_list_syntax" set
                                                                                  ref 3899* 3903* 3903 3908
string_lth                      000103 automatic       fixed bin(21,0)          dcl 3560 in procedure "bad_address_syntax" set ref
                                                                                  3590* 3594* 3594 3599 3605
subject                  50            based           structure                level 3 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_"
subject                  12     000406 automatic       structure                level 3 in structure "local_mrp" dcl 157
                                                                                  in procedure "mlsys_parse_text_"
substr                                                 builtin function         dcl 311 set ref 1767 1833 1838 1854 1863 1866 2283*
                                                                                  2287* 2372* 2373* 2379* 2379 2429 2433 2433 2472*
                                                                                  3351 3412 3732 4040 4044 4053 4062 4066 4076 4116
                                                                                  4118 4529 4532 4535 4540 4546 4552 4558 4561 4566
                                                                                  4568 4573 4577 4579 4661* 4661 4666 4668* 4676
                                                                                  4679* 4686 4688* 4702 4706 4709* 4709 4722 4786*
                                                                                  4786 4796 4802* 4802 4804 4815 4830 4841 4848
                                                                                  4865* 4865 4900* 4900 4905 4907* 4920 4924 4927*
                                                                                  4927 4941 4943*
suffixed_name_$make             000350 constant        entry                    external dcl 3120 ref 3358 3384
system_area                            based           area(1024)               dcl 163 ref 791 882 886 919 933 936 978 979 1340
                                                                                  1473 1491 1584 1648 1655 1662 1672 1679 1692 1696
                                                                                  1701 1805 1808 1811 1814 1817 2003 2021 2039 2041
                                                                                  2046 2048 2054 2056 2059 2279 2369 2375 2740 2786
                                                                                  2809 2948 2970 3131 3132 3274 3281 3300 3540 3541
                                                                                  4396 4411 4415 4419 4423 4426 4429 4436
system_area_ptr                 000454 automatic       pointer                  dcl 164 set ref 613* 791 882 886 919 933 936 978 979
                                                                                  1326* 1340 1450* 1473 1491 1564* 1584 1648 1655
                                                                                  1662 1672 1679 1692 1696 1701 1805 1808 1811 1814
                                                                                  1817 2003 2021 2039 2041 2046 2048 2054 2056 2059
                                                                                  2279 2369 2375 2740 2786 2809 2948 2970 3131 3132
                                                                                  3274 3281 3300 3423* 3540 3541 4396 4411 4415 4419
                                                                                  4423 4426 4429 4436
system_is_local                 002110 automatic       bit(1)                   dcl 4234 set ref 4308* 4310* 4312
system_name                     002007 automatic       varying char(256)        dcl 4233 set ref 4284* 4287* 4306 4307* 4310* 4330*
text                      2            based           structure                level 2 in structure "message_text_user_field"
                                                                                  dcl 7-183 in procedure "mlsys_parse_text_" set ref
                                                                                  871* 917*
text                                   defined         char                     packed unaligned dcl 2442
                                                                                  in begin block on line 2441 set ref 2443 2443 2443
                                                                                  2443
text_column                     000120 automatic       fixed bin(21,0)          dcl 2397 set ref 2400* 2404* 2427 2433
text_lth                  2     000450 automatic       fixed bin(21,0)          level 2 in structure "local_mtf" dcl 161
                                                                                  in procedure "mlsys_parse_text_" set ref 790 790
                                                                                  791 791 791
text_lth                  4            based           fixed bin(21,0)          level 3 in structure "message_text_user_field"
                                                                                  dcl 7-183 in procedure "mlsys_parse_text_" set ref
                                                                                  870* 876* 882 882 886 886 907* 933 933 936 936
text_lth                 14     000406 automatic       fixed bin(21,0)          level 4 in structure "local_mrp" dcl 157
                                                                                  in procedure "mlsys_parse_text_" set ref 822*
text_lth                  2            parameter       fixed bin(21,0)          level 2 in structure "p_tf" dcl 2248 in procedure
                                                                                  "prepare_single_line_field" set ref 2264* 2270*
                                                                                  2291*
text_lth                 32            based           fixed bin(21,0)          array level 5 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 1692 1692
text_lth                  1            based           fixed bin(21,0)          array level 2 in structure "sel" dcl 444
                                                                                  in procedure "mlsys_parse_text_" set ref 1378 1388
                                                                                  1391 1494 1538* 3079 3599* 3908*
text_lth                  4            based           fixed bin(21,0)          level 2 in structure
                                                                                  "message_preformatted_body_section" dcl 7-292
                                                                                  in procedure "mlsys_parse_text_" set ref 636*
text_lth                  2            based           fixed bin(21,0)          array level 3 in structure "parse_text_error_list"
                                                                                  dcl 1-24 in procedure "mlsys_parse_text_" set ref
                                                                                  1494* 2101* 2127* 3079*
text_lth                  2            parameter       fixed bin(21,0)          level 2 in structure "p_tf" dcl 2306 in procedure
                                                                                  "prepare_multiline_field" set ref 2362* 2366 2367
                                                                                  2371 2372 2372 2373 2374 2375 2375 2384*
text_offset                     001711 automatic       fixed bin(17,0)          dcl 3053 set ref 3073* 3078
text_ptr                 30            based           pointer                  level 5 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 1252 1252*
text_ptr                               parameter       pointer                  level 2 in structure "p_tf" dcl 2248 in procedure
                                                                                  "prepare_single_line_field" set ref 2263* 2269*
                                                                                  2290*
text_ptr                               parameter       pointer                  level 2 in structure "p_tf" dcl 2306 in procedure
                                                                                  "prepare_multiline_field" set ref 2362 2372 2372
                                                                                  2373 2374 2375 2383*
text_ptr                 24            based           pointer                  level 4 in structure "message_redistribution"
                                                                                  dcl 7-122 in procedure "mlsys_parse_text_" ref
                                                                                  1252
text_ptr                 50            based           pointer                  level 4 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_" ref 791
text_ptr                  2            based           pointer                  level 2 in structure
                                                                                  "message_preformatted_body_section" dcl 7-292
                                                                                  in procedure "mlsys_parse_text_" set ref 635*
text_ptr                        000450 automatic       pointer                  level 2 in structure "local_mtf" dcl 161
                                                                                  in procedure "mlsys_parse_text_" set ref 790 791
                                                                                  791
text_ptr                 30            based           pointer                  array level 5 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 982* 1688
                                                                                  1692 1693*
text_ptr                 12     000406 automatic       pointer                  level 4 in structure "local_mrp" dcl 157
                                                                                  in procedure "mlsys_parse_text_" set ref 821*
text_ptr                  2            based           pointer                  level 3 in structure "message_text_user_field"
                                                                                  dcl 7-183 in procedure "mlsys_parse_text_" set ref
                                                                                  869* 875* 882 886 886 886 906* 929 933 936 936 936
text_start                1            based           fixed bin(21,0)          array level 3 in structure "parse_text_error_list"
                                                                                  dcl 1-24 in procedure "mlsys_parse_text_" set ref
                                                                                  1493* 2100* 2126* 3078*
text_start                             based           fixed bin(21,0)          array level 2 in structure "sel" dcl 444
                                                                                  in procedure "mlsys_parse_text_" set ref 1378 1383
                                                                                  1388 1393 1493 1537* 3078 3598* 3907*
text_to_parse                          defined         char                     packed unaligned dcl 1361 set ref 1363 1365* 1378
                                                                                  1385 1388 1397 1400 1403 1406
text_used                       002150 automatic       fixed bin(21,0)          dcl 4456 in procedure "lex_string" set ref 4514*
                                                                                  4518 4520 4520 4522* 4527* 4527 4529 4529 4532
                                                                                  4532 4535 4535 4538 4540 4540 4543* 4543 4546 4546
                                                                                  4551 4552 4552 4555* 4555 4558 4558 4561 4561 4565
                                                                                  4566 4566 4568 4568 4569* 4569 4573 4573 4576 4577
                                                                                  4577 4579 4579 4580* 4580 4644 4648* 4648 4650
                                                                                  4652 4652 4654 4654 4661 4661 4663* 4663 4666 4666
                                                                                  4671* 4671 4676 4676 4682* 4682 4686 4686 4692*
                                                                                  4692 4693 4694 4694 4699* 4699 4702 4702 4704*
                                                                                  4704 4705 4706 4706 4709 4709 4711* 4711 4721 4763
                                                                                  4767 4769 4769 4772 4772 4773 4773 4776 4776 4777
                                                                                  4777 4779 4779 4780 4786 4786 4790* 4790 4793 4796
                                                                                  4796 4800* 4800 4801 4802 4802 4804 4804 4806*
                                                                                  4806 4807 4807 4811* 4811 4815 4815 4824 4824*
                                                                                  4827 4835 4865 4865 4868 4887* 4887 4889 4891 4891
                                                                                  4893 4893 4900 4900 4902* 4902 4905 4905 4911*
                                                                                  4911 4912 4913 4913 4917* 4917 4920 4920 4922*
                                                                                  4922 4923 4924 4924 4927 4927 4929* 4929 4933*
                                                                                  4933 4938* 4938 4939 4941 4941 4945* 4945
text_used                       000121 automatic       fixed bin(21,0)          dcl 2397 in procedure
                                                                                  "prepare_single_field_for_multiline" set ref 2401*
                                                                                  2405* 2408 2410 2411 2412 2419 2427 2429 2433 2433
                                                                                  2437 2437 2443 2443 2443 2443 2450* 2450
the_comment                            based           char                     packed unaligned dcl 1691 ref 1692
the_line                               defined         char                     packed unaligned dcl 841 set ref 842*
the_mrp                                based           structure                level 1 dcl 150
the_mrp_ptr                     000362 automatic       pointer                  dcl 151 set ref 986* 991 991 991 991 996 1008 1008
                                                                                  1008 1008 1008 1018 1022 1107* 1111 1221* 1222
                                                                                  1223 1223 1225 1225 1229 1230 1235 1244* 1246*
                                                                                  1248 1248 1248 1250 1250 1251 1251 1252 1252
the_original_text                      defined         char                     packed unaligned dcl 4727 set ref 4729 4731 4732
the_route_ptr                   001532 automatic       pointer                  dcl 2730 set ref 2780* 2785 2790
the_string                             defined         char                     packed unaligned dcl 3605 ref 3606
the_text                               based           char                     packed unaligned dcl 1968 ref 1982 1982 1983 1983
the_unquoted_text                      based           char                     packed unaligned dcl 4728 ref 4729
ti_zone                                based           structure                level 1 unaligned dcl 12-88
time_info_$zone_names           000342 external static fixed bin(17,0)          dcl 12-86 set ref 4176 4177 4178
to                       22            based           pointer                  level 3 in structure "message_redistribution"
                                                                                  dcl 7-122 in procedure "mlsys_parse_text_" set ref
                                                                                  1251 1281*
to                       26            based           pointer                  level 4 in structure "the_mrp" dcl 150 in procedure
                                                                                  "mlsys_parse_text_" set ref 1018* 1251 1251*
to                       26            based           pointer                  array level 4 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 982* 1687
                                                                                  1687*
to                       42            based           pointer                  level 3 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_" set ref 753 1264*
token                                  based           structure                level 1 dcl 392
token_idx                       000712 automatic       fixed bin(21,0)          dcl 405 set ref 2771* 2776 2804 2838* 2879 2880 2889
                                                                                  2907 3147 3169 3182 3196 3214 3233 3251 3262 3265
                                                                                  3328 3573 3586 3627 3655 3666* 3674 3682 3712 3715
                                                                                  3849 3850 3857 3928 3975* 4263* 4269 4279 4299
                                                                                  4300 4965 4968* 4968 4970 4983 4986* 4986 4987
                                                                                  4990* 4990 4991 5007* 5010
token_list                             based           structure                level 1 dcl 410 set ref 4358 4358 4411
token_list_ptr                  000670 automatic       pointer                  level 3 dcl 379 set ref 2892 2892 2892 2899 3590
                                                                                  3590 3590 3598 3606 3899 3899 3899 3907 4358 4358
                                                                                  4358* 4411 4411 4411 4505 4625 4625 4627 4627 4965
                                                                                  4970 4983 4987 4991 5007 5007 5010
token_lth                 2            based           fixed bin(21,0)          level 2 in structure "token" dcl 392 in procedure
                                                                                  "mlsys_parse_text_" set ref 4511* 4541* 4553*
                                                                                  4567* 4578* 4595* 4723* 4729 4732* 4831* 4835*
                                                                                  4841 4848
token_lth                 2            based           fixed bin(21,0)          level 2 in structure "current" dcl 403 in procedure
                                                                                  "mlsys_parse_text_" ref 2814 2842 2845 2849 2849
                                                                                  2852 2856 2858 2862 2864 2868 2870 2874 2903 2913
                                                                                  3289 3305 3337 3347 3351 3351 3351 3351 3353 3375
                                                                                  3379 3400 3404 3475 3479 3718 3724 3982 3995 3995
                                                                                  3997 3997 4006 4014 4014 4016 4016 4016 4018 4018
                                                                                  4030 4031 4031 4037 4037 4039 4040 4044 4052 4053
                                                                                  4059 4061 4062 4066 4073 4076 4091 4094 4112 4116
                                                                                  4118 4284 4302
token_ptr                       000706 automatic       pointer                  dcl 401 in procedure "mlsys_parse_text_" set ref
                                                                                  4509 4510 4511 4540 4541 4542 4552 4553 4554 4566
                                                                                  4567 4568 4577 4578 4579 4594 4595 4596 4627* 4629
                                                                                  4630 4631 4722 4723 4724 4727 4729 4729 4729 4731
                                                                                  4731 4732 4732 4733 4735 4737 4830 4831 4834 4835
                                                                                  4838 4839 4841 4841 4841 4844 4845 4848 4848 4848
                                                                                  4850 4851
token_ptr                              based           pointer                  level 2 in structure "token" dcl 392 in procedure
                                                                                  "mlsys_parse_text_" set ref 4510* 4540* 4552*
                                                                                  4566* 4577* 4594* 4722* 4729 4731* 4830* 4834*
token_ptr                              based           pointer                  level 2 in structure "current" dcl 403 in procedure
                                                                                  "mlsys_parse_text_" ref 2814 2842 2845 2849 2849
                                                                                  2852 2856 2858 2862 2864 2868 2870 2874 2903 2913
                                                                                  3289 3305 3337 3347 3351 3351 3351 3353 3375 3379
                                                                                  3400 3404 3475 3479 3718 3724 3982 3997 4006 4016
                                                                                  4018 4031 4040 4044 4053 4062 4066 4076 4094 4116
                                                                                  4118 4284 4302
tokens                    2            based           structure                array level 2 dcl 410 set ref 4627 4970 4987 4991
                                                                                  5007 5010
total_field_count               001077 automatic       fixed bin(17,0)          dcl 1741 set ref 1825* 1946* 1946
total_text                             based           char                     packed unaligned dcl 2312 in procedure
                                                                                  "prepare_multiline_field" set ref 2369 2372* 2373*
                                                                                  2379* 2383 2384
total_text                             based           char                     packed unaligned dcl 2253 in procedure
                                                                                  "prepare_single_line_field" set ref 2279 2283*
                                                                                  2287*
total_text_lth                  001216 automatic       fixed bin(21,0)          dcl 2255 in procedure "prepare_single_line_field"
                                                                                  set ref 2274* 2277* 2277 2279 2279 2283 2287 2291
total_text_lth                  000102 automatic       fixed bin(21,0)          dcl 2314 in procedure "prepare_multiline_field" set
                                                                                  ref 2366* 2367* 2367 2369 2369 2372 2373 2379 2383
                                                                                  2384
total_text_ptr                  000100 automatic       pointer                  dcl 2313 in procedure "prepare_multiline_field" set
                                                                                  ref 2369* 2372 2373 2379 2383 2384
total_text_ptr                  001214 automatic       pointer                  dcl 2254 in procedure "prepare_single_line_field"
                                                                                  set ref 2279* 2283 2287 2290
total_text_used                 000103 automatic       fixed bin(21,0)          dcl 2314 in procedure "prepare_multiline_field" set
                                                                                  ref 2374* 2377* 2379
total_text_used                 001217 automatic       fixed bin(21,0)          dcl 2255 in procedure "prepare_single_line_field"
                                                                                  set ref 2280* 2283 2284* 2284 2287 2288* 2288
trace                     4            based           pointer                  level 3 in structure "message_redistribution"
                                                                                  dcl 7-122 in procedure "mlsys_parse_text_" ref
                                                                                  1277 1277 1279
trace                    10            based           pointer                  array level 4 in structure "mrps" dcl 149
                                                                                  in procedure "mlsys_parse_text_" set ref 982* 1140
                                                                                  1141* 1148 1150* 1671 1672 1672 1674 1675 1675
                                                                                  1679 1680*
trace                    10     000366 automatic       pointer                  level 3 in structure "local_mep" dcl 156
                                                                                  in procedure "mlsys_parse_text_" set ref 1130 1130
                                                                                  1132 1141 1142* 1150 1151* 1631* 1654 1655 1655
                                                                                  1657 1658 1658 1662 1663*
trace                     4            based           pointer                  level 2 in structure "envelope" dcl 2498
                                                                                  in procedure "parse_envelope" set ref 2509* 2753*
                                                                                  2949*
trace                    20            based           pointer                  level 3 in structure "message" dcl 7-15 in procedure
                                                                                  "mlsys_parse_text_" ref 1259 1259 1261
trace_address                   000572 automatic       pointer                  dcl 175 set ref 1631* 1705 1705* 2759* 2776* 2780*
                                                                                  2783* 2793* 2968 2968* 2995 2995*
translate                                              builtin function         dcl 311 ref 2842 2849 2849 2856 2862 2868 2874 2903
                                                                                  3337 3347 3375 3400 3475 3982 4006 4094 4178 4841
                                                                                  4848
trimmed_address_ename           000465 automatic       varying char(32)         dcl 3113 set ref 3430* 3431 3433 3436 3438 3459*
                                                                                  3460 3463 3463
type                      5            based           fixed bin(17,0)          level 2 in structure "token" dcl 392 in procedure
                                                                                  "mlsys_parse_text_" set ref 4509* 4542* 4554*
                                                                                  4568* 4579* 4596* 4724* 4838* 4844* 4850*
type                      5            based           fixed bin(17,0)          level 2 in structure "current" dcl 403 in procedure
                                                                                  "mlsys_parse_text_" ref 2774 2796 2799 2802 2807
                                                                                  2841 2842 2845 2852 2858 2864 2870 2880 2881 2885
                                                                                  2886 3156 3160 3171 3173 3174 3177 3187 3189 3194
                                                                                  3198 3208 3221 3230 3235 3238 3325 3331 3334 3340
                                                                                  3350 3355 3378 3381 3403 3406 3478 3481 3565 3567
                                                                                  3572 3576 3579 3580 3581 3582 3583 3623 3625 3631
                                                                                  3633 3635 3716 3925 3927 3932 3934 3936 3978 3988
                                                                                  3994 4001 4003 4011 4013 4022 4029 4034 4051 4056
                                                                                  4073 4090 4107 4107 4108 4110 4130 4266 4273 4274
                                                                                  4275 4281 4283 4289 4292 4989
types                                  based           structure                array level 2 in structure "forwarding_info" dcl 355
                                                                                  in procedure "mlsys_parse_text_" set ref 949 949
                                                                                  1018 1018 1022 1022
types                                  based           structure                array level 2 in structure "field_lists" dcl 2175
                                                                                  in procedure "find_first_field_in_list"
types                                  based           structure                array level 2 in structure "field_lists" dcl 2497
                                                                                  in procedure "parse_envelope" set ref 2623 2623
types                                  based           structure                array level 2 in structure "comment_info" dcl 364
                                                                                  in procedure "mlsys_parse_text_" set ref 917 917
                                                                                  956 956 1082 1082
types                                  based           structure                array level 2 in structure "field_by_type_lists"
                                                                                  dcl 343 in procedure "mlsys_parse_text_" set ref
                                                                                  646 646 656 656 657 657 658 658 659 659 660 660
                                                                                  661 661 662 662 663 663 664 664 665 665 736 736
                                                                                  748 748 760 760 772 772 787 787
unquoted_start                  002156 automatic       fixed bin(21,0)          dcl 4464 set ref 4645* 4722 4723 4730 4740 4760*
                                                                                  4830 4831
unquoted_text                          based           char                     packed unaligned dcl 389 set ref 4360 4360 4415
                                                                                  4661* 4668* 4679* 4688* 4709* 4722 4786* 4802*
                                                                                  4830 4865* 4900* 4907* 4927* 4943*
unquoted_text_ptr         2     000670 automatic       pointer                  level 3 dcl 379 set ref 4360 4360 4360* 4415 4415
                                                                                  4415 4661 4668 4679 4688 4709 4722 4786 4802 4830
                                                                                  4865 4900 4907 4927 4943
unquoted_used                   002151 automatic       fixed bin(21,0)          dcl 4458 set ref 4513* 4645 4661 4662* 4662 4668
                                                                                  4670* 4670 4679 4680* 4680 4688 4691* 4691 4709
                                                                                  4710* 4710 4723 4730* 4740* 4760 4786 4788* 4788
                                                                                  4802 4803* 4803 4831 4865 4868* 4868 4900 4901*
                                                                                  4901 4907 4910* 4910 4927 4928* 4928 4943 4944*
                                                                                  4944
use_date_time_breaks            002152 automatic       bit(1)                   dcl 4460 set ref 4475* 4487* 4499* 4561 4769 4841
                                                                                  4848
used                            000125 automatic       fixed bin(21,0)          dcl 2397 in procedure
                                                                                  "prepare_single_field_for_multiline" set ref 2426*
                                                                                  2427 2428* 2428 2429 2437 2437
used                            000621 automatic       fixed bin(21,0)          dcl 180 in procedure "mlsys_parse_text_" set ref
                                                                                  827* 828 830 831 832 836 839 842 849* 849
used                            001111 automatic       fixed bin(21,0)          dcl 1972 in procedure "count_lines_in_text" set ref
                                                                                  1974* 1976 1980 1982 1983 1986* 1986
user_area                              based           area(1024)               dcl 166 ref 2089 2095 2120 2125 3064 3070
user_area_ptr                   000456 automatic       pointer                  dcl 167 set ref 564* 566* 1452* 1454* 2089 2095 2120
                                                                                  2125 3064 3070
user_field                4     000424 automatic       structure                level 2 dcl 158 set ref 859 898
user_field_list                        based           structure                level 1 dcl 367 set ref 1817 2059
user_field_list_ptr      16     000636 automatic       pointer                  level 3 dcl 316 set ref 862 863 864 1817* 1818 1900
                                                                                  1900 1902 1903 2059 2059
user_fields              10            based           structure                array level 2 in structure
                                                                                  "message_user_fields_list" dcl 7-150 in procedure
                                                                                  "mlsys_parse_text_" set ref 886 936 1268
user_fields               1            based           structure                array level 2 in structure "user_field_list" dcl 367
                                                                                  in procedure "mlsys_parse_text_"
user_fields_list         56            based           pointer                  level 3 dcl 7-15 ref 886 936 1268
validate_addresses        4(01)        parameter       bit(1)                   level 3 packed packed unaligned dcl 3101 ref 3525
verify                                                 builtin function         dcl 311 ref 836 1363 1393 1749 1783 1846 1854 2399
                                                                                  2419 2433 4520 4694 4807 4913
version                                based           char(8)                  level 2 in structure "message_trace" packed packed
                                                                                  unaligned dcl 7-87 in procedure
                                                                                  "mlsys_parse_text_" set ref 2742*
version                   2            based           char(8)                  array level 2 in structure "mrps" packed packed
                                                                                  unaligned dcl 149 in procedure "mlsys_parse_text_"
                                                                                  set ref 981*
version                         000106 automatic       char(8)                  level 2 in structure "local_pto" packed packed
                                                                                  unaligned dcl 98 in procedure "mlsys_parse_text_"
                                                                                  set ref 500*
version                                based           char(8)                  level 3 in structure "address_route" packed packed
                                                                                  unaligned dcl 8-6 in procedure "mlsys_parse_text_"
                                                                                  set ref 2788* 2811* 3301*
version                   2     000366 automatic       char(8)                  level 2 in structure "local_mep" packed packed
                                                                                  unaligned dcl 156 in procedure "mlsys_parse_text_"
                                                                                  set ref 678*
version                                based           char(8)                  level 2 in structure "parse_text_options" packed
                                                                                  packed unaligned dcl 1-6 in procedure
                                                                                  "mlsys_parse_text_" set ref 555 1436
version                   2     000436 automatic       char(8)                  level 2 in structure "local_mbsp" packed packed
                                                                                  unaligned dcl 159 in procedure "mlsys_parse_text_"
                                                                                  set ref 631*
version                   2     000424 automatic       char(8)                  level 2 in structure "local_mufp" packed packed
                                                                                  unaligned dcl 158 in procedure "mlsys_parse_text_"
                                                                                  set ref 858* 897*
version                   2     000406 automatic       char(8)                  level 2 in structure "local_mrp" packed packed
                                                                                  unaligned dcl 157 in procedure "mlsys_parse_text_"
                                                                                  set ref 819*
whitespace                             defined         char                     packed unaligned dcl 2424 ref 2427 2429 2437 2437
words                                  based           bit(36)                  array dcl 4389 ref 4396
work_string                            based           char                     packed unaligned dcl 2316 set ref 2379 2472*
work_string_lth                 000106 automatic       fixed bin(21,0)          dcl 2318 set ref 2335* 2347* 2379 2467 2469* 2469
                                                                                  2472
work_string_ptr                 000104 automatic       pointer                  dcl 2317 set ref 2334* 2346* 2379 2472
work_string_used                000107 automatic       fixed bin(21,0)          dcl 2318 set ref 2336* 2348* 2364 2366 2379 2379
                                                                                  2467 2472 2474* 2474
year                            002002 automatic       char(2)                  level 2 in structure "request_id" packed packed
                                                                                  unaligned dcl 4223 in procedure
                                                                                  "parse_message_id_text" set ref 4315*
year                            001742 automatic       fixed bin(17,0)          dcl 3963 in procedure "parse_date_time_text" set ref
                                                                                  4016* 4018* 4141*
year                            002122 automatic       fixed bin(17,0)          dcl 4237 in procedure "parse_message_id_text" set
                                                                                  ref 4315* 4322*
zone_idx                        001772 automatic       fixed bin(17,0)          dcl 4194 set ref 4196* 4198 4199* 4202 4204
zone_name                       001726 automatic       char(3)                  packed unaligned dcl 3957 set ref 4094* 4138* 4141*
                                                                                  4178 4199
zone_offset                     001730 automatic       fixed bin(71,0)          dcl 3958 set ref 4123* 4124* 4124 4147 4204*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABSOLUTE_PATH                          internal static fixed bin(17,0)          initial dcl 10-33
ACCESS_CLASS_FIELDNAME                 internal static varying char(32)         initial dcl 6-6
ACKNOWLEDGE_TO_FIELDNAME               internal static varying char(32)         initial dcl 6-6
ANGLE_BRACKETS                         internal static char(2)                  initial packed unaligned dcl 13-95
ATSIGN                                 internal static char(1)                  initial packed unaligned dcl 13-70
BACKSLASH_QUOTE                        internal static char(2)                  initial packed unaligned dcl 13-95
BS                                     internal static char(1)                  initial packed unaligned dcl 13-70
COLON_SP                               internal static char(2)                  initial packed unaligned dcl 13-95
COMMA                                  internal static char(1)                  initial packed unaligned dcl 13-70
COMMA_SP                               internal static char(2)                  initial packed unaligned dcl 13-95
COMMENT_REQUOTE                        internal static char(7)                  initial packed unaligned dcl 13-49
COMMENT_RFC822_REQUOTE                 internal static char(7)                  initial packed unaligned dcl 13-52
CR                                     internal static char(1)                  initial packed unaligned dcl 13-70
DATE_TIME_CREATED_FIELDNAME            internal static varying char(32)         initial dcl 6-6
DATE_TIME_DELIVERED_FIELDNAME          internal static varying char(32)         initial dcl 6-6
DATE_TIME_MAILED_FIELDNAME             internal static varying char(32)         initial dcl 6-6
DELIVERED_BY_FIELDNAME                 internal static varying char(32)         initial dcl 6-6
FF                                     internal static char(1)                  initial packed unaligned dcl 13-70
FORUM_ADDRESS                          internal static fixed bin(17,0)          initial dcl 4-6
HOME_DIR                               internal static fixed bin(17,0)          initial dcl 10-38
HT                                     internal static char(1)                  initial packed unaligned dcl 13-70
HYPHEN                                 internal static char(1)                  initial packed unaligned dcl 13-70
IMPLICIT_ROUTE_FIELDNAME               internal static varying char(32)         initial dcl 6-6
INITIATED_SEGS                         internal static fixed bin(17,0)          initial dcl 10-39
INVALID_ADDRESS                        internal static fixed bin(17,0)          initial dcl 4-6
LEFT_ANGLE_BRACKET                     internal static char(1)                  initial packed unaligned dcl 13-70
LOGBOX_ADDRESS                         internal static fixed bin(17,0)          initial dcl 4-6
MAILBOX_ADDRESS                        internal static fixed bin(17,0)          initial dcl 4-6
MAILING_LIST_ADDRESS                   internal static fixed bin(17,0)          initial dcl 4-6
MAIL_TABLE_ADDRESS                     internal static fixed bin(17,0)          initial dcl 4-6
MESSAGE_BIT_STRING_BODY_SECTION        internal static fixed bin(17,0)          initial dcl 7-285
MESSAGE_DATE_USER_FIELD                internal static fixed bin(17,0)          initial dcl 7-174
MESSAGE_ID_FIELDNAME                   internal static varying char(32)         initial dcl 6-6
MESSAGE_INTEGER_USER_FIELD             internal static fixed bin(17,0)          initial dcl 7-174
MESSAGE_REDISTRIBUTIONS_LIST_VERSION_2 internal static char(8)                  initial packed unaligned dcl 7-117
MESSAGE_REFERENCES_LIST_VERSION_2      internal static char(8)                  initial packed unaligned dcl 7-227
MESSAGE_USER_FIELDS_LIST_VERSION_2     internal static char(8)                  initial packed unaligned dcl 7-158
MESSAGE_VERSION_2                      internal static char(8)                  initial packed unaligned dcl 7-49
NAMED_GROUP_ADDRESS                    internal static fixed bin(17,0)          initial dcl 4-6
NLSP                                   internal static char(2)                  initial packed unaligned dcl 13-95
PLUS                                   internal static char(1)                  initial packed unaligned dcl 13-70
PROCESS_DIR                            internal static fixed bin(17,0)          initial dcl 10-37
QUOTE_LEFT_BRACE                       internal static char(2)                  initial packed unaligned dcl 13-95
QUOTE_QUOTE                            internal static char(2)                  initial packed unaligned dcl 13-95
REFERENCING_DIR                        internal static fixed bin(17,0)          initial dcl 10-35
RELAY_FIELDNAME                        internal static varying char(32)         initial dcl 6-6
REPLY_REFERENCES_FIELDNAME             internal static varying char(32)         initial dcl 6-6
RIGHT_ANGLE_BRACKET                    internal static char(1)                  initial packed unaligned dcl 13-70
RIGHT_BRACE_QUOTE                      internal static char(2)                  initial packed unaligned dcl 13-95
SAVEBOX_ADDRESS                        internal static fixed bin(17,0)          initial dcl 4-6
SEMICOLON                              internal static char(1)                  initial packed unaligned dcl 13-70
SENDER_FIELDNAME                       internal static varying char(32)         initial dcl 6-6
SPSP                                   internal static char(2)                  initial packed unaligned dcl 13-95
SP_AT_SP                               internal static char(4)                  initial packed unaligned dcl 13-115
SP_LEFT_ANGLE_BRACKET                  internal static char(2)                  initial packed unaligned dcl 13-95
SP_OPEN_PAREN                          internal static char(2)                  initial packed unaligned dcl 13-95
SP_VIA_SP                              internal static char(5)                  initial packed unaligned dcl 13-117
STRUCTURED_REQUOTE                     internal static char(10)                 initial packed unaligned dcl 13-55
STRUCTURED_RFC822_REQUOTE              internal static char(11)                 initial packed unaligned dcl 13-58
SUBJECT_FIELDNAME                      internal static varying char(32)         initial dcl 6-6
TOP_LEVEL_REQUOTE                      internal static char(15)                 initial packed unaligned dcl 13-61
TOP_LEVEL_RFC822_REQUOTE               internal static char(18)                 initial packed unaligned dcl 13-64
UNEXPANDED_PATH                        internal static fixed bin(17,0)          initial dcl 10-34
USER_MAILBOX_ADDRESS                   internal static fixed bin(17,0)          initial dcl 4-6
VT                                     internal static char(1)                  initial packed unaligned dcl 13-70
Vtime_info_2                           internal static char(8)                  initial packed unaligned dcl 12-23
WORKING_DIR                            internal static fixed bin(17,0)          initial dcl 10-36
address_list_n_addresses               automatic       fixed bin(17,0)          dcl 9-16
message_bit_string_body_section        based           structure                level 1 dcl 7-301
message_bit_string_body_section_bit_string
                                       based           bit                      packed unaligned dcl 7-307
message_body_section_parameter_ptr     automatic       pointer                  dcl 7-320
message_date_user_field                based           structure                level 1 dcl 7-195
message_envelope_parameter_ptr         automatic       pointer                  dcl 7-81
message_envelope_ptr                   automatic       pointer                  dcl 7-69
message_integer_user_field             based           structure                level 1 dcl 7-200
message_n_body_sections                automatic       fixed bin(17,0)          dcl 7-55
message_n_redistributions              automatic       fixed bin(17,0)          dcl 7-55
message_n_user_fields                  automatic       fixed bin(17,0)          dcl 7-55
message_preformatted_body_section_text based           char                     packed unaligned dcl 7-298
message_redistribution_comment         based           char                     packed unaligned dcl 7-131
message_redistribution_parameter_ptr   automatic       pointer                  dcl 7-146
message_reference_parameter_ptr        automatic       pointer                  dcl 7-255
message_reference_ptr                  automatic       pointer                  dcl 7-243
message_reference_subject              based           char                     packed unaligned dcl 7-240
message_references_list                based           structure                level 1 dcl 7-219
message_references_list_n_references   automatic       fixed bin(17,0)          dcl 7-55
message_references_list_ptr            automatic       pointer                  dcl 7-229
message_subject                        based           char                     packed unaligned dcl 7-51
message_text_field_ptr                 automatic       pointer                  dcl 7-270
message_text_field_text                based           char                     packed unaligned dcl 7-268
message_user_field_parameter_ptr       automatic       pointer                  dcl 7-215
mlsys_area                             based           area(1024)               dcl 3-61
mlsys_data_$address_list_allocation    external static fixed bin(17,0)          dcl 3-33
mlsys_data_$domains_available          external static fixed bin(1,0)           dcl 3-44
mlsys_data_$forum_not_available        external static fixed bin(1,0)           dcl 3-44
mlsys_data_$hash_tables_segment_ptr    external static pointer                  dcl 3-64
mlsys_data_$highest_usable_ring        external static fixed bin(3,0)           dcl 3-49
mlsys_data_$ism_not_available          external static fixed bin(1,0)           dcl 3-44
mlsys_data_$lowest_forum_ring          external static fixed bin(3,0)           dcl 3-49
mlsys_data_$mailbox_allocation         external static fixed bin(17,0)          dcl 3-33
mlsys_data_$max_lock_wait_retries      external static fixed bin(17,0)          dcl 3-19
mlsys_data_$max_opening_retries        external static fixed bin(17,0)          dcl 3-16
mlsys_data_$message_body_sections_allocation
                                       external static fixed bin(17,0)          dcl 3-33
mlsys_data_$message_redistributions_list_allocation
                                       external static fixed bin(17,0)          dcl 3-33
mlsys_data_$message_references_list_allocation
                                       external static fixed bin(17,0)          dcl 3-33
mlsys_data_$message_user_fields_allocation
                                       external static fixed bin(17,0)          dcl 3-33
mlsys_data_$person_id                  external static varying char(24)         dcl 3-70
mlsys_data_$project_id                 external static varying char(12)         dcl 3-71
mlsys_data_$subsystem_area_ptr         external static pointer                  dcl 3-62
mlsys_data_$subsystem_ring             external static fixed bin(3,0)           dcl 3-49
mlsys_data_$system_directory           external static char(168)                packed unaligned dcl 2-7
mlsys_data_$temp_segment_list_ptr      external static pointer                  dcl 3-54
mlsys_data_$transmit_cache_ptr         external static pointer                  dcl 3-66
mlsys_data_$user_default_mailbox_address
                                       external static pointer                  dcl 2-12
mlsys_data_$user_is_anonymous          external static bit(1)                   dcl 3-68
mlsys_data_$user_logbox_address        external static pointer                  dcl 2-15
mlsys_data_$user_mail_table_address    external static pointer                  dcl 2-14
mlsys_data_$valid_segments             external static bit(1)                   array packed unaligned dcl 3-56
site_date                              internal static fixed bin(17,0)          initial dcl 12-35
site_date_time                         internal static fixed bin(17,0)          initial dcl 12-35
site_time                              internal static fixed bin(17,0)          initial dcl 12-35
sl_control                             automatic       bit(36)                  packed unaligned dcl 11-12
sl_control_s                           based           structure                level 1 packed packed unaligned dcl 11-3
sl_info_num_paths                      automatic       fixed bin(17,0)          dcl 10-27
sl_info_p                              automatic       pointer                  dcl 10-28
ti_day                                 based           structure                level 1 unaligned dcl 12-60
ti_keyword                             based           structure                level 1 unaligned dcl 12-29
ti_language                            based           structure                level 1 unaligned dcl 12-42
ti_month                               based           structure                level 1 unaligned dcl 12-52
ti_offset                              based           structure                level 1 unaligned dcl 12-68
ti_word                                based           structure                level 1 unaligned dcl 12-78
time_info_$date_time_keywords          external static fixed bin(17,0)          dcl 12-28
time_info_$day_names                   external static fixed bin(17,0)          dcl 12-58
time_info_$default_language_index      external static fixed bin(17,0)          dcl 12-26
time_info_$gmt_zone_index              external static fixed bin(17,0)          dcl 12-25
time_info_$language_names              external static fixed bin(17,0)          dcl 12-40
time_info_$month_names                 external static fixed bin(17,0)          dcl 12-50
time_info_$offset_names                external static fixed bin(17,0)          dcl 12-66
time_info_$version                     external static char(8)                  packed unaligned dcl 12-21
time_info_$word_names                  external static fixed bin(17,0)          dcl 12-76
tiw_FiscalIndicator                    internal static fixed bin(17,0)          initial dcl 12-107

NAMES DECLARED BY EXPLICIT CONTEXT.
BYPASS_IMPLICIT_ROUTE           020746 constant        label                    dcl 2826 ref 2978
BYPASS_RELAY_OPERATION          022030 constant        label                    dcl 2939 ref 3005
CANT_INTERPRET_MESSAGE_ID       033756 constant        label                    dcl 4246 ref 4266 4273 4283 4289 4292
ENCODE_FOREIGN_ID               034573 constant        label                    dcl 4330 ref 4314 4325
HAVE_FOUND_DATE_TIME_RELAYED    021676 constant        label                    dcl 2919 ref 2910
LEXICAL_ANALYSIS_SETUP          035347 constant        label                    dcl 4505 ref 4478 4490 4502
LINE_IS_ACTUALLY_BLANK          015307 constant        label                    dcl 2447 ref 2433
NEWLINE_EMBEDDED_IN_COMMENT_TEXT
                                036076 constant        label                    dcl 4688 ref 4706
NEWLINE_EMBEDDED_IN_QUOTED_STRING
                                037121 constant        label                    dcl 4907 ref 4924
NO_HEADER_FOUND_IN_MESSAGE      013432 constant        label                    dcl 1956 ref 1750 1765 1769 1835 1839 1847 1855 1864
ORIGINAL_TRACE_PROPERLY_PLACED  006520 constant        label                    dcl 1154 ref 1138 1139 1140 1143
PARSE_MESSAGE_TEXT_COMMON       001746 constant        label                    dcl 604 ref 544 600
PREPARE_MULTILINE_FIELD_COMMON  014725 constant        label                    dcl 2360 ref 2340 2355
PROCESS_NEXT_FIELD              013430 constant        label                    dcl 1948 ref 1892
RETURN_FROM_MESSAGE_PARSE_AFTER_FAILURE
                                011146 constant        label                    dcl 2141 ref 2136
RETURN_FROM_PARSE_ADDRESS       027675 constant        label                    dcl 3538 ref 3227 3612
RETURN_FROM_PARSE_ADDRESS_LIST  031707 constant        label                    dcl 3876 ref 3914
START_ADDRESS_PARSE             023031 constant        label                    dcl 3144 set ref 3218
START_ADDRESS_PARSE_WITH_ROUTE  023044 constant        label                    dcl 3151 ref 3184
TREAT_AS_USER_DEFINED_FIELD     013153 constant        label                    dcl 1897 ref 1931
TRY_AS_TIME_ZONE_NAME           033172 constant        label                    dcl 4091 ref 4112
TRY_CONVERT_DATE_TO_BINARY      033505 constant        label                    dcl 4157 ref 3970 3978 3994 3995 3998 4003 4008 4013
                                                                                  4014 4019 4029 4032 4037 4047 4051 4054 4059 4069
                                                                                  4078 4082 4091 4104 4107 4110 4115 4117 4119 4120
                                                                                  4130
TRY_NEXT_COMMENT_OPERATION      006275 constant        label                    dcl 1097 ref 1058 1072 1086
UNBALANCED_BRACES               035666 constant        label                    dcl 4605 ref 4546 4587
UNBALANCED_COMMENT_DELIMITERS   035673 constant        label                    dcl 4609 ref 4532 4657 4693 4696 4705 4717
UNBALANCED_QUOTES               035700 constant        label                    dcl 4613 ref 4801 4809 4896 4912 4915 4923 4951
add_to_work_string              015323 constant        entry                    internal dcl 2459 ref 2443 2447
bad_address_list_syntax         031714 constant        entry                    internal dcl 3883 ref 3861 3864 3867 3869 3929
bad_address_syntax              027742 constant        entry                    internal dcl 3554 ref 3151 3156 3160 3171 3177 3180
                                                                                  3194 3198 3208 3221 3235 3243 3255 3328 3334 3340
                                                                                  3344 3350 3355 3359 3368 3372 3378 3381 3385 3393
                                                                                  3397 3403 3406 3410 3413 3425 3448 3449 3472 3478
                                                                                  3481 3485 3494 3498 3501 3508 3514 3522 3529 3628
                                                                                  3669 3672 3679 3691 3758
build_string                    031004 constant        entry                    internal dcl 3701 ref 3314 3316 3505 3519 3684 3685
                                                                                  3686
bypass_implicit_route           022061 constant        entry                    internal dcl 2959 ref 2769 2779 2782 2784 2802 2807
                                                                                  2820
bypass_relay_operation          022207 constant        entry                    internal dcl 2986 ref 2836 2847 2854 2860 2866 2872
                                                                                  2876 2891 2909 2915 2919 2934
cleanup_message_parse_data      011527 constant        entry                    internal dcl 1643 ref 619 1289 2116
cleanup_message_scan            013570 constant        entry                    internal dcl 2034 ref 1709
collect_comment                 035723 constant        entry                    internal dcl 4641 ref 4529
collect_quoted_piece            037002 constant        entry                    internal dcl 4880 ref 4714 4818
collect_word                    036265 constant        entry                    internal dcl 4755 ref 4558 4571 4583
count_lines_in_text             013442 constant        entry                    internal dcl 1965 ref 1802
create_comment_info             013536 constant        entry                    internal dcl 2016 ref 1934 1935
create_forwarding_info          013504 constant        entry                    internal dcl 1998 ref 1920 1921 1924
date_time_before                037361 constant        entry                    internal dcl 5031 ref 1111 1137
date_time_equal                 037347 constant        entry                    internal dcl 5018 ref 1079 5036
end_of_address                  030274 constant        entry                    internal dcl 3620 ref 3151 3193 3206 3255 3573 3677
end_of_address_list             032035 constant        entry                    internal dcl 3922 ref 3852 3871
find_first_field_in_list        014250 constant        entry                    internal dcl 2169 ref 966 989 1036
get_space                       035027 constant        entry                    internal dcl 4384 ref 4358 4360 4363 4364 4365 4366
                                                                                  4369
has_suffix                      031240 constant        entry                    internal dcl 3769 ref 3351 3413 3413 3427 3427 3449
                                                                                  3449 3456 3456
initialize_message_parse_data   011474 constant        entry                    internal dcl 1628 ref 615
lex_address                     035323 constant        entry                    internal dcl 4472 ref 1530 1614 2768 2835
lex_and_parse_epilogue          035064 constant        entry                    internal dcl 4406 ref 1339 1421 1472 1501 1548 1583
                                                                                  1619 1710 2777 2816 2926 2965 2992 3088 4132 4157
                                                                                  4248 4334
lex_and_parse_prologue          034651 constant        entry                    internal dcl 4343 ref 1527 1611 2765 2834 3966 4240
lex_date_time                   035332 constant        entry                    internal dcl 4484 ref 3969
lex_message_id                  035341 constant        entry                    internal dcl 4496 ref 4243
lex_string                      035320 constant        entry                    internal dcl 4446
lookup_multics_zone_name        033553 constant        entry                    internal dcl 4169 ref 4097 4102
lookup_rfc822_zone_name         033645 constant        entry                    internal dcl 4191 ref 4098 4101
make_token                      035705 constant        entry                    internal dcl 4619 ref 4508 4538 4551 4565 4576 4593
                                                                                  4721 4827
make_token_current              037323 constant        entry                    internal dcl 5002 ref 2813 3135 3287 3303 3322 3543
                                                                                  3564 3713 3735 3846 4298
make_unquoted                   036753 constant        entry                    internal dcl 4860 ref 4798 4817
mark_as_in_mailbox_field        014166 constant        entry                    internal dcl 2146 ref 656 657 658 659 660 661 662
                                                                                  663 664 665 949 956
merge_error_lists               022466 constant        entry                    internal dcl 3047 ref 3037
message_parse_error             013736 constant        entry                    internal dcl 2069 ref 711 721 806 967 1002 1011 1038
                                                                                  1051 1054 1065 1068 1091 1889 2156 2520 2529 2536
                                                                                  2545 2552 2561 2568 2598 2605 2636 2653 2660 2674
                                                                                  2681 2973 3000
message_parse_error_fatal       014074 constant        entry                    internal dcl 2111 ref 639 650 685 689 728 740 752
                                                                                  764 776 793 845 883 901 934 1239 1247 1905 1956
                                                                                  2080 2692 3029 3035
mlsys_parse_text_               001316 constant        entry                    external dcl 49
next_real_token                 037267 constant        entry                    internal dcl 4980 ref 2772 2801 2805 2839 2844 2851
                                                                                  2857 2863 2869 2878 2884 2916 3149 3170 3172 3176
                                                                                  3183 3190 3192 3197 3199 3234 3245 3254 3288 3304
                                                                                  3325 3333 3339 3349 3354 3377 3380 3402 3405 3477
                                                                                  3480 3565 3568 3569 3570 3584 3676
next_token                      037246 constant        entry                    internal dcl 4962 ref 3729 3847 3976 3987 3988 4000
                                                                                  4001 4010 4011 4021 4022 4033 4034 4055 4056 4077
                                                                                  4109 4129 4264 4267 4276 4282 4285 4291 4303
parse_address                   022727 constant        entry                    internal dcl 3098 ref 1616 2776 2907 3856
parse_address_list              031464 constant        entry                    internal dcl 3813 ref 1532 3666
parse_address_list_field        022341 constant        entry                    internal dcl 3015 ref 646 736 748 760 772 1018 2623
parse_address_list_text         010326 constant        entry                    external dcl 1431
parse_address_list_text_internal
                                011147 constant        entry                    internal dcl 1516 ref 1365 1483 3034
parse_address_text              010743 constant        entry                    external dcl 1556
parse_address_text_internal     011356 constant        entry                    internal dcl 1602 ref 1062 1588 2597 2652 2672
parse_date_time_text            032132 constant        entry                    internal dcl 3946 ref 1048 2528 2544 2560 2932
parse_envelope                  015366 constant        entry                    internal dcl 2487 ref 680 991
parse_im_message_text           001333 constant        entry                    external dcl 494
parse_mailing_list_text         007544 constant        entry                    external dcl 1307
parse_message_id_text           033703 constant        entry                    internal dcl 4215 ref 704 996
parse_named_group               030402 constant        entry                    internal dcl 3645 ref 3226
parse_new_message_text          001545 constant        entry                    external dcl 548
parse_trace                     020027 constant        entry                    internal dcl 2722 ref 2714
prepare_multiline_field         014564 constant        entry                    internal dcl 2300
prepare_multiline_field_from_list
                                014641 constant        entry                    internal dcl 2343 ref 917 1022 1082
prepare_multiline_field_from_text
                                014573 constant        entry                    internal dcl 2331 ref 871
prepare_single_field_for_multiline
                                015022 constant        entry                    internal dcl 2393 ref 2338 2352
prepare_single_line_field       014422 constant        entry                    internal dcl 2245 ref 787
reject_starnames                031153 constant        entry                    internal dcl 3746 ref 3369 3394 3416 3452 3495
scan_message_text               012334 constant        entry                    internal dcl 1719 ref 626
search_forum_list               031305 constant        entry                    internal dcl 3782 ref 3427 3431 3436
set_date_time_created_directly  014366 constant        entry                    internal dcl 2214 ref 535
set_implicit_route              014330 constant        entry                    internal dcl 2192 ref 1262 1263 1264 1265 1266 1269
                                                                                  1280 1281
set_message_id_directly         014403 constant        entry                    internal dcl 2229 ref 536

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     46342       46714   44046       46352
Length     50042   44046       352        1112    2274           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
mlsys_parse_text_                  1908 external procedure  is an external procedure.  
on unit on line 617                  74 on unit               
begin block on line 788                 begin block         shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 829                 begin block         shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 834                 begin block         shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 840                 begin block         shares stack frame of external procedure mlsys_parse_text_.  
on unit on line 1336                 72 on unit               
begin block on line 1359                begin block         shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 1390                begin block         shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 1410                begin block         shares stack frame of external procedure mlsys_parse_text_.  
on unit on line 1469                 72 on unit               
parse_address_list_text_internal
                                        internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
on unit on line 1581                 72 on unit               
parse_address_text_internal             internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
initialize_message_parse_data           internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
cleanup_message_parse_data           91 internal procedure  is called by several nonquick procedures.  
begin block on line 1688                begin block         shares stack frame of internal procedure cleanup_message_parse_data.  
scan_message_text                       internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
count_lines_in_text                     internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 1978                begin block         shares stack frame of external procedure mlsys_parse_text_.  
create_forwarding_info                  internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
create_comment_info                     internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
cleanup_message_scan                    internal procedure  shares stack frame of internal procedure cleanup_message_parse_data.  
message_parse_error                     internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
message_parse_error_fatal               internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
mark_as_in_mailbox_field                internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
find_first_field_in_list                internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
set_implicit_route                      internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
set_date_time_created_directly
                                     64 internal procedure  is assigned to an entry variable.  
set_message_id_directly              64 internal procedure  is assigned to an entry variable.  
prepare_single_line_field               internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
prepare_multiline_field             126 internal procedure  is declared options(non_quick).  
prepare_single_field_for_multiline
                                        internal procedure  shares stack frame of internal procedure prepare_multiline_field.  
begin block on line 2409                begin block         shares stack frame of internal procedure prepare_multiline_field.  
begin block on line 2416                begin block         shares stack frame of internal procedure prepare_multiline_field.  
begin block on line 2423                begin block         shares stack frame of internal procedure prepare_multiline_field.  
begin block on line 2441                begin block         shares stack frame of internal procedure prepare_multiline_field.  
add_to_work_string                      internal procedure  shares stack frame of internal procedure prepare_multiline_field.  
parse_envelope                          internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
parse_trace                             internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 2896                begin block         shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 2929                begin block         shares stack frame of external procedure mlsys_parse_text_.  
bypass_implicit_route                   internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
bypass_relay_operation                  internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
parse_address_list_field                internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
merge_error_lists                       internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
parse_address                       671 internal procedure  enables or reverts conditions.  
on unit on line 3128                 64 on unit               
bad_address_syntax                  104 internal procedure  is called by several nonquick procedures.  
begin block on line 3604                begin block         shares stack frame of internal procedure bad_address_syntax.  
end_of_address                       70 internal procedure  is called by several nonquick procedures.  
parse_named_group                       internal procedure  shares stack frame of internal procedure parse_address.  
build_string                            internal procedure  shares stack frame of internal procedure parse_address.  
reject_starnames                        internal procedure  shares stack frame of internal procedure parse_address.  
has_suffix                              internal procedure  shares stack frame of internal procedure parse_address.  
search_forum_list                   150 internal procedure  is called during a stack extension.  
parse_address_list                  210 internal procedure  is called by several nonquick procedures.  
bad_address_list_syntax                 internal procedure  shares stack frame of internal procedure parse_address_list.  
end_of_address_list                     internal procedure  shares stack frame of internal procedure parse_address_list.  
parse_date_time_text                    internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
lookup_multics_zone_name                internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
lookup_rfc822_zone_name                 internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
parse_message_id_text                   internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
lex_and_parse_prologue                  internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
get_space                               internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
lex_and_parse_epilogue               80 internal procedure  is called by several nonquick procedures.  
lex_string                              internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
make_token                              internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
collect_comment                         internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
begin block on line 4725                begin block         shares stack frame of external procedure mlsys_parse_text_.  
collect_word                            internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
make_unquoted                           internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
collect_quoted_piece                    internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
next_token                           64 internal procedure  is called by several nonquick procedures.  
next_real_token                      64 internal procedure  is called by several nonquick procedures.  
make_token_current                   64 internal procedure  is called by several nonquick procedures.  
date_time_equal                         internal procedure  shares stack frame of external procedure mlsys_parse_text_.  
date_time_before                        internal procedure  shares stack frame of external procedure mlsys_parse_text_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
bad_address_syntax       000100 brace_level                 bad_address_syntax
                         000101 bracket_level               bad_address_syntax
                         000102 group_level                 bad_address_syntax
                         000103 string_lth                  bad_address_syntax
cleanup_message_parse_data
                         000100 idx                         cleanup_message_parse_data
                         000101 jdx                         cleanup_message_parse_data
                         000114 idx                         cleanup_message_scan
mlsys_parse_text_        000100 code                        mlsys_parse_text_
                         000102 representation_ptr          mlsys_parse_text_
                         000104 representation_lth          mlsys_parse_text_
                         000105 representation_used         mlsys_parse_text_
                         000106 local_pto                   mlsys_parse_text_
                         000114 address_ptr                 mlsys_parse_text_
                         000116 new_message                 mlsys_parse_text_
                         000117 message_parse_fails         mlsys_parse_text_
                         000120 message_type_specific_operations
                                                            mlsys_parse_text_
                         000250 internal_parse_options      mlsys_parse_text_
                         000360 mrps_ptr                    mlsys_parse_text_
                         000362 the_mrp_ptr                 mlsys_parse_text_
                         000364 mr_sort_ptr                 mlsys_parse_text_
                         000366 local_mep                   mlsys_parse_text_
                         000406 local_mrp                   mlsys_parse_text_
                         000424 local_mufp                  mlsys_parse_text_
                         000436 local_mbsp                  mlsys_parse_text_
                         000450 local_mtf                   mlsys_parse_text_
                         000454 system_area_ptr             mlsys_parse_text_
                         000456 user_area_ptr               mlsys_parse_text_
                         000460 forum_search_list_ptr       mlsys_parse_text_
                         000462 stack_extension_ptr         mlsys_parse_text_
                         000464 stack_truncation_ptr        mlsys_parse_text_
                         000466 stack_extension_used        mlsys_parse_text_
                         000467 full_fieldname              mlsys_parse_text_
                         000570 address_list_field          mlsys_parse_text_
                         000572 trace_address               mlsys_parse_text_
                         000574 comment_sender              mlsys_parse_text_
                         000576 redistribution_sender       mlsys_parse_text_
                         000600 acknowledge_to              mlsys_parse_text_
                         000602 implicit_route              mlsys_parse_text_
                         000604 date_time_created           mlsys_parse_text_
                         000606 comment_date_time_created   mlsys_parse_text_
                         000610 date_time_last_relayed      mlsys_parse_text_
                         000612 message_id                  mlsys_parse_text_
                         000614 eol_idx                     mlsys_parse_text_
                         000615 next_eol_idx                mlsys_parse_text_
                         000616 amount_good                 mlsys_parse_text_
                         000617 line_start                  mlsys_parse_text_
                         000620 line_end                    mlsys_parse_text_
                         000621 used                        mlsys_parse_text_
                         000622 current_field_list_idx      mlsys_parse_text_
                         000623 first_field_idx             mlsys_parse_text_
                         000624 n_sorted                    mlsys_parse_text_
                         000625 sort_idx                    mlsys_parse_text_
                         000626 idx                         mlsys_parse_text_
                         000627 position                    mlsys_parse_text_
                         000636 message_scan                mlsys_parse_text_
                         000656 field_idx                   mlsys_parse_text_
                         000660 forwarding_info_ptr         mlsys_parse_text_
                         000662 comment_info_ptr            mlsys_parse_text_
                         000664 original_text_lth           mlsys_parse_text_
                         000666 original_text_ptr           mlsys_parse_text_
                         000670 lex_and_parse_pointers      mlsys_parse_text_
                         000706 token_ptr                   mlsys_parse_text_
                         000710 current_token_ptr           mlsys_parse_text_
                         000712 token_idx                   mlsys_parse_text_
                         000713 n_syntax_errors             mlsys_parse_text_
                         000714 n_hosts                     mlsys_parse_text_
                         000715 n_reversed_hosts            mlsys_parse_text_
                         000716 parse_text_options_ptr      mlsys_parse_text_
                         000720 parse_text_error_list_ptr   mlsys_parse_text_
                         000722 parse_text_error_list_n_errors
                                                            mlsys_parse_text_
                         000724 message_ptr                 mlsys_parse_text_
                         000726 message_trace_n_relays      mlsys_parse_text_
                         000730 message_trace_ptr           mlsys_parse_text_
                         000732 message_redistribution_ptr  mlsys_parse_text_
                         000734 message_user_field_ptr      mlsys_parse_text_
                         000736 message_body_section_ptr    mlsys_parse_text_
                         000740 address_route_ptr           mlsys_parse_text_
                         000742 address_route_n_relays      mlsys_parse_text_
                         000744 address_list_ptr            mlsys_parse_text_
                         001026 bad_address                 parse_address_list_text_internal
                         001052 message_header_lth          scan_message_text
                         001054 message_header_ptr          scan_message_text
                         001056 message_body_lth            scan_message_text
                         001060 message_body_ptr            scan_message_text
                         001062 field_name_lth              scan_message_text
                         001064 field_name_ptr              scan_message_text
                         001066 continuation_found          scan_message_text
                         001067 in_forwarding_info          scan_message_text
                         001070 in_comment_info             scan_message_text
                         001071 start                       scan_message_text
                         001072 eol_idx                     scan_message_text
                         001073 idx                         scan_message_text
                         001074 idx2                        scan_message_text
                         001075 field_name_start            scan_message_text
                         001076 field_value_start           scan_message_text
                         001077 total_field_count           scan_message_text
                         001100 field_type                  scan_message_text
                         001110 n_lines                     count_lines_in_text
                         001111 used                        count_lines_in_text
                         001112 idx                         count_lines_in_text
                         001142 new_ptel_ptr                message_parse_error
                         001144 idx                         message_parse_error
                         001162 idx                         mark_as_in_mailbox_field
                         001172 idx                         find_first_field_in_list
                         001173 jdx                         find_first_field_in_list
                         001204 idx                         set_implicit_route
                         001214 total_text_ptr              prepare_single_line_field
                         001216 total_text_lth              prepare_single_line_field
                         001217 total_text_used             prepare_single_line_field
                         001220 idx                         prepare_single_line_field
                         001232 local_pto                   parse_envelope
                         001237 additional_info             parse_envelope
                         001300 saved_default_system        parse_envelope
                         001401 saved_default_system_is_local
                                                            parse_envelope
                         001402 address_type                parse_envelope
                         001403 idx                         parse_envelope
                         001420 current_relay_ptr           parse_trace
                         001422 local_ipo                   parse_trace
                         001532 the_route_ptr               parse_trace
                         001534 address_system              parse_trace
                         001635 start_of_id_string          parse_trace
                         001636 end_of_id_string            parse_trace
                         001637 bracket_level               parse_trace
                         001640 message_id_string_lth       parse_trace
                         001641 date_time_string_start      parse_trace
                         001642 relay_idx                   parse_trace
                         001643 idx                         parse_trace
                         001676 idx                         parse_address_list_field
                         001706 new_ptel_ptr                merge_error_lists
                         001710 n_previous_errors           merge_error_lists
                         001711 text_offset                 merge_error_lists
                         001712 idx                         merge_error_lists
                         001713 offset_idx                  merge_error_lists
                         001724 date_time                   parse_date_time_text
                         001726 zone_name                   parse_date_time_text
                         001730 zone_offset                 parse_date_time_text
                         001732 recognized_zone             parse_date_time_text
                         001733 standard_multics_zone       parse_date_time_text
                         001734 negative_offset             parse_date_time_text
                         001735 code                        parse_date_time_text
                         001736 start                       parse_date_time_text
                         001737 day_of_week                 parse_date_time_text
                         001740 day_of_month                parse_date_time_text
                         001741 month                       parse_date_time_text
                         001742 year                        parse_date_time_text
                         001743 hour                        parse_date_time_text
                         001744 minute                      parse_date_time_text
                         001745 second                      parse_date_time_text
                         001746 hour_offset                 parse_date_time_text
                         001747 minute_offset               parse_date_time_text
                         001750 idx                         parse_date_time_text
                         001760 idx                         lookup_multics_zone_name
                         001761 jdx                         lookup_multics_zone_name
                         001772 zone_idx                    lookup_rfc822_zone_name
                         001773 idx                         lookup_rfc822_zone_name
                         002002 request_id                  parse_message_id_text
                         002007 system_name                 parse_message_id_text
                         002110 system_is_local             parse_message_id_text
                         002111 continue                    parse_message_id_text
                         002112 date_time                   parse_message_id_text
                         002114 microsecond                 parse_message_id_text
                         002116 start_of_string             parse_message_id_text
                         002117 end_of_string               parse_message_id_text
                         002120 day_of_month                parse_message_id_text
                         002121 month                       parse_message_id_text
                         002122 year                        parse_message_id_text
                         002123 hour                        parse_message_id_text
                         002124 minute                      parse_message_id_text
                         002125 second                      parse_message_id_text
                         002150 text_used                   lex_string
                         002151 unquoted_used               lex_string
                         002152 use_date_time_breaks        lex_string
                         002153 save_comments               lex_string
                         002154 braces_special              lex_string
                         002155 original_start              lex_string
                         002156 unquoted_start              lex_string
                         002157 parenthesis_level           lex_string
                         002160 brace_level                 lex_string
                         002161 idx                         lex_string
                         002206 in_unquoted                 collect_word
                         002207 done                        collect_word
                         002224 done                        collect_quoted_piece
parse_address            000100 saved_p_ipo                 parse_address
                         000210 foreign_system_name         parse_address
                         000311 address_pathname            parse_address
                         000373 address_dirname             parse_address
                         000445 address_ename               parse_address
                         000455 address_component           parse_address
                         000465 trimmed_address_ename       parse_address
                         000476 new_host_indeces_ptr        parse_address
                         000500 first_token_in_address      parse_address
                         000501 last_token_in_address       parse_address
                         000502 delimiting_token            parse_address
                         000503 address_name_start          parse_address
                         000504 address_name_end            parse_address
                         000505 idx                         parse_address
                         000506 in_named_address            parse_address
                         000507 seen_route                  parse_address
                         000510 address_is_local            parse_address
                         000511 is_mte                      parse_address
                         000512 done                        parse_address
                         000534 local_pto                   parse_named_group
                         000542 local_ipo                   parse_named_group
                         000652 an_address_list_ptr         parse_named_group
                         000654 saved_n_syntax_errors       parse_named_group
                         000655 second_half_comment_start   parse_named_group
                         000664 saved_current_token         build_string
                         000674 code                        reject_starnames
parse_address_list       000100 local_ipo                   parse_address_list
                         000210 an_address                  parse_address_list
                         000212 first_token_in_address_list parse_address_list
                         000213 last_token_in_address_list  parse_address_list
                         000214 previous_n_addresses        parse_address_list
                         000215 created_address_list        parse_address_list
                         000216 done                        parse_address_list
                         000226 string_lth                  bad_address_list_syntax
                         000227 idx                         bad_address_list_syntax
prepare_multiline_field  000100 total_text_ptr              prepare_multiline_field
                         000102 total_text_lth              prepare_multiline_field
                         000103 total_text_used             prepare_multiline_field
                         000104 work_string_ptr             prepare_multiline_field
                         000106 work_string_lth             prepare_multiline_field
                         000107 work_string_used            prepare_multiline_field
                         000110 idx                         prepare_multiline_field
                         000120 text_column                 prepare_single_field_for_multiline
                         000121 text_used                   prepare_single_field_for_multiline
                         000122 line_lth                    prepare_single_field_for_multiline
                         000123 start_of_text               prepare_single_field_for_multiline
                         000124 column                      prepare_single_field_for_multiline
                         000125 used                        prepare_single_field_for_multiline
search_forum_list        000100 ename                       search_forum_list
                         000110 idx                         search_forum_list

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_l_a               r_e_as              r_ne_as             alloc_char_temp     cat_realloc_chars   call_ent_var_desc
call_ent_var        call_ext_out_desc   call_ext_out        call_int_this_desc  call_int_this       call_int_other
return_mac          tra_ext_1           mpfx2               mdfx1               signal_op           enable_op
shorten_stack       ext_entry           ext_entry_desc      int_entry           int_entry_desc      set_chars_eis
op_alloc_           op_freen_           ix_rev_chars

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
check_star_name_$entry        convert_date_to_binary_       cu_$grow_stack_frame          cu_$shrink_stack_frame
cv_dec_check_                 encode_clock_value_           expand_pathname_              expand_pathname_$add_suffix
expand_pathname_$component_add_suffix                       forum_$get_forum_path         get_system_free_area_
mail_system_$add_address      mail_system_$add_body_section mail_system_$add_user_field
mail_system_$compare_addresses                              mail_system_$create_address_list
mail_system_$create_foreign_address                         mail_system_$create_forum_address
mail_system_$create_invalid_address                         mail_system_$create_logbox_address
mail_system_$create_mail_table_address                      mail_system_$create_mailbox_address
mail_system_$create_mailing_list_address                    mail_system_$create_message
mail_system_$create_named_group_address                     mail_system_$create_savebox_address
mail_system_$create_user_mailbox_address                    mail_system_$delete_address   mail_system_$free_address
mail_system_$free_address_list                              mail_system_$free_message
mail_system_$get_address_route                              mail_system_$get_address_system
mail_system_$get_address_type mail_system_$get_user_field_id
mail_system_$get_user_field_name                            mail_system_$replace_bcc      mail_system_$replace_cc
mail_system_$replace_from     mail_system_$replace_reply_to mail_system_$replace_subject  mail_system_$replace_to
mail_system_$validate_address mlsys_address_list_mgr_$add_address
mlsys_address_list_mgr_$create_read_only_address_list       mlsys_address_list_mgr_$create_user_freeable_address_list
mlsys_address_list_mgr_$delete_address                      mlsys_address_list_mgr_$free_address_list
mlsys_address_mgr_$set_address_implicit_route               mlsys_field_id_mgr_$get_system_field_type
mlsys_message_id_mgr_$encode_foreign_id                     mlsys_message_id_mgr_$encode_local_id
mlsys_message_id_mgr_$encode_psuedo_id                      mlsys_message_mgr_$add_body_section_no_copy
mlsys_message_mgr_$add_redistribution_no_copy               mlsys_message_mgr_$add_reply_reference
mlsys_message_mgr_$add_user_field_no_copy                   mlsys_message_mgr_$create_im_message
mlsys_message_mgr_$free_message                             mlsys_message_mgr_$replace_bcc_no_copy
mlsys_message_mgr_$replace_cc_no_copy                       mlsys_message_mgr_$replace_from_no_copy
mlsys_message_mgr_$replace_message_envelope                 mlsys_message_mgr_$replace_reply_to_no_copy
mlsys_message_mgr_$replace_subject_no_copy                  mlsys_message_mgr_$replace_to_no_copy
mlsys_nit_interface_$get_local_system_name                  mlsys_nit_interface_$is_local_system
mlsys_psp_$forum_not_available                              mlsys_user_mte_syntax_$classify_and_validate
search_paths_$find_dir        search_paths_$get             suffixed_name_$make

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_subr_arg     error_table_$entlong          error_table_$noentry          error_table_$nostars
error_table_$smallarg         error_table_$unimplemented_version                          mlsys_data_$user_id
mlsys_et_$address_pathname_expected                         mlsys_et_$cant_determine_dtc
mlsys_et_$cant_determine_msgid                              mlsys_et_$cant_determine_sender
mlsys_et_$cant_parse_irt_field                              mlsys_et_$comment_ignored     mlsys_et_$empty_address_text
mlsys_et_$extra_restricted_field                            mlsys_et_$in_mailbox_only_field
mlsys_et_$incomplete_address_list_text                      mlsys_et_$incomplete_address_text
mlsys_et_$incomplete_comment  mlsys_et_$incomplete_named_group_text
mlsys_et_$invalid_address_list_syntax                       mlsys_et_$invalid_address_syntax
mlsys_et_$invalid_named_group_text                          mlsys_et_$invalid_relayed_field_syntax
mlsys_et_$invalid_route_field_syntax                        mlsys_et_$missing_host_name
mlsys_et_$multiple_address_routes                           mlsys_et_$no_comment_redistribution
mlsys_et_$no_message_header   mlsys_et_$obsolete_address_syntax
mlsys_et_$only_address_route_allowed                        mlsys_et_$recursive_named_addresses
mlsys_et_$text_follows_address                              mlsys_et_$text_follows_route  mlsys_et_$text_parse_failed
mlsys_et_$unbalanced_braces   mlsys_et_$unbalanced_parentheses                            mlsys_et_$unbalanced_quotes
mlsys_et_$unknown_structured_address_type                   time_info_$zone_names




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     49 001315        52 001323       494 001324       498 001355       500 001356       501 001360       502 001362
    503 001363       504 001365       506 001367       507 001370       509 001376       511 001400       512 001403
    513 001405       515 001412       516 001417       517 001422       518 001425       519 001430       520 001433
    521 001436       522 001441       523 001444       524 001447       525 001452       526 001455       527 001460
    528 001463       529 001466       530 001471       531 001474       532 001477       533 001502       534 001505
    535 001510       536 001513       538 001516       539 001532       540 001534       541 001535       544 001536
    548 001537       552 001567       554 001571       555 001575       556 001601       557 001604       559 001605
    560 001610       561 001613       564 001614       566 001630       568 001632       569 001633       570 001635
    572 001637       573 001641       575 001650       576 001652       577 001654       580 001656       581 001663
    582 001666       583 001671       584 001674       585 001677       586 001702       587 001705       588 001710
    589 001713       590 001716       591 001721       592 001724       594 001727       595 001741       596 001743
    597 001744       600 001745       604 001746       606 001751       608 001753       609 001754       611 001756
    613 001757       615 001766       617 001767       619 002003       620 002010       621 002026       626 002027
    631 002037       633 002041       634 002043       635 002045       636 002047       638 002051       639 002071
    642 002075       646 002077       648 002135       649 002141       650 002153       651 002157       653 002167
    656 002200       657 002211       658 002222       659 002233       660 002244       661 002255       662 002266
    663 002277       664 002310       665 002321       666 002332       676 002333       678 002335       680 002337
    684 002365       685 002377       687 002403       688 002407       689 002421       690 002425       692 002435
    700 002446       702 002450       703 002461       704 002465       706 002517       708 002520       709 002521
    710 002527       711 002537       714 002577       715 002601       718 002602       721 002625       726 002667
    727 002671       728 002703       735 002707       736 002717       738 002751       739 002755       740 002767
    741 002773       743 003003       747 003014       748 003024       750 003056       751 003062       752 003074
    753 003100       755 003110       759 003121       760 003131       762 003163       763 003167       764 003201
    765 003205       767 003215       771 003226       772 003236       774 003270       775 003274       776 003306
    777 003312       779 003322       786 003333       787 003343       790 003350       791 003373       793 003417
    798 003423       804 003435       805 003443       806 003453       809 003513       810 003515       819 003516
    820 003520       821 003522       822 003525       824 003526       825 003537       827 003547       828 003550
    830 003557       831 003566       832 003601       835 003605       836 003610       837 003631       839 003632
    841 003645       842 003651       844 003716       845 003736       849 003742       850 003744       851 003745
    858 003747       859 003751       860 003753       862 003755       863 003765       864 003771       866 003774
    867 004017       868 004022       869 004044       870 004047       871 004050       873 004101       875 004102
    876 004104       879 004107       880 004111       881 004133       882 004135       883 004146       886 004150
    891 004173       897 004175       898 004177       900 004201       901 004233       904 004242       905 004245
    906 004247       907 004251       909 004252       911 004254       913 004257       915 004263       917 004276
    919 004317       920 004324       921 004335       922 004342       923 004344       924 004346       926 004347
    927 004350       929 004351       930 004356       931 004360       932 004402       933 004404       934 004412
    936 004414       942 004434       946 004436       947 004445       948 004451       949 004461       950 004473
    951 004475       953 004477       954 004507       955 004513       956 004523       957 004535       958 004537
    959 004541       963 004542       964 004546       965 004555       966 004561       967 004563       970 004630
    976 004632       978 004634       979 004641       981 004647       982 004667       985 005015       986 005025
    988 005031       989 005036       991 005040       994 005070       995 005101       996 005105       998 005140
    999 005141      1000 005142      1001 005151      1002 005161      1005 005221      1006 005223      1008 005224
   1011 005247      1017 005314      1018 005335      1022 005401      1025 005431      1031 005433      1032 005442
   1034 005444      1035 005453      1036 005457      1038 005461      1047 005543      1048 005547      1050 005605
   1051 005607      1054 005646      1058 005713      1061 005714      1062 005724      1064 005762      1065 005764
   1068 006023      1072 006070      1075 006071      1076 006101      1078 006115      1079 006120      1082 006161
   1085 006213      1086 006225      1088 006226      1091 006230      1097 006275      1104 006277      1106 006300
   1107 006307      1109 006313      1110 006314      1111 006325      1113 006352      1114 006354      1117 006361
   1118 006367      1119 006373      1121 006376      1122 006402      1123 006403      1130 006405      1132 006416
   1133 006417      1135 006424      1136 006433      1137 006436      1138 006455      1139 006460      1140 006465
   1141 006472      1142 006474      1143 006476      1145 006477      1148 006501      1150 006514      1151 006516
   1160 006520      1162 006522      1163 006525      1165 006537      1166 006543      1167 006555      1169 006560
   1170 006566      1173 006574      1174 006576      1176 006620      1177 006622      1180 006623      1181 006626
   1184 006654      1186 006661      1187 006671      1188 006674      1190 006723      1191 006726      1193 006730
   1195 006753      1202 006755      1204 006763      1205 006765      1207 007003      1211 007031      1212 007034
   1217 007060      1218 007062      1221 007063      1222 007071      1223 007073      1225 007111      1229 007140
   1230 007144      1235 007167      1238 007172      1239 007206      1240 007212      1242 007216      1243 007225
   1244 007230      1245 007234      1246 007236      1247 007252      1248 007256      1249 007263      1250 007271
   1251 007277      1252 007305      1254 007313      1259 007315      1261 007327      1262 007331      1263 007341
   1264 007352      1265 007363      1266 007374      1267 007405      1268 007415      1269 007422      1272 007435
   1275 007437      1276 007447      1277 007454      1279 007465      1280 007467      1281 007477      1283 007510
   1289 007512      1291 007516      1293 007520      1296 007527      1298 007535      1300 007536      1307 007537
   1310 007566      1311 007570      1312 007571      1313 007573      1314 007575      1316 007577      1317 007600
   1318 007602      1320 007604      1321 007606      1323 007615      1324 007616      1326 007620      1328 007627
   1329 007634      1330 007637      1331 007642      1333 007645      1336 007657      1338 007673      1339 007711
   1340 007722      1341 007735      1342 007740      1344 007741      1345 007754      1346 007756      1347 007757
   1350 007760      1351 007763      1352 007765      1354 007766      1355 007777      1357 010003      1361 010007
   1363 010012      1365 010030      1368 010064      1371 010072      1373 010103      1375 010117      1376 010120
   1378 010121      1381 010134      1383 010150      1384 010156      1385 010157      1387 010162      1388 010164
   1391 010171      1393 010177      1397 010232      1398 010234      1400 010235      1401 010237      1403 010240
   1404 010242      1406 010243      1409 010245      1411 010251      1413 010255      1414 010272      1416 010276
   1417 010302      1418 010304      1419 010305      1421 010307      1422 010317      1424 010320      1425 010322
   1427 010323      1431 010324      1435 010350      1436 010354      1437 010360      1438 010363      1440 010364
   1441 010367      1442 010372      1445 010373      1446 010400      1447 010403      1448 010406      1450 010411
   1452 010417      1454 010434      1456 010436      1457 010437      1458 010441      1460 010443      1461 010445
   1463 010454      1464 010455      1466 010457      1469 010471      1471 010505      1472 010523      1473 010534
   1474 010547      1475 010552      1477 010553      1478 010566      1479 010570      1480 010571      1483 010572
   1486 010624      1489 010640      1490 010646      1491 010647      1492 010660      1493 010667      1494 010700
   1495 010702      1496 010704      1497 010705      1498 010707      1499 010710      1501 010712      1503 010722
   1504 010724      1506 010727      1508 010735      1510 010736      1556 010737      1559 010761      1560 010766
   1561 010771      1562 010774      1564 010777      1566 011005      1567 011007      1569 011010      1570 011012
   1572 011014      1573 011016      1575 011025      1576 011026      1578 011030      1581 011041      1583 011055
   1584 011066      1585 011101      1586 011104      1588 011105      1591 011137      1594 011144      1596 011145
   2141 011146      1516 011147      1527 011160      1530 011204      1532 011217      1535 011242      1536 011244
   1537 011250      1538 011251      1539 011254      1541 011256      1542 011261      1543 011324      1544 011343
   1548 011345      1550 011355      1602 011356      1611 011367      1614 011414      1616 011427      1619 011451
   1620 011461      1622 011473      1628 011474      1631 011475      1635 011525      1643 011526      1648 011534
   1649 011547      1651 011552      1653 011566      1654 011605      1655 011612      1657 011625      1658 011637
   1661 011662      1662 011664      1663 011673      1665 011676      1666 011714      1668 011733      1669 011740
   1670 011747      1671 011772      1672 012001      1674 012014      1675 012027      1678 012060      1679 012062
   1680 012076      1682 012103      1684 012125      1686 012146      1687 012166      1688 012211      1692 012221
   1693 012234      1695 012241      1696 012243      1697 012250      1700 012253      1701 012257      1702 012261
   1705 012264      1707 012302      1709 012321      1710 012322      1712 012333      1719 012334      1744 012336
   1746 012341      1747 012344      1749 012345      1750 012357      1752 012362      1753 012370      1758 012375
   1760 012414      1761 012427      1764 012431      1765 012443      1767 012444      1769 012455      1774 012456
   1775 012462      1777 012464      1778 012466      1779 012470      1780 012471      1783 012472      1784 012504
   1785 012507      1786 012511      1787 012514      1789 012517      1790 012521      1791 012523      1792 012524
   1794 012525      1795 012526      1802 012527      1805 012533      1806 012542      1808 012543      1809 012552
   1811 012567      1812 012576      1814 012577      1815 012606      1817 012607      1818 012616      1823 012617
   1825 012621      1827 012622      1828 012623      1831 012624      1833 012627      1835 012646      1838 012647
   1839 012660      1842 012661      1843 012665      1844 012667      1846 012672      1847 012704      1849 012706
   1852 012720      1854 012722      1855 012742      1858 012743      1859 012746      1861 012747      1862 012751
   1863 012754      1864 012774      1865 012775      1866 012776      1868 013013      1869 013014      1871 013015
   1874 013021      1877 013031      1879 013037      1882 013050      1883 013052      1887 013056      1888 013102
   1889 013104      1891 013144      1892 013150      1896 013151      1897 013153      1900 013155      1902 013161
   1903 013165      1905 013226      1906 013236      1908 013237      1910 013242      1911 013244      1913 013257
   1914 013266      1916 013267      1919 013274      1920 013276      1921 013302      1924 013317      1925 013324
   1926 013326      1927 013327      1928 013342      1929 013351      1931 013352      1933 013360      1934 013362
   1935 013366      1938 013402      1939 013404      1940 013405      1941 013420      1946 013427      1948 013430
   1951 013431      1956 013432      1959 013441      1965 013442      1974 013444      1976 013446      1980 013452
   1982 013456      1983 013472      1985 013476      1986 013477      1988 013500      1990 013501      1998 013504
   2001 013505      2003 013506      2004 013515      2006 013520      2008 013535      2016 013536      2019 013537
   2021 013540      2022 013547      2024 013552      2026 013567      2034 013570      2039 013571      2041 013603
   2043 013615      2044 013622      2045 013631      2046 013637      2047 013644      2048 013646      2051 013654
   2052 013661      2053 013671      2054 013677      2055 013704      2056 013706      2059 013714      2061 013726
   2063 013735      2069 013736      2080 013747      2083 013762      2085 013764      2087 013773      2089 013776
   2091 014007      2092 014017      2093 014027      2095 014031      2096 014042      2098 014044      2100 014046
   2101 014055      2102 014057      2103 014061      2105 014073      2111 014074      2116 014076      2118 014102
   2120 014117      2123 014130      2124 014134      2125 014136      2126 014147      2127 014151      2128 014152
   2129 014155      2130 014156      2133 014160      2134 014162      2136 014165      2146 014166      2154 014170
   2155 014201      2156 014205      2159 014245      2161 014247      2169 014250      2178 014252      2180 014255
   2181 014265      2182 014305      2183 014323      2184 014325      2186 014327      2192 014330      2200 014332
   2201 014343      2203 014362      2205 014364      2214 014365      2221 014373      2222 014400      2224 014401
   2229 014402      2236 014410      2237 014420      2239 014421      2245 014422      2260 014424      2262 014427
   2263 014432      2264 014434      2265 014435      2267 014436      2268 014440      2269 014443      2270 014450
   2271 014453      2274 014454      2275 014456      2276 014465      2277 014471      2278 014500      2279 014502
   2280 014511      2281 014512      2282 014523      2283 014525      2284 014532      2286 014533      2287 014537
   2288 014551      2289 014552      2290 014554      2291 014557      2294 014562      2300 014563      2303 014571
   2331 014572      2334 014606      2335 014622      2336 014624      2338 014625      2340 014637      2343 014640
   2346 014646      2347 014662      2348 014664      2350 014665      2351 014677      2352 014704      2353 014722
   2355 014724      2360 014725      2362 014731      2364 014736      2366 014740      2367 014743      2369 014746
   2371 014756      2372 014762      2373 014767      2374 014772      2375 014774      2376 015001      2377 015002
   2379 015003      2383 015013      2384 015016      2386 015021      2393 015022      2399 015033      2400 015054
   2401 015056      2402 015070      2404 015071      2405 015075      2408 015076      2410 015101      2411 015104
   2412 015117      2416 015123      2418 015125      2419 015127      2420 015144      2424 015150      2425 015153
   2426 015155      2427 015156      2428 015164      2429 015165      2430 015200      2431 015207      2432 015213
   2433 015214      2437 015256      2442 015266      2443 015272      2447 015307      2450 015315      2451 015321
   2453 015322      2459 015323      2467 015325      2468 015333      2469 015351      2470 015353      2472 015354
   2474 015364      2476 015365      2487 015366      2508 015370      2509 015376      2511 015411      2513 015422
   2520 015427      2526 015506      2527 015521      2528 015525      2529 015563      2532 015625      2533 015626
   2534 015627      2535 015635      2536 015647      2539 015707      2542 015711      2543 015724      2544 015730
   2545 015767      2548 016031      2549 016032      2550 016033      2551 016041      2552 016052      2555 016112
   2558 016114      2559 016127      2560 016133      2561 016173      2564 016235      2565 016236      2566 016237
   2567 016245      2568 016257      2571 016317      2574 016321      2577 016331      2579 016334      2582 016341
   2590 016346      2591 016356      2593 016362      2595 016363      2596 016375      2597 016401      2598 016441
   2601 016503      2602 016504      2603 016505      2604 016513      2605 016525      2608 016565      2611 016567
   2612 016576      2613 016612      2614 016615      2615 016635      2619 016657      2621 016705      2623 016713
   2625 016752      2627 016766      2628 017002      2629 017005      2631 017025      2633 017047      2636 017050
   2645 017107      2646 017116      2647 017121      2648 017130      2650 017134      2651 017146      2652 017152
   2653 017212      2656 017254      2657 017255      2658 017256      2659 017265      2660 017277      2663 017337
   2666 017341      2667 017350      2669 017354      2671 017371      2672 017375      2674 017435      2677 017477
   2678 017500      2679 017501      2680 017507      2681 017521      2684 017561      2690 017563      2691 017570
   2692 017606      2693 017612      2696 017617      2697 017624      2700 017670      2706 017737      2714 020010
   2717 020026      2722 020027      2737 020030      2740 020044      2742 020055      2743 020060      2744 020062
   2745 020076      2746 020110      2747 020122      2748 020140      2749 020156      2750 020174      2751 020211
   2753 020226      2759 020232      2761 020234      2763 020245      2765 020251      2768 020302      2769 020315
   2771 020323      2772 020324      2774 020330      2776 020334      2777 020356      2778 020366      2779 020400
   2780 020406      2782 020423      2783 020431      2784 020444      2785 020452      2786 020456      2787 020467
   2788 020471      2789 020475      2790 020505      2791 020520      2792 020522      2793 020534      2794 020546
   2796 020547      2798 020551      2799 020552      2800 020556      2801 020557      2802 020563      2804 020602
   2805 020606      2806 020612      2807 020613      2809 020630      2810 020641      2811 020643      2812 020647
   2813 020657      2814 020666      2815 020706      2816 020710      2817 020720      2818 020732      2820 020733
   2826 020746      2829 020750      2831 020767      2832 021001      2834 021006      2835 021040      2836 021053
   2838 021061      2839 021062      2841 021066      2842 021072      2844 021107      2845 021114      2847 021133
   2848 021146      2849 021147      2851 021171      2852 021176      2854 021215      2855 021230      2856 021231
   2857 021242      2858 021247      2860 021262      2861 021275      2862 021276      2863 021307      2864 021314
   2866 021327      2867 021342      2868 021343      2869 021354      2870 021361      2872 021374      2873 021407
   2874 021410      2876 021421      2878 021443      2879 021447      2880 021451      2881 021460      2882 021462
   2883 021464      2884 021467      2885 021473      2886 021501      2888 021505      2889 021506      2890 021510
   2891 021511      2892 021524      2897 021537      2899 021541      2902 021577      2903 021600      2905 021611
   2906 021617      2907 021620      2909 021642      2910 021650      2913 021651      2914 021655      2915 021656
   2916 021671      2917 021675      2919 021676      2924 021724      2926 021730      2927 021740      2930 021752
   2932 021762      2934 022021      2937 022027      2939 022030      2942 022032      2947 022034      2948 022043
   2949 022050      2950 022055      2952 022056      2954 022060      2959 022061      2965 022063      2966 022073
   2968 022105      2970 022123      2973 022136      2978 022206      2986 022207      2992 022211      2993 022221
   2995 022233      2997 022251      3000 022270      3005 022340      3015 022341      3028 022352      3029 022365
   3032 022371      3033 022403      3034 022407      3035 022445      3037 022451      3038 022463      3040 022465
   3047 022466      3055 022477      3057 022511      3059 022513      3061 022522      3062 022525      3064 022527
   3066 022540      3067 022547      3068 022557      3070 022561      3071 022572      3073 022574      3075 022617
   3076 022630      3078 022632      3079 022645      3080 022647      3081 022651      3084 022711      3085 022713
   3088 022715      3090 022725      3098 022726      3123 022734      3125 022737      3126 022743      3128 022747
   3130 022763      3131 022771      3132 022777      3133 023013      3135 023014      3136 023024      3138 023025
   3139 023027      3141 023030      3144 023031      3147 023034      3149 023037      3151 023044      3156 023071
   3160 023106      3165 023124      3166 023126      3167 023127      3168 023132      3169 023137      3170 023143
   3171 023150      3172 023164      3173 023171      3174 023201      3176 023203      3177 023210      3179 023224
   3180 023225      3181 023234      3182 023235      3183 023241      3184 023246      3185 023247      3187 023250
   3189 023252      3190 023257      3191 023264      3192 023265      3193 023272      3194 023303      3195 023317
   3196 023321      3197 023325      3198 023332      3199 023346      3200 023353      3201 023354      3206 023355
   3208 023367      3213 023406      3214 023410      3215 023413      3216 023415      3217 023420      3218 023422
   3219 023423      3221 023424      3226 023440      3227 023441      3228 023442      3230 023443      3232 023445
   3233 023446      3234 023452      3235 023457      3236 023473      3238 023474      3243 023477      3245 023506
   3246 023513      3249 023514      3251 023516      3252 023522      3253 023523      3254 023530      3255 023535
   3256 023555      3257 023556      3262 023557      3264 023562      3265 023564      3267 023571      3268 023576
   3269 023603      3272 023604      3273 023605      3274 023607      3275 023615      3276 023625      3277 023635
   3278 023637      3279 023651      3280 023661      3281 023663      3283 023677      3284 023702      3286 023704
   3287 023710      3288 023717      3289 023724      3290 023737      3291 023747      3292 023754      3293 023756
   3296 023761      3299 023766      3300 023767      3301 024002      3302 024005      3303 024015      3304 024026
   3305 024033      3306 024054      3312 024056      3314 024065      3316 024132      3321 024205      3322 024207
   3325 024216      3328 024227      3331 024243      3333 024247      3334 024254      3337 024270      3339 024305
   3340 024313      3342 024327      3344 024375      3345 024406      3347 024407      3349 024420      3350 024426
   3351 024442      3353 024505      3354 024515      3355 024522      3357 024536      3358 024550      3359 024600
   3360 024611      3361 024653      3363 024712      3364 024720      3365 024721      3368 024755      3369 024766
   3370 024773      3372 025051      3373 025062      3375 025063      3377 025074      3378 025102      3379 025116
   3380 025126      3381 025133      3383 025147      3384 025161      3385 025211      3386 025222      3387 025264
   3389 025323      3390 025331      3391 025332      3393 025366      3394 025377      3395 025404      3397 025455
   3398 025466      3400 025467      3402 025500      3403 025506      3404 025522      3405 025532      3406 025537
   3408 025553      3410 025565      3412 025607      3413 025612      3416 025657      3417 025664      3422 025702
   3423 025707      3425 025756      3427 025767      3430 026032      3431 026052      3433 026111      3435 026134
   3436 026135      3438 026173      3439 026215      3441 026216      3444 026224      3447 026225      3448 026253
   3449 026264      3452 026331      3453 026336      3456 026351      3459 026372      3460 026412      3461 026430
   3463 026471      3467 026515      3470 026516      3472 026567      3473 026600      3475 026601      3477 026612
   3478 026620      3479 026634      3480 026644      3481 026651      3483 026665      3485 026724      3486 026735
   3487 026747      3488 026752      3489 027014      3492 027056      3494 027064      3495 027075      3496 027077
   3498 027153      3499 027164      3501 027165      3502 027174      3505 027175      3506 027241      3508 027310
   3509 027321      3512 027376      3514 027447      3516 027460      3519 027461      3520 027526      3522 027606
   3525 027617      3526 027624      3527 027642      3528 027645      3529 027664      3533 027673      3538 027675
   3540 027702      3541 027710      3543 027723      3544 027732      3546 027735      3548 027740      3554 027741
   3562 027747      3563 027752      3564 027755      3565 027764      3567 027776      3568 030004      3569 030011
   3570 030016      3572 030023      3573 030035      3576 030062      3579 030072      3580 030077      3581 030103
   3582 030110      3583 030114      3584 030120      3585 030125      3586 030126      3590 030133      3594 030150
   3596 030154      3597 030155      3598 030161      3599 030170      3600 030172      3603 030176      3605 030206
   3606 030210      3607 030262      3610 030263      3612 030270      3620 030273      3623 030301      3625 030320
   3627 030325      3628 030327      3629 030336      3631 030337      3633 030351      3635 030362      3637 030373
   3639 030376      3645 030402      3654 030403      3655 030405      3657 030411      3659 030413      3661 030414
   3662 030421      3663 030422      3665 030424      3666 030426      3667 030445      3669 030450      3672 030464
   3674 030472      3676 030476      3677 030503      3678 030514      3679 030526      3682 030535      3684 030540
   3685 030604      3686 030650      3689 030720      3691 030772      3693 031003      3701 031004      3710 031015
   3712 031023      3713 031026      3715 031035      3716 031043      3718 031051      3719 031066      3721 031075
   3723 031076      3724 031101      3725 031116      3729 031125      3730 031132      3732 031133      3735 031143
   3738 031152      3746 031153      3752 031155      3753 031172      3756 031217      3758 031227      3761 031237
   3769 031240      3774 031256      3782 031304      3788 031325      3791 031330      3792 031346      3793 031350
   3796 031351      3798 031353      3799 031370      3802 031443      3803 031460      3805 031462      3813 031463
   3830 031471      3831 031476      3833 031500      3834 031504      3835 031517      3836 031522      3837 031524
   3839 031525      3840 031527      3842 031530      3843 031531      3846 031535      3847 031545      3849 031552
   3850 031555      3852 031556      3854 031560      3856 031563      3857 031604      3859 031610      3860 031614
   3861 031631      3862 031642      3864 031643      3867 031662      3869 031674      3871 031702      3872 031704
   3874 031705      3876 031707      3878 031713      3883 031714      3891 031716      3894 031734      3895 031747
   3896 031764      3899 031767      3903 032003      3905 032007      3906 032010      3907 032016      3908 032024
   3909 032026      3912 032031      3914 032034      3922 032035      3925 032037      3927 032054      3928 032061
   3929 032064      3930 032073      3932 032074      3934 032104      3936 032114      3938 032124      3940 032126
   3946 032132      3966 032143      3969 032167      3970 032202      3975 032204      3976 032205      3978 032211
   3980 032215      3981 032216      3982 032225      3984 032250      3986 032253      3987 032255      3988 032261
   3994 032271      3995 032275      3997 032302      3998 032326      4000 032330      4001 032334      4003 032344
   4004 032350      4005 032351      4006 032361      4007 032404      4008 032407      4010 032411      4011 032415
   4013 032425      4014 032431      4016 032436      4018 032467      4019 032513      4021 032515      4022 032521
   4029 032531      4030 032535      4031 032540      4032 032564      4033 032566      4034 032572      4035 032602
   4036 032604      4037 032605      4039 032611      4040 032615      4041 032644      4042 032646      4044 032647
   4045 032676      4047 032700      4051 032702      4052 032706      4053 032714      4054 032754      4055 032757
   4056 032763      4057 032773      4058 032775      4059 032776      4061 033000      4062 033004      4063 033034
   4064 033035      4066 033036      4067 033066      4069 033070      4073 033072      4076 033103      4077 033143
   4078 033153      4080 033156      4081 033157      4082 033160      4084 033163      4085 033165      4090 033166
   4091 033172      4094 033176      4095 033210      4096 033213      4097 033220      4098 033221      4099 033224
   4101 033225      4102 033226      4104 033231      4105 033233      4107 033234      4108 033240      4109 033243
   4110 033247      4112 033253      4115 033260      4116 033261      4117 033310      4118 033312      4119 033342
   4120 033344      4122 033357      4123 033360      4124 033366      4129 033372      4130 033376      4132 033402
   4133 033412      4138 033424      4141 033430      4144 033465      4147 033475      4149 033501      4151 033504
   4157 033505      4159 033515      4161 033527      4163 033552      4169 033553      4174 033554      4176 033555
   4177 033567      4178 033603      4180 033637      4181 033642      4183 033644      4191 033645      4196 033646
   4198 033647      4199 033657      4200 033670      4202 033672      4203 033674      4204 033676      4207 033702
   4215 033703      4240 033714      4243 033741      4245 033754      4246 033756      4248 034001      4249 034011
   4250 034023      4263 034024      4264 034025      4266 034031      4267 034035      4269 034041      4271 034043
   4272 034045      4273 034050      4274 034054      4275 034060      4276 034064      4277 034070      4279 034071
   4281 034074      4282 034100      4283 034104      4284 034110      4285 034121      4286 034125      4287 034126
   4289 034127      4291 034133      4292 034137      4297 034143      4298 034146      4299 034154      4300 034157
   4302 034174      4303 034215      4304 034221      4306 034222      4307 034227      4308 034236      4309 034241
   4310 034242      4312 034253      4313 034261      4314 034266      4315 034272      4316 034316      4317 034344
   4318 034370      4319 034416      4320 034442      4321 034470      4322 034517      4325 034557      4327 034561
   4328 034572      4330 034573      4334 034625      4335 034636      4337 034650      4343 034651      4350 034662
   4351 034665      4353 034666      4355 034676      4356 034712      4358 034713      4360 034722      4362 034730
   4363 034734      4364 034740      4365 034750      4366 034760      4369 034770      4372 035001      4374 035013
   4376 035025      4378 035026      4384 035027      4391 035031      4392 035035      4393 035041      4394 035052
   4396 035053      4398 035062      4406 035063      4411 035071      4415 035115      4419 035140      4423 035160
   4426 035205      4429 035232      4433 035257      4435 035267      4436 035277      4437 035314      4440 035317
   4446 035320      4449 035322      4472 035323      4475 035325      4476 035326      4477 035330      4478 035331
   4484 035332      4487 035334      4488 035336      4489 035337      4490 035340      4496 035341      4499 035343
   4500 035344      4501 035345      4502 035346      4505 035347      4508 035352      4509 035356      4510 035361
   4511 035363      4513 035364      4514 035365      4516 035366      4518 035367      4520 035373      4522 035411
   4527 035415      4529 035420      4532 035432      4535 035434      4537 035441      4538 035442      4540 035450
   4541 035455      4542 035460      4543 035462      4544 035463      4546 035464      4550 035473      4551 035475
   4552 035504      4553 035511      4554 035514      4555 035516      4556 035517      4558 035520      4561 035525
   4565 035540      4566 035547      4567 035554      4568 035557      4569 035571      4570 035572      4571 035573
   4573 035575      4576 035610      4577 035617      4578 035624      4579 035627      4580 035641      4581 035642
   4583 035643      4585 035644      4587 035645      4593 035647      4594 035655      4595 035657      4596 035661
   4598 035663      4600 035665      4605 035666      4607 035672      4609 035673      4611 035677      4613 035700
   4615 035704      4619 035705      4625 035707      4627 035711      4629 035715      4630 035717      4631 035721
   4633 035722      4641 035723      4644 035724      4645 035727      4647 035732      4648 035734      4650 035735
   4652 035743      4654 035767      4657 036005      4660 036006      4661 036010      4662 036023      4663 036027
   4666 036033      4668 036044      4670 036051      4671 036052      4672 036053      4674 036054      4676 036055
   4678 036057      4679 036062      4680 036067      4682 036070      4683 036071      4684 036073      4686 036074
   4688 036076      4691 036103      4692 036104      4693 036105      4694 036110      4696 036126      4699 036131
   4700 036134      4702 036135      4704 036137      4705 036140      4706 036143      4709 036151      4710 036156
   4711 036157      4712 036160      4714 036161      4715 036162      4717 036163      4720 036165      4721 036167
   4722 036175      4723 036203      4724 036210      4725 036212      4727 036217      4729 036222      4730 036236
   4731 036241      4732 036246      4733 036250      4734 036252      4735 036253      4725 036255      4737 036256
   4738 036260      4740 036261      4742 036264      4755 036265      4760 036266      4761 036271      4763 036272
   4765 036275      4767 036276      4769 036303      4772 036331      4773 036350      4776 036377      4777 036417
   4779 036444      4780 036463      4784 036470      4785 036472      4786 036474      4788 036507      4790 036513
   4793 036517      4796 036525      4798 036540      4800 036543      4801 036544      4802 036547      4803 036556
   4804 036557      4806 036563      4807 036564      4809 036603      4811 036606      4813 036611      4815 036612
   4817 036615      4818 036620      4819 036621      4821 036622      4822 036624      4824 036625      4827 036632
   4829 036637      4830 036641      4831 036647      4832 036654      4834 036655      4835 036662      4838 036667
   4839 036671      4841 036674      4844 036720      4845 036722      4848 036724      4850 036746      4851 036750
   4854 036752      4860 036753      4863 036754      4865 036756      4868 036774      4870 037001      4880 037002
   4885 037003      4887 037004      4889 037005      4891 037015      4893 037044      4896 037063      4899 037064
   4900 037066      4901 037101      4902 037104      4905 037110      4907 037121      4910 037126      4911 037127
   4912 037130      4913 037133      4915 037151      4917 037154      4918 037157      4920 037160      4922 037162
   4923 037163      4924 037166      4927 037174      4928 037201      4929 037202      4930 037203      4932 037204
   4933 037206      4934 037207      4935 037211      4938 037212      4939 037213      4941 037221      4943 037227
   4944 037234      4945 037235      4946 037236      4947 037237      4949 037241      4951 037242      4954 037244
   4962 037245      4965 037253      4968 037260      4970 037261      4972 037265      4980 037266      4983 037274
   4986 037301      4987 037302      4989 037306      4990 037312      4991 037313      4992 037320      4994 037321
   5002 037322      5007 037330      5010 037343      5012 037346      5018 037347      5023 037351      5031 037361
   5036 037363


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
