	COMPILATION LISTING OF SEGMENT find_nonobject_info_
	Compiled by: Multics PL/I Compiler, Release 28, of March 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 04/07/83  1222.7 mst Thu
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 find_nonobject_info_: proc (eptr, ename, owner, section, adj_offset, code);
       11 
       12 
       13 
       14 /* This procedure takes the address of an entry point in the linkage section and
       15*   attempts to return its name */
       16 
       17 
       18 dcl  eptr pointer;					/* Pointer to the entry point. */
       19 dcl  ename char (*);				/* Entry name output */
       20 dcl  owner fixed bin(18);				/* seg no. of text */
       21 dcl  section char(8) aligned;				/* name of section */
       22 dcl  adj_offset fixed bin(18);			/* offset relative to section */
       23 dcl  code fixed bin (35);				/* Standard File System Error Code. Returned. */
       24 
       25 
       26 /* Automatic Storage */
       27 
       28 
       29 dcl  pls pointer;					/* Pointer to the linkage section */
       30 dcl  offset bit (18) aligned;				/* Offset of the entry in the linkage section */
       31 dcl  section_offset fixed bin(18);			/* offset of section within cls */
       32 dcl  (i, class) fixed bin;
       33 
       34 /* Externals */
       35 
       36 
       37 dcl  error_table_$name_not_found ext fixed bin (35);
       38 dcl  get_def_name_ entry (ptr, ptr, bit (18) aligned, fixed bin, char (*), fixed bin (35));
       39 dcl  hcs_$get_lp entry (ptr, ptr);
       40 dcl  find_owner_ entry (ptr, fixed bin(18), fixed bin(18), char(8) aligned, fixed bin, ptr);
       41 dcl (addrel, bit, fixed, null, rel, bin, baseno, ptr, baseptr) builtin;
       42 
       43 
       44 /* this procedure should be called only for non-object segments */
       45 
       46 program_begins_here:
       47 
       48 	ename = "";
       49 	section = "text";				/* initialize in case of error */
       50 
       51 	if eptr = null then goto error;
       52 
       53 	/* be sure this is a linkage section before we go looking for an entry sequence */
       54 	call find_owner_ (eptr, owner, section_offset, section, class, pls);
       55 	if owner = -1 then do;			/* eptr doesn't point to a linkage section,
       56*						   but maybe it points to a seg that has one,
       57*						   as for example a seg created by datmk_ or type 6 link */
       58 	     owner = bin (baseno (eptr), 18);		/* we have ptr to seg itself */
       59 	     offset = rel (eptr);			/* so use offset directly from ptr */
       60 	     class = 0;				/* it's text if anything */
       61 	     section = "text";
       62 	     call hcs_$get_lp (ptr (eptr, 0), pls);
       63 	     if pls = null then do;			/* may have a ring 0 seg (they're
       64*						   not all complete object segs); but
       65*						   must go into r0 to get pls */
       66 		call get_def_name_(null, ptr(eptr, 0), offset, -1, ename, code);
       67 		go to return;
       68 	     end;
       69 	     go to get_name;			/* and forget about entry sequence */
       70 	end;
       71 	offset = bit (fixed (fixed (rel (eptr), 18)-section_offset, 18), 18); /* Offset to entry */
       72 
       73 get_name: call get_def_name_ (pls, null, offset, class, ename, code); /* Get name */
       74 
       75 return:	adj_offset = bin(offset, 18);
       76 	return;
       77 
       78 error:	code = error_table_$name_not_found;
       79      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/07/83  1051.5  find_nonobject_info_.pl1          >spec>on>pl1-dir>find_nonobject_info_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
adj_offset                             parameter       fixed bin(18,0)          dcl 22 set ref 10 75*
baseno                                                 builtin function         dcl 41 ref 58
bin                                                    builtin function         dcl 41 ref 58 75
bit                                                    builtin function         dcl 41 ref 71
class                           000104 automatic       fixed bin(17,0)          dcl 32 set ref 54* 60* 73*
code                                   parameter       fixed bin(35,0)          dcl 23 set ref 10 66* 73* 78*
ename                                  parameter       char                     unaligned dcl 19 set ref 10 46* 66* 73*
eptr                                   parameter       pointer                  dcl 18 set ref 10 51 54* 58 59 62 62 66 66 71
error_table_$name_not_found     000010 external static fixed bin(35,0)          dcl 37 ref 78
find_owner_                     000016 constant        entry                    external dcl 40 ref 54
fixed                                                  builtin function         dcl 41 ref 71 71
get_def_name_                   000012 constant        entry                    external dcl 38 ref 66 73
hcs_$get_lp                     000014 constant        entry                    external dcl 39 ref 62
null                                                   builtin function         dcl 41 ref 51 63 66 66 73 73
offset                          000102 automatic       bit(18)                  dcl 30 set ref 59* 66* 71* 73* 75
owner                                  parameter       fixed bin(18,0)          dcl 20 set ref 10 54* 55 58*
pls                             000100 automatic       pointer                  dcl 29 set ref 54* 62* 63 73*
ptr                                                    builtin function         dcl 41 ref 62 62 66 66
rel                                                    builtin function         dcl 41 ref 59 71
section                                parameter       char(8)                  dcl 21 set ref 10 49* 54* 61*
section_offset                  000103 automatic       fixed bin(18,0)          dcl 31 set ref 54* 71

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addrel                                                 builtin function         dcl 41
baseptr                                                builtin function         dcl 41
i                                      automatic       fixed bin(17,0)          dcl 32

NAMES DECLARED BY EXPLICIT CONTEXT.
error                           000260 constant        label                    dcl 78 ref 51
find_nonobject_info_            000022 constant        entry                    external dcl 10
get_name                        000213 constant        label                    dcl 73 ref 69
program_begins_here             000035 constant        label                    dcl 46
return                          000253 constant        label                    dcl 75 ref 67

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       352         372     264         362
Length       544     264        20         136      66           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
find_nonobject_info_                116 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
find_nonobject_info_     000100 pls                         find_nonobject_info_
                         000102 offset                      find_nonobject_info_
                         000103 section_offset              find_nonobject_info_
                         000104 class                       find_nonobject_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
find_owner_                   get_def_name_                 hcs_$get_lp

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$name_not_found




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000014        46 000035        49 000042        51 000046        54 000052        55 000072        58 000076
     59 000104        60 000106        61 000107        62 000113        63 000126        66 000132        67 000177
     69 000200        71 000201        73 000213        75 000253        76 000257        78 000260        79 000262


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
