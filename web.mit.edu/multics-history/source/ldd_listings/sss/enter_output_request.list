	COMPILATION LISTING OF SEGMENT enter_output_request
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/28/88  1326.6 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 /* format: style4,delnl,insnl,^ifthendo */
       15 
       16 /* format: off */
       17 
       18 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       19 /*									*/
       20 /*  NAMES:  enter_output_request, eor						*/
       21 /*									*/
       22 /*      This command submits requests to print or punch files via calls to dprint_.	*/
       23 /*									*/
       24 /*  STATUS								*/
       25 /*									*/
       26 /* 1) Created:  May, 1973 by G. C. Dixon					*/
       27 /* 2) Modified: July, 1974 by G. C. Dixon					*/
       28 /*    a) added -device_class control argument.					*/
       29 /*    b) call dprint_$access_check to check IO Daemon's access to output segments.	*/
       30 /* 3) Modified: September, 1974 by G. C. Dixon					*/
       31 /*    a) support the new control arguments:  -endpage (-ep), -no_endpage (-nep),	*/
       32 /*       -line_length (-ll), -page_length (-pl), -indent (-in).			*/
       33 /* 4) Modified: August, 1978 by Thomas McGary					*/
       34 /*    a) add -label, -top_label, -bottom_label, & check vs -nep.			*/
       35 /*    b) rename -dvc to -rqt.							*/
       36 /*    c) convert to version 5 of dprint_arg struc.				*/
       37 /* 5) Modified: October 12, 1981 by Roger Roach					*/
       38 /*    a) modified to accept 24 character request types and convert to version 6		*/
       39 /*       dprint_arg structure.						*/
       40 /* 6) Modified: October, 21, 1981 by Gary Dixon					*/
       41 /*    a) Major upgrade, including new argument parsing scheme,			*/
       42 /*    b) named, user-settable defaults on a per-request_type basis			*/
       43 /*    c) elimination of (print change)_daemon_defaults entry points in favor of		*/
       44 /*       -print_defaults and -set_defaults					*/
       45 /*    d) implementation of the -forms and -plot control arguments.			*/
       46 /*    e) store default values in Person_id.value seg in [home_dir].			*/
       47 /* 7) Modified: December 12, 1981 by Gary Dixon					*/
       48 /*    a) implement -active_string as operand for -he -ds -lbl -tlbl -blbl.  De-implement	*/
       49 /*       -ehe								*/
       50 /* 8) Modified: June 1, 1982 by Gary Dixon - fix minor bugs, warn when using request	*/
       51 /*	      types for which no user defaults are defined.			*/
       52 /* 9) Modified: June, 1982 by Rick Kovalcik to add support for -dupt			*/
       53 /* 10) Modified: November 1983 by C. Marker to add support for -nsep		          */
       54 /* 11) Modified: January 1984 by C. Marker to make it possible to have a default request  */
       55 /*               type which has no user defined defaults but instead uses the system      */
       56 /*               defaults.							*/
       57 /* 12) Modified: May 1984 by C. Marker to make the system defaults for the heading and    */
       58 /*	       destination be null strings.  This will allow the IO Daemon drivers      */
       59 /*               to take care of the defaults. 
       60*             */
       61 /* 13) Modified: Nov 1, 1984 by EJ Sharpe to change mdc_$get_lv_access arg list		*/
       62 /*									*/
       63 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       64 
       65 
       66 /****^  HISTORY COMMENTS:
       67*  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
       68*     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
       69*     Modified to call object_lib_$initiate to check if a file is an object
       70*     segment or MSF instead of calling object_info_.
       71*  2) change(87-05-10,Gilcrease), approve(87-05-15,MCR7686),
       72*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
       73*     Implement -nb for line-numbered printouts.
       74*  3) change(88-08-25,Farley), approve(88-09-16,MCR7911),
       75*     audit(88-10-25,Wallman), install(88-10-28,MR12.2-1199):
       76*     Modified to use new version 10 dprint_arg and to call the new iod_info
       77*     forms validation routine.
       78*                                                   END HISTORY COMMENTS */
       79 
       80 
       81 /* format: on */
       82 
       83 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       84 
       85 
       86 enter_output_request:
       87 eor:
       88      procedure;
       89 
       90 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       91 /*									*/
       92 /* This is the entry point used for submission of print and punch requests and to	*/
       93 /* set/reset/delete/print user-defined groups of defaults.				*/
       94 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       95 
       96 
       97 dcl  Idft fixed bin,
       98      Nargs fixed bin,				/* number of input arguments.			*/
       99      Nqueued fixed bin,				/* number of entries submitted for operation.	*/
      100      Ntype fixed bin,				/* type of operation: 			*/
      101 						/*   0 = UNDEFINED				*/
      102 						/*   1 = DP_PRINT				*/
      103 						/*   2 = DP_PUNCH				*/
      104 						/*   3 = DP_PLOT				*/
      105      Ntypes_set fixed bin,				/* if >1, then conflicting control args were given */
      106      Parg_list ptr,
      107      Pdefault_temp ptr,
      108      Pfcb ptr,					/* ptr to MSF opening info.			*/
      109      Pseg ptr,					/* ptr to segment being submitted.		*/
      110      Sdefault_is_stored bit (1),			/* on if user default is stored in value seg.	*/
      111      Sgive_label_warning bit (1),			/* on if user should be warned about -nep/-label	*/
      112      Sgive_nep_warning bit (1),			/* on if user should be warned about -label/-nep	*/
      113      Sdefault bit (1),				/* use default values for -he and -ds */
      114      code fixed bin (35),				/* a status code.				*/
      115      gen_type char (32),
      116      (line_length_error, line_length_query) fixed bin init (0),
      117      max_q fixed bin,
      118      value_seg_path char (168),
      119      warn_count fixed bin;
      120 
      121 dcl  area area based (Parea);
      122 
      123 dcl  (after, addr, bit, convert, currentsize, index, length, null, rtrim, search, string, substr, sum, unspec) builtin;
      124 
      125 dcl  (cleanup, conversion) condition;
      126 
      127 dcl  adjust_bit_count_ entry (char (168) aligned, char (32) aligned, bit (1) aligned, fixed bin (35), fixed bin (35)),
      128      check_star_name_$entry entry (char (*), fixed bin (35)),
      129      com_err_ entry () options (variable),
      130      command_query_$yes_no entry () options (variable),
      131      convert_authorization_$to_string entry (bit (72) aligned, char (*), fixed bin (35)),
      132      cu_$arg_count entry (fixed bin, fixed bin (35)),
      133      cu_$arg_list_ptr entry returns (ptr),
      134      cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
      135      cu_$evaluate_active_string entry (ptr, char (*), fixed bin, char (*) var, fixed bin (35)),
      136      dprint_ entry (char (*), char (*), ptr, fixed bin (35)),
      137      dprint_$check_daemon_access
      138 	entry (char (*), char (*), char (*), bit (1) aligned, bit (1) aligned, bit (1) aligned, char (*),
      139 	fixed bin (35)),
      140      dprint_$queue_contents entry (char (*), fixed bin, fixed bin, fixed bin (35)),
      141      eor_cv5_6_ entry (ptr, fixed bin (35)),
      142      eor_cv6_7_ entry (ptr, fixed bin (35)),
      143      eor_cv7_8_ entry (ptr, fixed bin (35)),
      144      eor_cv8_9_ entry (ptr, fixed bin (35)),
      145      eor_cv9_10_ entry (ptr, fixed bin (35)),
      146      expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
      147      get_equal_name_ entry (char (*), char (*), char (32), fixed bin (35)),
      148      get_group_id_$tag_star entry () returns (char (32)),
      149      get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin),
      150      get_system_free_area_ entry () returns (ptr),
      151      hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
      152      hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
      153      hcs_$get_access_class entry (char (*), char (*), bit (72) aligned, fixed bin (35)),
      154      hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)),
      155      hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35)),
      156      hcs_$terminate_noname entry (ptr, fixed bin (35)),
      157      ioa_ entry () options (variable),
      158      iod_info_$generic_type entry (char (*), char (32), fixed bin (35)),
      159      iod_info_$queue_data entry (char (*), fixed bin, fixed bin, fixed bin (35)),
      160      iod_info_$validate_forms_info entry (ptr, ptr, fixed bin (35)),
      161      mdc_$find_lvname entry (bit (36), char (*), fixed bin (35)),
      162      mdc_$get_lv_access entry (char (*), fixed bin (3), bit (36) aligned, bit (1) aligned, fixed bin (35)),
      163      msf_manager_$acl_add entry (ptr, ptr, fixed bin, fixed bin (35)),
      164      msf_manager_$close entry (ptr),
      165      msf_manager_$get_ptr entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35)),
      166      msf_manager_$open entry (char (*), char (*), ptr, fixed bin (35)),
      167      object_lib_$initiate entry (char (*), char (*), char (*), bit (1), ptr, fixed bin (24), bit (1), fixed bin (35)),
      168      requote_string_ entry (char (*)) returns (char (*)),
      169      user_info_ entry (char (*), char (*), char (*)),
      170      value_$get_data entry (ptr, bit (36) aligned, char (*), ptr, ptr, fixed bin (18), fixed bin (35)),
      171      value_$get_path entry (char (*), fixed bin (35)),
      172      value_$list_data_names entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed bin (35)),
      173      value_$set_data
      174 	entry (ptr, bit (36) aligned, char (*), ptr, fixed bin (18), ptr, ptr, fixed bin (18), fixed bin (35)),
      175      value_$set_path entry (char (*), bit (1), fixed bin (35));
      176 
      177 dcl  DEFAULT_RQT (3) char (24) int static options (constant) init ("printer", "punch", "plotter"),
      178      DEFAULT_VALUE_SEG ptr int static options (constant) init (null),
      179      (
      180      FALSE init ("0"b),
      181      TRUE init ("1"b)
      182      ) bit (1) int static options (constant),
      183      PERM bit (36) aligned int static options (constant) init ("01"b),
      184      Parea ptr int static,				/* ptr to an allocation area.			*/
      185      MAX_COPIES fixed bin int static options (constant) init (30),
      186      MAX_LINE_LENGTH fixed bin int static options (constant) init (250),
      187      NL char (1) int static options (constant) init ("
      188 "),
      189      (
      190      PRINT init (1),
      191      PUNCH init (2),
      192      MCC init (3),
      193      RAW init (4),
      194      PLOT init (5)
      195      ) fixed bin int static options (constant),
      196      UNDEFINED fixed bin int static options (constant) init (0),
      197      (
      198      error_table_$bad_arg,
      199      error_table_$bad_segment,
      200      error_table_$badopt,
      201      error_table_$badstar,
      202      error_table_$bigarg,
      203      error_table_$command_line_overflow,
      204      error_table_$dirseg,
      205      error_table_$improper_data_format,
      206      error_table_$inconsistent,
      207      error_table_$inconsistent_msf,
      208      error_table_$lock_wait_time_exceeded,
      209      error_table_$moderr,
      210      error_table_$no_s_permission,
      211      error_table_$noarg,
      212      error_table_$noentry,
      213      error_table_$nomatch,
      214      error_table_$nostars,
      215      error_table_$notalloc,
      216      error_table_$oldnamerr,
      217      error_table_$out_of_bounds,
      218      error_table_$private_volume,
      219      error_table_$too_many_names,
      220      error_table_$typename_not_found,
      221      error_table_$unimplemented_version,
      222      error_table_$zero_length_seg,
      223      error_table_$bad_forms_option,
      224      error_table_$no_forms_table_defined
      225      ) fixed bin (35) ext static,
      226      iox_$error_output ptr ext static,
      227      iox_$user_io ptr ext static,
      228      person char (22) int static init (""),
      229      proc char (24) aligned int static options (constant) init ("enter_output_request"),
      230      proj char (9) int static;
      231 
      232 
      233 
      234 
      235 
      236 dcl  1 S aligned,					/* The structures on this page hold all of the	*/
      237        2 processing_control,				/*   information supplied by the user via	*/
      238          3 brief bit (1),				/*   control arguments.  The S structure holds	*/
      239          3 force bit (1),				/*   binary switches.			*/
      240        2 carriage_control,
      241          3 nep bit (1),
      242          3 single bit (1),
      243          3 non_edited bit (1),
      244          3 truncate bit (1),
      245          3 no_separator bit (1),
      246          3 line_nbrs bit (1),
      247        2 default_control,
      248          3 set_default bit (1),
      249          3 print_default bit (1),
      250          3 all bit (1),
      251          3 delete_default bit (1),
      252          3 replace_default bit (1),
      253          3 list_defaults bit (1),
      254        2 label,
      255          3 top bit (1),
      256          3 bottom bit (1),
      257          3 access bit (1),
      258        2 arg_type,
      259          3 pathnames bit (1),
      260          3 non_path_ctl_args bit (1),
      261          3 error bit (1),
      262          3 dnm_or_rqt_omitted bit (1),
      263      1 N aligned,					/* The N structure holds numeric switches, 	*/
      264        2 pt_pch fixed bin,				/* lengths, and other numeric selectors.	*/
      265        2 delete fixed bin,
      266        2 notify fixed bin,
      267        2 copies fixed bin,
      268        2 queue fixed bin,
      269        2 output_module fixed bin,
      270        2 lmargin fixed bin,
      271        2 line_lth fixed bin,
      272        2 page_lth fixed bin,
      273        2 defer_until_process_termination fixed bin,
      274      1 O aligned,					/* The O structure holds character operands for	*/
      275        2 request_type char (24) unal,			/*   various control arguments.		*/
      276        2 default_request_type char (24) unal,
      277        2 name_of_default char (24) unal,
      278        2 forms_name char (128) unal,
      279      1 PLS_struc aligned,
      280        2 heading like PLS,
      281        2 destination like PLS,
      282        2 top_label like PLS,
      283        2 bottom_label like PLS,
      284      1 PLS (4) aligned based (addr (PLS_struc)),		/* The PLS array of structures holds user-supplied */
      285        2 P ptr,					/*   arguments, stored as ptr/length with	*/
      286        2 L fixed bin (21),				/*   modifying switches.			*/
      287        2 S,					/*   The 4 array elements contain:		*/
      288          3 equal_name bit (1) unal,			/*       (1) heading			*/
      289          3 active_string bit (1) unal,			/*       (2) destination			*/
      290          3 center bit (1) unal,			/*       (3) top_label			*/
      291          3 pad bit (33) unal,				/*       (4) bottom_label			*/
      292      (
      293      HEADING init (1),
      294      DESTINATION init (2),
      295      TOP_LABEL init (3),
      296      BOTTOM_LABEL init (4)
      297      ) fixed bin int static options (constant),
      298      PLS_heading char (PLS.L (HEADING)) based (PLS.P (HEADING)),
      299      PLS_destination char (PLS.L (DESTINATION)) based (PLS.P (DESTINATION)),
      300      PLS_top_label char (PLS.L (TOP_LABEL)) based (PLS.P (TOP_LABEL)),
      301      PLS_bottom_label char (PLS.L (BOTTOM_LABEL)) based (PLS.P (BOTTOM_LABEL)),
      302      switch_array (21) bit (1) aligned based (addr (S)),
      303      number_array (10) fixed bin aligned based (addr (N));
      304 
      305 dcl  1 default_print aligned based (Pdefault),
      306        2 header,
      307          3 Ntype fixed bin,				/* This structure holds information corresponding */
      308          3 name char (24) unal,			/*   to the O, S, N and PLS structures above, in	*/
      309          3 size fixed bin (18),			/*   the form in which it is stored as 		*/
      310        2 Odft,					/*   user-defined groups of default control	*/
      311          3 request_type char (24) unal init (""),		/*   argument settings for PRINTING.		*/
      312          3 forms_name char (64) unal init (""),
      313        2 Sdft,
      314          3 processing_control,
      315 	 4 brief bit (1) init ("0"b),
      316 	 4 force bit (1) init ("0"b),
      317          3 carriage_control,
      318 	 4 nep bit (1) init ("0"b),
      319 	 4 single bit (1) init ("0"b),
      320 	 4 non_edited bit (1) init ("0"b),
      321 	 4 truncate bit (1) init ("0"b),
      322 	 4 no_separator bit (1) init ("0"b),
      323 	 4 line_nbrs bit (1) init ("0"b),
      324          3 label,
      325 	 4 top bit (1) init ("0"b),
      326 	 4 bottom bit (1) init ("0"b),
      327 	 4 access bit (1) init ("1"b),
      328        2 Ndft,
      329          3 pt_pch fixed bin init (0),
      330          3 delete fixed bin init (0),
      331          3 notify fixed bin init (0),
      332          3 copies fixed bin init (1),
      333          3 queue fixed bin init (0),
      334          3 output_module fixed bin init (PRINT),
      335          3 lmargin fixed bin init (0),
      336          3 line_lth fixed bin init (-1),
      337          3 page_lth fixed bin init (-1),
      338          3 defer_until_process_termination fixed bin init (0),
      339        2 LSV,					/* info from PLS converted to form storable	*/
      340          3 fixed_part,				/*   across process boundaries.		*/
      341 	 4 heading,
      342 	   5 L fixed bin (21),
      343 	   5 S like PLS.S,
      344 	 4 destination like default_print.LSV.fixed_part.heading,
      345 	 4 top_label like default_print.LSV.fixed_part.heading,
      346 	 4 bottom_label like default_print.LSV.fixed_part.heading,
      347          3 V,
      348 	 4 heading char (PLS_struc.heading.L refer (default_print.LSV.heading.L)) unal,
      349 	 4 destination char (PLS_struc.destination.L refer (default_print.LSV.destination.L)) unal,
      350 	 4 top_label char (PLS_struc.top_label.L refer (default_print.LSV.top_label.L)) unal,
      351 	 4 bottom_label char (PLS_struc.bottom_label.L refer (default_print.LSV.bottom_label.L)) unal,
      352      1 auto_default aligned,
      353        2 header like default_print.header,
      354        2 Odft like default_print.Odft,
      355        2 Sdft like default_print.Sdft,
      356        2 Ndft like default_print.Ndft,
      357        2 LSV,
      358          3 fixed_part like default_print.LSV.fixed_part,
      359          3 V,
      360 	 4 heading char (59),
      361 	 4 destination char (24),
      362 	 4 top_label char (136),
      363 	 4 bottom_label char (136);
      364 
      365 
      366 
      367 
      368 dcl  1 default_punch aligned based (Pdefault),
      369        2 header,
      370          3 Ntype fixed bin,				/* PUNCH and PLOT DEFAULTS			*/
      371          3 name char (24) unal,
      372          3 size fixed bin (18),
      373        2 Odft,
      374          3 request_type char (24) unal init (""),
      375        2 Sdft,
      376          3 processing_control,
      377 	 4 equal_header bit (1) init ("0"b),
      378 	 4 brief bit (1) init ("0"b),
      379 	 4 force bit (1) init ("0"b),
      380        2 Ndft,
      381          3 pt_pch fixed bin init (0),
      382          3 delete fixed bin init (0),
      383          3 notify fixed bin init (0),
      384          3 copies fixed bin init (1),
      385          3 queue fixed bin init (0),
      386          3 output_module fixed bin init (MCC),
      387          3 defer_until_process_termination fixed bin init (0),
      388        2 LSV,					/* info from PLS converted to form storable	*/
      389          3 fixed_part,				/*   across process boundaries.		*/
      390 	 4 heading like default_print.LSV.fixed_part.heading,
      391 	 4 destination like default_print.LSV.fixed_part.heading,
      392          3 V,
      393 	 4 heading char (PLS_struc.heading.L refer (default_punch.LSV.heading.L)) unal,
      394 	 4 destination char (PLS_struc.destination.L refer (default_punch.LSV.destination.L)) unal,
      395      Pdefault ptr,
      396      Pnew_default ptr;
      397 
      398 
      399 dcl  1 default_header aligned based (Pdefault_header),
      400        2 version fixed bin,				/* structure containing default request types and */
      401        2 default_request_type (3) char (24) unal,		/* defining version of default_(print punch)	*/
      402 						/* structures above.  The default_request_type	*/
      403 						/* array elements are for printing, punching and	*/
      404      Pdefault_header ptr,				/* plotting, respectively.			*/
      405      Vdefault_header_5 fixed bin int static options (constant) init (5),
      406 						/* Version 5 supports -astr in -he, -ds, -lbl	*/
      407      Vdefault_header_6 fixed bin int static options (constant) init (6),
      408 						/* Version 6 de-supports default names beginning	*/
      409 						/*   with hyphen or including ? or * chars.	*/
      410      Vdefault_header_7 fixed bin int static options (constant) init (7),
      411 						/* Version 7 supports -dupt			*/
      412      Vdefault_header_8 fixed bin int static options (constant) init (8),
      413 						/* Version 8 supports -nsep */
      414      Vdefault_header_9 fixed bin int static options (constant) init (9),
      415 						/* Version 9, -nb */
      416      Vdefault_header_10 fixed bin int static options (constant) init (10),
      417 						/* Version 10, larger forms_name */
      418      1 auto_default_header aligned like default_header;
      419 
      420 
      421 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      422 /*									*/
      423 /* The following table describes the control arguments accepted by eor.  Each		*/
      424 /* argument is preceded by a descriptor (eg, S^ 04) which describes the type of argument	*/
      425 /* [char(2)] (eg, switch or arg with numeric operand, etc), argument value [pic"9"]	*/
      426 /* field, and argument number [pic "99"] within each type.				*/
      427 /*									*/
      428 /* Types are:								*/
      429 /* 	S+ = switch argument, value of switch is on				*/
      430 /*	S^ = switch argument, value of switch is off				*/
      431 /* 	Nb = argument which is followed by a numeric operand			*/
      432 /*	N  = numeric switch argument.  The switch is set to the desc.arg_val.		*/
      433 /*	Ch = argument which is followed by a character operand			*/
      434 /*	Sp = special argument which is not followed by an operand (ie, which is a	*/
      435 /*	     switch), but which requires special processing in addition to setting the	*/
      436 /*	     switch.							*/
      437 /*	PL = argument which is followed by an arbitrarily long character string	*/
      438 /*	     operand.  The operand is stored in the PLS structure as a ptr/length pair. */
      439 /*									*/
      440 /* For switches (S^ or S+) and args with numeric operands (Nb),			*/
      441 /*   the argument number (desc.arg_no) is an index into an array of switches		*/
      442 /*   (switch_array) or numeric operands (number_array).  These arrays overlay structures	*/
      443 /*   (S and N) which identify the switches or numeric operand values by name.		*/
      444 /* For numeric switches (N ),							*/
      445 /*   the argument number (desc.arg_no) is an index into number_array, and desc.arg_val	*/
      446 /*   is the value to be stored in the array element.				*/
      447 /* For special args (Sp) or args with character operands (Ch),			*/
      448 /*   the desc.arg_no identifies a label value to which control is transferred in 	*/
      449 /*   order to process the argument (and its operand).				*/
      450 /* For ptr/length args (PL),							*/
      451 /*   the desc.arg_val identifies which element of the PLS structure should be set, and	*/
      452 /*   desc.arg_no identifies a label value to which control is transferred for further	*/
      453 /*   processing after the structure element is set.				*/
      454 /*									*/
      455 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      456 
      457 dcl  1 desc unal based (Pdesc),			/* This is the descriptor referred to above.	*/
      458        2 type char (2),
      459        2 arg_val pic "9",
      460        2 arg_no pic "99",
      461      Pdesc ptr;
      462 
      463 
      464 
      465 
      466 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      467 /*									*/
      468 /* 		The table itself is on the next 2 pages.			*/
      469 /*									*/
      470 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      471 
      472 dcl  arg_tbl (8) char (250) int static options (constant) init ("
      473 S+ 01-brief
      474 S+ 01-bf
      475 S^ 01-long
      476 S^ 01-lg
      477 S+ 02-force
      478 S+ 02-fc
      479 S^ 02-no_force
      480 S^ 02-nfc
      481 S^ 03-end_page
      482 S^ 03-ep
      483 S+ 04-no_vertical_space
      484 S+ 04-nvertsp
      485 S^ 04-vertical_space
      486 S^ 04-vertsp
      487                 ", "
      488 S+ 05-non_edited
      489 S+ 05-ned
      490 S^ 05-edited
      491 S^ 05-ed
      492 S+ 06-truncate
      493 S+ 06-tc
      494 S^ 06-fold
      495 S+ 07-no_separator
      496 S+ 07-nsep
      497 S^ 07-separator
      498 S^ 07-sep
      499 S^ 08-no_number
      500 S^ 08-nnb
      501 S+ 08-number
      502 S+ 08-nb
      503 S+ 09-set_defaults
      504 S+ 09-set_default
      505 S+ 09-sdft
      506            ", "
      507 S+ 10-print_defaults
      508 S+ 10-print_default
      509 S+ 10-prdft
      510 S+ 10-pdft
      511 S+ 12-delete_defaults
      512 S+ 12-delete_default
      513 S+ 12-dldft
      514 S+ 12-ddft
      515 S+ 13-replace_defaults
      516 S+ 13-replace_default
      517 S+ 13-rpdft
      518             ", "
      519 S+ 13-rdft
      520 S+ 14-list_defaults
      521 S+ 14-list_default
      522 S+ 14-lsdft
      523 S+ 14-ldft
      524 N 101-print
      525 N 101-pr
      526 N 201-punch
      527 N 201-pch
      528 N 301-plot
      529 N 102-delete
      530 N 102-dl
      531 N 002-no_delete
      532 N 002-ndl
      533 N 103-notify
      534 N 103-nt
      535   ", "
      536 N 003-no_notify
      537 N 003-nnt
      538 Nb 04-copies
      539 Nb 04-copy
      540 Nb 04-cp
      541 Nb 05-queue
      542 Nb 05-q
      543 N 306-mcc_punch
      544 N 306-mcc
      545 N 406-raw_punch
      546 N 406-raw
      547 N 206-7punch
      548 N 206-7p
      549 Nb 07-indent
      550 Nb 07-ind
      551 Nb 07-in
      552               ", "
      553 Nb 08-line_length
      554 Nb 08-ll
      555 Nb 09-page_length
      556 Nb 09-pl
      557 N 110-defer_until_process_termination
      558 N 110-dupt
      559 N 010-no_defer_until_process_termination
      560 N 010-ndupt
      561 PL101-header
      562 PL101-he
      563 PL202-destination
      564    ", "
      565 PL202-ds
      566 PL303-label
      567 PL303-lbl
      568 PL304-top_label
      569 PL304-tlbl
      570 PL405-bottom_label
      571 PL405-blbl
      572 Sp 06-access_label
      573 Sp 06-albl
      574 Sp 07-no_label
      575 Sp 07-nlbl
      576 Sp 08-no_end_page
      577 Sp 08-nep
      578 Sp 09-all
      579 Sp 09-a
      580          ", "
      581 Ch 10-request_type
      582 Ch 10-rqt
      583 Ch 11-set_default_request_type
      584 Ch 11-sdftrqt
      585 Ch 11-sdrqt
      586 Ch 12-name
      587 Ch 12-nm
      588 Ch 13-default_name
      589 Ch 13-dftnm
      590 Ch 13-dnm
      591 Ch 14-forms
      592 "),
      593      arg_table char (2000) based (addr (arg_tbl)),
      594      arg_tbl_array (2000) char (1) based (addr (arg_tbl));
      595 
      596 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      597 
      598 
      599 
      600 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      601 /*									*/
      602 /* This is the entry point for the enter_output_request command.			*/
      603 /*									*/
      604 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      605 
      606 
      607 	call init ();
      608 	on cleanup call janitor ();			/* free space in system free area during cleanup. */
      609 
      610 	call cu_$arg_count (Nargs, code);		/* find out how many arguments we were called with */
      611 	if code ^= 0
      612 	then go to NOT_AF;				/* This command doesn't work as an active function */
      613 
      614 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      615 /*									*/
      616 /* The following code parses arguments in 3 passes.				*/
      617 /* 1) Find out whether we are printing, punching, or plotting.  This information is needed */
      618 /*    to determine which set of defaults (print/punch/plot) to apply.  During this	*/
      619 /*    pass, we also detect and diagnose bad control args.  Any bad args abort all	*/
      620 /*    processing.								*/
      621 /* 2) Apply proper set of defaults, and then process args to allow user to override the	*/
      622 /*    defaults.  Argument processing can be skipped if pass 1 determines there are no	*/
      623 /*    non-pathname args.  However, any control arguments values (given with control	*/
      624 /*    arguments or obtained from defaults) must still be validated.  This validation is	*/
      625 /*    part of pass 2.							*/
      626 /* 3) Process pathname args, submitting requests as appropriate.  Also change settings	*/
      627 /*    for defaults, if necessary.						*/
      628 /*									*/
      629 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      630 
      631 	S = FALSE;				/* Initialize argument-holding structures.	*/
      632 	N = 0;
      633 	O = "";
      634 	PLS (*).P = null;
      635 	PLS (*).L = 0;
      636 	PLS (*).S = FALSE;
      637 
      638 	call find_default_header ();			/* get user's default request types.		*/
      639 	if Pdefault_header = null
      640 	then go to FINISH;
      641 
      642 	Sgive_label_warning = TRUE;			/* Initialize flags for PASS 1.		*/
      643 	Sgive_nep_warning = TRUE;
      644 	Parg_list = cu_$arg_list_ptr ();
      645 	call proc_args (FALSE, Nqueued);
      646 	if S.error
      647 	then return;
      648 
      649 	S.dnm_or_rqt_omitted = (O.request_type = "" | O.name_of_default = "");
      650 						/* Set flag which indicates that either		*/
      651 						/*   -default_name or -request_type control arg	*/
      652 						/*   was NOT given in this invocation.		*/
      653 	if O.name_of_default = ""
      654 	then					/* Use user-supplied operand of -request_type name */
      655 	     O.name_of_default = O.request_type;	/*   for default name if -default_name not given.	*/
      656 	Ntype = UNDEFINED;
      657 	if O.name_of_default ^= ""
      658 	then do;					/* If default name given, look for user-defined	*/
      659 						/*   set of default control arguments in value seg */
      660 	     call find_default (O.name_of_default, "", UNDEFINED, FALSE, FALSE, warn_count, Pdefault);
      661 	     if Pdefault ^= null
      662 	     then do;
      663 		O.request_type = default_print.request_type;
      664 		Ntype = default_print.Ntype;
      665 	     end;
      666 	end;
      667 
      668 	if Ntype ^= UNDEFINED
      669 	then ;					/* If no user-defined defaults, look for generic	*/
      670 	else if O.request_type ^= ""
      671 	then do;					/*   type of request type in iod_tables		*/
      672 	     call iod_info_$generic_type (O.request_type, gen_type, code);
      673 	     if code ^= 0
      674 	     then go to UNDEFINED_REQUEST_TYPE;
      675 	     do Ntype = DP_PRINT to DP_PLOT while (gen_type ^= DEFAULT_RQT (Ntype));
      676 	     end;
      677 	     if Ntype > DP_PLOT
      678 	     then go to UNDEFINED_GENERIC_TYPE;
      679 	end;
      680 
      681 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      682 /*									*/
      683 /* At this point in PASS 1, we may or may not know the generic type, depending upon	*/
      684 /* whether or not the user gave a -default_name or -request_type control argument.  If	*/
      685 /* we know the generic type, we must examine other control args to be sure they are	*/
      686 /* consistent with that generic type.  If we don't know the generic type, we must	*/
      687 /* examine other control args to see if any specific to a particular type were given	*/
      688 /* (eg, -print, -punch, -plot, -end_page, etc).  If all else fails, assume -print.	*/
      689 /*									*/
      690 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      691 
      692 	Ntypes_set = 0;
      693 	if N.output_module > PRINT |			/* -7punch, -mcc, -raw given.			*/
      694 	     N.pt_pch = DP_PUNCH |			/* -punch given				*/
      695 	     Ntype = DP_PUNCH
      696 	then do;					/* punch generic type found from -request_type	*/
      697 	     Ntype = DP_PUNCH;
      698 	     Ntypes_set = Ntypes_set + 1;
      699 	end;
      700 	if N.pt_pch = DP_PRINT |			/* -print given.				*/
      701 	     Ntype = DP_PRINT |			/* print generic type found from -request_type	*/
      702 	     S.nep | S.single | S.non_edited | S.truncate |
      703 						/* other printer-oriented control args.		*/
      704 	     S.label.top | S.label.bottom | S.label.access | N.lmargin > 0 | N.line_lth > 0 | N.page_lth > 0
      705 	     | O.forms_name ^= ""
      706 	then do;
      707 	     Ntype = DP_PRINT;
      708 	     Ntypes_set = Ntypes_set + 1;
      709 	end;
      710 	if N.pt_pch = DP_PLOT |			/* -plot given.				*/
      711 	     Ntype = DP_PLOT
      712 	then do;					/* plotter generic type found from -request_type	*/
      713 	     Ntype = DP_PLOT;
      714 	     Ntypes_set = Ntypes_set + 1;
      715 	end;
      716 
      717 	if Ntypes_set = 0
      718 	then					/* If all else fails, assume -print.		*/
      719 	     Ntype = DP_PRINT;
      720 	else if Ntypes_set = 1
      721 	then ;
      722 	else					/* If some inconsistency found, abort.		*/
      723 	     go to INCONSISTENT_PRINT_PUNCH_PLOT;	/* END OF PASS 1.  Generic type of request has now */
      724 	N.pt_pch = Ntype;				/* been determined, and is stored in Ntype.	*/
      725 
      726 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      727 /*									*/
      728 /* If caller gave -set_default_request_type, then set the default request type name in	*/
      729 /* the header, being sure that defaults for that request type are actually defined.	*/
      730 /*									*/
      731 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      732 
      733 	if O.default_request_type ^= ""
      734 	then do;
      735 	     call find_default (O.default_request_type, "", Ntype, FALSE, FALSE, warn_count, Pdefault);
      736 
      737 	     if Pdefault = null & (O.name_of_default ^= O.request_type | O.default_request_type ^= O.request_type)
      738 	     then go to DEFAULT_RQT_NOT_DEFINED;
      739 
      740 	     default_header.default_request_type (Ntype) = O.default_request_type;
      741 	     call value_$set_data (DEFAULT_VALUE_SEG, PERM, "eor._", Pdefault_header, currentsize (default_header),
      742 		null, null, 0, code);
      743 	     if code ^= 0
      744 	     then go to STORE_FAILURE;
      745 	end;
      746 
      747 	if O.request_type = ""
      748 	then					/* Use default request type if -rqt not given.	*/
      749 	     O.request_type = default_header.default_request_type (Ntype);
      750 
      751 	if O.name_of_default = ""
      752 	then					/* If -default_name not given, use request type 	*/
      753 	     O.name_of_default = O.request_type;	/*   as the name.				*/
      754 
      755 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      756 /*									*/
      757 /* At this point, we definitely have the name of the request type to be used.  Find	*/
      758 /* defaults for this request type.  The defaults can be user-defined or (if the user has	*/
      759 /* not defined defaults for this request type) they may have to be built just for this	*/
      760 /* invocation.								*/
      761 /*									*/
      762 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      763 
      764 	Sdefault_is_stored = TRUE;
      765 	call find_default (O.name_of_default, O.request_type, N.pt_pch, S.set_default | S.replace_default,
      766 	     (S.pathnames), warn_count, Pdefault);
      767 	if Pdefault = null
      768 	then do;					/* User default not set.  Get system values.	*/
      769 	     Pdefault = addr (auto_default);
      770 	     call init_default (Pdefault, O.name_of_default, O.request_type, N.pt_pch);
      771 	     Sdefault_is_stored = FALSE;
      772 	end;
      773 
      774 	if S.replace_default
      775 	then do;					/* For -replace_defaults, reinitialize defaults.	*/
      776 	     call init_default (Pdefault, O.name_of_default, O.request_type, N.pt_pch);
      777 	     S.set_default = TRUE;
      778 	end;
      779 
      780 	if Ntype = DP_PRINT
      781 	then do;					/* Apply user-defined defaults to argument 	*/
      782 	     S = default_print.Sdft, by name;		/*   structures.				*/
      783 	     N = default_print.Ndft, by name;
      784 	     O = default_print.Odft, by name;
      785 	     PLS_struc = default_print.LSV.fixed_part, by name;
      786 	     PLS_struc.heading.P = addr (default_print.LSV.V.heading);
      787 	     PLS_struc.destination.P = addr (default_print.LSV.V.destination);
      788 	     PLS_struc.top_label.P = addr (default_print.LSV.V.top_label);
      789 	     PLS_struc.bottom_label.P = addr (default_print.LSV.V.bottom_label);
      790 	end;
      791 	else do;
      792 	     S = default_punch.Sdft, by name;
      793 	     N = default_punch.Ndft, by name;
      794 	     O = default_punch.Odft, by name;
      795 	     PLS_struc = default_punch.LSV.fixed_part, by name;
      796 	     PLS_struc.heading.P = addr (default_punch.LSV.V.heading);
      797 	     PLS_struc.destination.P = addr (default_punch.LSV.V.destination);
      798 	end;
      799 
      800 	Sgive_label_warning = FALSE;			/* MIDDLE OF PASS 2.  Apply user-specified 	*/
      801 	Sgive_nep_warning = FALSE;			/*   control args to override the defaults.	*/
      802 
      803 	if S.non_path_ctl_args
      804 	then					/* Parse arguments for PASS 2.		*/
      805 	     call proc_args (FALSE, Nqueued);
      806 
      807 
      808 	if O.request_type = default_print.name
      809 	then					/* If the -default_name control arg was omitted,	*/
      810 						/*   then its value came from -rqt control arg	*/
      811 						/*   (or from default_header).  The same is true	*/
      812 						/*   if -request_type was omitted.  In both cases, */
      813 	     if S.dnm_or_rqt_omitted
      814 	     then					/*   use real request type associated with this 	*/
      815 		O.request_type = default_print.request_type;
      816 						/*   group of user-defined defaults.		*/
      817 
      818 	if ^S.dnm_or_rqt_omitted
      819 	then					/* If both -request_type and -default_name were	*/
      820 	     if O.request_type ^= default_print.request_type & ^(S.set_default | S.replace_default)
      821 	     then					/*   given and we're not setting/replacing the	*/
      822 		go to INCONSISTENT_DNM_RQT_ARGS;	/*   defaults, and the given request type differs */
      823 						/*   from the one stored with the defaults assoc. */
      824 						/*   with the group identified by -default_name,	*/
      825 						/*   then complain about the inconsistency.	*/
      826 
      827 	if N.queue = 0
      828 	then do;					/* Make sure request type is defined.		*/
      829 	     call iod_info_$queue_data (O.request_type, 0, 0, code);
      830 	     if code ^= 0
      831 	     then do;
      832 		if (S.print_default | S.list_defaults | S.delete_default) & ^S.pathnames
      833 		then ;
      834 		else go to DEFAULT_QUEUE_UNDEFINED;
      835 	     end;
      836 	end;
      837 	else do;					/* If user gave a queue, make sure this request	*/
      838 	     call iod_info_$queue_data (O.request_type, 0, max_q, code);
      839 	     if code ^= 0
      840 	     then do;				/*   type defines that queue.			*/
      841 		if (S.print_default | S.list_defaults | S.delete_default) & ^S.pathnames
      842 		then ;
      843 		else go to MAX_QUEUE_UNDEFINED;
      844 	     end;
      845 	     else if N.queue > max_q
      846 	     then go to MAX_QUEUE_EXCEEDED;
      847 	end;
      848 
      849 	if N.copies = 0
      850 	then					/* Set default copy count.			*/
      851 	     N.copies = 1;
      852 	else if N.copies > MAX_COPIES
      853 	then do;
      854 	     call ioa_ ("Warning: -copies ^d is too large.  -copies ^d will be used instead.", N.copies, MAX_COPIES);
      855 	     N.copies = MAX_COPIES;
      856 	end;
      857 
      858 	if Ntype = DP_PRINT
      859 	then do;					/* Check printer-related items.		*/
      860 	     N.output_module = PRINT;
      861 	     if N.line_lth > MAX_LINE_LENGTH
      862 	     then go to MAX_LINE_LENGTH_EXCEEDED;
      863 	     if N.line_lth > 0
      864 	     then if N.lmargin >= N.line_lth
      865 		then go to INDENT_INCONSISTENT_WITH_LINE_LENGTH;
      866 	     if N.lmargin >= MAX_LINE_LENGTH
      867 	     then go to MAX_INDENT_EXCEEDED;
      868 
      869 	     input_forms_string_length = length (rtrim (O.forms_name));
      870 	     allocate validate_forms_info_input in (area);
      871 	     validate_forms_info_input.version = VALIDATE_FORMS_INFO_INPUT_VERSION_1;
      872 	     validate_forms_info_input.request_type = O.request_type;
      873 	     validate_forms_info_input.user_area_ptr = Parea;
      874 	     validate_forms_info_input.max_forms_string_length = 64;
      875 	     validate_forms_info_input.forms_string = rtrim (O.forms_name);
      876 	     call iod_info_$validate_forms_info (validate_forms_info_input_ptr, validate_forms_info_output_ptr, code);
      877 	     if code ^= 0
      878 	     then if code ^= error_table_$no_forms_table_defined
      879 		then go to ERROR_VALIDATING_FORM;
      880 	     if N.line_lth > validate_forms_info_output.chars_per_line
      881 	     then call ioa_ ("Warning: Specified line length (^d) is greater than request type maximum of ^d.",
      882 		     N.line_lth, validate_forms_info_output.chars_per_line);
      883 	     if N.page_lth > validate_forms_info_output.lines_per_page
      884 	     then call ioa_ ("Warning: Specified page length (^d) is greater than request type maximum of ^d.",
      885 		     N.page_lth, validate_forms_info_output.lines_per_page);
      886 	     if O.forms_name ^= "" & ^validate_forms_info_output.forms_allowed
      887 	     then call ioa_ (
      888 		     "Warning:^-The ^a request type does not support user specified forms.^/^-The forms specified may be ignored.",
      889 		     O.request_type);
      890 	     if validate_forms_info_output.forms_length ^= 0
      891 	     then if validate_forms_info_output.returned_forms ^= O.forms_name
      892 		then O.forms_name = validate_forms_info_output.returned_forms;
      893 	end;					/* END OF PASS 2.				*/
      894 
      895 
      896 	if S.set_default
      897 	then do;					/* Set user-defined group of defaults, based upon */
      898 	     if Ntype = DP_PRINT
      899 	     then do;				/*   current control arguments.		*/
      900 		allocate default_print in (area) set (Pnew_default);
      901 		Pnew_default -> default_print.header = default_print.header;
      902 		Pnew_default -> default_print.size = currentsize (Pnew_default -> default_print);
      903 		Pnew_default -> default_print.Sdft = S, by name;
      904 		Pnew_default -> default_print.Ndft = N, by name;
      905 		Pnew_default -> default_print.Odft.request_type = O.request_type;
      906 		Pnew_default -> default_print.Odft.forms_name =
      907 		     substr (O.forms_name, 1, length (Pnew_default -> default_print.Odft.forms_name));
      908 		Pnew_default -> default_print.LSV.fixed_part = PLS_struc, by name;
      909 		Pnew_default -> default_print.LSV.V.heading = PLS_heading;
      910 		Pnew_default -> default_print.LSV.V.destination = PLS_destination;
      911 		Pnew_default -> default_print.LSV.V.top_label = PLS_top_label;
      912 		Pnew_default -> default_print.LSV.V.bottom_label = PLS_bottom_label;
      913 	     end;
      914 	     else do;
      915 		allocate default_punch in (area) set (Pnew_default);
      916 		Pnew_default -> default_punch.header = default_punch.header;
      917 		Pnew_default -> default_punch.size = currentsize (Pnew_default -> default_punch);
      918 		Pnew_default -> default_punch.Sdft = S, by name;
      919 		Pnew_default -> default_punch.Ndft = N, by name;
      920 		Pnew_default -> default_punch.Odft = O, by name;
      921 		Pnew_default -> default_punch.LSV.fixed_part = PLS_struc, by name;
      922 		Pnew_default -> default_punch.LSV.V.heading = PLS_heading;
      923 		Pnew_default -> default_punch.LSV.V.destination = PLS_destination;
      924 	     end;
      925 	     call free_default (Pdefault);		/* small window here where cleanup would not free	*/
      926 	     Pdefault_temp = Pnew_default;		/*   new defaults storage.  This is better then	*/
      927 	     Pnew_default = null;			/*   trying to free same storage twice.		*/
      928 	     Pdefault = Pdefault_temp;
      929 
      930 	     call value_$set_data (DEFAULT_VALUE_SEG, PERM, dft_name$given_ptr (Pdefault), Pdefault, default_print.size,
      931 		null, null, 0, code);
      932 	     if code ^= 0
      933 	     then go to STORE_FAILURE;
      934 	end;
      935 
      936 	if N.queue = 0
      937 	then do;					/* Get default queue for request type, if needed.	*/
      938 	     call iod_info_$queue_data (O.request_type, N.queue, 0, code);
      939 	end;
      940 
      941 	if S.pathnames
      942 	then do;
      943 	     if warn_count > 0
      944 	     then call ioa_ ("^/Warning: no eor defaults are defined for the ^a request type.", O.request_type);
      945 	     dpap = addr (dprint_arg_buf);		/* overlay storage space with dprint arg structure */
      946 	     dprint_arg.version = dprint_arg_version_10;	/* initialize the structure.			*/
      947 	     dprint_arg.dest = "";
      948 	     dprint_arg.carriage_control = FALSE;
      949 	     dprint_arg.pad (*) = 0;
      950 	     dprint_arg.forms, dprint_arg.form_name, dprint_arg.forms_name = "";
      951 	     dprint_arg.class = "";
      952 	     dprint_arg.bit_count = 0;
      953 	     dprint_arg.chan_stop_path = "";
      954 	     dprint_arg.carriage_control = S.carriage_control, by name;
      955 	     dprint_arg = N, by name;
      956 	     dprint_arg.request_type = O.request_type;
      957 	     dprint_arg.forms_name = substr (O.forms_name, 1, length (dprint_arg.forms_name));
      958 	     Nqueued = 0;				/* initialize operand counter.		*/
      959 	     call proc_args (TRUE, Nqueued);
      960 EXIT:
      961 	     call print_totals (Nqueued);
      962 	end;
      963 	else if S.set_default | S.print_default | S.list_defaults | S.delete_default | O.default_request_type ^= ""
      964 	then ;
      965 	else do;
      966 	     Nqueued = 0;
      967 	     call print_totals (Nqueued);		/* END OF PASS 3.				*/
      968 	end;
      969 
      970 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      971 /*									*/
      972 /* The following code handles -print_defaults, -delete_defaults, -list_defaults and -all. */
      973 /*									*/
      974 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      975 
      976 	if S.delete_default
      977 	then do;
      978 	     if Sdefault_is_stored
      979 	     then do;
      980 		if S.print_default & ^S.all
      981 		then do;				/* For some reason, user wants to print the 	*/
      982 		     call print_defaults (Pdefault, Sdefault_is_stored);
      983 		     S.print_default = FALSE;		/*   defaults he is deleting.			*/
      984 		end;
      985 		call delete_default (Pdefault);
      986 	     end;
      987 	     else call ioa_ ("^/^a user defaults are not defined.", default_print.name);
      988 	end;
      989 
      990 	if S.print_default
      991 	then do;
      992 	     if S.all
      993 	     then do;
      994 		if ^Sdefault_is_stored
      995 		then call print_defaults (Pdefault, Sdefault_is_stored);
      996 		call list_defaults (TRUE);
      997 	     end;
      998 	     else do;
      999 		call print_defaults (Pdefault, Sdefault_is_stored);
     1000 		call ioa_ ("");
     1001 	     end;
     1002 	end;
     1003 	if S.list_defaults
     1004 	then do;
     1005 	     call list_defaults (FALSE);
     1006 	     call ioa_ ("");
     1007 	end;
     1008 
     1009 FINISH:
     1010 	call janitor ();
     1011 	return;
     1012 
     1013 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1014 
     1015 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1016 
     1017 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1018 /*									*/
     1019 /*		O  T  H  E  R        E  N  T  R  Y        P  O  I  N  T  S		*/
     1020 /*									*/
     1021 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1022 
     1023 default_count:
     1024      entry (ANrequest_types);
     1025 
     1026 
     1027 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1028 /*									*/
     1029 /* This entry point returns a count of the user-defined request types known to		*/
     1030 /* enter_output_request.  It is an internal interface called by print_request_types	*/
     1031 /* command to all prt to factor user-defined request types into its output.		*/
     1032 /*									*/
     1033 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1034 
     1035 
     1036 dcl  ANrequest_types fixed bin;			/* number of user-defined groups of default eor	*/
     1037 						/*   control arg settings.			*/
     1038 
     1039 	ANrequest_types = 0;
     1040 	call init ();
     1041 	on cleanup call janitor ();
     1042 
     1043 	call find_default_header ();
     1044 	if Pdefault_header = null
     1045 	then go to FINISH;
     1046 
     1047 	mi.name (1) = dft_name$given_name ("**.*");
     1048 	call value_$list_data_names (DEFAULT_VALUE_SEG, PERM, addr (mi), Parea, value_list_info_ptr, code);
     1049 	do Idft = 1 to value_list_info.pair_count;
     1050 	     call free_default (Pdefault);
     1051 	     call value_$get_data (DEFAULT_VALUE_SEG, PERM,
     1052 		substr (value_list_info.chars, value_list_info.pairs (Idft).name_index,
     1053 		value_list_info.pairs (Idft).name_len), Parea, Pdefault, 0, code);
     1054 	     if default_print.Ntype ^= UNDEFINED
     1055 	     then ANrequest_types = ANrequest_types + 1;
     1056 	end;
     1057 	go to FINISH;
     1058 
     1059 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1060 
     1061 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1062 
     1063 
     1064 default_request_type:
     1065      entry (Agen_type, Arequest_type, Adefault_q, Amax_q, Acode);
     1066 
     1067 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1068 /*									*/
     1069 /* This entry point is called by cor/lor/mor to get the user-defined default request	*/
     1070 /* type (actually the system-defined target for a user request type) for a particular	*/
     1071 /* generic type of I/O Daemon queue, along with the user-defined default queue and	*/
     1072 /* system-defined max queue numbers for that request type.				*/
     1073 /*									*/
     1074 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1075 
     1076 dcl  Agen_type char (*),				/* Generic type for which default is wanted. (In) */
     1077      Arequest_type char (*),				/* Default request type for that gen type. (Out)	*/
     1078      Adefault_q fixed bin,				/* User-defined default queue for that rqt. (Out) */
     1079      Amax_q fixed bin;				/* System-defined max queue for that rqt. (Out)	*/
     1080 
     1081 	Acode = 0;				/* Provide defaults when all else fails.	*/
     1082 	Adefault_q = 3;
     1083 	Amax_q = 4;
     1084 	Arequest_type = Agen_type;
     1085 
     1086 	call init ();
     1087 	do Ntype = DP_PRINT to DP_PLOT		/* Convert generic type string to a number.	*/
     1088 	     while (Agen_type ^= DEFAULT_RQT (Ntype));
     1089 	end;
     1090 	if Ntype <= DP_PLOT
     1091 	then do;					/* if printer/punch/plotter, get user-defined	*/
     1092 	     on cleanup call janitor ();		/*   default request type info.		*/
     1093 	     call find_default_header ();
     1094 	     if Pdefault_header = null
     1095 	     then go to FINISH;
     1096 	     O.name_of_default = default_header.default_request_type (Ntype);
     1097 	     call find_default (O.name_of_default, "", Ntype, FALSE, FALSE, warn_count, Pdefault);
     1098 	     if Pdefault = null
     1099 	     then do;				/* user-defined default info does not exist.	*/
     1100 		O.request_type = O.name_of_default;	/*   This is probably an inconsistency in user's	*/
     1101 		call iod_info_$queue_data (O.request_type, Adefault_q, Amax_q, Acode);
     1102 						/*   eor values in the value segment.		*/
     1103 	     end;
     1104 	     else do;				/* user-defined default info does exist.	*/
     1105 		O.request_type = default_print.Odft.request_type;
     1106 		if default_print.Ntype = DP_PRINT
     1107 		then Adefault_q = default_print.Ndft.queue;
     1108 		else Adefault_q = default_punch.Ndft.queue;
     1109 		if Adefault_q = 0
     1110 		then call iod_info_$queue_data (O.request_type, Adefault_q, Amax_q, Acode);
     1111 		else call iod_info_$queue_data (O.request_type, 0, Amax_q, Acode);
     1112 	     end;
     1113 	     Arequest_type = O.request_type;
     1114 	end;
     1115 	else					/* Not a generic type handled by eor.		*/
     1116 	     call iod_info_$queue_data (Arequest_type, Adefault_q, Amax_q, Acode);
     1117 	go to FINISH;
     1118 
     1119 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1120 
     1121 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1122 
     1123 
     1124 list_defaults:
     1125      entry (AParea, APeor_defaults, Acode);
     1126 
     1127 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1128 /*									*/
     1129 /* This entry point fills in the eor_defaults structure (shown below) with information	*/
     1130 /* about the user-defined default groups of control arg settings known to eor.  It is	*/
     1131 /* called by print_request_types to factor user-defined requests into prt output.	*/
     1132 /*									*/
     1133 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1134 
     1135 dcl  AParea ptr,
     1136      APeor_defaults ptr,
     1137      Acode fixed bin (35);
     1138 
  1     1 /*  START OF:	eor_defaults.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1     2 
  1     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1     4 	/*									*/
  1     5 	/* This include file declares data items that are returned by the internal entry point,	*/
  1     6 	/* enter_output_request$list_defaults.						*/
  1     7 	/*									*/
  1     8 	/* Status:								*/
  1     9 	/* 0) Created:   December 28, 1981 by Gary Dixon					*/
  1    10 	/*									*/
  1    11 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    12 
  1    13     dcl	1 eor_defaults		aligned based(Peor_defaults),
  1    14 	  2 header,
  1    15 	    3 version		fixed bin,
  1    16 	    3 N			fixed bin,	/* Number of request types for which eor has	*/
  1    17 						/*   default control argument settings.		*/
  1    18 	  2 request_type (Nrequest_types refer (eor_defaults.N)),
  1    19 						/* For each request type:			*/
  1    20 	    3 name		char(24),		/*   user-defined name for the request type.	*/
  1    21 	    3 generic_type		char(24),		/*   generic type (ie, printer, punch, plotter)	*/
  1    22 	    3 Sdefault		bit(1),		/*   ON if this is default request type for the	*/
  1    23 						/*     generic type.			*/
  1    24 	    3 target_request_type_name		/*   actual request type associated with the	*/
  1    25 				char(24),		/*     user-defined request type name.		*/
  1    26 	Nrequest_types		fixed bin,
  1    27 	Peor_defaults		ptr,
  1    28 	Veor_defaults_1		fixed bin int static options(constant) init(1);
  1    29 
  1    30 /*  END OF:	eor_defaults.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1139 
     1140 
     1141 	Acode = 0;
     1142 	call init ();
     1143 	on cleanup call janitor ();
     1144 
     1145 	call find_default_header ();
     1146 	if Pdefault_header = null
     1147 	then go to FINISH;
     1148 
     1149 	mi.name (1) = dft_name$given_name ("**.*");
     1150 	call value_$list_data_names (DEFAULT_VALUE_SEG, PERM, addr (mi), Parea, value_list_info_ptr, code);
     1151 
     1152 	if AParea ^= null
     1153 	then do;					/* Allocate structure in user-supplied area.	*/
     1154 	     call default_count (Nrequest_types);
     1155 	     allocate eor_defaults in (AParea -> area) set (APeor_defaults);
     1156 	     Peor_defaults = APeor_defaults;
     1157 	     eor_defaults.version = Veor_defaults_1;
     1158 	end;
     1159 	else do;					/* Use user-supplied automatic storage for struc. */
     1160 	     Peor_defaults = APeor_defaults;
     1161 	     if eor_defaults.version ^= Veor_defaults_1
     1162 	     then do;
     1163 		Acode = error_table_$unimplemented_version;
     1164 		go to FINISH;
     1165 	     end;
     1166 	     call default_count (Nrequest_types);
     1167 	     if eor_defaults.N < Nrequest_types
     1168 	     then do;
     1169 		Acode = error_table_$too_many_names;
     1170 		go to FINISH;
     1171 	     end;
     1172 	     eor_defaults.N = 0;
     1173 	end;
     1174 
     1175 	do Idft = 1 to value_list_info.pair_count;	/* Fill in the structure.			*/
     1176 	     call free_default (Pdefault);
     1177 	     call value_$get_data (DEFAULT_VALUE_SEG, PERM,
     1178 		substr (value_list_info.chars, value_list_info.pairs (Idft).name_index,
     1179 		value_list_info.pairs (Idft).name_len), Parea, Pdefault, 0, code);
     1180 	     if default_print.Ntype ^= UNDEFINED
     1181 	     then do;
     1182 		eor_defaults.N = eor_defaults.N + 1;
     1183 		eor_defaults.request_type (eor_defaults.N).name = default_print.name;
     1184 		eor_defaults.request_type (eor_defaults.N).generic_type = DEFAULT_RQT (default_print.Ntype);
     1185 		eor_defaults.request_type (eor_defaults.N).Sdefault =
     1186 		     default_print.name = default_header.default_request_type (default_print.Ntype);
     1187 		eor_defaults.request_type (eor_defaults.N).target_request_type_name = default_print.Odft.request_type;
     1188 	     end;
     1189 	end;
     1190 	go to FINISH;
     1191 
     1192 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1193 
     1194 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1195 
     1196 
     1197 request_type:
     1198      entry (Arqt_in, Agen_type, Arequest_type, Adefault_q, Amax_q, Acode);
     1199 
     1200 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1201 /*									*/
     1202 /* This entry point is called by cor/lor/mor to convert a user-specified request type	*/
     1203 /* name into a system request type with appropriate user-defined default queue number,	*/
     1204 /* system-defined max queue number and generic type.				*/
     1205 /*									*/
     1206 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1207 
     1208 dcl  Arqt_in char (*);
     1209 
     1210 	Acode = 0;
     1211 	Adefault_q = 3;
     1212 	Amax_q = 4;
     1213 
     1214 	call init ();
     1215 	on cleanup call janitor ();
     1216 	call find_default_header ();
     1217 	if Pdefault_header = null
     1218 	then go to FINISH;
     1219 
     1220 	call find_default (Arqt_in, "", 0, FALSE, FALSE, warn_count, Pdefault);
     1221 	if Pdefault = null
     1222 	then do;					/* Not a user-defined request type.  Give system	*/
     1223 	     Arequest_type = Arqt_in;			/*   values for gen_type, default_q, max_q.	*/
     1224 	     call iod_info_$generic_type (Arequest_type, gen_type, Acode);
     1225 	     if Acode ^= 0
     1226 	     then go to FINISH;
     1227 	     Agen_type = gen_type;
     1228 	     call iod_info_$queue_data (Arequest_type, Adefault_q, Amax_q, Acode);
     1229 	end;
     1230 	else do;					/* Use user-defined values for gen_type, 	*/
     1231 	     Agen_type = DEFAULT_RQT (default_print.Ntype);
     1232 						/*   default_q, and system value for max_q.	*/
     1233 	     Arequest_type = default_print.Odft.request_type;
     1234 	     if default_print.Ntype = DP_PRINT
     1235 	     then Adefault_q = default_print.Ndft.queue;
     1236 	     else Adefault_q = default_punch.Ndft.queue;
     1237 	     if Adefault_q = 0
     1238 	     then call iod_info_$queue_data (default_print.Odft.request_type, Adefault_q, Amax_q, Acode);
     1239 	     else call iod_info_$queue_data (default_print.Odft.request_type, 0, Amax_q, Acode);
     1240 	end;
     1241 	go to FINISH;
     1242 
     1243 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1244 
     1245 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1246 
     1247 
     1248 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1249 /*									*/
     1250 /* 		I  N  T  E  R  N  A  L        P  R  O  C  E  D  U  R  E  S		*/
     1251 /*									*/
     1252 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1253 
     1254 
     1255 dft_name$given_ptr:
     1256      proc (Pd) returns (char (30));
     1257 
     1258 dcl  Pd ptr;
     1259 
     1260 dcl  1 d aligned like default_print.header based (Pd),
     1261      name char (30) varying;
     1262 
     1263 	name = "eor.";
     1264 	name = name || rtrim (d.name);
     1265 	name = name || "._";
     1266 	return (name);
     1267 
     1268 
     1269 dft_name$given_name:
     1270      entry (Aname) returns (char (30));
     1271 
     1272 dcl  Aname char (*);
     1273 
     1274 	name = "eor.";
     1275 	name = name || rtrim (Aname);
     1276 	name = name || "._";
     1277 	return (name);
     1278 
     1279      end dft_name$given_ptr;
     1280 
     1281 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1282 
     1283 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1284 
     1285 
     1286 delete_default:
     1287      proc (Pd);
     1288 
     1289 dcl  Pd ptr;
     1290 
     1291 dcl  Pnew_default ptr,
     1292      1 d aligned like default_print.header based (Pd);
     1293 
     1294 	if default_header.default_request_type (Ntype) = d.name
     1295 	then do;
     1296 	     default_header.default_request_type (Ntype) = DEFAULT_RQT (Ntype);
     1297 	     Pnew_default = null;
     1298 	     on cleanup call free_default (Pnew_default);
     1299 	     call find_default (DEFAULT_RQT (Ntype), DEFAULT_RQT (Ntype), Ntype, TRUE, FALSE, warn_count, Pnew_default);
     1300 	     call free_default (Pnew_default);		/* Make sure defaults exist for this generic type. */
     1301 	     call value_$set_data (DEFAULT_VALUE_SEG, PERM, "eor._", Pdefault_header, currentsize (default_header),
     1302 		null, null, 0, code);
     1303 	     if code ^= 0
     1304 	     then go to STORE_FAILURE;		/* Store new default_header.			*/
     1305 	end;
     1306 
     1307 	call value_$set_data (DEFAULT_VALUE_SEG, PERM, dft_name$given_ptr (Pd), null, 0, null, null, 0, code);
     1308 	if code ^= 0
     1309 	then go to DELETE_FAILURE;
     1310 
     1311      end delete_default;
     1312 
     1313 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1314 
     1315 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1316 
     1317 
     1318 find_default:
     1319      proc (name, rqt, Ntype, Screate, Sset_warn_count, warn_count, Pd);
     1320 
     1321 dcl  name char (*),
     1322      rqt char (*),
     1323      Ntype fixed bin,
     1324      Screate bit (1),
     1325      Sset_warn_count bit (1),
     1326      warn_count fixed bin,
     1327      Pd ptr;
     1328 
     1329 dcl  Syes bit (1),
     1330      1 d aligned like default_print.header based (Pd),
     1331      size builtin;
     1332 
     1333 	warn_count = 0;
     1334 	if Pd ^= null
     1335 	then if d.name ^= name
     1336 	     then call free_default (Pd);
     1337 	if Pd = null
     1338 	then call value_$get_data (DEFAULT_VALUE_SEG, PERM, dft_name$given_name (name), Parea, Pd, 0, code);
     1339 	else code = 0;
     1340 
     1341 	if code = 0
     1342 	then do;
     1343 	     if d.Ntype = UNDEFINED
     1344 	     then do;
     1345 		if Screate | ^Sset_warn_count
     1346 		then do;
     1347 		     call free_default (Pd);
     1348 		     code = error_table_$noentry;
     1349 		end;
     1350 		else do;				/* Issue warning that no user defaults defined.	*/
     1351 		     warn_count, d.size = d.size + 1;
     1352 		     if d.size > 3
     1353 		     then do;
     1354 			call free_default (Pd);
     1355 			code = error_table_$out_of_bounds;
     1356 			warn_count = 0;
     1357 			call ioa_ ("^/Setting user defaults for ^a request type to system default values.
     1358 No more warnings will be issued.", name);
     1359 		     end;
     1360 		     else do;
     1361 			call value_$set_data (DEFAULT_VALUE_SEG, PERM, dft_name$given_ptr (Pd), Pd, size (d), null,
     1362 			     null, 0, code);
     1363 			if code ^= 0
     1364 			then go to STORE_FAILURE;
     1365 			call free_default (Pd);
     1366 			code = error_table_$noentry;
     1367 		     end;
     1368 		end;
     1369 	     end;
     1370 	end;
     1371 	else if code ^= 0 & Sset_warn_count & ^Screate
     1372 	then do;
     1373 	     Pd = addr (auto_default);
     1374 	     d.name = name;
     1375 	     d.Ntype = UNDEFINED;
     1376 	     d.size = 1;
     1377 	     call value_$set_data (DEFAULT_VALUE_SEG, PERM, dft_name$given_ptr (Pd), Pd, size (d), null, null, 0, code);
     1378 	     if code ^= 0
     1379 	     then go to STORE_FAILURE;
     1380 	     code = error_table_$noentry;
     1381 	     warn_count = 1;
     1382 	     Pd = null;
     1383 	end;
     1384 
     1385 	if code ^= 0
     1386 	then do;
     1387 	     if ^Screate & code ^= error_table_$out_of_bounds
     1388 	     then do;
     1389 		Pd = null;
     1390 		return;
     1391 	     end;
     1392 	     Pd = addr (auto_default);
     1393 	     call init_default (Pd, name, rqt, Ntype);
     1394 	     call value_$set_data (DEFAULT_VALUE_SEG, PERM, dft_name$given_ptr (Pd), Pd, d.size, null, null, 0, code);
     1395 	     if code ^= 0
     1396 	     then go to STORE_FAILURE;
     1397 	end;
     1398 	else do;
     1399 	     if Ntype ^= UNDEFINED & d.Ntype ^= Ntype
     1400 	     then do;
     1401 		if Screate
     1402 		then do;
     1403 		     call command_query_$yes_no (Syes, 0, proc, "yes, y
     1404    change the generic type of ^a to ^3s^[printer^;punch^;plotter^]
     1405 no, n
     1406    do not change the generic type of ^a to ^[printer^;punch^;plotter^].
     1407    Instead, exit the eor command without doing anything.
     1408 
     1409 Change the generic type?", "The ^a eor default already exists, and is a^[
     1410 ^; ^]^[printer^;punch^;plotter^] generic type.^[
     1411 ^;  ^]Do you want to change its generic type to ^[printer^;punch^;plotter^]?", name, ll_query () < 90, d.Ntype,
     1412 			ll_query () >= 90, Ntype, name, Ntype);
     1413 		     if Syes
     1414 		     then do;
     1415 			call free_default (Pd);
     1416 			Pd = addr (auto_default);
     1417 			call init_default (Pd, name, rqt, Ntype);
     1418 			call value_$set_data (DEFAULT_VALUE_SEG, PERM, dft_name$given_ptr (Pd), Pd, d.size, null,
     1419 			     null, 0, code);
     1420 			if code ^= 0
     1421 			then go to STORE_FAILURE;
     1422 		     end;
     1423 		     else go to FINISH;
     1424 		end;
     1425 		else do;
     1426 		     call com_err_ (error_table_$inconsistent, proc, "^[-print^;-punch^;-plot^]
     1427 cannot be used with the ^a eor defaults, which are ^[printer^;punch^;plotter^] defaults.", Ntype, name, d.Ntype);
     1428 		     go to FINISH;
     1429 		end;
     1430 	     end;
     1431 	end;
     1432 
     1433      end find_default;
     1434 
     1435 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1436 
     1437 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1438 
     1439 
     1440 find_default_header:
     1441      proc;
     1442 
     1443 dcl  Idft fixed bin,
     1444      header char (6),
     1445      old_header char (28);
     1446 
     1447 	header = "eor._";				/* Name of default_header structure value.	*/
     1448 
     1449 REFIND_HEADER:
     1450 	call value_$get_data (DEFAULT_VALUE_SEG, PERM, header, Parea, Pdefault_header, 0, code);
     1451 	if code = error_table_$oldnamerr
     1452 	then do;
     1453 	     old_header = rtrim (person) || ".eor._";
     1454 	     call value_$get_data (DEFAULT_VALUE_SEG, PERM, old_header, Parea, Pdefault_header, 0, code);
     1455 	end;
     1456 	if code = error_table_$oldnamerr
     1457 	then do;
     1458 	     Pdefault_header = addr (auto_default_header);
     1459 	     default_header.version = Vdefault_header_10;
     1460 	     do Idft = DP_PRINT to DP_PLOT;
     1461 		default_header.default_request_type (Idft) = DEFAULT_RQT (Idft);
     1462 		Pdefault = addr (auto_default);
     1463 		call init_default (Pdefault, DEFAULT_RQT (Idft), DEFAULT_RQT (Idft), Idft);
     1464 		call value_$set_data (DEFAULT_VALUE_SEG, PERM, dft_name$given_ptr (Pdefault), Pdefault,
     1465 		     default_print.size, null, null, 0, code);
     1466 		if code ^= 0
     1467 		then go to STORE_FAILURE;
     1468 	     end;
     1469 	     call value_$set_data (DEFAULT_VALUE_SEG, PERM, header, Pdefault_header, currentsize (default_header), null,
     1470 		null, 0, code);
     1471 	     if code ^= 0
     1472 	     then go to STORE_FAILURE;
     1473 	end;
     1474 
     1475 	else if code = error_table_$noentry
     1476 	then do;
     1477 	     call value_$set_path (value_seg_path, TRUE, code);
     1478 	     if code = 0
     1479 	     then go to REFIND_HEADER;
     1480 	     else do;
     1481 		call com_err_ (code, proc, "Creating default value segment
     1482 (^a).", value_seg_path);
     1483 		go to FINISH;
     1484 	     end;
     1485 	end;
     1486 
     1487 	else if code ^= 0
     1488 	then do;
     1489 	     call com_err_ (code, proc, "^[^/^]Getting defaults from value segment
     1490 (^a).", ll_err () < 100, value_seg_path);
     1491 	     Pdefault_header = null;
     1492 	     return;
     1493 	end;
     1494 
     1495 	if default_header.version = Vdefault_header_5
     1496 	then do;
     1497 	     call eor_cv5_6_ (addr (default_header), code);
     1498 	     if code ^= 0
     1499 	     then do;
     1500 		call com_err_ (code, proc, "
     1501 Converting eor defaults in value segment from version 5 to 6.
     1502 (^a).", value_seg_path);
     1503 		go to FINISH;
     1504 	     end;
     1505 	end;
     1506 
     1507 	if default_header.version = Vdefault_header_6
     1508 	then do;
     1509 	     call eor_cv6_7_ (addr (default_header), code);
     1510 	     if code ^= 0
     1511 	     then do;
     1512 		call com_err_ (code, proc, "
     1513 Converting eor defaults in value segment from version 6 to 7.
     1514 (^a).", value_seg_path);
     1515 		go to FINISH;
     1516 	     end;
     1517 	end;
     1518 
     1519 
     1520 	if default_header.version = Vdefault_header_7
     1521 	then do;
     1522 	     call eor_cv7_8_ (addr (default_header), code);
     1523 	     if code ^= 0
     1524 	     then do;
     1525 		call com_err_ (code, proc, "
     1526 Converting eor defaults in value segment from version 7 to 8.
     1527 (^a).", value_seg_path);
     1528 		go to FINISH;
     1529 	     end;
     1530 	end;
     1531 
     1532 	if default_header.version = Vdefault_header_8
     1533 	then do;
     1534 	     call eor_cv8_9_ (addr (default_header), code);
     1535 	     if code ^= 0
     1536 	     then do;
     1537 		call com_err_ (code, proc, "
     1538 Converting eor defaults in value segment from version 8 to 9.
     1539 (^a).", value_seg_path);
     1540 		go to FINISH;
     1541 	     end;
     1542 	end;
     1543 
     1544 	if default_header.version = Vdefault_header_9
     1545 	then do;
     1546 	     call eor_cv9_10_ (addr (default_header), code);
     1547 	     if code ^= 0
     1548 	     then do;
     1549 		call com_err_ (code, proc, "
     1550 Converting eor defaults in value segment from version 9 to 10.
     1551 (^a).", value_seg_path);
     1552 		go to FINISH;
     1553 	     end;
     1554 	end;
     1555 
     1556 	if default_header.version = Vdefault_header_10
     1557 	then ;
     1558 	else do;
     1559 	     call com_err_ (error_table_$unimplemented_version, proc, "
     1560 eor defaults are structured as version ^d defaults.  eor has never supported
     1561 this version.  Evidently, your value segment has been damaged
     1562 (^a).", default_header.version, value_seg_path);
     1563 	     free default_header in (area);
     1564 	     Pdefault_header = null;
     1565 	end;
     1566 
     1567      end find_default_header;
     1568 
     1569 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1570 
     1571 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1572 
     1573 
     1574 free_default:
     1575      proc (Pd);
     1576 
     1577 dcl  1 dwarn aligned like default_print.header based (Pd);
     1578 
     1579 	if Pd ^= null
     1580 	then if Pd ^= addr (auto_default)
     1581 	     then if dprint.Ntype = DP_PRINT
     1582 		then free dprint in (area);
     1583 		else if dprint.Ntype = UNDEFINED
     1584 		then free dwarn in (area);
     1585 		else free dpunch in (area);
     1586 	Pd = null;
     1587 	return;
     1588 
     1589 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1590 
     1591 
     1592 init_default:
     1593      entry (Pd, name, rqt, Ntype);
     1594 
     1595 dcl  Pd ptr,
     1596      name char (*),
     1597      rqt char (*),
     1598      Ntype fixed bin;
     1599 
     1600 dcl  1 dprint aligned based (Pd),
     1601        2 header like default_print.header,
     1602        2 Odft like default_print.Odft,
     1603        2 Sdft like default_print.Sdft,
     1604        2 Ndft like default_print.Ndft,
     1605        2 LSV,
     1606          3 fixed_part like default_print.LSV.fixed_part,
     1607          3 V,
     1608 	 4 heading char (0 refer (dprint.LSV.heading.L)) unal,
     1609 	 4 destination char (0 refer (dprint.LSV.destination.L)) unal,
     1610 	 4 top_label char (0 refer (dprint.LSV.top_label.L)) unal,
     1611 	 4 bottom_label char (0 refer (dprint.LSV.bottom_label.L)) unal,
     1612      1 dpunch aligned based (Pd),
     1613        2 header like default_punch.header,
     1614        2 Odft like default_punch.Odft,
     1615        2 Sdft like default_punch.Sdft,
     1616        2 Ndft like default_punch.Ndft,
     1617        2 LSV,
     1618          3 fixed_part like default_punch.LSV.fixed_part,
     1619          3 V,
     1620 	 4 heading char (0 refer (dpunch.LSV.heading.L)) unal,
     1621 	 4 destination char (0 refer (dpunch.LSV.destination.L)) unal;
     1622 
     1623 	dprint.Ntype = Ntype;
     1624 	dprint.name = name;
     1625 	if Ntype = DP_PRINT
     1626 	then do;					/* Initialize printer defaults.		*/
     1627 	     dprint.Odft = "";
     1628 	     dprint.Odft.request_type = rqt;
     1629 	     dprint.Sdft = FALSE;
     1630 	     dprint.Sdft.label.access = TRUE;
     1631 	     dprint.Ndft = 0;
     1632 	     dprint.Ndft.pt_pch = DP_PRINT;
     1633 	     dprint.Ndft.copies = 1;
     1634 	     dprint.Ndft.output_module = PRINT;
     1635 	     dprint.Ndft.line_lth = -1;
     1636 	     dprint.Ndft.page_lth = -1;
     1637 	     dprint.Ndft.queue = 0;			/*   Use default queue for this request type.	*/
     1638 	     dprint.LSV.heading.S = FALSE;
     1639 	     dprint.LSV.heading.L = 0;
     1640 	     dprint.LSV.destination.S = FALSE;
     1641 	     dprint.LSV.destination.L = 0;
     1642 	     dprint.LSV.top_label.S = FALSE;
     1643 	     dprint.LSV.top_label.L = 0;
     1644 	     dprint.LSV.bottom_label.S = FALSE;
     1645 	     dprint.LSV.bottom_label.L = 0;
     1646 	     dprint.LSV.V.heading = "";
     1647 	     dprint.LSV.V.destination = "";
     1648 	     dprint.size = currentsize (dprint);
     1649 	end;
     1650 	else do;					/* Initialize punch/plotter defaults.		*/
     1651 	     dpunch.Odft.request_type = rqt;
     1652 	     dpunch.Sdft = FALSE;
     1653 	     dpunch.Ndft = 0;
     1654 	     dpunch.Ndft.pt_pch = Ntype;
     1655 	     dpunch.Ndft.copies = 1;
     1656 	     if Ntype = DP_PUNCH
     1657 	     then dpunch.Ndft.output_module = MCC;
     1658 	     else dpunch.Ndft.output_module = PLOT;
     1659 	     dpunch.Ndft.queue = 0;			/*   Use default queue for this request type.	*/
     1660 	     dpunch.LSV.heading.S = FALSE;
     1661 	     dpunch.LSV.heading.L = 0;
     1662 	     dpunch.LSV.destination.S = FALSE;
     1663 	     dpunch.LSV.destination.L = 0;
     1664 	     dpunch.LSV.V.heading = "";
     1665 	     dpunch.LSV.V.destination = "";
     1666 	     dpunch.size = currentsize (dpunch);
     1667 	end;
     1668 
     1669      end free_default;
     1670 
     1671 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1672 
     1673 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1674 
     1675 
     1676 init:
     1677      proc ();
     1678 
     1679 	if person = ""
     1680 	then do;					/* Get per-process values.			*/
     1681 	     call user_info_ (person, proj, "");
     1682 	     Parea = get_system_free_area_ ();
     1683 	end;
     1684 
     1685 	call value_$get_path (value_seg_path, code);	/* Get path of default value seg for error msgs.	*/
     1686 	if code ^= 0
     1687 	then do;
     1688 	     call com_err_ (code, proc, "Getting default value segment pathname.");
     1689 	     go to FINISH;
     1690 	end;
     1691 
     1692 	Pdefault_header = null;			/* Establish cleanup on unit.			*/
     1693 	Pdefault = null;
     1694 	Pnew_default = null;
     1695 	value_list_info_ptr = null;
     1696 	Pfcb = null;
     1697 	Pseg = null;
     1698 	star_entry_ptr = null;
     1699 
     1700 	validate_forms_info_input_ptr, validate_forms_info_output_ptr = null;
     1701 
     1702      end init;
     1703 
     1704 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1705 
     1706 
     1707 janitor:
     1708      proc ();
     1709 
     1710 	if star_entry_ptr ^= null
     1711 	then free star_names in (area), star_entries in (area);
     1712 						/* free structures.				*/
     1713 	if value_list_info_ptr ^= null
     1714 	then free value_list_info in (area);
     1715 	if Pseg ^= null
     1716 	then call hcs_$terminate_noname (Pseg, 0);
     1717 	if Pfcb ^= null
     1718 	then call msf_manager_$close (Pfcb);
     1719 	if Pdefault_header ^= null
     1720 	then if Pdefault_header ^= addr (auto_default_header)
     1721 	     then free default_header in (area);
     1722 	call free_default (Pdefault);
     1723 	call free_default (Pnew_default);
     1724 	if validate_forms_info_input_ptr ^= null
     1725 	then free validate_forms_info_input in (area);
     1726 	if validate_forms_info_output_ptr ^= null
     1727 	then free validate_forms_info_output in (area);
     1728 
     1729      end janitor;
     1730 
     1731 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1732 
     1733 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1734 
     1735 
     1736 list_defaults:
     1737      proc (Sprint_defaults);
     1738 
     1739 dcl  Sprint_defaults bit (1);
     1740 
     1741 dcl  Idft fixed bin,
     1742      Ntype fixed bin,
     1743      Sfirst bit (1);
     1744 
     1745 	mi.name (1) = dft_name$given_name ("**.*");
     1746 	if value_list_info_ptr ^= null
     1747 	then free value_list_info in (area);
     1748 	call value_$list_data_names (DEFAULT_VALUE_SEG, PERM, addr (mi), Parea, value_list_info_ptr, code);
     1749 	do Ntype = DP_PRINT to DP_PLOT;
     1750 	     Sfirst = TRUE;
     1751 	     do Idft = 1 to value_list_info.pair_count;
     1752 		if substr (value_list_info.chars, value_list_info.pairs (Idft).name_index, 1) ^= " "
     1753 		then do;
     1754 		     call free_default (Pdefault);
     1755 		     call value_$get_data (DEFAULT_VALUE_SEG, PERM,
     1756 			substr (value_list_info.chars, value_list_info.pairs (Idft).name_index,
     1757 			value_list_info.pairs (Idft).name_len), Parea, Pdefault, 0, code);
     1758 		     if Pdefault = null
     1759 		     then ;			/* Do nothing for warn_count structures.	*/
     1760 		     else if default_print.Ntype = Ntype
     1761 		     then do;
     1762 			if Sprint_defaults
     1763 			then do;
     1764 			     call print_defaults (Pdefault, TRUE);
     1765 			     call ioa_ ("");
     1766 			     Sfirst = FALSE;
     1767 			end;
     1768 			else do;
     1769 			     call ioa_ ("^[Defaults for ^[print^;punch^;plott^]ing:
     1770 ^;^s^]  ^a^[  -rqt ^a^;^s^]^[  (default)^]", Sfirst, Ntype, default_print.name,
     1771 				default_print.request_type ^= default_print.name, default_print.request_type,
     1772 				default_print.name = default_header.default_request_type (Ntype));
     1773 			     Sfirst = FALSE;
     1774 			end;
     1775 			substr (value_list_info.chars, value_list_info.pairs (Idft).name_index, 1) = " ";
     1776 		     end;
     1777 		end;
     1778 	     end;
     1779 
     1780 	     if Sfirst
     1781 	     then do;
     1782 		if Sprint_defaults
     1783 		then do;
     1784 		     call free_default (Pdefault);
     1785 		     Pdefault = addr (auto_default);
     1786 		     call init_default (Pdefault, default_header.default_request_type (Ntype),
     1787 			default_header.default_request_type (Ntype), Ntype);
     1788 		     call print_defaults (Pdefault, TRUE);
     1789 		     call ioa_ ("");
     1790 		end;
     1791 		else do;
     1792 		     call ioa_ ("Defaults for ^[print^;punch^;plott^]ing:
     1793   ^a  (default)", Ntype, default_header.default_request_type (Ntype));
     1794 		end;
     1795 	     end;
     1796 	end;
     1797 
     1798      end list_defaults;
     1799 
     1800 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1801 
     1802 
     1803 ll_err:
     1804      proc returns (fixed bin) reducible;
     1805 
     1806 	if line_length_error = 0
     1807 	then line_length_error = get_line_length_$switch (iox_$error_output, 0);
     1808 	return (line_length_error);
     1809 
     1810 ll_query:
     1811      entry returns (fixed bin) reducible;
     1812 
     1813 	if line_length_query = 0
     1814 	then line_length_query = get_line_length_$switch (iox_$user_io, 0);
     1815 	return (line_length_query);
     1816 
     1817      end ll_err;
     1818 
     1819 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1820 
     1821 
     1822 path:
     1823      proc (dir, ent) returns (char (168) varying);
     1824 
     1825 dcl  dir char (*),
     1826      ent char (*);
     1827 
     1828 	if dir = ">"
     1829 	then return (rtrim (dir) || rtrim (ent));
     1830 	else return (rtrim (dir) || ">" || rtrim (ent));
     1831 
     1832      end path;
     1833 
     1834 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1835 
     1836 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1837 
     1838 
     1839 print_defaults:
     1840      proc (Pd, Sdefault_is_stored);
     1841 
     1842 dcl  Pd ptr,
     1843      Sdefault_is_stored bit (1);
     1844 
     1845 dcl  Srqt_defined bit (1),
     1846      code fixed bin (35),
     1847      default_queue fixed bin;
     1848 
     1849 dcl  1 dprint aligned based (Pd),
     1850        2 header like default_print.header,
     1851        2 Odft like default_print.Odft,
     1852        2 Sdft like default_print.Sdft,
     1853        2 Ndft like default_print.Ndft,
     1854        2 LSV,
     1855          3 fixed_part like default_print.LSV.fixed_part,
     1856          3 V,
     1857 	 4 heading char (0 refer (dprint.LSV.heading.L)) unal,
     1858 	 4 destination char (0 refer (dprint.LSV.destination.L)) unal,
     1859 	 4 top_label char (0 refer (dprint.LSV.top_label.L)) unal,
     1860 	 4 bottom_label char (0 refer (dprint.LSV.bottom_label.L)) unal,
     1861      1 dpunch aligned based (Pd),
     1862        2 header like default_punch.header,
     1863        2 Odft like default_punch.Odft,
     1864        2 Sdft like default_punch.Sdft,
     1865        2 Ndft like default_punch.Ndft,
     1866        2 LSV,
     1867          3 fixed_part like default_punch.LSV.fixed_part,
     1868          3 V,
     1869 	 4 heading char (0 refer (dpunch.LSV.heading.L)) unal,
     1870 	 4 destination char (0 refer (dpunch.LSV.destination.L)) unal;
     1871 
     1872 	if ^Sdefault_is_stored
     1873 	then call ioa_ ("^/^a user defaults are not defined.  System defaults are:", dprint.name);
     1874 	if dprint.Ntype = DP_PRINT
     1875 	then do;
     1876 	     default_queue = 0;
     1877 	     call iod_info_$queue_data (dprint.request_type, default_queue, 0, code);
     1878 	     Srqt_defined = (code = 0);
     1879 	     call ioa_ ("^a:^[ (default for printing)^]
     1880   -rqt ^a^[^; (undefined)^]  -print
     1881   -he^[ -astr^]^[ -enm^] ^[^a (default)^s^;^s^a^]
     1882   -ds^[ -astr^]^[ -enm^] ^[^a (default)^s^;^s^a^]" || "
     1883 ^[  -dl^]^[  -nt^]^[  -dupt^]  -q ^[^d (default)^s^;^s^d^]^[  -cp ^d^;^s^]^[  -ll ^d^;^s^]^[  -pl ^d^;^s^]"
     1884 		|| "^[  -ind ^d^;^s^]^[  -bf^]^[  -fc^]^[  -albl^]^[
     1885 ^]^[  -nep^]^[  -nvertsp^]^[  -ned^]^[  -tc^]^[  -nsep^]^[  -nb^]^[^[" || "
     1886   -label^[ -astr^]^[ -enm^]^[ -center^] ^a^10s^;^4s^[
     1887   -tlbl^[ -astr^]^[ -enm^]^[ -center^] ^a^;^4s^]^[
     1888   -blbl^[ -astr^]^[ -enm^]^[ -center^] ^a^;^4s^]^]^;^15s^]^[
     1889   -forms ^a^;^s^]", dprint.name, dprint.name = default_header.default_request_type (DP_PRINT), dprint.Odft.request_type,
     1890 		Srqt_defined, dprint.LSV.heading.S.active_string, dprint.LSV.heading.S.equal_name,
     1891 		dprint.LSV.V.heading = "", person, requote_string_ (dprint.LSV.V.heading),
     1892 		dprint.LSV.destination.S.active_string, dprint.LSV.destination.S.equal_name,
     1893 		dprint.LSV.V.destination = "", proj, requote_string_ (dprint.LSV.V.destination),
     1894 		dprint.Ndft.delete = 1, dprint.Ndft.notify = 1, dprint.Ndft.defer_until_process_termination = 1,
     1895 		dprint.Ndft.queue = 0, default_queue, dprint.Ndft.queue, dprint.Ndft.copies > 1, dprint.Ndft.copies,
     1896 		dprint.Ndft.line_lth > 0, dprint.Ndft.line_lth, dprint.Ndft.page_lth > 0, dprint.Ndft.page_lth,
     1897 		dprint.Ndft.lmargin > 0, dprint.Ndft.lmargin, dprint.Sdft.brief, dprint.Sdft.force,
     1898 		dprint.Sdft.label.access,
     1899 		(dprint.Sdft.nep | dprint.Sdft.single | dprint.Sdft.non_edited | dprint.Sdft.truncate),
     1900 		dprint.Sdft.nep, dprint.Sdft.single, dprint.Sdft.non_edited, dprint.Sdft.truncate,
     1901 		dprint.Sdft.no_separator, dprint.Sdft.line_nbrs, (dprint.Sdft.label.top | dprint.Sdft.label.bottom),
     1902 		(dprint.LSV.V.top_label = dprint.LSV.V.bottom_label
     1903 		& unspec (dprint.LSV.top_label.S) = unspec (dprint.LSV.bottom_label.S)),
     1904 		dprint.LSV.top_label.S.active_string, dprint.LSV.top_label.S.equal_name,
     1905 		dprint.LSV.top_label.S.center, requote_string_ (dprint.LSV.V.top_label), dprint.Sdft.label.top,
     1906 		dprint.LSV.top_label.S.active_string, dprint.LSV.top_label.S.equal_name,
     1907 		dprint.LSV.top_label.S.center, requote_string_ (dprint.LSV.V.top_label), dprint.Sdft.label.bottom,
     1908 		dprint.LSV.bottom_label.S.active_string, dprint.LSV.bottom_label.S.equal_name,
     1909 		dprint.LSV.bottom_label.S.center, requote_string_ (dprint.LSV.V.bottom_label),
     1910 		(dprint.Odft.forms_name ^= ""), requote_string_ (rtrim (dprint.Odft.forms_name)));
     1911 	end;
     1912 
     1913 
     1914 	else do;
     1915 	     default_queue = 0;
     1916 	     call iod_info_$queue_data (dpunch.request_type, default_queue, 0, code);
     1917 	     Srqt_defined = (code = 0);
     1918 	     call ioa_ ("^a:^[ (default for ^[^;punch^;plott^]ing)^;^s^]
     1919   -rqt ^a^[^; (undefined)^]  ^[^;-punch^;-plot^]
     1920   -he^[ -astr^]^[ -enm^] ^[^a (default)^s^;^s^a^]"
     1921 		||
     1922 		"
     1923   -ds^[ -astr^]^[ -enm^] ^[^a (default)^s^;^s^a^]
     1924 ^[  -dl^]^[  -nt^]^[  -dupt^]  -q ^[^d (default)^s^;^s^d^]^[  -cp ^d^;^s^]^[  -bf^]^[  -fc^]^[^;  -7punch^;  -mcc^;  -raw^]",
     1925 		dpunch.name, dpunch.name = default_header.default_request_type (dpunch.Ntype), dpunch.Ntype,
     1926 		dpunch.Odft.request_type, Srqt_defined, dpunch.Ntype, dpunch.LSV.heading.S.active_string,
     1927 		dpunch.LSV.heading.S.equal_name, dpunch.LSV.V.heading = "", person,
     1928 		requote_string_ (dpunch.LSV.V.heading), dpunch.LSV.destination.S.active_string,
     1929 		dpunch.LSV.destination.S.equal_name, dpunch.LSV.V.destination = "", proj,
     1930 		requote_string_ (dpunch.LSV.V.destination), dpunch.Ndft.delete = 1, dpunch.Ndft.notify = 1,
     1931 		dpunch.Ndft.defer_until_process_termination = 1, dpunch.Ndft.queue = 0, default_queue,
     1932 		dpunch.Ndft.queue, dpunch.Ndft.copies > 1, dpunch.Ndft.copies, dpunch.Sdft.brief, dpunch.Sdft.force,
     1933 		dpunch.Ndft.output_module);
     1934 	end;
     1935 
     1936      end print_defaults;
     1937 
     1938 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1939 
     1940 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1941 
     1942 
     1943 print_totals:
     1944      proc (Nqueued);
     1945 
     1946 dcl  Nqueued fixed bin;
     1947 
     1948 dcl  Nalready_in_queue fixed bin,			/* number of entries queued.			*/
     1949      code fixed bin (35);
     1950 
     1951 	if S.brief
     1952 	then ;					/* if in brief mode, don't report queue statistics */
     1953 	else do;
     1954 	     call dprint_$queue_contents (O.request_type, N.queue, Nalready_in_queue, code);
     1955 	     if code = error_table_$noentry
     1956 	     then Nalready_in_queue = 0;
     1957 	     else Nalready_in_queue = Nalready_in_queue - Nqueued;
     1958 						/* compute how many were queued before we added	*/
     1959 	     if Nalready_in_queue < 0
     1960 	     then					/* ours.  Make sure total doesn't come out	*/
     1961 		Nalready_in_queue = 0;		/* negative (one of ours already printed).	*/
     1962 	     call ioa_ ("^[^d request^[s^] submitted; ^d already^s^;^2s^d request^[s^]^] in ^a queue ^d.", Nqueued > 0,
     1963 		Nqueued, Nqueued > 1, Nalready_in_queue, Nalready_in_queue ^= 1, O.request_type, N.queue);
     1964 	end;
     1965 
     1966      end print_totals;
     1967 
     1968 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1969 
     1970 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1971 
     1972 
     1973 proc_args:
     1974      proc (Ssubmit, Nqueued);
     1975 
     1976 dcl  Ssubmit bit (1),
     1977      Nqueued fixed bin;
     1978 
     1979 dcl  IPLS fixed bin,
     1980      Iarg fixed bin,
     1981      Isearch fixed bin,
     1982      Larg fixed bin (21),
     1983      Lop fixed bin (21),
     1984      Parg ptr,
     1985      Pop ptr,
     1986      Snon_path_ctl_arg bit (1),
     1987      Sstring bit (1),
     1988      arg char (Larg) based (Parg),
     1989      argv char (32) varying,
     1990      arg_no fixed bin,
     1991      op char (Lop) based (Pop),
     1992      op_no fixed bin unsigned;
     1993 
     1994 	do Iarg = 1 to Nargs;
     1995 	     call cu_$arg_ptr_rel (Iarg, Parg, Larg, code, Parg_list);
     1996 	     if index (arg, "-") ^= 1
     1997 	     then do;
     1998 		S.pathnames = TRUE;
     1999 		if Ssubmit
     2000 		then call proc_path (arg, FALSE, Nqueued);
     2001 	     end;
     2002 	     else do;
     2003 		Snon_path_ctl_arg = TRUE;
     2004 		argv = arg || NL;			/* add a NL to user-supplied control arg to 	*/
     2005 		Isearch = index (arg_table, argv);	/*   that search through arg_table finds exactly	*/
     2006 		if Isearch = 0
     2007 		then do;				/*   the control arg user specified.		*/
     2008 		     S.error = TRUE;
     2009 		     call com_err_ (error_table_$badopt, proc, "^a", arg);
     2010 		end;
     2011 		else do;
     2012 		     Pdesc = addr (Pdesc);
     2013 		     Pdesc = addr (arg_tbl_array (Isearch - length (string (desc))));
     2014 		     arg_no = desc.arg_no;
     2015 		     if desc.type = "S+" & ^Ssubmit
     2016 		     then switch_array (arg_no) = TRUE;
     2017 		     else if desc.type = "S^" & ^Ssubmit
     2018 		     then switch_array (arg_no) = FALSE;
     2019 		     else if desc.type = "N " & ^Ssubmit
     2020 		     then number_array (arg_no) = desc.arg_val;
     2021 
     2022 		     else if desc.type = "Nb" | desc.type = "Ch" | desc.type = "PL" | desc.type = "Sp"
     2023 		     then do;
     2024 			if desc.type = "Nb" | desc.type = "Ch" | desc.type = "PL"
     2025 			then do;
     2026 			     if Iarg = Nargs
     2027 			     then do;
     2028 				S.error = TRUE;
     2029 				call com_err_ (error_table_$noarg, proc, "^a requires an operand.", arg);
     2030 				Pop = addr (Pop);
     2031 				Lop = 0;
     2032 			     end;
     2033 			     else do;
     2034 				Iarg = Iarg + 1;
     2035 				call cu_$arg_ptr_rel (Iarg, Pop, Lop, code, Parg_list);
     2036 			     end;
     2037 			end;
     2038 
     2039 			if desc.type = "Nb" & ^Ssubmit
     2040 			then do;
     2041 			     if op = "default" | op = "dft" | op = "-default" | op = "-dft"
     2042 			     then op_no = 0;
     2043 			     else do;
     2044 				on conversion, size
     2045 				     begin;
     2046 				     S.error = TRUE;
     2047 				     call com_err_ (error_table_$bad_arg, proc, "^a ^a
     2048 ^a requires a nonnegative integer operand.", arg, op, arg);
     2049 				     op_no = 0;
     2050 				     go to IGNORE_OPERAND;
     2051 				end;
     2052 				op_no = convert (op_no, op);
     2053 IGNORE_OPERAND:
     2054 				revert conversion, size;
     2055 			     end;
     2056 			     number_array (arg_no) = op_no;
     2057 			end;
     2058 
     2059 			else do;
     2060 			     if desc.type = "PL"
     2061 			     then do;
     2062 				IPLS = desc.arg_val;
     2063 				if ^Ssubmit
     2064 				then PLS.S (IPLS) = FALSE;
     2065 				Sstring = FALSE;
     2066 				Sdefault = FALSE;
     2067 				do while (index (op, "-") = 1 & ^Sstring & Iarg <= Nargs);
     2068 				     if op = "-active_string" | op = "-astr"
     2069 				     then if Ssubmit
     2070 					then ;
     2071 					else PLS.S (IPLS).active_string = TRUE;
     2072 				     else if op = "-equal_name" | op = "-enm" | op = "-eqnm" | op = "-equal"
     2073 					| op = "-eq"
     2074 				     then if Ssubmit
     2075 					then ;
     2076 					else PLS.S (IPLS).equal_name = TRUE;
     2077 				     else if op = "-center" & (IPLS > 2)
     2078 						/* -center cannot be used with -ds or -he. */
     2079 				     then if Ssubmit
     2080 					then ;
     2081 					else PLS.S (IPLS).center = TRUE;
     2082 				     else if op = "-string" | op = "-str"
     2083 				     then Sstring = TRUE;
     2084 
     2085 				     else if (op = "-default" | op = "-dft") & (IPLS <= 2)
     2086 				     then do;
     2087 					Sdefault = TRUE;
     2088 					Iarg = Iarg + 1;
     2089 					op = "";
     2090 					if PLS.S (IPLS).center | PLS.S (IPLS).active_string
     2091 					     | PLS.S (IPLS).equal_name
     2092 					then do;
     2093 					     S.error = TRUE;
     2094 					     call com_err_ (error_table_$badopt, proc,
     2095 						"^a^[ -astr^]^[ -enm^] -default." || "
     2096 The only control arguments which can follow^[ -astr^]^[ -enm^] are:
     2097   -string, -str     ^[-active_string, -astr^]" || "^[^/  -equal_name, -enm^]
     2098 If you want -default as a literal ^[heading^;destination^], use: ^a^[ -astr^]^[ -enm^] -string -default", arg,
     2099 						PLS.S (IPLS).active_string, PLS.S (IPLS).equal_name,
     2100 						PLS.S (IPLS).active_string, PLS.S (IPLS).equal_name,
     2101 						PLS.S (IPLS).equal_name, PLS.S (IPLS).active_string, IPLS,
     2102 						arg, PLS.S (IPLS).active_string, PLS.S (IPLS).equal_name);
     2103 					end;
     2104 				     end;
     2105 
     2106 				     else do;
     2107 					S.error = TRUE;
     2108 					call com_err_ (error_table_$badopt, proc, "^a ^a.
     2109 The only control arguments which can follow ^a are:
     2110   -string, -str	-active_string, -astr
     2111   -equal_name, -enm ^[-center^;-default, -dft^]
     2112 If you want ^a as a literal ^[heading^;destination^;label^;label^;label^], use:  ^a -string ^a", arg, op, arg,
     2113 					     (arg ^= "-ds" & arg ^= "-destination" & arg ^= "-he"
     2114 					     & arg ^= "-header"), op, IPLS, arg, op);
     2115 					Pop = addr (Pop);
     2116 					Lop = 0;
     2117 				     end;
     2118 				     if Pop = addr (Pop)
     2119 				     then ;	/* got an error above.  */
     2120 				     else if Sdefault
     2121 				     then ;
     2122 
     2123 				     else if Iarg = Nargs
     2124 				     then do;
     2125 					S.error = TRUE;
     2126 					call com_err_ (error_table_$noarg, proc, "^[
     2127 ^]^a^[ -center^]^[ -active_string^]^[ -equal_name^]^[ -string^] requires an operand.", ll_err () < 85, arg,
     2128 					     PLS.S (IPLS).center, PLS.S (IPLS).active_string,
     2129 					     PLS.S (IPLS).equal_name, Sstring);
     2130 					Pop = addr (Pop);
     2131 					Lop = 0;
     2132 				     end;
     2133 				     else do;
     2134 					Iarg = Iarg + 1;
     2135 					call cu_$arg_ptr_rel (Iarg, Pop, Lop, code, Parg_list);
     2136 				     end;
     2137 				end;
     2138 				if ^Ssubmit
     2139 				then do;
     2140 				     PLS.P (IPLS) = addr (op);
     2141 				     PLS.L (IPLS) = length (rtrim (op));
     2142 				     if ^Sstring
     2143 				     then if search (op, "=%") > 0
     2144 					then PLS.S (IPLS).equal_name = TRUE;
     2145 				end;
     2146 			     end;
     2147 
     2148 			     if Ssubmit
     2149 			     then if arg_no ^= 12	/* check for -name */
     2150 				then go to END_OP;
     2151 			     go to PROC_OP (arg_no);
     2152 
     2153 PROC_OP (01):
     2154 PROC_OP (02):
     2155 			     go to END_OP;
     2156 
     2157 PROC_OP (03):
     2158 			     S.label.top, S.label.bottom = TRUE;
     2159 			     S.label.access = FALSE;
     2160 			     PLS_struc.bottom_label = PLS_struc.top_label;
     2161 GIVE_LABEL_WARNING:
     2162 			     if Sgive_nep_warning
     2163 			     then do;
     2164 				if S.nep
     2165 				then do;
     2166 				     call ioa_ ("Warning: -no_end_page is ignored when ^a is given.", arg);
     2167 				     Sgive_nep_warning = FALSE;
     2168 				end;
     2169 			     end;
     2170 			     S.nep = FALSE;
     2171 			     go to END_OP;
     2172 
     2173 PROC_OP (04):
     2174 			     S.label.top = TRUE;
     2175 			     if S.label.access
     2176 			     then S.label.access = ^S.label.bottom;
     2177 			     go to GIVE_LABEL_WARNING;
     2178 
     2179 PROC_OP (05):
     2180 			     S.label.bottom = TRUE;
     2181 			     if S.label.access
     2182 			     then S.label.access = ^S.label.top;
     2183 			     go to GIVE_LABEL_WARNING;
     2184 
     2185 PROC_OP (06):
     2186 			     S.label.access = TRUE;
     2187 			     S.label.top, S.label.bottom = FALSE;
     2188 			     go to GIVE_LABEL_WARNING;
     2189 
     2190 PROC_OP (07):
     2191 			     S.label.access, S.label.top, S.label.bottom = FALSE;
     2192 			     go to END_OP;
     2193 
     2194 PROC_OP (08):
     2195 			     S.nep = TRUE;
     2196 			     if Sgive_label_warning
     2197 			     then do;
     2198 				if (S.label.access | S.label.top | S.label.bottom)
     2199 				then do;
     2200 				     call ioa_ ("Warning: labels are ignored when -no_end_page is given.");
     2201 				     Sgive_label_warning = FALSE;
     2202 				end;
     2203 			     end;
     2204 			     S.label = FALSE;
     2205 			     go to END_OP;
     2206 
     2207 PROC_OP (09):
     2208 			     S.all = TRUE;
     2209 			     S.print_default = TRUE;
     2210 			     go to END_OP;
     2211 
     2212 PROC_OP (10):
     2213 			     O.request_type = op;
     2214 			     if length (op) > length (O.request_type)
     2215 			     then do;
     2216 				call com_err_ (error_table_$bigarg, proc, "^a ^a
     2217 A request type name must be less than ^d characters long.", arg, op, length (O.request_type) + 1);
     2218 				S.error = TRUE;
     2219 			     end;
     2220 			     else if index (op, "-") = 1 | search (op, "*?") > 0
     2221 			     then do;
     2222 				if op = "-all" | op = "-a"
     2223 				then call com_err_ (error_table_$badopt, proc, "^a ^a
     2224 A request type name cannot begin with a hyphen.  To change all sets of^[
     2225 ^; ^]user-defined defaults, use:^[^/^]  eor -dnm ([prt ** -udf]) -sdft {-control_args}", arg, op, ll_err () < 132,
     2226 					ll_err () >= 132);
     2227 				else if index (op, "-") = 1
     2228 				then call com_err_ (error_table_$badopt, proc, "^a ^a^[
     2229 ^;   ^]A request type name cannot begin with a hyphen.", arg, op, ll_err () < 118);
     2230 				else call com_err_ (error_table_$nostars, proc, "^a ^a
     2231 To change several sets of user-defined defaults, use:^[
     2232 ^]  eor -dnm ([prt ^a -udf]) -sdft {-control_args}", arg, op, ll_err () < 118, op);
     2233 				S.error = TRUE;
     2234 			     end;
     2235 			     go to END_OP;
     2236 
     2237 PROC_OP (11):
     2238 			     O.default_request_type = op;
     2239 			     if O.request_type = ""
     2240 			     then O.request_type = op;
     2241 			     go to END_OP;
     2242 
     2243 PROC_OP (12):
     2244 			     if Ssubmit
     2245 			     then call proc_path (op, TRUE, Nqueued);
     2246 			     Snon_path_ctl_arg = FALSE;
     2247 			     S.pathnames = TRUE;
     2248 			     go to END_OP;
     2249 
     2250 PROC_OP (13):
     2251 			     O.name_of_default = op;
     2252 			     if length (op) > length (O.name_of_default)
     2253 			     then do;
     2254 				call com_err_ (error_table_$bigarg, proc, "^a ^a
     2255 A default name must be less than ^d characters long.", arg, op, length (O.name_of_default) + 1);
     2256 				S.error = TRUE;
     2257 			     end;
     2258 			     else if index (op, "-") = 1 | search (op, "*?") > 0
     2259 			     then do;
     2260 				if op = "-all" | op = "-a"
     2261 				then call com_err_ (error_table_$badopt, proc, "^a ^a
     2262 A default name cannot begin with a hyphen.  To change all sets of user-defined^[
     2263 ^; ^]defaults, use:^[^/^]  eor -dnm ([prt ** -udf]) -sdft {-control_args}", arg, op, ll_err () < 132, ll_err () >= 132);
     2264 				else if index (op, "-") = 1
     2265 				then call com_err_ (error_table_$badopt, proc, "^a ^a^[
     2266 ^;   ^]A default name cannot begin with a hyphen.", arg, op, ll_err () < 125);
     2267 				else call com_err_ (error_table_$nostars, proc, "^a ^a
     2268 To change several sets of user-defined defaults, use:^[
     2269 ^]  eor -dnm ([prt ^a -udf]) -sdft {-control_args}", arg, op, ll_err () < 118, op);
     2270 				S.error = TRUE;
     2271 			     end;
     2272 			     go to END_OP;
     2273 
     2274 PROC_OP (14):
     2275 			     O.forms_name = op;
     2276 			     go to END_OP;
     2277 
     2278 END_OP:
     2279 			end;
     2280 		     end;
     2281 		end;
     2282 		if Snon_path_ctl_arg
     2283 		then S.non_path_ctl_args = TRUE;
     2284 	     end;
     2285 	end;
     2286 
     2287      end proc_args;
     2288 
     2289 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     2290 
     2291 
     2292 proc_label:
     2293      proc (Ipls, pls, pls_string, dir, ent, Scenter) returns (char (136) varying);
     2294 
     2295 	Scenter = pls.S.center;
     2296 
     2297 
     2298 proc_heading:
     2299      entry (Ipls, pls, pls_string, dir, ent) returns (char (136) varying);
     2300 
     2301 dcl  Ipls fixed bin,
     2302      1 pls aligned like PLS,
     2303      pls_string char (*),
     2304      dir char (*),
     2305      ent char (*),
     2306      Scenter bit (1);
     2307 
     2308 dcl  equal char (32),				/* name returned by get_equal_name_ for heading.	*/
     2309      result char (136) varying;
     2310 
     2311 
     2312 	if pls.S.active_string
     2313 	then do;
     2314 	     result = "";
     2315 	     call cu_$evaluate_active_string (null,
     2316 		"do " || requote_string_ ("[" || pls_string || "]") || " " || path (dir, ent), NORMAL_ACTIVE_STRING,
     2317 		result, code);
     2318 	     if code = error_table_$command_line_overflow
     2319 	     then ;
     2320 	     else if code ^= 0
     2321 	     then do;
     2322 		call cp_for_error_msg ("string [do " || requote_string_ ("[" || pls_string || "]") || " "
     2323 		     || path (dir, ent) || "]");
     2324 		go to EXIT;
     2325 	     end;
     2326 	end;
     2327 	else result = pls_string;
     2328 
     2329 	if pls.S.equal_name
     2330 	then do;
     2331 	     call get_equal_name_ (ent, (result), equal, code);
     2332 	     if code ^= 0
     2333 	     then do;
     2334 		call com_err_ (code, proc, "
     2335 Applying equal convention to construct ^[heading^;destination^;top_label^;bottom_label^] field.
     2336 equal_name = ^a, entryname = ^a", Ipls, requote_string_ ((result)), requote_string_ (ent));
     2337 		go to EXIT;
     2338 	     end;
     2339 	     else result = equal;
     2340 	end;
     2341 
     2342 	return (result);
     2343 
     2344 cp_for_error_msg:
     2345 	proc (active_string);
     2346 
     2347 dcl  active_string char (*);
     2348 
     2349 dcl  cu_$cp entry (ptr, fixed bin (21), fixed bin (35)),
     2350      ioa_$ioa_switch entry () options (variable);
     2351 
     2352 	     call cu_$cp (addr (active_string), length (active_string), code);
     2353 	     call ioa_$ioa_switch (iox_$error_output,
     2354 		"^a: While constructing ^[heading^;destination^;top_label^;bottom_label^] field using the active string:",
     2355 		proc, Ipls);			/* Let command processor report the error code.	*/
     2356 	     call ioa_$ioa_switch (iox_$error_output, "^a", after (active_string, "string "));
     2357 
     2358 	end cp_for_error_msg;
     2359 
     2360 
     2361      end proc_label;
     2362 
     2363 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     2364 
     2365 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     2366 
     2367 
     2368 proc_path:
     2369      proc (path, Signore_stars, Nqueued);
     2370 
     2371 dcl  path char (*),
     2372      Signore_stars bit (1),
     2373      Nqueued fixed bin;
     2374 
     2375 dcl  ERROR_LABEL label variable,			/* variable error branch point label.		*/
     2376      Ientry fixed bin,				/* do-group index for entries from hcs_$star_	*/
     2377      Nmatches fixed bin,				/* number of entries matching a star name that	*/
     2378 						/* have been submitted for operation.		*/
     2379      Ssuppress_errors bit (1),
     2380      code fixed bin (35),
     2381      dir char (168),				/* dir part of a path name.			*/
     2382      ent char (32),					/* entry part of a path name.			*/
     2383      name char (32);				/* a name temporary.			*/
     2384 
     2385 	call expand_pathname_ (path, dir, ent, code);	/* expand it into an absolute path.		*/
     2386 	if code ^= 0
     2387 	then go to BAD_EXPAND;
     2388 	if Signore_stars
     2389 	then do;
     2390 	     ERROR_LABEL = BAD_PATH;
     2391 	     call submit (dir, ent, FALSE, ERROR_LABEL, Nqueued, 0, code);
     2392 	end;
     2393 	else do;
     2394 	     call check_star_name_$entry (ent, code);	/* see if name has *'s, or is a bad star name.	*/
     2395 	     if code = error_table_$badstar
     2396 	     then go to BAD_EXPAND;
     2397 	     else if code = 0
     2398 	     then do;				/* name contains no *'s.			*/
     2399 		ERROR_LABEL = BAD_PATH;		/* error exit to print a message, and skip operand */
     2400 		call submit (dir, ent, FALSE, ERROR_LABEL, Nqueued, 0, code);
     2401 						/* submit entry; never suppress errors.		*/
     2402 	     end;
     2403 	     else do;				/* name contains stars.			*/
     2404 		ERROR_LABEL = IGNORE_ENTRY;		/* error exit to print message, and ignore entry	*/
     2405 						/* whose name matches operand.		*/
     2406 		Nmatches = 0;			/* initialize count of matching branches which are */
     2407 						/* submitted successfully.			*/
     2408 		call hcs_$star_ (dir, ent, star_ALL_ENTRIES, addr (area), star_entry_count, star_entry_ptr,
     2409 		     star_names_ptr, code);
     2410 		if code ^= 0
     2411 		then				/* find branches which match starred operand.	*/
     2412 		     go to BAD_PATH;		/* Report any errors to user.			*/
     2413 		do Ientry = 1 to star_entry_count;	/* handle matching entries, one by one.		*/
     2414 		     name = star_names (star_entries (Ientry).nindex);
     2415 						/* copy name for efficiency.			*/
     2416 		     if star_entries (Ientry).type = Segment
     2417 		     then				/* report all errors occurring for segments.	*/
     2418 			Ssuppress_errors = FALSE;
     2419 		     else				/* suppress entry not found for link targets, and	*/
     2420 			Ssuppress_errors = TRUE;	/* attempt to print a directory errors.		*/
     2421 		     call submit (dir, name, Ssuppress_errors, ERROR_LABEL, Nqueued, Nmatches, code);
     2422 						/* submit the entry to the queue.		*/
     2423 		     go to NEXT_ENTRY;		/* handle the next entry.			*/
     2424 
     2425 IGNORE_ENTRY:
     2426 		     call com_err_ (code, proc, "Entry will not be submitted
     2427 (^a^[>^]^a).", dir, dir ^= ">", name);
     2428 
     2429 NEXT_ENTRY:
     2430 		end;
     2431 
     2432 		free star_names in (area), star_entries in (area);
     2433 		if Nmatches = 0
     2434 		then do;				/* if no matching entries were queued, complain.	*/
     2435 		     code = error_table_$nomatch;
     2436 		     go to BAD_PATH;
     2437 		end;
     2438 	     end;
     2439 	end;
     2440 	return;
     2441 
     2442 
     2443 BAD_EXPAND:
     2444 	call com_err_ (code, proc, " ^a", path);
     2445 	return;
     2446 
     2447 BAD_PATH:
     2448 	call com_err_ (code, proc, "^[^/^]Entry will not be submitted
     2449 (^a^[>^]^a).", ll_err () < 100, dir, dir ^= ">", ent);
     2450 	return;
     2451 
     2452      end proc_path;
     2453 
     2454 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     2455 
     2456 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     2457 
     2458 
     2459 submit:
     2460      procedure (dir, ent, Ssuppress_errors, ERROR_LABEL, Nqueued, Nmatches, code);
     2461 						/* An internal procedure to validate and submit	*/
     2462 						/* requests to operate on operand dir>ent.	*/
     2463 
     2464 dcl  dir char (*),
     2465      ent char (*),
     2466      Ssuppress_errors bit (1),
     2467      ERROR_LABEL label variable,
     2468      Nqueued fixed bin,
     2469      Nmatches fixed bin,
     2470      code fixed bin (35);
     2471 
     2472 dcl  COORD_ACCESS_NAME char (32) int static options (constant) init ("IO.SysDaemon.z"),
     2473      Icomp fixed bin,				/* do-group index for MSF components.		*/
     2474      Sdelete bit (1) aligned,				/* on if IO Daemon has access to delete entry.	*/
     2475      Sread bit (1) aligned,				/* on if IO Daemon has access to read entry.	*/
     2476      Sstatus bit (1) aligned,				/* on if IO Daemon has status access to entry.	*/
     2477      Syes bit (1),					/* user's yes-or-no answer to my queries.	*/
     2478      access_class bit (72) aligned,
     2479      access_label char (136),
     2480      adjusted_bit_count fixed bin (35),
     2481      1 acl aligned,					/* acl structure passed to hcs_$add_acl_entries	*/
     2482        2 name char (32) aligned,			/* access control process identifier to be added.	*/
     2483        2 mode bit (36),				/* "rewa"b access mode.			*/
     2484        2 pad bit (36),
     2485        2 code fixed bin (35),				/* status code.				*/
     2486      bit_count fixed bin (24),
     2487      daemon_name char (24),				/* name of IO Daemon for our device class.	*/
     2488      1 dir_acl aligned,				/* struc for hcs_$add_dir_acl_entries.		*/
     2489        2 name char (32),
     2490        2 mode bit (36),
     2491        2 code fixed bin (35),
     2492      explain_array (2) char (158) int static options (constant) init ("yes, y
     2493    the request will be submitted, in spite of the problem reported above.
     2494    The caller can take corrective action after the request is submitted,
     2495    o", "r can do nothing in the hope that the IO Daemon will not encounter
     2496    an error.
     2497 no, n
     2498    do not submit the request.
     2499 
     2500 Do you still wish to submit the request?"),
     2501      explanation char (315) based (addr (explain_array)),
     2502      lv_mode bit (36) aligned,
     2503      lv_pub_bit bit (1) aligned,
     2504      lv_name char (32),
     2505      question char (41) int static options (constant) init ("
     2506 Do you still wish to submit the request?");
     2507 
     2508 	call hcs_$status_long (dir, ent, 1, addr (branch), null, code);
     2509 						/* get status for entry. (chase links)		*/
     2510 	if (code ^= 0) & (code ^= error_table_$no_s_permission)
     2511 	then					/* check for errors besides no status permission.	*/
     2512 						/* for that error, we get all info we need.	*/
     2513 	     if code = error_table_$noentry
     2514 	     then					/* if branch linked to was not found, then	*/
     2515 		if Ssuppress_errors
     2516 		then				/* just ignore the entry if errors are suppressed. */
     2517 		     return;
     2518 		else go to ERROR_LABEL;
     2519 	     else					/* for all other errors, report the error, and	*/
     2520 		go to ERROR_LABEL;			/* ignore the entry.			*/
     2521 
     2522 	if branch.type = Directory
     2523 	then do;
     2524 	     if branch.bit_count > 0
     2525 	     then					/* An MSF					*/
     2526 		branch.type = Msf;
     2527 	     else if Ssuppress_errors
     2528 	     then return;				/* A plain directory.  Can't dprint that.	*/
     2529 	     else do;
     2530 		code = error_table_$dirseg;
     2531 		go to ERROR_LABEL;
     2532 	     end;
     2533 	end;
     2534 
     2535 	if branch.mode & bit (R_ACCESS_BIN, 5)
     2536 	then ;					/* make sure user has read access on entry.	*/
     2537 	else if S.force
     2538 	then do;
     2539 	     acl.name = get_group_id_$tag_star ();
     2540 	     acl.mode = R_ACCESS;
     2541 	     acl.pad = ""b;
     2542 	     if branch.type = Segment
     2543 	     then do;
     2544 		call hcs_$add_acl_entries (dir, ent, addr (acl), 1, code);
     2545 		if code ^= 0
     2546 		then do;
     2547 		     if acl.code ^= 0
     2548 		     then code = acl.code;
     2549 FORCE_READ_FAIL:
     2550 		     call com_err_ (code, proc, "Unable to force
     2551 read access for ^a to the entry.  Entry not submitted
     2552 (^a^[>^]^a).", acl.name, dir, dir ^= ">", ent);
     2553 		     return;
     2554 		end;
     2555 	     end;
     2556 	     else do;
     2557 		call msf_manager_$open (dir, ent, Pfcb, code);
     2558 		if code ^= 0
     2559 		then go to FORCE_READ_FAIL;
     2560 		call msf_manager_$acl_add (Pfcb, addr (acl), 1, code);
     2561 		call msf_manager_$close (Pfcb);
     2562 		Pfcb = null;
     2563 		if code ^= 0
     2564 		then do;
     2565 		     code = acl.code;
     2566 		     go to FORCE_READ_FAIL;
     2567 		end;
     2568 	     end;
     2569 	end;
     2570 	else do;
     2571 	     code = error_table_$moderr;
     2572 	     call command_query_$yes_no (Syes, code, proc, explanation, "^[
     2573 ^]You do not have access to read the entry.
     2574 (^a^[>^]^a)." || question, ll_query () < 90, dir, dir ^= ">", ent);
     2575 	     if ^Syes
     2576 	     then return;
     2577 	end;
     2578 
     2579 	if N.pt_pch ^= DP_PUNCH
     2580 	then do;					/* Don't print or plot an object segment.	*/
     2581 	     call object_lib_$initiate (dir, ent, "", "1"b, Pseg, (0), (""b), code);
     2582 	     if Pseg ^= null
     2583 	     then do;
     2584 		call hcs_$terminate_noname (Pseg, 0);
     2585 		Pseg = null;
     2586 		call com_err_ (error_table_$improper_data_format, proc, "Entry is an object segment
     2587 (^a^[>^]^a).
     2588 It will not be ^[print^;^;plott^]ed.", dir, dir ^= ">", ent, N.pt_pch);
     2589 		return;
     2590 	     end;
     2591 	end;
     2592 
     2593 	call mdc_$find_lvname (branch.lvid, lv_name, code);
     2594 	if code ^= 0
     2595 	then go to ERROR_LABEL;
     2596 	call mdc_$get_lv_access (lv_name, 1, lv_mode, lv_pub_bit, code);
     2597 	if code ^= 0
     2598 	then go to ERROR_LABEL;
     2599 	if ^lv_pub_bit
     2600 	then do;					/* Make sure seg is on a public lv.		*/
     2601 	     call com_err_ (error_table_$private_volume, proc, "Entry cannot be ^[print^;punch^;plott^]ed
     2602 (^a^[>^]^a).", N.pt_pch, dir, dir ^= ">", ent);
     2603 	     return;
     2604 	end;
     2605 
     2606 	if branch.type = Msf
     2607 	then do;					/* Compute bit count of MSF.			*/
     2608 	     dprint_arg.bit_count = 0;
     2609 	     call msf_manager_$open (dir, ent, Pfcb, code);
     2610 	     if code ^= 0
     2611 	     then do;
     2612 		call command_query_$yes_no (Syes, code, proc, explanation, "
     2613 (^a^[>^]^a)." || question, dir, dir ^= ">", ent);
     2614 		if ^Syes
     2615 		then return;
     2616 	     end;
     2617 	     else do;
     2618 		do Icomp = 0 to branch.bit_count - 1;
     2619 		     call msf_manager_$get_ptr (Pfcb, Icomp, FALSE, null, bit_count, code);
     2620 		     if code ^= 0
     2621 		     then do;
     2622 			call msf_manager_$close (Pfcb);
     2623 			code = error_table_$inconsistent_msf;
     2624 			go to ERROR_LABEL;
     2625 		     end;
     2626 		     dprint_arg.bit_count = dprint_arg.bit_count + bit_count;
     2627 		end;
     2628 		call msf_manager_$close (Pfcb);
     2629 	     end;
     2630 	end;
     2631 	else dprint_arg.bit_count = branch.bit_count;	/* Segment bit count comes from hcs_$status_long	*/
     2632 
     2633 	if dprint_arg.bit_count = 0 & branch.type = Segment & S.force
     2634 	then do;
     2635 	     call adjust_bit_count_ ((dir), (ent), (TRUE), adjusted_bit_count, code);
     2636 	     if code = 0
     2637 	     then dprint_arg.bit_count, branch.bit_count = adjusted_bit_count;
     2638 	     else do;
     2639 		call com_err_ (code, proc, "Unable to adjust bit count^[
     2640 ^; ^]on entry.  Entry not submitted
     2641 (^a^[>^]^a).", ll_err () < 100, dir, dir ^= ">", ent);
     2642 		return;
     2643 	     end;
     2644 	end;
     2645 
     2646 	if dprint_arg.bit_count > 0
     2647 	then ;					/* ask user if he wants to print a segment with	*/
     2648 
     2649 	else do;					/* a zero bit count.			*/
     2650 	     code = error_table_$zero_length_seg;
     2651 	     call command_query_$yes_no (Syes, code, proc, explanation, "Entry has a zero bit count
     2652 (^a^[>^]^a)." || question, dir, dir ^= ">", ent);
     2653 	     if ^Syes
     2654 	     then return;
     2655 	end;
     2656 
     2657 	call dprint_$check_daemon_access (dir, ent, dprint_arg.request_type, Sdelete, Sread, Sstatus, daemon_name, code)
     2658 	     ;
     2659 	if code ^= 0
     2660 	then do;
     2661 	     call command_query_$yes_no (Syes, code, proc, explanation, "^[
     2662 ^]Unable to determine access of IO Daemon (^a) to the entry
     2663 (^a^[>^]^a)." || question, ll_query () < 100, daemon_name, dir, dir ^= ">", ent);
     2664 	     if ^Syes
     2665 	     then return;
     2666 	     go to QUEUE_ENTRY;
     2667 	end;
     2668 
     2669 	if ^Sread
     2670 	then do;					/* If IO Daemon has no read access:		*/
     2671 	     if S.force
     2672 	     then do;				/*    force access for IO Daemon.		*/
     2673 		acl.name = daemon_name;
     2674 		acl.mode = R_ACCESS;
     2675 		acl.pad = ""b;
     2676 		if branch.type = Segment
     2677 		then do;
     2678 		     call hcs_$add_acl_entries (dir, ent, addr (acl), 1, code);
     2679 		     if code ^= 0
     2680 		     then do;
     2681 			if acl.code ^= 0
     2682 			then code = acl.code;
     2683 FORCE_DAEMON_READ_FAIL:
     2684 			call com_err_ (code, proc, "Unable to^[
     2685 ^; ^]force read access to entry for IO Daemon (^a).  Entry not submitted
     2686 (^a^[>^]^a).", ll_err () < 132, daemon_name, dir, dir ^= ">", ent);
     2687 			return;
     2688 		     end;
     2689 		end;
     2690 		else do;
     2691 		     call msf_manager_$open (dir, ent, Pfcb, code);
     2692 		     if code ^= 0
     2693 		     then go to FORCE_DAEMON_READ_FAIL;
     2694 		     call msf_manager_$acl_add (Pfcb, addr (acl), 1, code);
     2695 		     call msf_manager_$close (Pfcb);
     2696 		     Pfcb = null;
     2697 		     if code ^= 0
     2698 		     then do;
     2699 			code = acl.code;
     2700 			go to FORCE_DAEMON_READ_FAIL;
     2701 		     end;
     2702 		end;
     2703 	     end;
     2704 	     else do;
     2705 		code = error_table_$moderr;
     2706 		call command_query_$yes_no (Syes, code, proc, explanation, "^[
     2707 ^]IO Daemon (^a) do not have access to read the entry.
     2708 (^a^[>^]^a)." || question, ll_query () < 100, daemon_name, dir, dir ^= ">", ent);
     2709 		if ^Syes
     2710 		then return;
     2711 	     end;
     2712 	end;
     2713 
     2714 	if ^Sstatus
     2715 	then do;
     2716 	     if S.force
     2717 	     then do;				/*    force access for IO Daemon.		*/
     2718 		dir_acl.name = daemon_name;
     2719 		dir_acl.mode = S_ACCESS;
     2720 		call hcs_$add_dir_acl_entries (dir, "", addr (dir_acl), 1, code);
     2721 		if code ^= 0
     2722 		then do;
     2723 		     if dir_acl.code ^= 0
     2724 		     then code = dir_acl.code;
     2725 		     call com_err_ (code, proc, "Unable to^[
     2726 ^; ^]force status access for IO Daemon (^a)
     2727 to directory containing entry.  Entry not submitted
     2728 (^a^[>^]^a).", ll_err () < 132, daemon_name, dir, dir ^= ">", ent);
     2729 		     return;
     2730 		end;
     2731 	     end;
     2732 	     else do;
     2733 		code = error_table_$moderr;
     2734 		call command_query_$yes_no (Syes, code, proc, explanation, "^[
     2735 ^]IO Daemon (^a) does not have status access
     2736 to directory containing entry
     2737 (^a^[>^]^a)." || question, ll_query () < 100, daemon_name, dir, dir ^= ">", ent);
     2738 		if ^Syes
     2739 		then return;
     2740 	     end;
     2741 	end;
     2742 
     2743 	if ^Sdelete & N.delete = 1
     2744 	then do;
     2745 	     call ioa_ ("Warning:  IO Coordinator process (normally ^a)
     2746 does not have sufficient access to delete entry
     2747 (^a^[>^]^a).
     2748 The entry will be submitted anyway.", COORD_ACCESS_NAME, dir, dir ^= ">", ent);
     2749 	end;
     2750 
     2751 QUEUE_ENTRY:
     2752 	dprint_arg.heading = " for " || proc_heading (HEADING, PLS_struc.heading, PLS_heading, dir, ent);
     2753 	if dprint_arg.heading = " for "
     2754 	then dprint_arg.heading = "";			/* If the heading was null don't add the " for " */
     2755 	dprint_arg.destination = proc_heading (DESTINATION, PLS_struc.destination, PLS_destination, dir, ent);
     2756 
     2757 	if S.label.access
     2758 	then do;
     2759 	     call hcs_$get_access_class (dir, ent, access_class, code);
     2760 	     if code ^= 0
     2761 	     then go to ERROR_LABEL;
     2762 	     call convert_authorization_$to_string (access_class, access_label, code);
     2763 	     if ^S.label.top
     2764 	     then do;
     2765 		dprint_arg.top_label = access_label;
     2766 		dprint_arg.center_top_label = TRUE;
     2767 	     end;
     2768 	     if ^S.label.bottom
     2769 	     then do;
     2770 		dprint_arg.bottom_label = access_label;
     2771 		dprint_arg.center_bottom_label = TRUE;
     2772 	     end;
     2773 	end;
     2774 
     2775 	if S.label.top
     2776 	then dprint_arg.top_label =
     2777 		proc_label (TOP_LABEL, PLS_struc.top_label, PLS_top_label, dir, ent, dprint_arg.center_top_label);
     2778 	else if ^S.label.access
     2779 	then dprint_arg.top_label = "";
     2780 
     2781 	if S.label.bottom
     2782 	then dprint_arg.bottom_label =
     2783 		proc_label (BOTTOM_LABEL, PLS_struc.bottom_label, PLS_bottom_label, dir, ent,
     2784 		dprint_arg.center_bottom_label);
     2785 	else if ^S.label.access
     2786 	then dprint_arg.bottom_label = "";
     2787 
     2788 REQUEUE:
     2789 	call dprint_ (dir, ent, addr (dprint_arg), code); /* add request for operation to the queue.	*/
     2790 	if code ^= 0
     2791 	then if code = error_table_$notalloc
     2792 	     then go to QUEUE_FULL;
     2793 	     else if code = error_table_$noentry
     2794 	     then go to QUEUE_MISSING;
     2795 	     else if code = error_table_$bad_segment
     2796 	     then go to QUEUE_BAD;
     2797 	     else if code = error_table_$lock_wait_time_exceeded
     2798 	     then do;
     2799 		call command_query_$yes_no (Syes, code, proc, "yes, y
     2800    reattempt to submit the request.  The same error may occur again.
     2801 no, n
     2802    skip this request and those which follow.", "(^a^[>^]^a)
     2803 Do you want to try submitting the request again?", dir, dir ^= ">", ent);
     2804 		if Syes
     2805 		then go to REQUEUE;
     2806 		go to EXIT;
     2807 	     end;
     2808 	     else go to QUEUE_ERROR;
     2809 	Nqueued = Nqueued + 1;
     2810 	Nmatches = Nmatches + 1;
     2811 	return;
     2812 
     2813 QUEUE_BAD:
     2814 QUEUE_ERROR:
     2815 QUEUE_MISSING:
     2816 	call com_err_ (code, proc, "Queue ^d of the ^a request type.
     2817 Entry ^a^[>^]^a
     2818 and requests following it have not been submitted.", dprint_arg.queue, dprint_arg.request_type, dir, dir ^= ">", ent);
     2819 	go to EXIT;
     2820 
     2821 QUEUE_FULL:
     2822 	call com_err_ (error_table_$notalloc, proc, "Queue ^d of the ^a request type is full.
     2823 Entry ^a^[>^]^a
     2824 and requests following it have not been submitted.", dprint_arg.queue, dprint_arg.request_type, dir, dir ^= ">", ent);
     2825 	go to EXIT;
     2826 
     2827      end submit;
     2828 
     2829 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     2830 
     2831 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     2832 
     2833 
     2834 DEFAULT_QUEUE_UNDEFINED:
     2835 	call com_err_ (code, proc, "
     2836 Getting default queue number for ^a request type.", O.request_type);
     2837 	go to FINISH;
     2838 
     2839 DEFAULT_RQT_NOT_DEFINED:
     2840 	call com_err_ (error_table_$typename_not_found, proc, "-set_default_request_type ^a 
     2841 ^a does not have system defined eor defaults.  Use -set_defaults to set it.", O.default_request_type,
     2842 	     O.default_request_type);
     2843 	go to FINISH;
     2844 
     2845 DELETE_FAILURE:
     2846 	call com_err_ (code, proc, "^[
     2847 ^]Attempting to delete an eor default in the value segment
     2848 (^a)", ll_err () < 118, value_seg_path);
     2849 	go to FINISH;
     2850 
     2851 ERROR_VALIDATING_FORM:
     2852 	if code = error_table_$bad_forms_option
     2853 	then if validate_forms_info_output.error_length ^= 0
     2854 	     then call com_err_ (code, proc, "^a", validate_forms_info_output.error_string);
     2855 	     else go to display_general_forms_error;
     2856 	else do;
     2857 display_general_forms_error:
     2858 	     call com_err_ (code, proc, "Validating forms string ""^a"" for ^a request type.", O.forms_name,
     2859 		O.request_type);
     2860 	end;
     2861 	go to FINISH;
     2862 
     2863 INCONSISTENT_DNM_RQT_ARGS:
     2864 	call com_err_ (error_table_$inconsistent, proc, "-request_type ^a -default_name ^a.
     2865 The ^a group of defaults uses the ^a request type.", O.request_type, O.name_of_default, O.name_of_default,
     2866 	     default_print.request_type);
     2867 	go to FINISH;
     2868 
     2869 INCONSISTENT_PRINT_PUNCH_PLOT:
     2870 	if O.request_type ^= ""
     2871 	then do;
     2872 	     call iod_info_$generic_type (O.request_type, gen_type, code);
     2873 	     if gen_type = "printer"
     2874 	     then Ntype = DP_PRINT;
     2875 	     else if gen_type = "punch"
     2876 	     then Ntype = DP_PUNCH;
     2877 	     else Ntype = DP_PLOT;
     2878 	     if Ntype = DP_PRINT
     2879 	     then call com_err_ (error_table_$inconsistent, proc, "
     2880 Request type ^a is a ^a generic type.
     2881 The following arguments are inconsistent with printing:^[^; -7punch^; -mcc^; -raw^]^[^; -punch^; -plot^]",
     2882 		     O.request_type, gen_type, N.output_module, N.pt_pch);
     2883 	     else call com_err_ (error_table_$inconsistent, proc, "
     2884 Request type ^a is a ^a generic type.
     2885 The following are inconsistent with ^[^;punch^;plott^]ing:^[
     2886   -access_label^]^[
     2887   -forms^]^[
     2888   -indent^]^[
     2889   -label, -top_label, or -bottom_label^]^[
     2890   -line_length^]^[
     2891   -no_end_page^]^[" || "
     2892   -no_vertical_space^]^[
     2893   -non_edited^]^[
     2894   -page_length^]^[
     2895   ^[-print^;-punch^;-plot^]^;^s^]^[
     2896   -truncate^]^[
     2897   ^[^;-7punch^;-mcc^;-raw^]^;^s^]", O.request_type, gen_type, Ntype, S.label.access, O.forms_name ^= "", N.lmargin > 0,
     2898 		     S.label.top | S.label.bottom, N.line_lth > 0, S.nep, S.single, S.non_edited, N.page_lth > 0,
     2899 		     (N.pt_pch ^= UNDEFINED & N.pt_pch ^= Ntype), N.pt_pch, S.truncate,
     2900 		     (Ntype = DP_PLOT & PUNCH <= N.output_module & N.output_module <= RAW), N.output_module);
     2901 	end;
     2902 	else call com_err_ (error_table_$inconsistent, proc, "^[
     2903 Punching arguments:^[^; -7punch^; -mcc^; -raw^]^[ -punch^]^;^2s^]^[
     2904 Plotting arguments: -plot^]
     2905 Printing arguments:^[
     2906   -access_label^]^[
     2907   -forms^]^[
     2908   -indent^]^[
     2909   -label, -top_label, or -bottom_label^]^[
     2910   -line_length^]^[
     2911   -no_end_page^]^[" || "
     2912   -no_vertical_space^]^[
     2913   -non_edited^]^[
     2914   -page_length^]^[
     2915   -print^]^[
     2916   -truncate^]", ((PUNCH <= N.output_module & N.output_module <= RAW) | N.pt_pch = DP_PUNCH), N.output_module,
     2917 		N.pt_pch = DP_PUNCH, N.pt_pch = DP_PLOT, S.label.access, O.forms_name ^= "", N.lmargin > 0,
     2918 		S.label.top | S.label.bottom, N.line_lth > 0, S.nep, S.single, S.non_edited, N.page_lth > 0,
     2919 		N.pt_pch = DP_PRINT, S.truncate);
     2920 	go to FINISH;
     2921 
     2922 INDENT_INCONSISTENT_WITH_LINE_LENGTH:
     2923 	call com_err_ (error_table_$inconsistent, proc, "-indent ^d -line_length ^d.", N.lmargin, N.line_lth);
     2924 	go to FINISH;
     2925 
     2926 MAX_INDENT_EXCEEDED:
     2927 	call com_err_ (error_table_$out_of_bounds, proc, "-indent ^d
     2928 The line length must be <= ^d.", N.lmargin, MAX_LINE_LENGTH);
     2929 	go to FINISH;
     2930 
     2931 MAX_LINE_LENGTH_EXCEEDED:
     2932 	call com_err_ (error_table_$out_of_bounds, proc, "-line_length ^d
     2933 The line length must be <= ^d.", N.line_lth, MAX_LINE_LENGTH);
     2934 	go to FINISH;
     2935 
     2936 MAX_QUEUE_EXCEEDED:
     2937 	call com_err_ (error_table_$out_of_bounds, proc, "-queue ^d
     2938 The ^a request type has only ^d queue^[s^].", N.queue, O.request_type, max_q, max_q > 1);
     2939 	go to FINISH;
     2940 
     2941 MAX_QUEUE_UNDEFINED:
     2942 	call com_err_ (code, proc, "^[
     2943 ^]Getting highest queue number for ^a request type.", ll_err () < 120, O.request_type);
     2944 	go to FINISH;
     2945 
     2946 NOT_AF:
     2947 	call com_err_ (code, proc);
     2948 	go to FINISH;
     2949 
     2950 STORE_FAILURE:
     2951 	call com_err_ (code, proc, "^[
     2952 ^]Attempting to store an eor default in the value segment
     2953 (^a).", ll_err () < 118, value_seg_path);
     2954 	go to FINISH;
     2955 
     2956 UNDEFINED_GENERIC_TYPE:
     2957 	call com_err_ (error_table_$typename_not_found, proc, "Request type ^a is of
     2958 ^a generic type.  ^a cannot handle this generic type.", O.request_type, gen_type, proc);
     2959 	go to FINISH;
     2960 
     2961 UNDEFINED_REQUEST_TYPE:
     2962 	call com_err_ (code, proc, "^[
     2963 ^]The ^a request type is not defined.", ll_err () < 118, O.request_type);
     2964 	go to FINISH;
     2965 
     2966 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     2967 
  2     1 /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  2     2*
  2     3*   Values for the "access mode" argument so often used in hardcore
  2     4*   James R. Davis 26 Jan 81  MCR 4844
  2     5*   Added constants for SM access 4/28/82 Jay Pattin
  2     6*   Added text strings 03/19/85 Chris Jones
  2     7**/
  2     8 
  2     9 
  2    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  2    11 dcl	(
  2    12 	N_ACCESS		   init ("000"b),
  2    13 	R_ACCESS		   init ("100"b),
  2    14 	E_ACCESS		   init ("010"b),
  2    15 	W_ACCESS		   init ("001"b),
  2    16 	RE_ACCESS		   init ("110"b),
  2    17 	REW_ACCESS	   init ("111"b),
  2    18 	RW_ACCESS		   init ("101"b),
  2    19 	S_ACCESS		   init ("100"b),
  2    20 	M_ACCESS		   init ("010"b),
  2    21 	A_ACCESS		   init ("001"b),
  2    22 	SA_ACCESS		   init ("101"b),
  2    23 	SM_ACCESS		   init ("110"b),
  2    24 	SMA_ACCESS	   init ("111"b)
  2    25 	)		   bit (3) internal static options (constant);
  2    26 
  2    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  2    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  2    29 
  2    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  2    31 			   static options (constant);
  2    32 
  2    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  2    34 			   static options (constant);
  2    35 
  2    36 dcl	(
  2    37 	N_ACCESS_BIN	   init (00000b),
  2    38 	R_ACCESS_BIN	   init (01000b),
  2    39 	E_ACCESS_BIN	   init (00100b),
  2    40 	W_ACCESS_BIN	   init (00010b),
  2    41 	RW_ACCESS_BIN	   init (01010b),
  2    42 	RE_ACCESS_BIN	   init (01100b),
  2    43 	REW_ACCESS_BIN	   init (01110b),
  2    44 	S_ACCESS_BIN	   init (01000b),
  2    45 	M_ACCESS_BIN	   init (00010b),
  2    46 	A_ACCESS_BIN	   init (00001b),
  2    47 	SA_ACCESS_BIN	   init (01001b),
  2    48 	SM_ACCESS_BIN	   init (01010b),
  2    49 	SMA_ACCESS_BIN	   init (01011b)
  2    50 	)		   fixed bin (5) internal static options (constant);
  2    51 
  2    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
     2968 
     2969 
  3     1 /* BEGIN INCLUDE FILE ... cp_active_string_types.incl.pl1 */
  3     2 /* Created:  5 May 1980 by G. Palter */
  3     3 
  3     4 /* Types of active strings recognized by active string evaluation entries of the Multics command processor */
  3     5 
  3     6 dcl (DEFAULT_ACTIVE_STRING		initial (0),	/* default type: same as NORMAL_ACTIVE_STRING */
  3     7      NORMAL_ACTIVE_STRING		initial (1),	/* normal active string: [...] */
  3     8      TOKENS_ONLY_ACTIVE_STRING	initial (2),	/* rescan active string for whitespace and quotes: |[...] */
  3     9      ATOMIC_ACTIVE_STRING		initial (3))	/* do not rescan anything in value: ||[...] */
  3    10 	fixed binary static options (constant);
  3    11 
  3    12 /* END INCLUDE FILE ... cp_active_string_types.incl.pl1 */
     2970 
     2971 
  4     1 /* BEGIN INCLUDE FILE ... dprint_arg.incl.pl1 */
  4     2 /* Modified 11/13/74 by Noel I. Morris */
  4     3 /* Modified: 10 April 1981 by G. Palter for version 6 structure -- longer request type names */
  4     4 /* Modified: 30 April 1982 by R. Kovalcik for version 7 structure -- defer_until_process_terminataion */
  4     5 /* Modified: November 1983 by C. Marker for version 8 structure -- no_separator */
  4     6 
  4     7 /****^  HISTORY COMMENTS:
  4     8*  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
  4     9*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
  4    10*     Add line_nbrs bit for line-numbered printouts, version 9.
  4    11*  2) change(88-02-05,Farley), approve(88-02-05,PBF7686), audit(88-02-05,GWMay),
  4    12*     install(88-02-05,MR12.2-1022):
  4    13*     Corrected alignment of line_nbrs, was aligned s/b unaligned..
  4    14*  3) change(88-08-29,Farley), approve(88-09-16,MCR7911),
  4    15*     audit(88-09-29,Wallman), install(88-10-28,MR12.2-1199):
  4    16*     Created a new 64 character forms_name variable, which supersedes the old
  4    17*     char 24 form_name variable, version 10.
  4    18*                                                   END HISTORY COMMENTS */
  4    19 
  4    20 
  4    21 dcl  dpap ptr;					/* ptr to argument structure */
  4    22 dcl  1 dprint_arg_buf aligned like dprint_arg;		/* Automatic storage for arg. */
  4    23 
  4    24 dcl  1 dprint_arg based (dpap) aligned,			/* argument structure */
  4    25        2 version fixed bin,				/* version number of dcl - current version is 9 */
  4    26        2 copies fixed bin,				/* number of copies wanted */
  4    27        2 delete fixed bin,				/* 1=delete after print */
  4    28        2 queue fixed bin,				/* print queue */
  4    29        2 pt_pch fixed bin,				/* 1=print, 2=punch */
  4    30        2 notify fixed bin,				/* 1 = notify user when done */
  4    31        2 heading char (64),				/* first page heading */
  4    32        2 output_module fixed bin,			/* 1=print, 2=7punch, 3=mcc, 4=raw, 5=plotter */
  4    33        2 dest char (12),				/* version 5 made this a pad - see destination below */
  4    34 						/* limit of version 1 structure */
  4    35        2 carriage_control,				/* Carriage control flags. */
  4    36          3 nep bit (1) unal,				/* TRUE if print trhu perf. */
  4    37          3 single bit (1) unal,			/* TRUE if ignore FF and VT */
  4    38          3 non_edited bit (1) unal,			/* TRUE if printing in non-edited mode */
  4    39          3 truncate bit (1) unal,			/* TRUE if truncating lines at line length */
  4    40          3 center_top_label bit (1) unal,		/* TRUE if top label to be centered */
  4    41          3 center_bottom_label bit (1) unal,		/* TRUE if bottom label to be centered */
  4    42          3 esc bit (1) unal,				/* version 5 TRUE if text escapes are to be processed */
  4    43          3 no_separator bit (1) unal,			/* version 8 TRUE if the inner head and tail sheets are to be suppressed. */
  4    44          3 line_nbrs bit (1) unal,			/* version 9, line numbers */
  4    45          3 padding bit (27) unal,
  4    46        2 pad (30) fixed bin,
  4    47        2 forms char (8),				/* version 5 made this a pad - see form_name below */
  4    48        2 lmargin fixed bin,				/* left margin */
  4    49        2 line_lth fixed bin,				/* max line lth */
  4    50 						/* limit of version 2 structure */
  4    51        2 class char (8),				/* version 6 made this a pad - see request_type below */
  4    52        2 page_lth fixed bin,				/* Paper length arg */
  4    53 						/* limit of version 3 structure */
  4    54        2 top_label char (136),			/* top-of-page label */
  4    55        2 bottom_label char (136),			/* bottom-of-page label */
  4    56 						/* limit of version 4 structure */
  4    57        2 bit_count fixed bin (35),			/* segment bit count */
  4    58        2 form_name char (24),				/* name of special forms needed - moved from forms */
  4    59 						/* version 10 made this a pad - see forms_name below */
  4    60        2 destination char (24),			/* the long destination - moved from dest */
  4    61        2 chan_stop_path char (168),			/* path of user channel stops - future */
  4    62 						/* limit of version 5 structure */
  4    63        2 request_type character (24) unaligned,		/* request type for the request */
  4    64                                                             /* limit of version 6 structure */
  4    65        2 defer_until_process_termination fixed bin,	/* 1 = don't process request until requesting process terminates */
  4    66        2 forms_name char (64) unal;			/* name of special forms needed - moved from form_name */
  4    67                                                             /* limit of version 10 structure */
  4    68 
  4    69 dcl  dprint_arg_version_1 fixed bin int static options (constant) init (1);
  4    70 dcl  dprint_arg_version_2 fixed bin int static options (constant) init (2);
  4    71 dcl  dprint_arg_version_3 fixed bin int static options (constant) init (3);
  4    72 dcl  dprint_arg_version_4 fixed bin int static options (constant) init (4);
  4    73 dcl  dprint_arg_version_5 fixed bin int static options (constant) init (5);
  4    74 dcl  dprint_arg_version_6 fixed bin int static options (constant) init (6);
  4    75 dcl  dprint_arg_version_7 fixed bin int static options (constant) init (7);
  4    76 dcl  dprint_arg_version_8 fixed bin int static options (constant) init (8);
  4    77 dcl  dprint_arg_version_9 fixed bin int static options (constant) init (9);
  4    78 dcl  dprint_arg_version_10 fixed bin int static options (constant) init (10);
  4    79 						/* current version */
  4    80 
  4    81 dcl  (
  4    82      DP_PRINT init (1),
  4    83      DP_PUNCH init (2),
  4    84      DP_PLOT init (3)
  4    85      ) fixed bin static options (constant);		/* for dprint_arg.pt_pch */
  4    86 
  4    87 /* END INCLUDE FILE ... dprint_arg.incl.pl1 */
     2972 
     2973 
  5     1 /* BEGIN INCLUDE FILE . . . star_structures.incl.pl1 */
  5     2 
  5     3 /* This include file contains structures for the hcs_$star_,
  5     4*   hcs_$star_list_ and hcs_$star_dir_list_ entry points.
  5     5*
  5     6*   Written 23 October 1978 by Monte Davidoff.
  5     7*   Modified January 1979 by Michael R. Jordan to use unsigned and different pointers for different structures.
  5     8*   Modified June 1981 by C. Hornig to count link pathnames more efficiently.
  5     9**/
  5    10 
  5    11 /* automatic */
  5    12 
  5    13 declare  star_branch_count fixed binary;		/* hcs_$star_list_, hcs_$star_dir_list_: matching branch count */
  5    14 declare  star_entry_count fixed binary;			/* hcs_$star_: number of matching entries */
  5    15 declare  star_entry_ptr pointer;			/* hcs_$star_: pointer to array of entry information */
  5    16 declare  star_list_branch_ptr pointer;			/* hcs_$star_list_, hcs_$star_dir_list_: ptr to array of info */
  5    17 declare  star_link_count fixed binary;			/* hcs_$star_list_, hcs_$star_dir_list_: matching link count */
  5    18 declare  star_linkx fixed binary;			/* hcs_$star_list_, hcs_$star_dir_list_: index into star_links */
  5    19 declare  star_names_ptr pointer;			/* hcs_$star_: pointer to array of entry names */
  5    20 declare  star_list_names_ptr pointer;			/* hcs_$star_list_, hcs_$star_dir_list_: ptr to entry names */
  5    21 declare  star_select_sw fixed binary (3);		/* hcs_$star_list_, hcs_$star_dir_list_: what info to return */
  5    22 
  5    23 /* based */
  5    24 
  5    25 /* hcs_$star_ entry structure */
  5    26 
  5    27 declare 1 star_entries (star_entry_count) aligned based (star_entry_ptr),
  5    28         2 type fixed binary (2) unsigned unaligned,
  5    29 						/* storage system type */
  5    30         2 nnames fixed binary (16) unsigned unaligned,
  5    31 						/* number of names of entry that match star_name */
  5    32         2 nindex fixed binary (18) unsigned unaligned;
  5    33 						/* index of first name in star_names */
  5    34 
  5    35 /* hcs_$star_ name structure */
  5    36 
  5    37 declare  star_names (sum (star_entries (*).nnames)) char (32) based (star_names_ptr);
  5    38 
  5    39 /* hcs_$star_list_ branch structure */
  5    40 
  5    41 declare 1 star_list_branch (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  5    42         2 type fixed binary (2) unsigned unaligned,
  5    43 						/* storage system type */
  5    44         2 nnames fixed binary (16) unsigned unaligned,
  5    45 						/* number of names of entry that match star_name */
  5    46         2 nindex fixed binary (18) unsigned unaligned,
  5    47 						/* index of first name in star_list_names */
  5    48         2 dtcm bit (36) unaligned,			/* date-time contents of branch were last modified */
  5    49         2 dtu bit (36) unaligned,			/* date-time branch was last used */
  5    50         2 mode bit (5) unaligned,			/* user's access mode to the branch */
  5    51         2 raw_mode bit (5) unaligned,			/* user's ACL access mode */
  5    52         2 master_dir bit (1) unaligned,			/* is branch a master directory */
  5    53         2 pad bit (7) unaligned,
  5    54         2 records fixed binary (18) unsigned unaligned;
  5    55 						/* records used by branch */
  5    56 
  5    57 /* hcs_$star_dir_list_ branch structure */
  5    58 
  5    59 declare 1 star_dir_list_branch (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  5    60         2 type fixed binary (2) unsigned unaligned,
  5    61 						/* storage system type */
  5    62         2 nnames fixed binary (16) unsigned unaligned,
  5    63 						/* number of names of entry that match star_name */
  5    64         2 nindex fixed binary (18) unsigned unaligned,
  5    65 						/* index of first name in star_list_names */
  5    66         2 dtem bit (36) unaligned,			/* date-time directory entry of branch was last modified */
  5    67         2 pad bit (36) unaligned,
  5    68         2 mode bit (5) unaligned,			/* user's access mode to the branch */
  5    69         2 raw_mode bit (5) unaligned,			/* user's ACL access mode */
  5    70         2 master_dir bit (1) unaligned,			/* is branch a master directory */
  5    71         2 bit_count fixed binary (24) unaligned;
  5    72 						/* bit count of the branch */
  5    73 
  5    74 /* hcs_$star_list_ and hcs_$star_dir_list_ link structure */
  5    75 
  5    76 declare 1 star_links (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  5    77         2 type fixed binary (2) unsigned unaligned,
  5    78 						/* storage system type */
  5    79         2 nnames fixed binary (16) unsigned unaligned,
  5    80 						/* number of names of entry that match star_name */
  5    81         2 nindex fixed binary (18) unsigned unaligned,
  5    82 						/* index of first name in star_list_names */
  5    83         2 dtem bit (36) unaligned,			/* date-time link was last modified */
  5    84         2 dtd bit (36) unaligned,			/* date-time the link was last dumped */
  5    85         2 pathname_len fixed binary (18) unsigned unaligned,
  5    86 						/* length of the pathname of the link */
  5    87         2 pathname_index fixed binary (18) unsigned unaligned;
  5    88 						/* index of start of pathname in star_list_names */
  5    89 
  5    90 /* hcs_$star_list_ and hcs_$star_dir_list_ name array */
  5    91 
  5    92 declare  star_list_names char (32) based (star_list_names_ptr)
  5    93 	dimension (star_links (star_branch_count + star_link_count).nindex
  5    94 	 + star_links (star_branch_count + star_link_count).nnames
  5    95 	 + divide (star_links (star_branch_count + star_link_count).pathname_len + 31, 32, 17, 0)
  5    96 	   * binary (
  5    97 	     (star_links (star_branch_count + star_link_count).type = star_LINK)
  5    98 	     & (star_select_sw >= star_LINKS_ONLY_WITH_LINK_PATHS), 1));
  5    99 
  5   100 /* hcs_$star_list_ and hcs_$star_dir_list_ link pathname */
  5   101 
  5   102 declare  star_link_pathname char (star_links (star_linkx).pathname_len)
  5   103          based (addr (star_list_names (star_links (star_linkx).pathname_index)));
  5   104 
  5   105 /* internal static */
  5   106 
  5   107 /* star_select_sw values */
  5   108 
  5   109 declare  star_LINKS_ONLY fixed binary (2) internal static options (constant) initial (1);
  5   110 declare  star_BRANCHES_ONLY fixed binary (2) internal static options (constant) initial (2);
  5   111 declare  star_ALL_ENTRIES fixed binary (2) internal static options (constant) initial (3);
  5   112 declare  star_LINKS_ONLY_WITH_LINK_PATHS
  5   113          fixed binary (3) internal static options (constant) initial (5);
  5   114 declare  star_ALL_ENTRIES_WITH_LINK_PATHS
  5   115          fixed binary (3) internal static options (constant) initial (7);
  5   116 
  5   117 /* storage system types */
  5   118 
  5   119 declare  star_LINK fixed binary (2) unsigned internal static options (constant) initial (0);
  5   120 declare  star_SEGMENT fixed binary (2) unsigned internal static options (constant) initial (1);
  5   121 declare  star_DIRECTORY fixed binary (2) unsigned internal static options (constant) initial (2);
  5   122 
  5   123 /* END INCLUDE FILE . . . star_structures.incl.pl1 */
     2974 
     2975 
  6     1 /* --------------- BEGIN include file status_structures.incl.pl1 --------------- */
  6     2 
  6     3 /* Revised from existing include files 09/26/78 by C. D. Tavares */
  6     4 
  6     5 /* This include file contains branch and link structures returned by
  6     6*   hcs_$status_ and hcs_$status_long. */
  6     7 
  6     8 dcl 1 status_branch aligned based (status_ptr),
  6     9     2 short aligned,
  6    10       3 type fixed bin (2) unaligned unsigned,		/* seg, dir, or link */
  6    11       3 nnames fixed bin (16) unaligned unsigned,		/* number of names */
  6    12       3 names_relp bit (18) unaligned,			/* see entry_names dcl */
  6    13       3 dtcm bit (36) unaligned,			/* date/time contents last modified */
  6    14       3 dtu bit (36) unaligned,			/* date/time last used */
  6    15       3 mode bit (5) unaligned,			/* caller's effective access */
  6    16       3 raw_mode bit (5) unaligned,			/* caller's raw "rew" modes */
  6    17       3 pad1 bit (8) unaligned,
  6    18       3 records_used fixed bin (18) unaligned unsigned,	/* number of NONZERO pages used */
  6    19 
  6    20 /* Limit of information returned by hcs_$status_ */
  6    21 
  6    22     2 long aligned,
  6    23       3 dtd bit (36) unaligned,			/* date/time last dumped */
  6    24       3 dtem bit (36) unaligned,			/* date/time branch last modified */
  6    25       3 lvid bit (36) unaligned,			/* logical volume ID */
  6    26       3 current_length fixed bin (12) unaligned unsigned,	/* number of last page used */
  6    27       3 bit_count fixed bin (24) unaligned unsigned,	/* reported length in bits */
  6    28       3 pad2 bit (8) unaligned,
  6    29       3 copy_switch bit (1) unaligned,			/* copy switch */
  6    30       3 tpd_switch bit (1) unaligned,			/* transparent to paging device switch */
  6    31       3 mdir_switch bit (1) unaligned,			/* is a master dir */
  6    32       3 damaged_switch bit (1) unaligned,		/* salvager warned of possible damage */
  6    33       3 synchronized_switch bit (1) unaligned,		/* DM synchronized file */
  6    34       3 pad3 bit (5) unaligned,
  6    35       3 ring_brackets (0:2) fixed bin (6) unaligned unsigned, 
  6    36       3 uid bit (36) unaligned;			/* unique ID */
  6    37 
  6    38 dcl 1 status_link aligned based (status_ptr),
  6    39     2 type fixed bin (2) unaligned unsigned,		/* as above */
  6    40     2 nnames fixed bin (16) unaligned unsigned,
  6    41     2 names_relp bit (18) unaligned,
  6    42     2 dtem bit (36) unaligned,
  6    43     2 dtd bit (36) unaligned,
  6    44     2 pathname_length fixed bin (17) unaligned,		/* see pathname */
  6    45     2 pathname_relp bit (18) unaligned;			/* see pathname */
  6    46 
  6    47 dcl  status_entry_names (status_branch.nnames) character (32) aligned
  6    48 	based (pointer (status_area_ptr, status_branch.names_relp)),
  6    49 						/* array of names returned */
  6    50      status_pathname character (status_link.pathname_length) aligned
  6    51 	based (pointer (status_area_ptr, status_link.pathname_relp)),
  6    52 						/* link target path */
  6    53      status_area_ptr pointer,
  6    54      status_ptr pointer;
  6    55 
  6    56 dcl (Link initial (0),
  6    57      Segment initial (1),
  6    58      Directory initial (2)) fixed bin internal static options (constant);
  6    59 						/* values for type fields declared above */
  6    60 
  6    61 /* ---------------- END include file status_structures.incl.pl1 ---------------- */
     2976 
     2977 
     2978 dcl  Msf fixed bin int static options (constant) init (3),
     2979      1 branch aligned like status_branch;
     2980 
  7     1 /* BEGIN value_structures.incl.pl1 */
  7     2 
  7     3 dcl (match_info_ptr, value_list_info_ptr) ptr;
  7     4 dcl (alloc_name_count, alloc_pair_count) fixed bin;
  7     5 dcl (alloc_max_name_len, alloc_chars_len) fixed bin (21);
  7     6 
  7     7 dcl 1 match_info aligned based (match_info_ptr),
  7     8    2 version fixed bin,				/* = 1 */
  7     9    2 name_count fixed bin,
  7    10    2 max_name_len fixed bin (21),
  7    11    2 name_array (alloc_name_count refer (match_info.name_count)),
  7    12     3 exclude_sw bit (1) unaligned,			/* ON for -exclude, OFF for -match */
  7    13     3 regexp_sw bit (1) unaligned,			/* ON for regular exp. without the //, OFF for starname */
  7    14     3 pad bit (34) unaligned,
  7    15     3 name char (alloc_max_name_len refer (match_info.max_name_len)) varying;
  7    16 
  7    17 dcl 1 value_list_info aligned based (value_list_info_ptr),
  7    18    2 version fixed bin,				/* = 1 */
  7    19    2 pair_count fixed bin,
  7    20    2 chars_len fixed bin (21),
  7    21    2 pairs (alloc_pair_count refer (value_list_info.pair_count)),
  7    22     3 type_switches bit (36),				/* correspond to the selection switches arg */
  7    23     3 (name_index, name_len) fixed bin (21),
  7    24     3 (value_index, value_len) fixed bin (21),
  7    25    2 chars char (alloc_chars_len refer (value_list_info.chars_len));
  7    26 
  7    27 dcl (match_info_version_1, value_list_info_version_1) fixed bin int static options (constant) init (1);
  7    28 
  7    29 /* END OF value_structures.incl.pl1 */
     2981 
     2982 
     2983 dcl  1 mi aligned,					/* automatic copy of match_info		*/
     2984        2 version fixed bin init (1),
     2985        2 name_count fixed bin init (1),
     2986        2 max_name_length fixed bin init (30),
     2987        2 name_array (1),
     2988          3 exclude_sw bit (1) unal init ("0"b),
     2989          3 regexp_sw bit (1) unal init ("0"b),
     2990          3 pad bit (34) unal init ("0"b),
     2991          3 name char (30) varying;
  8     1 /* BEGIN INCLUDE FILE ... user_forms_info.incl.pl1 */
  8     2 
  8     3 
  8     4 /****^  HISTORY COMMENTS:
  8     5*  1) change(88-02-26,Brunelle), approve(88-06-08,MCR7911),
  8     6*     audit(88-10-12,Wallman), install(88-10-28,MR12.2-1199):
  8     7*     Created.
  8     8*                                                   END HISTORY COMMENTS */
  8     9 
  8    10 /* format: style4 */
  8    11 
  8    12 /* structure used to return information for iod_info_$forms_info call */
  8    13 
  8    14 dcl  forms_info_ptr ptr;
  8    15 dcl  1 forms_info based (forms_info_ptr),
  8    16        2 version char (8),
  8    17        2 no_entries fixed bin,			/* # entries in table */
  8    18        2 no_names fixed bin,				/* # of names in table */
  8    19        2 no_comments fixed bin,			/* # of comments in table */
  8    20        2 no_types fixed bin,				/* # of type names in table */
  8    21        2 no_uses fixed bin,				/* # of uses entries in table */
  8    22        2 no_specials fixed bin,			/* # of special entries in table */
  8    23        2 default_forms_length fixed bin,
  8    24        2 default_form char (forms_info_default_forms_length refer (forms_info.default_forms_length)),
  8    25        2 entry (forms_info_entry_count refer (forms_info.no_entries)),
  8    26          3 first_name_index fixed bin,			/* index into names for first name for this entry */
  8    27          3 last_name_index fixed bin,			/* index into names for last name for this entry */
  8    28          3 comment_index fixed bin,			/* index into comments for this entry */
  8    29          3 type_index fixed bin,			/* index into types for this entry */
  8    30          3 uses_index fixed bin,			/* index into uses for this entry */
  8    31          3 special_index fixed bin,			/* index into specials for this entry */
  8    32        2 names (forms_info_name_count refer (forms_info.no_names)) char (32),
  8    33        2 comments (forms_info_comment_count refer (forms_info.no_comments)) char (128),
  8    34        2 types (forms_info_types_count refer (forms_info.no_types)) fixed bin,
  8    35        2 uses (forms_info_uses_count refer (forms_info.no_uses)) char (128),
  8    36        2 specials (forms_info_specials_count refer (forms_info.no_specials)) char (64);
  8    37 
  8    38 dcl  (forms_info_entry_count,
  8    39      forms_info_name_count,
  8    40      forms_info_comment_count,
  8    41      forms_info_types_count,
  8    42      forms_info_uses_count,
  8    43      forms_info_specials_count,
  8    44      forms_info_default_forms_length) fixed bin;
  8    45 dcl  FORMS_INFO_VERSION_1 char (8) int static options (constant) init ("FIxx0001");
  8    46 
  8    47 
  8    48 /* input structure for call to iod_info_$validate_forms_info */
  8    49 
  8    50 dcl  validate_forms_info_input_ptr ptr;
  8    51 dcl  1 validate_forms_info_input aligned based (validate_forms_info_input_ptr),
  8    52        2 version char (8),
  8    53        2 request_type char (32),			/* request_type to use to evaluate the forms string */
  8    54        2 user_area_ptr ptr,				/* ptr to user area to allocate return structure in */
  8    55        2 max_forms_string_length fixed bin,		/* max allowed size of returned forms string */
  8    56        2 forms_string_length fixed bin,			/* # of chars in input forms string to validate */
  8    57        2 forms_string char (input_forms_string_length	/* forms string to validate */
  8    58 	  refer (validate_forms_info_input.forms_string_length));
  8    59 
  8    60 dcl  input_forms_string_length fixed bin;
  8    61 dcl  VALIDATE_FORMS_INFO_INPUT_VERSION_1 char (8) int static options (constant) init ("VFII0001");
  8    62 
  8    63 
  8    64 /* output structure returned for call to iod_info_$validate_forms_info */
  8    65 
  8    66 dcl  validate_forms_info_output_ptr ptr;
  8    67 dcl  1 validate_forms_info_output aligned based (validate_forms_info_output_ptr),
  8    68        2 version char (8),
  8    69        2 lines_per_page fixed bin,
  8    70        2 chars_per_line fixed bin,
  8    71        2 lines_per_inch fixed bin,
  8    72        2 forms_allowed bit (1),
  8    73        2 forms_length fixed bin,
  8    74        2 error_length fixed bin,
  8    75        2 returned_forms char (returned_forms_length
  8    76 	  refer (validate_forms_info_output.forms_length)),
  8    77        2 error_string char (error_string_length
  8    78 	  refer (validate_forms_info_output.error_length));
  8    79 
  8    80 dcl  (returned_forms_length, error_string_length) fixed bin;
  8    81 
  8    82 dcl  VALIDATE_FORMS_INFO_OUTPUT_VERSION_1 char (8) int static options (constant) init ("VFIO0001");
  8    83 
  8    84 /* END INCLUDE FILE ... user_forms_info.incl.pl1 */
     2992 
     2993      end enter_output_request;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/28/88  1229.4  enter_output_request.pl1          >special_ldd>install>MR12.2-1199>enter_output_request.pl1
1139         1    03/19/82  1647.0  eor_defaults.incl.pl1             >ldd>include>eor_defaults.incl.pl1
2968         2    04/11/85  1452.6  access_mode_values.incl.pl1       >ldd>include>access_mode_values.incl.pl1
2970         3    09/22/80  1256.7  cp_active_string_types.incl.pl1   >ldd>include>cp_active_string_types.incl.pl1
2972         4    10/28/88  1227.7  dprint_arg.incl.pl1               >special_ldd>install>MR12.2-1199>dprint_arg.incl.pl1
2974         5    06/10/82  1045.5  star_structures.incl.pl1          >ldd>include>star_structures.incl.pl1
2976         6    11/22/82  0955.7  status_structures.incl.pl1        >ldd>include>status_structures.incl.pl1
2981         7    06/24/81  1743.9  value_structures.incl.pl1         >ldd>include>value_structures.incl.pl1
2992         8    10/28/88  1226.0  user_forms_info.incl.pl1          >special_ldd>install>MR12.2-1199>user_forms_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ANrequest_types                        parameter       fixed bin(17,0)          dcl 1036 set ref 1023 1039* 1054* 1054
AParea                                 parameter       pointer                  dcl 1135 ref 1124 1152 1155
APeor_defaults                         parameter       pointer                  dcl 1135 set ref 1124 1155* 1156 1160
Acode                                  parameter       fixed bin(35,0)          dcl 1135 set ref 1064 1081* 1101* 1109* 1111* 1115*
                                                                                  1124 1141* 1163* 1169* 1197 1210* 1224* 1225 1228*
                                                                                  1237* 1239*
Adefault_q                             parameter       fixed bin(17,0)          dcl 1076 set ref 1064 1082* 1101* 1106* 1108* 1109
                                                                                  1109* 1115* 1197 1211* 1228* 1234* 1236* 1237
                                                                                  1237*
Agen_type                              parameter       char                     packed unaligned dcl 1076 set ref 1064 1084 1087
                                                                                  1197 1227* 1231*
Amax_q                                 parameter       fixed bin(17,0)          dcl 1076 set ref 1064 1083* 1101* 1109* 1111* 1115*
                                                                                  1197 1212* 1228* 1237* 1239*
Aname                                  parameter       char                     packed unaligned dcl 1272 ref 1269 1275
Arequest_type                          parameter       char                     packed unaligned dcl 1076 set ref 1064 1084* 1113*
                                                                                  1115* 1197 1223* 1224* 1228* 1233*
Arqt_in                                parameter       char                     packed unaligned dcl 1208 set ref 1197 1220* 1223
BOTTOM_LABEL                    001363 constant        fixed bin(17,0)          initial dcl 236 set ref 236 912 2781* 2781
COORD_ACCESS_NAME               000150 constant        char(32)                 initial packed unaligned dcl 2472 set ref 2745*
DEFAULT_RQT                     001160 constant        char(24)                 initial array packed unaligned dcl 177 set ref 675
                                                                                  1087 1184 1231 1296 1299* 1299* 1461 1463* 1463*
DEFAULT_VALUE_SEG               001156 constant        pointer                  initial dcl 177 set ref 741* 930* 1048* 1051* 1150*
                                                                                  1177* 1301* 1307* 1337* 1361* 1377* 1394* 1418*
                                                                                  1449* 1454* 1464* 1469* 1748* 1755*
DESTINATION                     001360 constant        fixed bin(17,0)          initial dcl 236 set ref 236 910 923 2755* 2755
DP_PLOT                                constant        fixed bin(17,0)          initial dcl 4-81 ref 675 677 710 710 713 1087 1090
                                                                                  1460 1749 2877 2883 2902
DP_PRINT                               constant        fixed bin(17,0)          initial dcl 4-81 ref 675 700 700 707 717 780 858 898
                                                                                  1087 1106 1234 1460 1579 1625 1632 1749 1874 1879
                                                                                  2873 2878 2902
DP_PUNCH                               constant        fixed bin(17,0)          initial dcl 4-81 ref 693 693 697 1656 2579 2875 2902
                                                                                  2902
Directory                              constant        fixed bin(17,0)          initial dcl 6-56 ref 2522
ERROR_LABEL                            parameter       label variable           dcl 2464 in procedure "submit" ref 2459 2510 2510
                                                                                  2531 2594 2597 2624 2760
ERROR_LABEL                     000240 automatic       label variable           dcl 2375 in procedure "proc_path" set ref 2390*
                                                                                  2391* 2399* 2400* 2404* 2421*
FALSE                           001352 constant        bit(1)                   initial packed unaligned dcl 177 set ref 631 636
                                                                                  645* 660* 660* 735* 735* 771 800 801 803* 948 983
                                                                                  1005* 1097* 1097* 1220* 1220* 1299* 1629 1638 1640
                                                                                  1642 1644 1652 1660 1662 1766 1773 1999* 2017 2063
                                                                                  2065 2066 2159 2167 2170 2187 2190 2201 2204 2246
                                                                                  2391* 2400* 2416 2619*
HEADING                         001367 constant        fixed bin(17,0)          initial dcl 236 set ref 236 909 922 2751* 2751
IPLS                            000100 automatic       fixed bin(17,0)          dcl 1979 set ref 2062* 2063 2063 2063 2063 2071 2076
                                                                                  2077 2081 2085 2090 2090 2090 2094 2094 2094 2094
                                                                                  2094 2094 2094* 2094 2094 2108* 2126 2126 2126
                                                                                  2140 2141 2142
Iarg                            000101 automatic       fixed bin(17,0)          dcl 1979 set ref 1994* 1995* 2026 2034* 2034 2035*
                                                                                  2067 2088* 2088 2123 2134* 2134 2135*
Icomp                           000352 automatic       fixed bin(17,0)          dcl 2472 set ref 2618* 2619*
Idft                            001300 automatic       fixed bin(17,0)          dcl 1443 in procedure "find_default_header" set ref
                                                                                  1460* 1461 1461 1463 1463 1463*
Idft                            001330 automatic       fixed bin(17,0)          dcl 1741 in procedure "list_defaults" set ref 1751*
                                                                                  1752 1755 1755 1755 1755 1775*
Idft                            000100 automatic       fixed bin(17,0)          dcl 97 in procedure "eor" set ref 1049* 1051 1051
                                                                                  1051 1051* 1175* 1177 1177 1177 1177*
Ientry                          000244 automatic       fixed bin(17,0)          dcl 2375 set ref 2413* 2414 2416*
Ipls                                   parameter       fixed bin(17,0)          dcl 2301 set ref 2292 2298 2334* 2353*
Isearch                         000102 automatic       fixed bin(17,0)          dcl 1979 set ref 2005* 2006 2013
L                        32            based           fixed bin(21,0)          level 5 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default" set ref 1585 1663* 1665 1666
L                        67            based           fixed bin(21,0)          level 5 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults" ref 1879 1879 1879 1879 1879 1879
                                                                                  1879
L                         2     000342 automatic       fixed bin(21,0)          level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 900 900 915 915
L                         6     000342 automatic       fixed bin(21,0)          level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 900 900 915 915
L                        30            based           fixed bin(21,0)          level 5 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 796 797 915* 917 922
                                                                                  923
L                        32            based           fixed bin(21,0)          level 5 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults" ref 1918 1918 1918
L                        65            based           fixed bin(21,0)          level 5 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 787 788 789 900* 902
                                                                                  910 911 912
L                        65            based           fixed bin(21,0)          level 5 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults" ref 1879 1879 1879 1879 1879 1879
                                                                                  1879 1879
L                         2            based           fixed bin(21,0)          array level 2 in structure "PLS" dcl 236
                                                                                  in procedure "eor" set ref 635* 909 910 911 912
                                                                                  922 923 2141* 2751 2751 2755 2755 2775 2775 2781
                                                                                  2781
L                        63            based           fixed bin(21,0)          level 5 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 786 787 788 789 900*
                                                                                  902 909 910 911 912
L                        30            based           fixed bin(21,0)          level 5 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default" set ref 1585 1661* 1664 1665 1666
L                        63            based           fixed bin(21,0)          level 5 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults" ref 1879 1879 1879 1879 1879 1879
                                                                                  1879 1879 1879 1879
L                        71            based           fixed bin(21,0)          level 5 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1579 1645* 1648
L                        67            based           fixed bin(21,0)          level 5 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1579 1643* 1648
L                        67            based           fixed bin(21,0)          level 5 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 788 789 900* 902 911
                                                                                  912
L                        65            based           fixed bin(21,0)          level 5 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1579 1641* 1647 1648
L                        71            based           fixed bin(21,0)          level 5 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 789 900* 902 912
L                        30            based           fixed bin(21,0)          level 5 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults" ref 1918 1918 1918 1918 1918
L                        12     000342 automatic       fixed bin(21,0)          level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 900 900
L                        32            based           fixed bin(21,0)          level 5 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 797 915* 917 923
L                        16     000342 automatic       fixed bin(21,0)          level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 900 900
L                        71            based           fixed bin(21,0)          level 5 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults" ref 1879 1879 1879
L                        63            based           fixed bin(21,0)          level 5 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1579 1639* 1646 1647 1648
LSV                      30            based           structure                level 2 in structure "default_punch" dcl 368
                                                                                  in procedure "eor"
LSV                      63            based           structure                level 2 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
LSV                      30            based           structure                level 2 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
LSV                      63            based           structure                level 2 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
LSV                      63            based           structure                level 2 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
LSV                      30            based           structure                level 2 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default"
Larg                            000103 automatic       fixed bin(21,0)          dcl 1979 set ref 1995* 1996 1999 1999 2004 2009 2009
                                                                                  2029 2029 2047 2047 2047 2047 2094 2094 2094 2094
                                                                                  2108 2108 2108 2108 2108 2108 2108 2108 2108 2108
                                                                                  2126 2126 2166 2166 2216 2216 2222 2222 2227 2227
                                                                                  2230 2230 2254 2254 2260 2260 2264 2264 2267 2267
Lop                             000104 automatic       fixed bin(21,0)          dcl 1979 set ref 2031* 2035* 2041 2041 2041 2041
                                                                                  2047 2047 2052 2067 2068 2068 2072 2072 2072 2072
                                                                                  2072 2077 2082 2082 2085 2085 2089 2108 2108 2108
                                                                                  2108 2108 2108 2116* 2131* 2135* 2140 2141 2142
                                                                                  2212 2214 2216 2216 2220 2220 2222 2222 2222 2222
                                                                                  2227 2227 2227 2230 2230 2230 2230 2237 2239 2243
                                                                                  2243 2250 2252 2254 2254 2258 2258 2260 2260 2260
                                                                                  2260 2264 2264 2264 2267 2267 2267 2267 2274
MAX_COPIES                      001334 constant        fixed bin(17,0)          initial dcl 177 set ref 852 854* 855
MAX_LINE_LENGTH                 001362 constant        fixed bin(17,0)          initial dcl 177 set ref 861 866 2926* 2931*
MCC                                    constant        fixed bin(17,0)          initial dcl 177 ref 368 1656
Msf                                    constant        fixed bin(17,0)          initial dcl 2978 ref 2524 2606
N                               000245 automatic       structure                level 1 dcl 236 in procedure "eor" set ref 632* 783*
                                                                                  793* 904 919 955 2019 2056
N                         1            based           fixed bin(17,0)          level 3 in structure "eor_defaults" dcl 1-13
                                                                                  in procedure "eor" set ref 1155* 1167 1172* 1182*
                                                                                  1182 1183 1184 1185 1187
NL                              033452 constant        char(1)                  initial packed unaligned dcl 177 ref 2004
NORMAL_ACTIVE_STRING            001367 constant        fixed bin(17,0)          initial dcl 3-6 set ref 2315*
Nalready_in_queue               001356 automatic       fixed bin(17,0)          dcl 1948 set ref 1954* 1955* 1957* 1957 1959 1959*
                                                                                  1962* 1962
Nargs                           000101 automatic       fixed bin(17,0)          dcl 97 set ref 610* 1994 2026 2067 2123
Ndft                     51            based           structure                level 2 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 783 904*
Ndft                     51     000362 automatic       structure                level 2 in structure "auto_default" dcl 305
                                                                                  in procedure "eor"
Ndft                     51            based           structure                level 2 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
Ndft                     51            based           structure                level 2 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1631*
Ndft                     21            based           structure                level 2 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default" set ref 1653*
Ndft                     21            based           structure                level 2 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
Ndft                     21            based           structure                level 2 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 793 919*
Nmatches                               parameter       fixed bin(17,0)          dcl 2464 in procedure "submit" set ref 2459 2810*
                                                                                  2810
Nmatches                        000245 automatic       fixed bin(17,0)          dcl 2375 in procedure "proc_path" set ref 2406*
                                                                                  2421* 2433
Nqueued                                parameter       fixed bin(17,0)          dcl 2371 in procedure "proc_path" set ref 2368 2391*
                                                                                  2400* 2421*
Nqueued                                parameter       fixed bin(17,0)          dcl 1946 in procedure "print_totals" set ref 1943
                                                                                  1957 1962 1962* 1962
Nqueued                                parameter       fixed bin(17,0)          dcl 2464 in procedure "submit" set ref 2459 2809*
                                                                                  2809
Nqueued                         000102 automatic       fixed bin(17,0)          dcl 97 in procedure "eor" set ref 645* 803* 958*
                                                                                  959* 960* 966* 967*
Nqueued                                parameter       fixed bin(17,0)          dcl 1976 in procedure "proc_args" set ref 1973 1999*
                                                                                  2243*
Nrequest_types                  000642 automatic       fixed bin(17,0)          dcl 1-13 set ref 1154* 1155 1155 1166* 1167
Ntype                                  parameter       fixed bin(17,0)          dcl 1321 in procedure "find_default" set ref 1318
                                                                                  1393* 1399 1399 1403* 1403* 1417* 1426*
Ntype                                  based           fixed bin(17,0)          level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 664 1054 1106 1180 1184
                                                                                  1185 1231 1234 1760
Ntype                           001331 automatic       fixed bin(17,0)          dcl 1741 in procedure "list_defaults" set ref 1749*
                                                                                  1760 1769* 1769 1786 1786 1786* 1792* 1792*
Ntype                                  based           fixed bin(17,0)          level 3 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults" set ref 1918 1918* 1918*
Ntype                                  based           fixed bin(17,0)          level 3 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults" ref 1874
Ntype                                  based           fixed bin(17,0)          level 3 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1579 1583 1623*
Ntype                           000103 automatic       fixed bin(17,0)          dcl 97 in procedure "eor" set ref 656* 664* 668 675*
                                                                                  675* 677 693 697* 700 707* 710 713* 717* 724 735*
                                                                                  740 747 780 858 898 1087* 1087* 1090 1096 1097*
                                                                                  2873* 2875* 2877* 2878 2883* 2883 2883
Ntype                                  based           fixed bin(17,0)          level 2 in structure "d" dcl 1329 in procedure
                                                                                  "find_default" set ref 1343 1375* 1399 1403* 1426*
Ntype                                  based           fixed bin(17,0)          level 2 in structure "d" dcl 1291 in procedure
                                                                                  "delete_default" set ref 1294 1296 1296 1299 1299
                                                                                  1299*
Ntype                                  parameter       fixed bin(17,0)          dcl 1595 in procedure "free_default" ref 1592 1623
                                                                                  1625 1654 1656
Ntypes_set                      000104 automatic       fixed bin(17,0)          dcl 97 set ref 692* 698* 698 708* 708 714* 714 717
                                                                                  720
O                               000257 automatic       structure                level 1 dcl 236 set ref 633* 784* 794* 920
Odft                     10     000362 automatic       structure                level 2 in structure "auto_default" dcl 305
                                                                                  in procedure "eor"
Odft                     10            based           structure                level 2 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default"
Odft                     10            based           structure                level 2 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
Odft                     10            based           structure                level 2 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1627*
Odft                     10            based           structure                level 2 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 794 920*
Odft                     10            based           structure                level 2 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
Odft                     10            based           structure                level 2 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 784
P                         4     000342 automatic       pointer                  level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 787* 797*
P                                      based           pointer                  array level 2 in structure "PLS" dcl 236
                                                                                  in procedure "eor" set ref 634* 909 910 911 912
                                                                                  922 923 2140* 2751 2755 2775 2781
P                               000342 automatic       pointer                  level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 786* 796*
P                        10     000342 automatic       pointer                  level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 788*
P                        14     000342 automatic       pointer                  level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 789*
PERM                            001154 constant        bit(36)                  initial dcl 177 set ref 741* 930* 1048* 1051* 1150*
                                                                                  1177* 1301* 1307* 1337* 1361* 1377* 1394* 1418*
                                                                                  1449* 1454* 1464* 1469* 1748* 1755*
PLOT                                   constant        fixed bin(17,0)          initial dcl 177 ref 1658
PLS                                    based           structure                array level 1 dcl 236
PLS_bottom_label                       based           char                     packed unaligned dcl 236 set ref 912 2781*
PLS_destination                        based           char                     packed unaligned dcl 236 set ref 910 923 2755*
PLS_heading                            based           char                     packed unaligned dcl 236 set ref 909 922 2751*
PLS_struc                       000342 automatic       structure                level 1 dcl 236 set ref 634 635 636 785* 795* 908
                                                                                  909 909 910 910 911 911 912 912 921 922 922 923
                                                                                  923 2063 2071 2076 2081 2090 2090 2090 2094 2094
                                                                                  2094 2094 2094 2094 2094 2094 2126 2126 2126 2140
                                                                                  2141 2142 2751 2751 2751 2755 2755 2755 2775 2775
                                                                                  2775 2781 2781 2781
PLS_top_label                          based           char                     packed unaligned dcl 236 set ref 911 2775*
PRINT                                  constant        fixed bin(17,0)          initial dcl 177 ref 305 693 860 1634
PUNCH                                  constant        fixed bin(17,0)          initial dcl 177 ref 2883 2902
Parea                           000010 internal static pointer                  dcl 177 set ref 870 873 900 915 1048* 1051* 1150*
                                                                                  1177* 1337* 1449* 1454* 1563 1579 1583 1585 1682*
                                                                                  1710 1710 1713 1719 1724 1726 1746 1748* 1755*
                                                                                  2408 2408 2432 2432
Parg                            000106 automatic       pointer                  dcl 1979 set ref 1995* 1996 1999 2004 2009 2029 2047
                                                                                  2047 2094 2094 2108 2108 2108 2108 2108 2108 2108
                                                                                  2126 2166 2216 2222 2227 2230 2254 2260 2264 2267
Parg_list                       000106 automatic       pointer                  dcl 97 set ref 644* 1995* 2035* 2135*
Pd                                     parameter       pointer                  dcl 1595 in procedure "free_default" set ref 1574
                                                                                  1579 1579 1579 1579 1583 1583 1585 1586* 1592 1623
                                                                                  1624 1627 1628 1629 1630 1631 1632 1633 1634 1635
                                                                                  1636 1637 1638 1639 1640 1641 1642 1643 1644 1645
                                                                                  1646 1647 1648 1648 1651 1652 1653 1654 1655 1656
                                                                                  1658 1659 1660 1661 1662 1663 1664 1665 1666 1666
Pd                                     parameter       pointer                  dcl 1842 in procedure "print_defaults" ref 1839 1872
                                                                                  1874 1877 1879 1879 1879 1879 1879 1879 1879 1879
                                                                                  1879 1879 1879 1879 1879 1879 1879 1879 1879 1879
                                                                                  1879 1879 1879 1879 1879 1879 1879 1879 1879 1879
                                                                                  1879 1879 1879 1879 1879 1879 1879 1879 1879 1879
                                                                                  1879 1879 1879 1879 1879 1879 1879 1879 1879 1879
                                                                                  1879 1879 1879 1879 1879 1879 1879 1879 1879 1879
                                                                                  1879 1879 1916 1918 1918 1918 1918 1918 1918 1918
                                                                                  1918 1918 1918 1918 1918 1918 1918 1918 1918 1918
                                                                                  1918 1918 1918 1918 1918 1918 1918
Pd                                     parameter       pointer                  dcl 1289 in procedure "delete_default" set ref 1286
                                                                                  1294 1294 1296 1296 1299 1299 1299 1307* 1307*
Pd                                     parameter       pointer                  dcl 1258 in procedure "dft_name$given_ptr" ref 1255
                                                                                  1264
Pd                                     parameter       pointer                  dcl 1321 in procedure "find_default" set ref 1318
                                                                                  1334 1334 1334* 1337 1337* 1343 1347* 1351 1351
                                                                                  1352 1354* 1361* 1361* 1361* 1361 1361 1365* 1373*
                                                                                  1374 1375 1376 1377* 1377* 1377* 1377 1377 1382*
                                                                                  1389* 1392* 1393* 1394* 1394* 1394* 1394 1399 1403
                                                                                  1415* 1416* 1417* 1418* 1418* 1418* 1418 1426
Pdefault                        000606 automatic       pointer                  dcl 368 set ref 660* 661 663 664 735* 737 765* 767
                                                                                  769* 770* 776* 782 783 784 785 786 787 788 789 792
                                                                                  793 794 795 796 797 808 808 818 901 916 925* 928*
                                                                                  930* 930* 930* 930 982* 985* 987 994* 999* 1050*
                                                                                  1051* 1054 1097* 1098 1105 1106 1106 1108 1176*
                                                                                  1177* 1180 1183 1184 1185 1185 1187 1220* 1221
                                                                                  1231 1233 1234 1234 1236 1237 1239 1462* 1463*
                                                                                  1464* 1464* 1464* 1464 1693* 1722* 1754* 1755*
                                                                                  1758 1760 1764* 1769 1769 1769 1769 1769 1784*
                                                                                  1785* 1786* 1788* 2863
Pdefault_header                 000612 automatic       pointer                  dcl 399 set ref 639 740 741* 741 741 747 1044 1094
                                                                                  1096 1146 1185 1217 1294 1296 1301* 1301 1301
                                                                                  1449* 1454* 1458* 1459 1461 1469* 1469 1469 1491*
                                                                                  1495 1497 1497 1507 1509 1509 1520 1522 1522 1532
                                                                                  1534 1534 1544 1546 1546 1556 1559 1563 1564*
                                                                                  1692* 1719 1719 1719 1769 1786 1786 1792 1879 1918
Pdefault_temp                   000110 automatic       pointer                  dcl 97 set ref 926* 928
Pdesc                           000640 automatic       pointer                  dcl 457 set ref 2012* 2012 2013* 2013 2014 2015 2017
                                                                                  2019 2019 2022 2022 2022 2022 2024 2024 2024 2039
                                                                                  2060 2062
Peor_defaults                   000644 automatic       pointer                  dcl 1-13 set ref 1156* 1157 1160* 1161 1167 1172
                                                                                  1182 1182 1183 1183 1184 1184 1185 1185 1187 1187
Pfcb                            000112 automatic       pointer                  dcl 97 set ref 1696* 1717 1717* 2557* 2560* 2561*
                                                                                  2562* 2609* 2619* 2622* 2628* 2691* 2694* 2695*
                                                                                  2696*
Pnew_default                    000610 automatic       pointer                  dcl 368 in procedure "eor" set ref 900* 901 902 902
                                                                                  903 904 905 906 906 908 909 910 911 912 915* 916
                                                                                  917 917 918 919 920 921 922 923 926 927* 1694*
                                                                                  1723*
Pnew_default                    000100 automatic       pointer                  dcl 1291 in procedure "delete_default" set ref 1297*
                                                                                  1298* 1299* 1300*
Pop                             000110 automatic       pointer                  dcl 1979 set ref 2030* 2030 2035* 2041 2041 2041
                                                                                  2041 2047 2052 2067 2068 2068 2072 2072 2072 2072
                                                                                  2072 2077 2082 2082 2085 2085 2089 2108 2108 2108
                                                                                  2115* 2115 2118 2118 2130* 2130 2135* 2140 2141
                                                                                  2142 2212 2214 2216 2220 2220 2222 2222 2222 2227
                                                                                  2227 2230 2230 2237 2239 2243 2250 2252 2254 2258
                                                                                  2258 2260 2260 2260 2264 2264 2267 2267 2274
Pseg                            000114 automatic       pointer                  dcl 97 set ref 1697* 1715 1715* 2581* 2582 2584*
                                                                                  2585*
RAW                                    constant        fixed bin(17,0)          initial dcl 177 ref 2883 2902
R_ACCESS                               constant        bit(3)                   initial packed unaligned dcl 2-11 ref 2540 2674
R_ACCESS_BIN                           constant        fixed bin(5,0)           initial dcl 2-36 ref 2535
S                        70            based           structure                level 5 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults" set ref 1879
S                        33            based           structure                level 5 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default" set ref 1662*
S                         3     000342 automatic       structure                level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor"
S                        66            based           structure                level 5 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1640*
S                         3            based           structure                array level 2 in structure "PLS" dcl 236
                                                                                  in procedure "eor" set ref 636* 2063*
S                               000220 automatic       structure                level 1 dcl 236 in procedure "eor" set ref 631* 782*
                                                                                  792* 903 918 2015 2017
S                        13     000342 automatic       structure                level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor"
S                        33            based           structure                level 5 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
S                         3            parameter       structure                level 2 in structure "pls" dcl 2301 in procedure
                                                                                  "proc_label"
S                         7     000342 automatic       structure                level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor"
S                        72            based           structure                level 5 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1644*
S                        64            based           structure                level 5 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
S                        31            based           structure                level 5 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default" set ref 1660*
S                        72            based           structure                level 5 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults" set ref 1879
S                        66            based           structure                level 5 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
S                        31            based           structure                level 5 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
S                        64            based           structure                level 5 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1638*
S                        17     000342 automatic       structure                level 3 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor"
S                        70            based           structure                level 5 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1642*
S_ACCESS                               constant        bit(3)                   initial packed unaligned dcl 2-11 ref 2719
Scenter                                parameter       bit(1)                   packed unaligned dcl 2301 set ref 2292 2295*
Screate                                parameter       bit(1)                   packed unaligned dcl 1321 ref 1318 1345 1371 1387
                                                                                  1401
Sdefault                        000121 automatic       bit(1)                   packed unaligned dcl 97 in procedure "eor" set ref
                                                                                  2066* 2087* 2120
Sdefault                 16            based           bit(1)                   array level 3 in structure "eor_defaults" dcl 1-13
                                                                                  in procedure "eor" set ref 1185*
Sdefault_is_stored              000116 automatic       bit(1)                   packed unaligned dcl 97 in procedure "eor" set ref
                                                                                  764* 771* 978 982* 994 994* 999*
Sdefault_is_stored                     parameter       bit(1)                   packed unaligned dcl 1842 in procedure
                                                                                  "print_defaults" ref 1839 1872
Sdelete                         000353 automatic       bit(1)                   dcl 2472 set ref 2657* 2743
Sdft                     36            based           structure                level 2 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 782 903*
Sdft                     16            based           structure                level 2 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default" set ref 1652*
Sdft                     36     000362 automatic       structure                level 2 in structure "auto_default" dcl 305
                                                                                  in procedure "eor"
Sdft                     36            based           structure                level 2 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
Sdft                     36            based           structure                level 2 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1629*
Sdft                     16            based           structure                level 2 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
Sdft                     16            based           structure                level 2 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 792 918*
Segment                                constant        fixed bin(17,0)          initial dcl 6-56 ref 2416 2542 2633 2676
Sfirst                          001332 automatic       bit(1)                   packed unaligned dcl 1741 set ref 1750* 1766* 1769*
                                                                                  1773* 1780
Sgive_label_warning             000117 automatic       bit(1)                   packed unaligned dcl 97 set ref 642* 800* 2196 2201*
Sgive_nep_warning               000120 automatic       bit(1)                   packed unaligned dcl 97 set ref 643* 801* 2161 2167*
Signore_stars                          parameter       bit(1)                   packed unaligned dcl 2371 ref 2368 2388
Snon_path_ctl_arg               000112 automatic       bit(1)                   packed unaligned dcl 1979 set ref 2003* 2246* 2282
Sprint_defaults                        parameter       bit(1)                   packed unaligned dcl 1739 ref 1736 1762 1782
Sread                           000354 automatic       bit(1)                   dcl 2472 set ref 2657* 2669
Srqt_defined                    001344 automatic       bit(1)                   packed unaligned dcl 1845 set ref 1878* 1879* 1917*
                                                                                  1918*
Sset_warn_count                        parameter       bit(1)                   packed unaligned dcl 1321 ref 1318 1345 1371
Sstatus                         000355 automatic       bit(1)                   dcl 2472 set ref 2657* 2714
Sstring                         000113 automatic       bit(1)                   packed unaligned dcl 1979 set ref 2065* 2067 2082*
                                                                                  2126* 2142
Ssubmit                                parameter       bit(1)                   packed unaligned dcl 1976 ref 1973 1999 2015 2017
                                                                                  2019 2039 2063 2068 2072 2077 2138 2148 2243
Ssuppress_errors                000246 automatic       bit(1)                   packed unaligned dcl 2375 in procedure "proc_path"
                                                                                  set ref 2416* 2419* 2421*
Ssuppress_errors                       parameter       bit(1)                   packed unaligned dcl 2464 in procedure "submit" ref
                                                                                  2459 2510 2527
Syes                            000100 automatic       bit(1)                   packed unaligned dcl 1329 in procedure
                                                                                  "find_default" set ref 1403* 1413
Syes                            000356 automatic       bit(1)                   packed unaligned dcl 2472 in procedure "submit" set
                                                                                  ref 2572* 2575 2612* 2614 2651* 2653 2661* 2664
                                                                                  2706* 2709 2734* 2738 2799* 2804
TOP_LABEL                       001353 constant        fixed bin(17,0)          initial dcl 236 set ref 236 911 2775* 2775
TRUE                            001337 constant        bit(1)                   initial packed unaligned dcl 177 set ref 642 643 764
                                                                                  777 959* 996* 1299* 1477* 1630 1750 1764* 1788*
                                                                                  1998 2003 2008 2015 2028 2046 2071 2076 2081 2082
                                                                                  2087 2093 2107 2125 2142 2157 2173 2179 2185 2194
                                                                                  2207 2209 2218 2233 2243* 2247 2256 2270 2282 2419
                                                                                  2635 2766 2771
UNDEFINED                       001352 constant        fixed bin(17,0)          initial dcl 177 set ref 656 660* 668 1054 1180 1343
                                                                                  1375 1399 1583 2883
V                        34            based           structure                level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor"
V                        34            based           structure                level 3 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
V                        73            based           structure                level 3 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
V                        73            based           structure                level 3 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
V                        34            based           structure                level 3 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default"
V                        73            based           structure                level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
VALIDATE_FORMS_INFO_INPUT_VERSION_1
                                000160 constant        char(8)                  initial packed unaligned dcl 8-61 ref 871
Vdefault_header_10                     constant        fixed bin(17,0)          initial dcl 399 ref 1459 1556
Vdefault_header_5                      constant        fixed bin(17,0)          initial dcl 399 ref 1495
Vdefault_header_6                      constant        fixed bin(17,0)          initial dcl 399 ref 1507
Vdefault_header_7                      constant        fixed bin(17,0)          initial dcl 399 ref 1520
Vdefault_header_8                      constant        fixed bin(17,0)          initial dcl 399 ref 1532
Vdefault_header_9                      constant        fixed bin(17,0)          initial dcl 399 ref 1544
Veor_defaults_1                        constant        fixed bin(17,0)          initial dcl 1-13 ref 1157 1161
access                   50     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
access                   50            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
access                   50            based           bit(1)                   initial level 4 in structure "dprint" dcl 1600
                                                                                  in procedure "free_default" set ref 1630*
access                   50            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879*
access                   20     000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 700 2159* 2175 2175* 2181 2181* 2185*
                                                                                  2190* 2198 2757 2778 2785 2883* 2902*
access_class                    000360 automatic       bit(72)                  dcl 2472 set ref 2759* 2762*
access_label                    000362 automatic       char(136)                packed unaligned dcl 2472 set ref 2762* 2765 2770
acl                             000425 automatic       structure                level 1 dcl 2472 set ref 2544 2544 2560 2560 2678
                                                                                  2678 2694 2694
active_string                          parameter       char                     packed unaligned dcl 2347 in procedure
                                                                                  "cp_for_error_msg" set ref 2344 2352 2352 2352
                                                                                  2352 2356 2356
active_string            66(01)        based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879*
active_string             3(01)        based           bit(1)                   array level 3 in structure "PLS" packed packed
                                                                                  unaligned dcl 236 in procedure "eor" set ref 2071*
                                                                                  2090 2094* 2094* 2094* 2094* 2126*
active_string            33(01)        based           bit(1)                   level 6 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1918*
active_string            72(01)        based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879*
active_string             3(01)        parameter       bit(1)                   level 3 in structure "pls" packed packed unaligned
                                                                                  dcl 2301 in procedure "proc_label" ref 2312
active_string            31(01)        based           bit(1)                   level 6 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1918*
active_string            70(01)        based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879* 1879*
active_string            64(01)        based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879*
addr                                                   builtin function         dcl 123 ref 634 635 636 769 786 787 788 789 796 797
                                                                                  909 909 910 910 911 911 912 912 922 922 923 923
                                                                                  945 1048 1048 1150 1150 1373 1392 1416 1458 1462
                                                                                  1497 1497 1509 1509 1522 1522 1534 1534 1546 1546
                                                                                  1579 1719 1748 1748 1785 2005 2012 2013 2013 2015
                                                                                  2017 2019 2030 2056 2063 2071 2076 2081 2090 2090
                                                                                  2090 2094 2094 2094 2094 2094 2094 2094 2094 2115
                                                                                  2118 2126 2126 2126 2130 2140 2140 2141 2142 2352
                                                                                  2352 2408 2408 2508 2508 2544 2544 2560 2560 2572
                                                                                  2612 2651 2661 2678 2678 2694 2694 2706 2720 2720
                                                                                  2734 2751 2751 2751 2755 2755 2755 2775 2775 2775
                                                                                  2781 2781 2781 2788 2788
adjust_bit_count_               000024 constant        entry                    external dcl 127 ref 2635
adjusted_bit_count              000424 automatic       fixed bin(35,0)          dcl 2472 set ref 2635* 2636
after                                                  builtin function         dcl 123 ref 2356 2356
all                      12     000220 automatic       bit(1)                   level 3 dcl 236 set ref 980 992 2207*
area                                   based           area(1024)               dcl 121 set ref 870 900 915 1155 1563 1579 1583 1585
                                                                                  1710 1710 1713 1719 1724 1726 1746 2408 2408 2432
                                                                                  2432
arg                                    based           char                     packed unaligned dcl 1979 set ref 1996 1999* 2004
                                                                                  2009* 2029* 2047* 2047* 2094* 2094* 2108* 2108*
                                                                                  2108 2108 2108 2108 2108* 2126* 2166* 2216* 2222*
                                                                                  2227* 2230* 2254* 2260* 2264* 2267*
arg_no                    0(27)        based           picture(2)               level 2 in structure "desc" packed packed unaligned
                                                                                  dcl 457 in procedure "eor" ref 2014
arg_no                          000125 automatic       fixed bin(17,0)          dcl 1979 in procedure "proc_args" set ref 2014* 2015
                                                                                  2017 2019 2056 2148 2151
arg_table                              based           char(2000)               packed unaligned dcl 472 ref 2005
arg_tbl                         000162 constant        char(250)                initial array packed unaligned dcl 472 set ref 2005
                                                                                  2013
arg_tbl_array                          based           char(1)                  array packed unaligned dcl 472 set ref 2013
arg_type                 21     000220 automatic       structure                level 2 dcl 236
arg_val                   0(18)        based           picture(1)               level 2 packed packed unaligned dcl 457 ref 2019
                                                                                  2062
argv                            000114 automatic       varying char(32)         dcl 1979 set ref 2004* 2005
auto_default                    000362 automatic       structure                level 1 dcl 305 set ref 769 1373 1392 1416 1462 1579
                                                                                  1785
auto_default_header             000614 automatic       structure                level 1 dcl 399 set ref 1458 1719
bit                                                    builtin function         dcl 123 ref 2535
bit_count               204            based           fixed bin(35,0)          level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 952* 2608* 2626* 2626
                                                                                  2631* 2633 2636* 2646
bit_count                       000440 automatic       fixed bin(24,0)          dcl 2472 in procedure "submit" set ref 2619* 2626
bit_count                 7(12) 001200 automatic       fixed bin(24,0)          level 3 in structure "branch" packed packed unsigned
                                                                                  unaligned dcl 2978 in procedure "eor" set ref 2524
                                                                                  2618 2631 2636*
bottom                   47            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
bottom                   17     000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 700 2157* 2175 2179* 2187* 2190* 2198 2768
                                                                                  2781 2883 2902
bottom                   47            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
bottom                   47     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
bottom_label                           based           char                     level 4 in structure "default_print" packed packed
                                                                                  unaligned dcl 305 in procedure "eor" set ref 789
                                                                                  912*
bottom_label             14     000342 automatic       structure                level 2 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 2160* 2781*
bottom_label             71            based           structure                level 4 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
bottom_label             71            based           structure                level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
bottom_label            142            based           char(136)                level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 2770* 2781* 2785*
bottom_label             71            based           structure                level 4 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
bottom_label                           based           char                     level 4 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879 1879*
branch                          001200 automatic       structure                level 1 dcl 2978 set ref 2508 2508
brief                           000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 1951
brief                    17            based           bit(1)                   initial level 4 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915*
brief                    36     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
brief                    36            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879*
brief                    36            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
brief                    17            based           bit(1)                   initial level 4 in structure "dpunch" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1918*
carriage_control         40     000362 automatic       structure                level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor"
carriage_control         40            based           structure                level 3 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
carriage_control          2     000220 automatic       structure                level 2 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 954
carriage_control         32            based           structure                level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 948* 954*
carriage_control         40            based           structure                level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
center                   72(02)        based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879*
center                    3(02)        based           bit(1)                   array level 3 in structure "PLS" packed packed
                                                                                  unaligned dcl 236 in procedure "eor" set ref 2081*
                                                                                  2090 2126*
center                    3(02)        parameter       bit(1)                   level 3 in structure "pls" packed packed unaligned
                                                                                  dcl 2301 in procedure "proc_label" ref 2295
center                   70(02)        based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879* 1879*
center_bottom_label      32(05)        based           bit(1)                   level 3 packed packed unaligned dcl 4-24 set ref
                                                                                  2771* 2781*
center_top_label         32(04)        based           bit(1)                   level 3 packed packed unaligned dcl 4-24 set ref
                                                                                  2766* 2775*
chan_stop_path          221            based           char(168)                level 2 dcl 4-24 set ref 953*
chars                                  based           char                     level 2 dcl 7-17 set ref 1051 1051 1177 1177 1752
                                                                                  1755 1755 1775*
chars_len                 2            based           fixed bin(21,0)          level 2 dcl 7-17 ref 1051 1051 1177 1177 1713 1746
                                                                                  1752 1755 1755 1775
chars_per_line            3            based           fixed bin(17,0)          level 2 dcl 8-67 set ref 880 880*
check_star_name_$entry          000026 constant        entry                    external dcl 127 ref 2394
class                    75            based           char(8)                  level 2 dcl 4-24 set ref 951*
cleanup                         000212 stack reference condition                dcl 125 ref 608 1041 1092 1143 1215 1298
code                            000247 automatic       fixed bin(35,0)          dcl 2375 in procedure "proc_path" set ref 2385* 2386
                                                                                  2391* 2394* 2395 2397 2400* 2408* 2410 2421* 2425*
                                                                                  2435* 2443* 2447*
code                            001345 automatic       fixed bin(35,0)          dcl 1845 in procedure "print_defaults" set ref 1877*
                                                                                  1878 1916* 1917
code                                   parameter       fixed bin(35,0)          dcl 2464 in procedure "submit" set ref 2459 2508*
                                                                                  2510 2510 2510 2530* 2544* 2545 2547* 2549* 2557*
                                                                                  2558 2560* 2563 2565* 2571* 2572* 2581* 2593* 2594
                                                                                  2596* 2597 2609* 2610 2612* 2619* 2620 2623* 2635*
                                                                                  2636 2639* 2650* 2651* 2657* 2659 2661* 2678* 2679
                                                                                  2681* 2683* 2691* 2692 2694* 2697 2699* 2705*
                                                                                  2706* 2720* 2721 2723* 2725* 2733* 2734* 2759*
                                                                                  2760 2762* 2788* 2790 2790 2793 2795 2797 2799*
                                                                                  2813*
code                     11     000447 automatic       fixed bin(35,0)          level 2 in structure "dir_acl" dcl 2472 in procedure
                                                                                  "submit" set ref 2723 2723
code                            000122 automatic       fixed bin(35,0)          dcl 97 in procedure "eor" set ref 610* 611 672* 673
                                                                                  741* 743 829* 830 838* 839 876* 877 877 930* 932
                                                                                  938* 1048* 1051* 1150* 1177* 1301* 1303 1307* 1308
                                                                                  1337* 1339* 1341 1348* 1355* 1361* 1363 1366* 1371
                                                                                  1377* 1378 1380* 1385 1387 1394* 1395 1418* 1420
                                                                                  1449* 1451 1454* 1456 1464* 1466 1469* 1471 1475
                                                                                  1477* 1478 1481* 1487 1489* 1497* 1498 1500* 1509*
                                                                                  1510 1512* 1522* 1523 1525* 1534* 1535 1537* 1546*
                                                                                  1547 1549* 1685* 1686 1688* 1748* 1755* 1995*
                                                                                  2035* 2135* 2315* 2318 2320 2331* 2332 2334* 2352*
                                                                                  2834* 2845* 2851 2851* 2857* 2872* 2941* 2946*
                                                                                  2950* 2961*
code                     12     000425 automatic       fixed bin(35,0)          level 2 in structure "acl" dcl 2472 in procedure
                                                                                  "submit" set ref 2547 2547 2565 2681 2681 2699
code                            001357 automatic       fixed bin(35,0)          dcl 1948 in procedure "print_totals" set ref 1954*
                                                                                  1955
com_err_                        000030 constant        entry                    external dcl 127 ref 1426 1481 1489 1500 1512 1525
                                                                                  1537 1549 1559 1688 2009 2029 2047 2094 2108 2126
                                                                                  2216 2222 2227 2230 2254 2260 2264 2267 2334 2425
                                                                                  2443 2447 2549 2586 2601 2639 2683 2725 2813 2821
                                                                                  2834 2839 2845 2851 2857 2863 2878 2883 2902 2922
                                                                                  2926 2931 2936 2941 2946 2950 2956 2961
command_query_$yes_no           000032 constant        entry                    external dcl 127 ref 1403 2572 2612 2651 2661 2706
                                                                                  2734 2799
conversion                      000000 stack reference condition                dcl 125 ref 2044 2053
convert                                                builtin function         dcl 123 ref 2052
convert_authorization_$to_string
                                000034 constant        entry                    external dcl 127 ref 2762
copies                   24            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1918 1918*
copies                   54            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
copies                   54            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
copies                   24            based           fixed bin(17,0)          initial level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915*
copies                   54            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1600
                                                                                  in procedure "free_default" set ref 1633*
copies                    3     000245 automatic       fixed bin(17,0)          level 2 in structure "N" dcl 236 in procedure "eor"
                                                                                  set ref 849 849* 852 854* 855*
copies                   24            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1600
                                                                                  in procedure "free_default" set ref 1655*
copies                   54     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
cu_$arg_count                   000036 constant        entry                    external dcl 127 ref 610
cu_$arg_list_ptr                000040 constant        entry                    external dcl 127 ref 644
cu_$arg_ptr_rel                 000042 constant        entry                    external dcl 127 ref 1995 2035 2135
cu_$cp                          000252 constant        entry                    external dcl 2349 ref 2352
cu_$evaluate_active_string      000044 constant        entry                    external dcl 127 ref 2315
currentsize                                            builtin function         dcl 123 ref 741 741 902 917 1301 1301 1469 1469 1648
                                                                                  1666
d                                      based           structure                level 1 dcl 1329 in procedure "find_default" set ref
                                                                                  1361 1361 1377 1377
d                                      based           structure                level 1 dcl 1260 in procedure "dft_name$given_ptr"
d                                      based           structure                level 1 dcl 1291 in procedure "delete_default"
daemon_name                     000441 automatic       char(24)                 packed unaligned dcl 2472 set ref 2657* 2661* 2673
                                                                                  2683* 2706* 2718 2725* 2734*
default_control          10     000220 automatic       structure                level 2 dcl 236
default_header                         based           structure                level 1 dcl 399 set ref 741 741 1301 1301 1469 1469
                                                                                  1497 1497 1509 1509 1522 1522 1534 1534 1546 1546
                                                                                  1563 1719
default_print                          based           structure                level 1 dcl 305 set ref 900 902
default_punch                          based           structure                level 1 dcl 368 set ref 915 917
default_queue                   001346 automatic       fixed bin(17,0)          dcl 1845 set ref 1876* 1877* 1879* 1915* 1916* 1918*
default_request_type      6     000257 automatic       char(24)                 level 2 in structure "O" packed packed unaligned
                                                                                  dcl 236 in procedure "eor" set ref 733 735* 737
                                                                                  740 963 2237* 2839* 2839*
default_request_type      1            based           char(24)                 array level 2 in structure "default_header" packed
                                                                                  packed unaligned dcl 399 in procedure "eor" set
                                                                                  ref 740* 747 1096 1185 1294 1296* 1461* 1769 1786*
                                                                                  1786* 1792* 1879 1918
defer_until_process_termination
                         62            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" ref 1879
defer_until_process_termination
                         27            based           fixed bin(17,0)          initial level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915*
defer_until_process_termination
                         27            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1849
                                                                                  in procedure "print_defaults" ref 1918
defer_until_process_termination
                         62     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
defer_until_process_termination
                         62            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
delete                   52            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" ref 1879
delete                   52            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
delete                   22            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1849
                                                                                  in procedure "print_defaults" ref 1918
delete                    1     000245 automatic       fixed bin(17,0)          level 2 in structure "N" dcl 236 in procedure "eor"
                                                                                  set ref 2743
delete                   22            based           fixed bin(17,0)          initial level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915*
delete                   52     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
delete_default           13     000220 automatic       bit(1)                   level 3 dcl 236 set ref 832 841 963 976
desc                                   based           structure                level 1 packed packed unaligned dcl 457 ref 2013
dest                     27            based           char(12)                 level 2 dcl 4-24 set ref 947*
destination                            based           char                     level 4 in structure "default_print" packed packed
                                                                                  unaligned dcl 305 in procedure "eor" set ref 787
                                                                                  910*
destination              65            based           structure                level 4 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
destination             213            based           char(24)                 level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 2755*
destination              32            based           structure                level 4 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
destination                            based           char                     level 4 in structure "default_punch" packed packed
                                                                                  unaligned dcl 368 in procedure "eor" set ref 797
                                                                                  923*
destination                            based           char                     level 4 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879 1879*
destination              65            based           structure                level 4 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
destination              65            based           structure                level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
destination               4     000342 automatic       structure                level 2 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 2755*
destination                            based           char                     level 4 in structure "dprint" packed packed
                                                                                  unaligned dcl 1600 in procedure "free_default" set
                                                                                  ref 1647*
destination              32            based           structure                level 4 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default"
destination              32            based           structure                level 4 in structure "default_punch" dcl 368
                                                                                  in procedure "eor"
destination                            based           char                     level 4 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1600 in procedure "free_default" set
                                                                                  ref 1665*
destination                            based           char                     level 4 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1918 1918*
dir                                    parameter       char                     packed unaligned dcl 2301 in procedure "proc_label"
                                                                                  set ref 2292 2298 2315* 2322*
dir                             000250 automatic       char(168)                packed unaligned dcl 2375 in procedure "proc_path"
                                                                                  set ref 2385* 2391* 2400* 2408* 2421* 2425* 2425
                                                                                  2447* 2447
dir                                    parameter       char                     packed unaligned dcl 1825 in procedure "path" ref
                                                                                  1822 1828 1828 1830
dir                                    parameter       char                     packed unaligned dcl 2464 in procedure "submit" set
                                                                                  ref 2459 2508* 2544* 2549* 2549 2557* 2572* 2572
                                                                                  2581* 2586* 2586 2601* 2601 2609* 2612* 2612 2635
                                                                                  2639* 2639 2651* 2651 2657* 2661* 2661 2678* 2683*
                                                                                  2683 2691* 2706* 2706 2720* 2725* 2725 2734* 2734
                                                                                  2745* 2745 2751* 2755* 2759* 2775* 2781* 2788*
                                                                                  2799* 2799 2813* 2813 2821* 2821
dir_acl                         000447 automatic       structure                level 1 dcl 2472 set ref 2720 2720
dnm_or_rqt_omitted       24     000220 automatic       bit(1)                   level 3 dcl 236 set ref 649* 808 818
dpap                            000646 automatic       pointer                  dcl 4-21 set ref 945* 946 947 948 949 950 950 950
                                                                                  951 952 953 954 955 956 957 957 2608 2626 2626
                                                                                  2631 2633 2636 2646 2657 2751 2753 2753 2755 2765
                                                                                  2766 2770 2771 2775 2775 2778 2781 2781 2785 2788
                                                                                  2788 2813 2813 2821 2821
dprint                                 based           structure                level 1 dcl 1600 in procedure "free_default" set ref
                                                                                  1579 1648
dprint                                 based           structure                level 1 dcl 1849 in procedure "print_defaults"
dprint_                         000046 constant        entry                    external dcl 127 ref 2788
dprint_$check_daemon_access     000050 constant        entry                    external dcl 127 ref 2657
dprint_$queue_contents          000052 constant        entry                    external dcl 127 ref 1954
dprint_arg                             based           structure                level 1 dcl 4-24 set ref 955* 2788 2788
dprint_arg_buf                  000650 automatic       structure                level 1 dcl 4-22 set ref 945
dprint_arg_version_10                  constant        fixed bin(17,0)          initial dcl 4-78 ref 946
dpunch                                 based           structure                level 1 dcl 1600 in procedure "free_default" set ref
                                                                                  1585 1666
dpunch                                 based           structure                level 1 dcl 1849 in procedure "print_defaults"
dwarn                                  based           structure                level 1 dcl 1577 ref 1583
ent                                    parameter       char                     packed unaligned dcl 2464 in procedure "submit" set
                                                                                  ref 2459 2508* 2544* 2549* 2557* 2572* 2581* 2586*
                                                                                  2601* 2609* 2612* 2635 2639* 2651* 2657* 2661*
                                                                                  2678* 2683* 2691* 2706* 2725* 2734* 2745* 2751*
                                                                                  2755* 2759* 2775* 2781* 2788* 2799* 2813* 2821*
ent                                    parameter       char                     packed unaligned dcl 1825 in procedure "path" ref
                                                                                  1822 1828 1830
ent                                    parameter       char                     packed unaligned dcl 2301 in procedure "proc_label"
                                                                                  set ref 2292 2298 2315* 2322* 2331* 2334*
ent                             000322 automatic       char(32)                 packed unaligned dcl 2375 in procedure "proc_path"
                                                                                  set ref 2385* 2391* 2394* 2400* 2408* 2447*
eor_cv5_6_                      000054 constant        entry                    external dcl 127 ref 1497
eor_cv6_7_                      000056 constant        entry                    external dcl 127 ref 1509
eor_cv7_8_                      000060 constant        entry                    external dcl 127 ref 1522
eor_cv8_9_                      000062 constant        entry                    external dcl 127 ref 1534
eor_cv9_10_                     000064 constant        entry                    external dcl 127 ref 1546
eor_defaults                           based           structure                level 1 dcl 1-13 set ref 1155
equal                           000154 automatic       char(32)                 packed unaligned dcl 2308 set ref 2331* 2339
equal_header             16            based           bit(1)                   initial level 4 dcl 368 set ref 915*
equal_name                3            parameter       bit(1)                   level 3 in structure "pls" packed packed unaligned
                                                                                  dcl 2301 in procedure "proc_label" ref 2329
equal_name               70            based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879* 1879*
equal_name               31            based           bit(1)                   level 6 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1918*
equal_name               72            based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879*
equal_name               66            based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879*
equal_name                3            based           bit(1)                   array level 3 in structure "PLS" packed packed
                                                                                  unaligned dcl 236 in procedure "eor" set ref 2076*
                                                                                  2090 2094* 2094* 2094* 2094* 2126* 2142*
equal_name               33            based           bit(1)                   level 6 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1918*
equal_name               64            based           bit(1)                   level 6 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879*
error                    23     000220 automatic       bit(1)                   level 3 dcl 236 set ref 646 2008* 2028* 2046* 2093*
                                                                                  2107* 2125* 2218* 2233* 2256* 2270*
error_length              7            based           fixed bin(17,0)          level 2 dcl 8-67 ref 1726 2851 2851 2851
error_string                           based           char                     level 2 dcl 8-67 set ref 2851*
error_table_$bad_arg            000160 external static fixed bin(35,0)          dcl 177 set ref 2047*
error_table_$bad_forms_option   000242 external static fixed bin(35,0)          dcl 177 ref 2851
error_table_$bad_segment        000162 external static fixed bin(35,0)          dcl 177 ref 2795
error_table_$badopt             000164 external static fixed bin(35,0)          dcl 177 set ref 2009* 2094* 2108* 2222* 2227* 2260*
                                                                                  2264*
error_table_$badstar            000166 external static fixed bin(35,0)          dcl 177 ref 2395
error_table_$bigarg             000170 external static fixed bin(35,0)          dcl 177 set ref 2216* 2254*
error_table_$command_line_overflow
                                000172 external static fixed bin(35,0)          dcl 177 ref 2318
error_table_$dirseg             000174 external static fixed bin(35,0)          dcl 177 ref 2530
error_table_$improper_data_format
                                000176 external static fixed bin(35,0)          dcl 177 set ref 2586*
error_table_$inconsistent       000200 external static fixed bin(35,0)          dcl 177 set ref 1426* 2863* 2878* 2883* 2902* 2922*
error_table_$inconsistent_msf   000202 external static fixed bin(35,0)          dcl 177 ref 2623
error_table_$lock_wait_time_exceeded
                                000204 external static fixed bin(35,0)          dcl 177 ref 2797
error_table_$moderr             000206 external static fixed bin(35,0)          dcl 177 ref 2571 2705 2733
error_table_$no_forms_table_defined
                                000244 external static fixed bin(35,0)          dcl 177 ref 877
error_table_$no_s_permission    000210 external static fixed bin(35,0)          dcl 177 ref 2510
error_table_$noarg              000212 external static fixed bin(35,0)          dcl 177 set ref 2029* 2126*
error_table_$noentry            000214 external static fixed bin(35,0)          dcl 177 ref 1348 1366 1380 1475 1955 2510 2793
error_table_$nomatch            000216 external static fixed bin(35,0)          dcl 177 ref 2435
error_table_$nostars            000220 external static fixed bin(35,0)          dcl 177 set ref 2230* 2267*
error_table_$notalloc           000222 external static fixed bin(35,0)          dcl 177 set ref 2790 2821*
error_table_$oldnamerr          000224 external static fixed bin(35,0)          dcl 177 ref 1451 1456
error_table_$out_of_bounds      000226 external static fixed bin(35,0)          dcl 177 set ref 1355 1387 2926* 2931* 2936*
error_table_$private_volume     000230 external static fixed bin(35,0)          dcl 177 set ref 2601*
error_table_$too_many_names     000232 external static fixed bin(35,0)          dcl 177 ref 1169
error_table_$typename_not_found 000234 external static fixed bin(35,0)          dcl 177 set ref 2839* 2956*
error_table_$unimplemented_version
                                000236 external static fixed bin(35,0)          dcl 177 set ref 1163 1559*
error_table_$zero_length_seg    000240 external static fixed bin(35,0)          dcl 177 ref 2650
exclude_sw                3     001214 automatic       bit(1)                   initial array level 3 packed packed unaligned
                                                                                  dcl 2983 set ref 2983*
expand_pathname_                000066 constant        entry                    external dcl 127 ref 2385
explain_array                   000031 constant        char(158)                initial array packed unaligned dcl 2472 set ref 2572
                                                                                  2612 2651 2661 2706 2734
explanation                            based           char(315)                packed unaligned dcl 2472 set ref 2572* 2612* 2651*
                                                                                  2661* 2706* 2734*
fixed_part               63            based           structure                level 3 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
fixed_part               63            based           structure                level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 785 908*
fixed_part               30            based           structure                level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 795 921*
fixed_part               63            based           structure                level 3 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
fixed_part               30            based           structure                level 3 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default"
fixed_part               30            based           structure                level 3 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
force                    37     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
force                    20            based           bit(1)                   initial level 4 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915*
force                    37            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879*
force                    20            based           bit(1)                   initial level 4 in structure "dpunch" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1918*
force                    37            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
force                     1     000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 2537 2633 2671 2716
form_name               205            based           char(24)                 level 2 dcl 4-24 set ref 950*
forms                    71            based           char(8)                  level 2 dcl 4-24 set ref 950*
forms_allowed             5            based           bit(1)                   level 2 dcl 8-67 ref 886
forms_length              6            based           fixed bin(17,0)          level 2 dcl 8-67 ref 890 890 890 1726 2851
forms_name              302            based           char(64)                 level 2 in structure "dprint_arg" packed packed
                                                                                  unaligned dcl 4-24 in procedure "eor" set ref 950*
                                                                                  957* 957
forms_name               16            based           char(64)                 initial level 3 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  ref 1879 1879 1879
forms_name               22     000257 automatic       char(128)                level 2 in structure "O" packed packed unaligned
                                                                                  dcl 236 in procedure "eor" set ref 700 869 875 886
                                                                                  890 890* 906 957 2274* 2857* 2883 2902
forms_name               16     000362 automatic       char(64)                 initial level 3 in structure "auto_default" packed
                                                                                  packed unaligned dcl 305 in procedure "eor" set
                                                                                  ref 305*
forms_name               16            based           char(64)                 initial level 3 in structure "default_print" packed
                                                                                  packed unaligned dcl 305 in procedure "eor" set
                                                                                  ref 900* 906* 906
forms_string             16            based           char                     level 2 dcl 8-51 set ref 875*
forms_string_length      15            based           fixed bin(17,0)          level 2 dcl 8-51 set ref 870* 875 1724
gen_type                        000123 automatic       char(32)                 packed unaligned dcl 97 set ref 672* 675 1224* 1227
                                                                                  2872* 2873 2875 2878* 2883* 2956*
generic_type             10            based           char(24)                 array level 3 dcl 1-13 set ref 1184*
get_equal_name_                 000070 constant        entry                    external dcl 127 ref 2331
get_group_id_$tag_star          000072 constant        entry                    external dcl 127 ref 2539
get_line_length_$switch         000074 constant        entry                    external dcl 127 ref 1806 1813
get_system_free_area_           000076 constant        entry                    external dcl 127 ref 1682
hcs_$add_acl_entries            000100 constant        entry                    external dcl 127 ref 2544 2678
hcs_$add_dir_acl_entries        000102 constant        entry                    external dcl 127 ref 2720
hcs_$get_access_class           000104 constant        entry                    external dcl 127 ref 2759
hcs_$star_                      000106 constant        entry                    external dcl 127 ref 2408
hcs_$status_long                000110 constant        entry                    external dcl 127 ref 2508
hcs_$terminate_noname           000112 constant        entry                    external dcl 127 ref 1715 2584
header                                 based           structure                level 2 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 916* 916
header                                 based           structure                level 2 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 901* 901
header                          001302 automatic       char(6)                  packed unaligned dcl 1443 in procedure
                                                                                  "find_default_header" set ref 1447* 1449* 1469*
header                                 based           structure                level 2 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
header                                 based           structure                level 2 in structure "eor_defaults" dcl 1-13
                                                                                  in procedure "eor"
header                                 based           structure                level 2 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
header                                 based           structure                level 2 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default"
header                                 based           structure                level 2 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
heading                  30            based           structure                level 4 in structure "default_punch" dcl 368
                                                                                  in procedure "eor"
heading                  34            based           char                     level 4 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1600 in procedure "free_default" set
                                                                                  ref 1664*
heading                  34            based           char                     level 4 in structure "default_punch" packed packed
                                                                                  unaligned dcl 368 in procedure "eor" set ref 796
                                                                                  922*
heading                         000342 automatic       structure                level 2 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 2751*
heading                  63     000362 automatic       structure                level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor"
heading                  73            based           char                     level 4 in structure "dprint" packed packed
                                                                                  unaligned dcl 1600 in procedure "free_default" set
                                                                                  ref 1646*
heading                  73            based           char                     level 4 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879 1879*
heading                  30            based           structure                level 4 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default"
heading                   6            based           char(64)                 level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 2751* 2753 2753*
heading                  63            based           structure                level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
heading                  63            based           structure                level 4 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
heading                  73            based           char                     level 4 in structure "default_print" packed packed
                                                                                  unaligned dcl 305 in procedure "eor" set ref 786
                                                                                  909*
heading                  30            based           structure                level 4 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
heading                  63            based           structure                level 4 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
heading                  34            based           char                     level 4 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1918 1918*
index                                                  builtin function         dcl 123 ref 1996 2005 2067 2220 2227 2258 2264
input_forms_string_length       001234 automatic       fixed bin(17,0)          dcl 8-60 set ref 869* 870 870
ioa_                            000114 constant        entry                    external dcl 127 ref 854 880 883 886 943 987 1000
                                                                                  1006 1357 1765 1769 1789 1792 1872 1879 1918 1962
                                                                                  2166 2200 2745
ioa_$ioa_switch                 000254 constant        entry                    external dcl 2349 ref 2353 2356
iod_info_$generic_type          000116 constant        entry                    external dcl 127 ref 672 1224 2872
iod_info_$queue_data            000120 constant        entry                    external dcl 127 ref 829 838 938 1101 1109 1111 1115
                                                                                  1228 1237 1239 1877 1916
iod_info_$validate_forms_info   000122 constant        entry                    external dcl 127 ref 876
iox_$error_output               000246 external static pointer                  dcl 177 set ref 1806* 2353* 2356*
iox_$user_io                    000250 external static pointer                  dcl 177 set ref 1813*
label                    46            based           structure                level 3 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
label                    46     000362 automatic       structure                level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor"
label                    16     000220 automatic       structure                level 2 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 2204*
label                    46            based           structure                level 3 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
label                    46            based           structure                level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
length                                                 builtin function         dcl 123 ref 869 906 957 2013 2141 2214 2214 2216
                                                                                  2252 2252 2254 2352 2352
line_length_error               000133 automatic       fixed bin(17,0)          initial dcl 97 set ref 97* 1806 1806* 1808
line_length_query               000134 automatic       fixed bin(17,0)          initial dcl 97 set ref 97* 1813 1813* 1815
line_lth                 60     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
line_lth                 60            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
line_lth                 60            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
line_lth                  7     000245 automatic       fixed bin(17,0)          level 2 in structure "N" dcl 236 in procedure "eor"
                                                                                  set ref 700 861 863 863 880 880* 2883 2902 2922*
                                                                                  2931*
line_lth                 60            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1600
                                                                                  in procedure "free_default" set ref 1635*
line_nbrs                45     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
line_nbrs                45            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
line_nbrs                45            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879*
lines_per_page            2            based           fixed bin(17,0)          level 2 dcl 8-67 set ref 883 883*
list_defaults            15     000220 automatic       bit(1)                   level 3 dcl 236 set ref 832 841 963 1003
lmargin                  57            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
lmargin                   6     000245 automatic       fixed bin(17,0)          level 2 in structure "N" dcl 236 in procedure "eor"
                                                                                  set ref 700 863 866 2883 2902 2922* 2926*
lmargin                  57            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
lmargin                  57     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
long                      4     001200 automatic       structure                level 2 dcl 2978
lv_mode                         000461 automatic       bit(36)                  dcl 2472 set ref 2596*
lv_name                         000463 automatic       char(32)                 packed unaligned dcl 2472 set ref 2593* 2596*
lv_pub_bit                      000462 automatic       bit(1)                   dcl 2472 set ref 2596* 2599
lvid                      6     001200 automatic       bit(36)                  level 3 packed packed unaligned dcl 2978 set ref
                                                                                  2593*
max_forms_string_length
                         14            based           fixed bin(17,0)          level 2 dcl 8-51 set ref 874*
max_name_length           2     001214 automatic       fixed bin(17,0)          initial level 2 dcl 2983 set ref 2983*
max_q                           000135 automatic       fixed bin(17,0)          dcl 97 set ref 838* 845 2936* 2936
mdc_$find_lvname                000124 constant        entry                    external dcl 127 ref 2593
mdc_$get_lv_access              000126 constant        entry                    external dcl 127 ref 2596
mi                              001214 automatic       structure                level 1 dcl 2983 set ref 1048 1048 1150 1150 1748
                                                                                  1748
mode                     10     000425 automatic       bit(36)                  level 2 in structure "acl" dcl 2472 in procedure
                                                                                  "submit" set ref 2540* 2674*
mode                     10     000447 automatic       bit(36)                  level 2 in structure "dir_acl" dcl 2472 in procedure
                                                                                  "submit" set ref 2719*
mode                      3     001200 automatic       bit(5)                   level 3 in structure "branch" packed packed
                                                                                  unaligned dcl 2978 in procedure "eor" set ref 2535
msf_manager_$acl_add            000130 constant        entry                    external dcl 127 ref 2560 2694
msf_manager_$close              000132 constant        entry                    external dcl 127 ref 1717 2561 2622 2628 2695
msf_manager_$get_ptr            000134 constant        entry                    external dcl 127 ref 2619
msf_manager_$open               000136 constant        entry                    external dcl 127 ref 2557 2609 2691
name                            000332 automatic       char(32)                 packed unaligned dcl 2375 in procedure "proc_path"
                                                                                  set ref 2414* 2421* 2425*
name                      1            based           char(24)                 level 2 in structure "d" packed packed unaligned
                                                                                  dcl 1329 in procedure "find_default" set ref 1334
                                                                                  1374*
name                      1            based           char(24)                 level 3 in structure "dprint" packed packed
                                                                                  unaligned dcl 1600 in procedure "free_default" set
                                                                                  ref 1624*
name                                   parameter       char                     packed unaligned dcl 1595 in procedure
                                                                                  "free_default" ref 1592 1624
name                      1            based           char(24)                 level 3 in structure "default_print" packed packed
                                                                                  unaligned dcl 305 in procedure "eor" set ref 808
                                                                                  987* 1183 1185 1769* 1769 1769
name                      1            based           char(24)                 level 3 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1872* 1879* 1879
name                      4     001214 automatic       varying char(30)         array level 3 in structure "mi" dcl 2983
                                                                                  in procedure "eor" set ref 1047* 1149* 1745*
name                                   parameter       char                     packed unaligned dcl 1321 in procedure
                                                                                  "find_default" set ref 1318 1334 1337* 1337* 1357*
                                                                                  1374 1393* 1403* 1403* 1417* 1426*
name                      1            based           char(24)                 level 2 in structure "d" packed packed unaligned
                                                                                  dcl 1291 in procedure "delete_default" ref 1294
name                            000100 automatic       varying char(30)         dcl 1260 in procedure "dft_name$given_ptr" set ref
                                                                                  1263* 1264* 1264 1265* 1265 1266 1274* 1275* 1275
                                                                                  1276* 1276 1277
name                      2            based           char(24)                 array level 3 in structure "eor_defaults" dcl 1-13
                                                                                  in procedure "eor" set ref 1183*
name                      1            based           char(24)                 level 3 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1918* 1918
name                            000447 automatic       char(32)                 level 2 in structure "dir_acl" dcl 2472 in procedure
                                                                                  "submit" set ref 2718*
name                      1            based           char(24)                 level 2 in structure "d" packed packed unaligned
                                                                                  dcl 1260 in procedure "dft_name$given_ptr" ref
                                                                                  1264
name                            000425 automatic       char(32)                 level 2 in structure "acl" dcl 2472 in procedure
                                                                                  "submit" set ref 2539* 2549* 2673*
name_array                3     001214 automatic       structure                array level 2 dcl 2983
name_count                1     001214 automatic       fixed bin(17,0)          initial level 2 dcl 2983 set ref 2983*
name_index                4            based           fixed bin(21,0)          array level 3 dcl 7-17 ref 1051 1051 1177 1177 1752
                                                                                  1755 1755 1775
name_len                  5            based           fixed bin(21,0)          array level 3 dcl 7-17 ref 1051 1051 1177 1177 1755
                                                                                  1755
name_of_default          14     000257 automatic       char(24)                 level 2 packed packed unaligned dcl 236 set ref 649
                                                                                  653 653* 657 660* 737 751 751* 765* 770* 776*
                                                                                  1096* 1097* 1100 2250* 2252 2254 2863* 2863*
nep                      40     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
nep                       2     000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 700 2164 2170* 2194* 2883* 2902*
nep                      40            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
nep                      40            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
nindex                    0(18)        based           fixed bin(18,0)          array level 2 packed packed unsigned unaligned
                                                                                  dcl 5-27 ref 2414
nnames                    0(02)        based           fixed bin(16,0)          array level 2 packed packed unsigned unaligned
                                                                                  dcl 5-27 ref 1710 2432
no_separator             44     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
no_separator             44            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
no_separator             44            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879*
non_edited               42            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
non_edited                4     000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 700 2883* 2902*
non_edited               42            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
non_edited               42     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
non_path_ctl_args        22     000220 automatic       bit(1)                   level 3 dcl 236 set ref 803 2282*
notify                   23            based           fixed bin(17,0)          initial level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915*
notify                   23            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1849
                                                                                  in procedure "print_defaults" ref 1918
notify                   53     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
notify                   53            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" ref 1879
notify                   53            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
null                                                   builtin function         dcl 123 ref 634 639 661 737 741 741 741 741 767 927
                                                                                  930 930 930 930 1044 1094 1098 1146 1152 1217 1221
                                                                                  1297 1301 1301 1301 1301 1307 1307 1307 1307 1307
                                                                                  1307 1334 1337 1361 1361 1361 1361 1377 1377 1377
                                                                                  1377 1382 1389 1394 1394 1394 1394 1418 1418 1418
                                                                                  1418 1464 1464 1464 1464 1469 1469 1469 1469 1491
                                                                                  1564 1579 1586 1692 1693 1694 1695 1696 1697 1698
                                                                                  1700 1710 1713 1715 1717 1719 1724 1726 1746 1758
                                                                                  2315 2315 2508 2508 2562 2582 2585 2619 2619 2696
number_array                           based           fixed bin(17,0)          array dcl 236 set ref 2019* 2056*
object_lib_$initiate            000140 constant        entry                    external dcl 127 ref 2581
old_header                      001304 automatic       char(28)                 packed unaligned dcl 1443 set ref 1453* 1454*
op                                     based           char                     packed unaligned dcl 1979 set ref 2041 2041 2041
                                                                                  2041 2047* 2052 2067 2068 2068 2072 2072 2072 2072
                                                                                  2072 2077 2082 2082 2085 2085 2089* 2108* 2108*
                                                                                  2108* 2140 2141 2142 2212 2214 2216* 2220 2220
                                                                                  2222 2222 2222* 2227 2227* 2230* 2230* 2237 2239
                                                                                  2243* 2250 2252 2254* 2258 2258 2260 2260 2260*
                                                                                  2264 2264* 2267* 2267* 2274
op_no                           000126 automatic       fixed bin(17,0)          unsigned dcl 1979 set ref 2041* 2049* 2052* 2052
                                                                                  2056
output_module            26            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1918*
output_module            26            based           fixed bin(17,0)          initial level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915*
output_module            56            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1600
                                                                                  in procedure "free_default" set ref 1634*
output_module            56            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
output_module            26            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1600
                                                                                  in procedure "free_default" set ref 1656* 1658*
output_module             5     000245 automatic       fixed bin(17,0)          level 2 in structure "N" dcl 236 in procedure "eor"
                                                                                  set ref 693 860* 2878* 2883 2883 2883* 2902 2902
                                                                                  2902*
output_module            56     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
pad                       3(02) 001214 automatic       bit(34)                  initial array level 3 in structure "mi" packed
                                                                                  packed unaligned dcl 2983 in procedure "eor" set
                                                                                  ref 2983*
pad                      33            based           fixed bin(17,0)          array level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 949*
pad                      11     000425 automatic       bit(36)                  level 2 in structure "acl" dcl 2472 in procedure
                                                                                  "submit" set ref 2541* 2675*
page_lth                 61            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1600
                                                                                  in procedure "free_default" set ref 1636*
page_lth                 61     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
page_lth                 10     000245 automatic       fixed bin(17,0)          level 2 in structure "N" dcl 236 in procedure "eor"
                                                                                  set ref 700 883 883* 2883 2902
page_lth                 61            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
page_lth                 61            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
pair_count                1            based           fixed bin(17,0)          level 2 dcl 7-17 ref 1049 1051 1051 1175 1177 1177
                                                                                  1713 1746 1751 1752 1755 1755 1775
pairs                     3            based           structure                array level 2 dcl 7-17
path                                   parameter       char                     packed unaligned dcl 2371 set ref 2368 2385* 2443*
pathnames                21     000220 automatic       bit(1)                   level 3 dcl 236 set ref 765 832 841 941 1998* 2247*
person                          000012 internal static char(22)                 initial packed unaligned dcl 177 set ref 1453 1679
                                                                                  1681* 1879* 1918*
pls                                    parameter       structure                level 1 dcl 2301 ref 2292 2298
pls_string                             parameter       char                     packed unaligned dcl 2301 ref 2292 2298 2315 2322
                                                                                  2327
print_default            11     000220 automatic       bit(1)                   level 3 dcl 236 set ref 832 841 963 980 983* 990
                                                                                  2209*
proc                            001146 constant        char(24)                 initial dcl 177 set ref 1403* 1426* 1481* 1489*
                                                                                  1500* 1512* 1525* 1537* 1549* 1559* 1688* 2009*
                                                                                  2029* 2047* 2094* 2108* 2126* 2216* 2222* 2227*
                                                                                  2230* 2254* 2260* 2264* 2267* 2334* 2353* 2425*
                                                                                  2443* 2447* 2549* 2572* 2586* 2601* 2612* 2639*
                                                                                  2651* 2661* 2683* 2706* 2725* 2734* 2799* 2813*
                                                                                  2821* 2834* 2839* 2845* 2851* 2857* 2863* 2878*
                                                                                  2883* 2902* 2922* 2926* 2931* 2936* 2941* 2946*
                                                                                  2950* 2956* 2956* 2961*
processing_control       16            based           structure                level 3 in structure "dpunch" dcl 1849 in procedure
                                                                                  "print_defaults"
processing_control       36            based           structure                level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
processing_control       36            based           structure                level 3 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
processing_control              000220 automatic       structure                level 2 in structure "S" dcl 236 in procedure "eor"
processing_control       36     000362 automatic       structure                level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor"
processing_control       16            based           structure                level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor"
proj                            000020 internal static char(9)                  packed unaligned dcl 177 set ref 1681* 1879* 1918*
pt_pch                   51     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
pt_pch                          000245 automatic       fixed bin(17,0)          level 2 in structure "N" dcl 236 in procedure "eor"
                                                                                  set ref 693 700 710 724* 765* 770* 776* 2579 2586*
                                                                                  2601* 2878* 2883 2883 2883* 2902 2902 2902 2902
pt_pch                   21            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1600
                                                                                  in procedure "free_default" set ref 1654*
pt_pch                   51            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
pt_pch                   21            based           fixed bin(17,0)          initial level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915*
pt_pch                   51            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1600
                                                                                  in procedure "free_default" set ref 1632*
question                        000016 constant        char(41)                 initial packed unaligned dcl 2472 ref 2572 2612 2651
                                                                                  2661 2706 2734
queue                     4     000245 automatic       fixed bin(17,0)          level 2 in structure "N" dcl 236 in procedure "eor"
                                                                                  set ref 827 845 936 938* 1954* 1962* 2936*
queue                    25            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1600
                                                                                  in procedure "free_default" set ref 1659*
queue                    55            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1600
                                                                                  in procedure "free_default" set ref 1637*
queue                     3            based           fixed bin(17,0)          level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 2813* 2821*
queue                    55     000362 automatic       fixed bin(17,0)          initial level 3 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
queue                    25            based           fixed bin(17,0)          initial level 3 in structure "dpunch" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1918 1918*
queue                    25            based           fixed bin(17,0)          initial level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 915* 1108 1236
queue                    55            based           fixed bin(17,0)          initial level 3 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
queue                    55            based           fixed bin(17,0)          initial level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900* 1106 1234
regexp_sw                 3(01) 001214 automatic       bit(1)                   initial array level 3 packed packed unaligned
                                                                                  dcl 2983 set ref 2983*
replace_default          14     000220 automatic       bit(1)                   level 3 dcl 236 set ref 765 774 818
request_type             10     000362 automatic       char(24)                 initial level 3 in structure "auto_default" packed
                                                                                  packed unaligned dcl 305 in procedure "eor" set
                                                                                  ref 305*
request_type             10            based           char(24)                 initial level 3 in structure "dprint" packed packed
                                                                                  unaligned dcl 1600 in procedure "free_default" set
                                                                                  ref 1628*
request_type                    000257 automatic       char(24)                 level 2 in structure "O" packed packed unaligned
                                                                                  dcl 236 in procedure "eor" set ref 649 653 663*
                                                                                  670 672* 737 737 747 747* 751 765* 770* 776* 808
                                                                                  808* 818 829* 838* 872 886* 905 938* 943* 956
                                                                                  1100* 1101* 1105* 1109* 1111* 1113 1954* 1962*
                                                                                  2212* 2214 2216 2239 2239* 2834* 2857* 2863* 2869
                                                                                  2872* 2878* 2883* 2936* 2941* 2956* 2961*
request_type             10            based           char(24)                 initial level 3 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1916* 1918*
request_type            273            based           char(24)                 level 2 in structure "dprint_arg" packed packed
                                                                                  unaligned dcl 4-24 in procedure "eor" set ref 956*
                                                                                  2657* 2813* 2821*
request_type             10            based           char(24)                 initial level 3 in structure "default_print" packed
                                                                                  packed unaligned dcl 305 in procedure "eor" set
                                                                                  ref 663 808 818 900* 905* 1105 1187 1233 1237*
                                                                                  1239* 1769 1769* 2863*
request_type             10            based           char(24)                 initial level 3 in structure "default_punch" packed
                                                                                  packed unaligned dcl 368 in procedure "eor" set
                                                                                  ref 915*
request_type              2            based           char(32)                 level 2 in structure "validate_forms_info_input"
                                                                                  dcl 8-51 in procedure "eor" set ref 872*
request_type             10            based           char(24)                 initial level 3 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1877* 1879*
request_type             10            based           char(24)                 initial level 3 in structure "dpunch" packed packed
                                                                                  unaligned dcl 1600 in procedure "free_default" set
                                                                                  ref 1651*
request_type              2            based           structure                array level 2 in structure "eor_defaults" dcl 1-13
                                                                                  in procedure "eor"
requote_string_                 000142 constant        entry                    external dcl 127 ref 1879 1879 1879 1879 1879 1879
                                                                                  1918 1918 2315 2322 2334 2334
result                          000164 automatic       varying char(136)        dcl 2308 set ref 2314* 2315* 2327* 2331 2334 2339*
                                                                                  2342
returned_forms           10            based           char                     level 2 dcl 8-67 ref 890 890
rqt                                    parameter       char                     packed unaligned dcl 1321 in procedure
                                                                                  "find_default" set ref 1318 1393* 1417*
rqt                                    parameter       char                     packed unaligned dcl 1595 in procedure
                                                                                  "free_default" ref 1592 1628 1651
rtrim                                                  builtin function         dcl 123 ref 869 875 1264 1275 1453 1828 1828 1830
                                                                                  1830 1879 1879 2141
search                                                 builtin function         dcl 123 ref 2142 2220 2258
set_default              10     000220 automatic       bit(1)                   level 3 dcl 236 set ref 765 777* 818 896 963
short                           001200 automatic       structure                level 2 dcl 2978
single                   41            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
single                   41            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
single                   41     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
single                    3     000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 700 2883* 2902*
size                                                   builtin function         dcl 1329 in procedure "find_default" ref 1361 1361
                                                                                  1377 1377
size                      7            based           fixed bin(18,0)          level 3 in structure "dpunch" dcl 1600 in procedure
                                                                                  "free_default" set ref 1666*
size                      7            based           fixed bin(18,0)          level 3 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 902* 930* 1464*
size                      7            based           fixed bin(18,0)          level 3 in structure "default_punch" dcl 368
                                                                                  in procedure "eor" set ref 917* 2044 2053
size                      7            based           fixed bin(18,0)          level 2 in structure "d" dcl 1329 in procedure
                                                                                  "find_default" set ref 1351 1351* 1352 1376* 1394*
                                                                                  1418*
size                      7            based           fixed bin(18,0)          level 3 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default" set ref 1648*
star_ALL_ENTRIES                001353 constant        fixed bin(2,0)           initial dcl 5-111 set ref 2408*
star_entries                           based           structure                array level 1 dcl 5-27 ref 1710 2432
star_entry_count                001172 automatic       fixed bin(17,0)          dcl 5-14 set ref 1710 1710 2408* 2413 2432 2432
star_entry_ptr                  001174 automatic       pointer                  dcl 5-15 set ref 1698* 1710 1710 1710 2408* 2414
                                                                                  2416 2432 2432
star_names                             based           char(32)                 array packed unaligned dcl 5-37 ref 1710 2414 2432
star_names_ptr                  001176 automatic       pointer                  dcl 5-19 set ref 1710 2408* 2414 2432
status_branch                          based           structure                level 1 dcl 6-8
string                                                 builtin function         dcl 123 ref 2013
substr                                                 builtin function         dcl 123 set ref 906 957 1051 1051 1177 1177 1752
                                                                                  1755 1755 1775*
sum                                                    builtin function         dcl 123 ref 1710 2432
switch_array                           based           bit(1)                   array dcl 236 set ref 2015* 2017*
target_request_type_name
                         17            based           char(24)                 array level 3 dcl 1-13 set ref 1187*
top                      46            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
top                      16     000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 700 2157* 2173* 2181 2187* 2190* 2198 2763
                                                                                  2775 2883 2902
top                      46            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
top                      46     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
top_label                              based           char                     level 4 in structure "dprint" packed packed
                                                                                  unaligned dcl 1849 in procedure "print_defaults"
                                                                                  set ref 1879 1879* 1879*
top_label                67            based           structure                level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor"
top_label                67            based           structure                level 4 in structure "dprint" dcl 1849 in procedure
                                                                                  "print_defaults"
top_label                              based           char                     level 4 in structure "default_print" packed packed
                                                                                  unaligned dcl 305 in procedure "eor" set ref 788
                                                                                  911*
top_label                10     000342 automatic       structure                level 2 in structure "PLS_struc" dcl 236
                                                                                  in procedure "eor" set ref 2160 2775*
top_label                67            based           structure                level 4 in structure "dprint" dcl 1600 in procedure
                                                                                  "free_default"
top_label               100            based           char(136)                level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 2765* 2775* 2778*
truncate                  5     000220 automatic       bit(1)                   level 3 in structure "S" dcl 236 in procedure "eor"
                                                                                  set ref 700 2883* 2902*
truncate                 43     000362 automatic       bit(1)                   initial level 4 in structure "auto_default" dcl 305
                                                                                  in procedure "eor" set ref 305*
truncate                 43            based           bit(1)                   initial level 4 in structure "default_print" dcl 305
                                                                                  in procedure "eor" set ref 900*
truncate                 43            based           bit(1)                   initial level 4 in structure "dprint" dcl 1849
                                                                                  in procedure "print_defaults" set ref 1879 1879*
type                                   based           char(2)                  level 2 in structure "desc" packed packed unaligned
                                                                                  dcl 457 in procedure "eor" ref 2015 2017 2019 2022
                                                                                  2022 2022 2022 2024 2024 2024 2039 2060
type                            001200 automatic       fixed bin(2,0)           level 3 in structure "branch" packed packed unsigned
                                                                                  unaligned dcl 2978 in procedure "eor" set ref 2522
                                                                                  2524* 2542 2606 2633 2676
type                                   based           fixed bin(2,0)           array level 2 in structure "star_entries" packed
                                                                                  packed unsigned unaligned dcl 5-27 in procedure
                                                                                  "eor" ref 2416
unspec                                                 builtin function         dcl 123 ref 1879 1879
user_area_ptr            12            based           pointer                  level 2 dcl 8-51 set ref 873*
user_info_                      000144 constant        entry                    external dcl 127 ref 1681
validate_forms_info_input              based           structure                level 1 dcl 8-51 set ref 870 1724
validate_forms_info_input_ptr   001232 automatic       pointer                  dcl 8-50 set ref 870* 871 872 873 874 875 876* 1700*
                                                                                  1724 1724
validate_forms_info_output             based           structure                level 1 dcl 8-67 set ref 1726
validate_forms_info_output_ptr  001236 automatic       pointer                  dcl 8-66 set ref 876* 880 880 883 883 886 890 890
                                                                                  890 1700* 1726 1726 2851 2851
value_$get_data                 000146 constant        entry                    external dcl 127 ref 1051 1177 1337 1449 1454 1755
value_$get_path                 000150 constant        entry                    external dcl 127 ref 1685
value_$list_data_names          000152 constant        entry                    external dcl 127 ref 1048 1150 1748
value_$set_data                 000154 constant        entry                    external dcl 127 ref 741 930 1301 1307 1361 1377
                                                                                  1394 1418 1464 1469
value_$set_path                 000156 constant        entry                    external dcl 127 ref 1477
value_list_info                        based           structure                level 1 dcl 7-17 set ref 1713 1746
value_list_info_ptr             001212 automatic       pointer                  dcl 7-3 set ref 1048* 1049 1051 1051 1051 1051 1051
                                                                                  1051 1150* 1175 1177 1177 1177 1177 1177 1177
                                                                                  1695* 1713 1713 1746 1746 1748* 1751 1752 1752
                                                                                  1755 1755 1755 1755 1755 1755 1775 1775
value_seg_path                  000136 automatic       char(168)                packed unaligned dcl 97 set ref 1477* 1481* 1489*
                                                                                  1500* 1512* 1525* 1537* 1549* 1559* 1685* 2845*
                                                                                  2950*
version                         001214 automatic       fixed bin(17,0)          initial level 2 in structure "mi" dcl 2983
                                                                                  in procedure "eor" set ref 2983*
version                                based           fixed bin(17,0)          level 2 in structure "default_header" dcl 399
                                                                                  in procedure "eor" set ref 1459* 1495 1507 1520
                                                                                  1532 1544 1556 1559*
version                                based           fixed bin(17,0)          level 2 in structure "dprint_arg" dcl 4-24
                                                                                  in procedure "eor" set ref 946*
version                                based           char(8)                  level 2 in structure "validate_forms_info_input"
                                                                                  dcl 8-51 in procedure "eor" set ref 871*
version                                based           fixed bin(17,0)          level 3 in structure "eor_defaults" dcl 1-13
                                                                                  in procedure "eor" set ref 1157* 1161
warn_count                             parameter       fixed bin(17,0)          dcl 1321 in procedure "find_default" set ref 1318
                                                                                  1333* 1351* 1356* 1381*
warn_count                      000210 automatic       fixed bin(17,0)          dcl 97 in procedure "eor" set ref 660* 735* 765* 943
                                                                                  1097* 1220* 1299*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ATOMIC_ACTIVE_STRING                   internal static fixed bin(17,0)          initial dcl 3-6
A_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 2-11
A_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 2-36
DEFAULT_ACTIVE_STRING                  internal static fixed bin(17,0)          initial dcl 3-6
DIR_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 2-33
E_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 2-11
E_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 2-36
FORMS_INFO_VERSION_1                   internal static char(8)                  initial packed unaligned dcl 8-45
Link                                   internal static fixed bin(17,0)          initial dcl 6-56
M_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 2-11
M_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 2-36
N_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 2-11
N_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 2-36
REW_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 2-11
REW_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 2-36
RE_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 2-11
RE_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 2-36
RW_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 2-11
RW_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 2-36
SA_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 2-11
SA_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 2-36
SEG_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 2-30
SMA_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 2-11
SMA_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 2-36
SM_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 2-11
SM_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 2-36
S_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 2-36
TOKENS_ONLY_ACTIVE_STRING              internal static fixed bin(17,0)          initial dcl 3-6
VALIDATE_FORMS_INFO_OUTPUT_VERSION_1   internal static char(8)                  initial packed unaligned dcl 8-82
W_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 2-11
W_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 2-36
alloc_chars_len                        automatic       fixed bin(21,0)          dcl 7-5
alloc_max_name_len                     automatic       fixed bin(21,0)          dcl 7-5
alloc_name_count                       automatic       fixed bin(17,0)          dcl 7-4
alloc_pair_count                       automatic       fixed bin(17,0)          dcl 7-4
dprint_arg_version_1                   internal static fixed bin(17,0)          initial dcl 4-69
dprint_arg_version_2                   internal static fixed bin(17,0)          initial dcl 4-70
dprint_arg_version_3                   internal static fixed bin(17,0)          initial dcl 4-71
dprint_arg_version_4                   internal static fixed bin(17,0)          initial dcl 4-72
dprint_arg_version_5                   internal static fixed bin(17,0)          initial dcl 4-73
dprint_arg_version_6                   internal static fixed bin(17,0)          initial dcl 4-74
dprint_arg_version_7                   internal static fixed bin(17,0)          initial dcl 4-75
dprint_arg_version_8                   internal static fixed bin(17,0)          initial dcl 4-76
dprint_arg_version_9                   internal static fixed bin(17,0)          initial dcl 4-77
error_string_length                    automatic       fixed bin(17,0)          dcl 8-80
forms_info                             based           structure                level 1 unaligned dcl 8-15
forms_info_comment_count               automatic       fixed bin(17,0)          dcl 8-38
forms_info_default_forms_length        automatic       fixed bin(17,0)          dcl 8-38
forms_info_entry_count                 automatic       fixed bin(17,0)          dcl 8-38
forms_info_name_count                  automatic       fixed bin(17,0)          dcl 8-38
forms_info_ptr                         automatic       pointer                  dcl 8-14
forms_info_specials_count              automatic       fixed bin(17,0)          dcl 8-38
forms_info_types_count                 automatic       fixed bin(17,0)          dcl 8-38
forms_info_uses_count                  automatic       fixed bin(17,0)          dcl 8-38
match_info                             based           structure                level 1 dcl 7-7
match_info_ptr                         automatic       pointer                  dcl 7-3
match_info_version_1                   internal static fixed bin(17,0)          initial dcl 7-27
returned_forms_length                  automatic       fixed bin(17,0)          dcl 8-80
star_ALL_ENTRIES_WITH_LINK_PATHS       internal static fixed bin(3,0)           initial dcl 5-114
star_BRANCHES_ONLY                     internal static fixed bin(2,0)           initial dcl 5-110
star_DIRECTORY                         internal static fixed bin(2,0)           initial unsigned dcl 5-121
star_LINK                              internal static fixed bin(2,0)           initial unsigned dcl 5-119
star_LINKS_ONLY                        internal static fixed bin(2,0)           initial dcl 5-109
star_LINKS_ONLY_WITH_LINK_PATHS        internal static fixed bin(3,0)           initial dcl 5-112
star_SEGMENT                           internal static fixed bin(2,0)           initial unsigned dcl 5-120
star_branch_count                      automatic       fixed bin(17,0)          dcl 5-13
star_dir_list_branch                   based           structure                array level 1 dcl 5-59
star_link_count                        automatic       fixed bin(17,0)          dcl 5-17
star_link_pathname                     based           char                     packed unaligned dcl 5-102
star_links                             based           structure                array level 1 dcl 5-76
star_linkx                             automatic       fixed bin(17,0)          dcl 5-18
star_list_branch                       based           structure                array level 1 dcl 5-41
star_list_branch_ptr                   automatic       pointer                  dcl 5-16
star_list_names                        based           char(32)                 array packed unaligned dcl 5-92
star_list_names_ptr                    automatic       pointer                  dcl 5-20
star_select_sw                         automatic       fixed bin(3,0)           dcl 5-21
status_area_ptr                        automatic       pointer                  dcl 6-47
status_entry_names                     based           char(32)                 array dcl 6-47
status_link                            based           structure                level 1 dcl 6-38
status_pathname                        based           char                     dcl 6-47
status_ptr                             automatic       pointer                  dcl 6-47
value_list_info_version_1              internal static fixed bin(17,0)          initial dcl 7-27

NAMES DECLARED BY EXPLICIT CONTEXT.
BAD_EXPAND                      027027 constant        label                    dcl 2443 ref 2386 2395
BAD_PATH                        027061 constant        label                    dcl 2447 ref 2390 2399 2410 2436
DEFAULT_QUEUE_UNDEFINED         012352 constant        label                    dcl 2834 set ref 832
DEFAULT_RQT_NOT_DEFINED         012403 constant        label                    dcl 2839 set ref 737
DELETE_FAILURE                  012436 constant        label                    dcl 2845 ref 1308
END_OP                          025321 constant        label                    dcl 2278 ref 2148 2153 2171 2192 2205 2210 2235 2241
                                                                                  2248 2272 2276
ERROR_VALIDATING_FORM           012505 constant        label                    dcl 2851 ref 877
EXIT                            010460 constant        label                    dcl 960 ref 2324 2337 2806 2819 2825
FINISH                          010613 constant        label                    dcl 1009 ref 639 1044 1057 1094 1117 1146 1164 1170
                                                                                  1190 1217 1225 1241 1413 1428 1483 1503 1515 1528
                                                                                  1540 1552 1689 2837 2843 2849 2861 2867 2920 2924
                                                                                  2929 2934 2939 2944 2948 2954 2959 2964
FORCE_DAEMON_READ_FAIL          031174 constant        label                    dcl 2683 ref 2692 2700
FORCE_READ_FAIL                 027405 constant        label                    dcl 2549 ref 2558 2566
GIVE_LABEL_WARNING              024110 constant        label                    dcl 2161 ref 2177 2183 2188
IGNORE_ENTRY                    026715 constant        label                    dcl 2425 ref 2404
IGNORE_OPERAND                  023124 constant        label                    dcl 2053 ref 2050
INCONSISTENT_DNM_RQT_ARGS       012602 constant        label                    dcl 2863 ref 818
INCONSISTENT_PRINT_PUNCH_PLOT   012643 constant        label                    dcl 2869 ref 720
INDENT_INCONSISTENT_WITH_LINE_LENGTH
                                013317 constant        label                    dcl 2922 ref 863
MAX_INDENT_EXCEEDED             013353 constant        label                    dcl 2926 ref 866
MAX_LINE_LENGTH_EXCEEDED        013407 constant        label                    dcl 2931 set ref 861
MAX_QUEUE_EXCEEDED              013443 constant        label                    dcl 2936 set ref 845
MAX_QUEUE_UNDEFINED             013513 constant        label                    dcl 2941 set ref 841
NEXT_ENTRY                      026762 constant        label                    dcl 2429 ref 2423
NOT_AF                          013562 constant        label                    dcl 2946 set ref 611
PROC_OP                         000000 constant        label                    array(14) dcl 2153 ref 2151
QUEUE_BAD                       032640 constant        label                    dcl 2813 ref 2795
QUEUE_ENTRY                     032052 constant        label                    dcl 2751 ref 2666
QUEUE_ERROR                     032640 constant        label                    dcl 2813 set ref 2797
QUEUE_FULL                      032724 constant        label                    dcl 2821 ref 2790
QUEUE_MISSING                   032640 constant        label                    dcl 2813 ref 2793
REFIND_HEADER                   015657 constant        label                    dcl 1449 ref 1478
REQUEUE                         032477 constant        label                    dcl 2788 ref 2804
STORE_FAILURE                   013600 constant        label                    dcl 2950 set ref 743 932 1303 1363 1378 1395 1420
                                                                                  1466 1471
UNDEFINED_GENERIC_TYPE          013647 constant        label                    dcl 2956 ref 677
UNDEFINED_REQUEST_TYPE          013707 constant        label                    dcl 2961 set ref 673
cp_for_error_msg                026204 constant        entry                    internal dcl 2344 ref 2322
default_count                   010623 constant        entry                    external dcl 1023 ref 1154 1166
default_request_type            011050 constant        entry                    external dcl 1064
delete_default                  014127 constant        entry                    internal dcl 1286 ref 985
dft_name$given_name             014040 constant        entry                    internal dcl 1269 ref 1047 1149 1337 1337 1745
dft_name$given_ptr              013757 constant        entry                    internal dcl 1255 ref 930 930 1307 1307 1361 1361
                                                                                  1377 1377 1394 1394 1418 1418 1464 1464
display_general_forms_error     012546 constant        label                    dcl 2857 ref 2851
enter_output_request            005403 constant        entry                    external dcl 86
eor                             005373 constant        entry                    external dcl 86
find_default                    014444 constant        entry                    internal dcl 1318 ref 660 735 765 1097 1220 1299
find_default_header             015654 constant        entry                    internal dcl 1440 ref 638 1043 1093 1145 1216
free_default                    016745 constant        entry                    internal dcl 1574 ref 925 1050 1176 1298 1300 1334
                                                                                  1347 1354 1365 1415 1722 1723 1754 1784
init                            017320 constant        entry                    internal dcl 1676 ref 607 1040 1086 1142 1214
init_default                    017027 constant        entry                    internal dcl 1592 ref 770 776 1393 1417 1463 1786
janitor                         017436 constant        entry                    internal dcl 1707 ref 608 1009 1041 1092 1143 1215
list_defaults                   011440 constant        entry                    external dcl 1124
list_defaults                   017650 constant        entry                    internal dcl 1736 in procedure "eor" ref 996 1005
ll_err                          020345 constant        entry                    internal dcl 1803 ref 1489 2126 2222 2222 2227 2230
                                                                                  2260 2260 2264 2267 2447 2639 2683 2725 2845 2941
                                                                                  2950 2961
ll_query                        020376 constant        entry                    internal dcl 1810 ref 1403 1403 2572 2661 2706 2734
path                            020430 constant        entry                    internal dcl 1822 ref 2315 2322
print_defaults                  020612 constant        entry                    internal dcl 1839 ref 982 994 999 1764 1788
print_totals                    022205 constant        entry                    internal dcl 1943 ref 960 967
proc_args                       022332 constant        entry                    internal dcl 1973 ref 645 803 959
proc_heading                    025365 constant        entry                    internal dcl 2298 ref 2751 2755
proc_label                      025331 constant        entry                    internal dcl 2292 ref 2775 2781
proc_path                       026341 constant        entry                    internal dcl 2368 ref 1999 2243
request_type                    012010 constant        entry                    external dcl 1197
submit                          027145 constant        entry                    internal dcl 2459 ref 2391 2400 2421

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     35006       35264   33467       35016
Length     36240   33467       256         740    1317          14

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
eor                                1776 external procedure  is an external procedure.  
on unit on line 608                  64 on unit               
on unit on line 1041                 64 on unit               
on unit on line 1092                 64 on unit               
on unit on line 1143                 64 on unit               
on unit on line 1215                 64 on unit               
dft_name$given_ptr                   75 internal procedure  is called by several nonquick procedures.  
delete_default                      150 internal procedure  enables or reverts conditions.  
on unit on line 1298                 70 on unit               
find_default                        322 internal procedure  is called by several nonquick procedures.  
find_default_header                     internal procedure  shares stack frame of external procedure eor.  
free_default                         68 internal procedure  is called by several nonquick procedures.  
init                                    internal procedure  shares stack frame of external procedure eor.  
janitor                              74 internal procedure  is called by several nonquick procedures.  
list_defaults                           internal procedure  shares stack frame of external procedure eor.  
ll_err                               74 internal procedure  is called by several nonquick procedures.  
path                                 69 internal procedure  is called during a stack extension.  
print_defaults                          internal procedure  shares stack frame of external procedure eor.  
print_totals                            internal procedure  shares stack frame of external procedure eor.  
proc_args                           944 internal procedure  enables or reverts conditions.  
on unit on line 2044                106 on unit               
proc_label                              internal procedure  shares stack frame of internal procedure proc_args.  
cp_for_error_msg                    123 internal procedure  is called during a stack extension.  
proc_path                               internal procedure  shares stack frame of internal procedure proc_args.  
submit                                  internal procedure  shares stack frame of internal procedure proc_args.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 Parea                       eor
000012 person                      eor
000020 proj                        eor

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
delete_default           000100 Pnew_default                delete_default
dft_name$given_ptr       000100 name                        dft_name$given_ptr
eor                      000100 Idft                        eor
                         000101 Nargs                       eor
                         000102 Nqueued                     eor
                         000103 Ntype                       eor
                         000104 Ntypes_set                  eor
                         000106 Parg_list                   eor
                         000110 Pdefault_temp               eor
                         000112 Pfcb                        eor
                         000114 Pseg                        eor
                         000116 Sdefault_is_stored          eor
                         000117 Sgive_label_warning         eor
                         000120 Sgive_nep_warning           eor
                         000121 Sdefault                    eor
                         000122 code                        eor
                         000123 gen_type                    eor
                         000133 line_length_error           eor
                         000134 line_length_query           eor
                         000135 max_q                       eor
                         000136 value_seg_path              eor
                         000210 warn_count                  eor
                         000220 S                           eor
                         000245 N                           eor
                         000257 O                           eor
                         000342 PLS_struc                   eor
                         000362 auto_default                eor
                         000606 Pdefault                    eor
                         000610 Pnew_default                eor
                         000612 Pdefault_header             eor
                         000614 auto_default_header         eor
                         000640 Pdesc                       eor
                         000642 Nrequest_types              eor
                         000644 Peor_defaults               eor
                         000646 dpap                        eor
                         000650 dprint_arg_buf              eor
                         001172 star_entry_count            eor
                         001174 star_entry_ptr              eor
                         001176 star_names_ptr              eor
                         001200 branch                      eor
                         001212 value_list_info_ptr         eor
                         001214 mi                          eor
                         001232 validate_forms_info_input_ptr
                                                            eor
                         001234 input_forms_string_length   eor
                         001236 validate_forms_info_output_ptr
                                                            eor
                         001300 Idft                        find_default_header
                         001302 header                      find_default_header
                         001304 old_header                  find_default_header
                         001330 Idft                        list_defaults
                         001331 Ntype                       list_defaults
                         001332 Sfirst                      list_defaults
                         001344 Srqt_defined                print_defaults
                         001345 code                        print_defaults
                         001346 default_queue               print_defaults
                         001356 Nalready_in_queue           print_totals
                         001357 code                        print_totals
find_default             000100 Syes                        find_default
proc_args                000100 IPLS                        proc_args
                         000101 Iarg                        proc_args
                         000102 Isearch                     proc_args
                         000103 Larg                        proc_args
                         000104 Lop                         proc_args
                         000106 Parg                        proc_args
                         000110 Pop                         proc_args
                         000112 Snon_path_ctl_arg           proc_args
                         000113 Sstring                     proc_args
                         000114 argv                        proc_args
                         000125 arg_no                      proc_args
                         000126 op_no                       proc_args
                         000154 equal                       proc_label
                         000164 result                      proc_label
                         000240 ERROR_LABEL                 proc_path
                         000244 Ientry                      proc_path
                         000245 Nmatches                    proc_path
                         000246 Ssuppress_errors            proc_path
                         000247 code                        proc_path
                         000250 dir                         proc_path
                         000322 ent                         proc_path
                         000332 name                        proc_path
                         000352 Icomp                       submit
                         000353 Sdelete                     submit
                         000354 Sread                       submit
                         000355 Sstatus                     submit
                         000356 Syes                        submit
                         000360 access_class                submit
                         000362 access_label                submit
                         000424 adjusted_bit_count          submit
                         000425 acl                         submit
                         000440 bit_count                   submit
                         000441 daemon_name                 submit
                         000447 dir_acl                     submit
                         000461 lv_mode                     submit
                         000462 lv_pub_bit                  submit
                         000463 lv_name                     submit

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_l_a               r_g_a               r_e_as              r_ne_as             r_le_a              r_ge_a
alloc_char_temp     cat_realloc_chars   call_ext_in         call_ext_out_desc   call_ext_out        call_int_this_desc
call_int_this       call_int_other_desc call_int_other      return_mac          tra_ext_1           tra_ext_2
mpfx2               enable_op           shorten_stack       ext_entry           ext_entry_desc      int_entry
int_entry_desc      set_chars_eis       index_chars_eis     any_to_any_truncate_unpack_picture      op_alloc_
op_freen_           index_after_cs

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
adjust_bit_count_             check_star_name_$entry        com_err_                      command_query_$yes_no
convert_authorization_$to_string                            cu_$arg_count                 cu_$arg_list_ptr
cu_$arg_ptr_rel               cu_$cp                        cu_$evaluate_active_string    dprint_
dprint_$check_daemon_access   dprint_$queue_contents        eor_cv5_6_                    eor_cv6_7_
eor_cv7_8_                    eor_cv8_9_                    eor_cv9_10_                   expand_pathname_
get_equal_name_               get_group_id_$tag_star        get_line_length_$switch       get_system_free_area_
hcs_$add_acl_entries          hcs_$add_dir_acl_entries      hcs_$get_access_class         hcs_$star_
hcs_$status_long              hcs_$terminate_noname         ioa_                          ioa_$ioa_switch
iod_info_$generic_type        iod_info_$queue_data          iod_info_$validate_forms_info mdc_$find_lvname
mdc_$get_lv_access            msf_manager_$acl_add          msf_manager_$close            msf_manager_$get_ptr
msf_manager_$open             object_lib_$initiate          requote_string_               user_info_
value_$get_data               value_$get_path               value_$list_data_names        value_$set_data
value_$set_path

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$bad_forms_option error_table_$bad_segment      error_table_$badopt
error_table_$badstar          error_table_$bigarg           error_table_$command_line_overflow
error_table_$dirseg           error_table_$improper_data_format                           error_table_$inconsistent
error_table_$inconsistent_msf error_table_$lock_wait_time_exceeded                        error_table_$moderr
error_table_$no_forms_table_defined                         error_table_$no_s_permission  error_table_$noarg
error_table_$noentry          error_table_$nomatch          error_table_$nostars          error_table_$notalloc
error_table_$oldnamerr        error_table_$out_of_bounds    error_table_$private_volume   error_table_$too_many_names
error_table_$typename_not_found                             error_table_$unimplemented_version
error_table_$zero_length_seg  iox_$error_output             iox_$user_io




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     97 005301       305 005303      2983 005341        86 005372       607 005411       608 005412       610 005434
    611 005445       631 005447       632 005474       633 005506       634 005522       635 005535       636 005547
    638 005570       639 005571       642 005575       643 005577       644 005600       645 005607       646 005617
    649 005621       653 005634       656 005643       657 005645       660 005651       661 005706       663 005712
    664 005716       668 005720       670 005723       672 005727       673 005750       675 005752       676 005767
    677 005771       692 005774       693 005775       697 006010       698 006012       700 006013       707 006056
    708 006060       710 006061       713 006067       714 006071       717 006072       720 006077       724 006101
    733 006103       735 006107       737 006144       740 006160       741 006170       743 006245       747 006247
    751 006263       764 006272       765 006274       767 006336       769 006342       770 006344       771 006367
    774 006371       776 006373       777 006416       780 006420       782 006423       783 006452       784 006476
    785 006504       786 006614       787 006616       788 006622       789 006627       790 006633       792 006634
    793 006641       794 006657       795 006662       796 006726       797 006730       800 006734       801 006735
    803 006736       808 006750       818 006762       827 006774       829 006776       830 007024       832 007026
    836 007036       838 007037       839 007064       841 007066       844 007076       845 007077       849 007102
    852 007107       854 007111       855 007134       858 007136       860 007141       861 007143       863 007146
    866 007152       869 007155       870 007167       871 007202       872 007205       873 007210       874 007213
    875 007215       876 007232       877 007244       880 007251       883 007300       886 007327       890 007356
    896 007370       898 007372       900 007375       901 007457       902 007463       903 007473       904 007526
    905 007552       906 007555       908 007560       909 007670       910 007677       911 007711       912 007725
    913 007741       915 007742       916 007777       917 010003       918 010010       919 010014       920 010032
    921 010035       922 010101       923 010110       925 010122       926 010130       927 010132       928 010134
    930 010136       932 010220       936 010222       938 010224       941 010251       943 010253       945 010275
    946 010277       947 010301       948 010304       949 010330       950 010341       951 010352       952 010354
    953 010355       954 010360       955 010415       956 010441       957 010444       958 010447       959 010450
    960 010460       962 010462       963 010463       966 010500       967 010501       976 010503       978 010505
    980 010510       982 010514       983 010516       985 010517       986 010525       987 010526       990 010547
    992 010551       994 010553       996 010560       997 010562       999 010563      1000 010565      1003 010576
   1005 010600      1006 010602      1009 010613      1011 010617      1023 010620      1039 010631      1040 010633
   1041 010634      1043 010656      1044 010657      1047 010663      1048 010706      1049 010731      1050 010741
   1051 010747      1054 011033      1056 011040      1057 011042      1064 011043      1081 011076      1082 011077
   1083 011101      1084 011103      1086 011122      1087 011123      1089 011151      1090 011153      1092 011156
   1093 011200      1094 011201      1096 011205      1097 011215      1098 011252      1100 011256      1101 011261
   1103 011305      1105 011306      1106 011312      1108 011320      1109 011322      1111 011351      1113 011376
   1114 011406      1115 011407      1117 011433      1124 011434      1141 011451      1142 011452      1143 011453
   1145 011475      1146 011476      1149 011502      1150 011525      1152 011550      1154 011555      1155 011563
   1156 011577      1157 011600      1158 011602      1160 011603      1161 011606      1163 011611      1164 011614
   1166 011615      1167 011623      1169 011627      1170 011632      1172 011633      1175 011634      1176 011645
   1177 011653      1180 011737      1182 011742      1183 011744      1184 011754      1185 011764      1187 011773
   1189 011777      1190 012001      1197 012002      1210 012043      1211 012044      1212 012046      1214 012050
   1215 012051      1216 012073      1217 012074      1220 012100      1221 012140      1223 012144      1224 012157
   1225 012200      1227 012202      1228 012212      1229 012236      1231 012237      1233 012254      1234 012265
   1236 012273      1237 012275      1239 012324      1241 012351      2834 012352      2837 012402      2839 012403
   2843 012435      2845 012436      2849 012504      2851 012505      2857 012546      2861 012601      2863 012602
   2867 012642      2869 012643      2872 012647      2873 012670      2875 012677      2877 012706      2878 012710
   2883 012756      2901 013142      2902 013143      2920 013316      2922 013317      2924 013352      2926 013353
   2929 013406      2931 013407      2934 013442      2936 013443      2939 013512      2941 013513      2944 013561
   2946 013562      2948 013577      2950 013600      2954 013646      2956 013647      2959 013706      2961 013707
   2964 013755      1255 013756      1263 013764      1264 013770      1265 014017      1266 014031      1269 014037
   1274 014053      1275 014057      1276 014106      1277 014120      1286 014126      1294 014134      1296 014150
   1297 014160      1298 014162      1299 014210      1300 014253      1301 014262      1303 014340      1307 014346
   1308 014434      1311 014442      1318 014443      1333 014464      1334 014466      1337 014511      1339 014577
   1341 014601      1343 014604      1345 014610      1347 014622      1348 014631      1349 014635      1351 014636
   1352 014643      1354 014645      1355 014654      1356 014660      1357 014662      1359 014702      1361 014703
   1363 014771      1365 014777      1366 015007      1370 015013      1371 015014      1373 015030      1374 015032
   1375 015037      1376 015041      1377 015043      1378 015131      1380 015137      1381 015143      1382 015146
   1385 015150      1387 015153      1389 015164      1390 015166      1392 015167      1393 015171      1394 015217
   1395 015306      1397 015314      1399 015315      1401 015323      1403 015330      1413 015442      1415 015450
   1416 015460      1417 015464      1418 015512      1420 015601      1424 015607      1426 015610      1428 015650
   1433 015653      1440 015654      1447 015655      1449 015657      1451 015717      1453 015723      1454 015751
   1456 016011      1458 016015      1459 016017      1460 016021      1461 016031      1462 016041      1463 016043
   1464 016066      1466 016150      1468 016152      1469 016154      1471 016227      1473 016231      1475 016232
   1477 016234      1478 016254      1481 016256      1483 016306      1487 016307      1489 016311      1491 016357
   1492 016361      1495 016362      1497 016365      1498 016400      1500 016402      1503 016432      1507 016433
   1509 016436      1510 016451      1512 016453      1515 016503      1520 016504      1522 016507      1523 016522
   1525 016524      1528 016554      1532 016555      1534 016560      1535 016573      1537 016575      1540 016625
   1544 016626      1546 016631      1547 016644      1549 016646      1552 016676      1556 016677      1559 016703
   1563 016737      1564 016741      1567 016743      1574 016744      1579 016752      1583 017005      1585 017012
   1586 017022      1587 017025      1592 017026      1623 017047      1624 017053      1625 017061      1627 017064
   1628 017072      1629 017077      1630 017112      1631 017114      1632 017126      1633 017130      1634 017132
   1635 017134      1636 017136      1637 017137      1638 017140      1639 017150      1640 017151      1641 017161
   1642 017162      1643 017172      1644 017173      1645 017203      1646 017204      1647 017210      1648 017214
   1649 017223      1651 017224      1652 017231      1653 017234      1654 017243      1655 017245      1656 017247
   1658 017255      1659 017257      1660 017260      1661 017270      1662 017271      1663 017301      1664 017302
   1665 017306      1666 017312      1669 017317      1676 017320      1679 017321      1681 017326      1682 017346
   1685 017355      1686 017372      1688 017374      1689 017420      1692 017421      1693 017423      1694 017424
   1695 017425      1696 017426      1697 017427      1698 017430      1700 017431      1702 017434      1707 017435
   1710 017443      1713 017502      1715 017522      1717 017541      1719 017555      1722 017572      1723 017602
   1724 017612      1726 017626      1729 017647      1736 017650      1745 017652      1746 017675      1748 017714
   1749 017737      1750 017747      1751 017751      1752 017761      1754 017776      1755 020004      1758 020070
   1760 020076      1762 020101      1764 020107      1765 020111      1766 020122      1767 020124      1769 020125
   1773 020206      1775 020210      1778 020225      1780 020227      1782 020232      1784 020240      1785 020246
   1786 020250      1788 020276      1789 020300      1790 020311      1792 020312      1796 020341      1798 020343
   1803 020344      1806 020352      1808 020370      1810 020375      1813 020403      1815 020422      1822 020427
   1828 020450      1830 020531      1839 020612      1872 020614      1874 020644      1876 020651      1877 020652
   1878 020700      1879 020703      1911 021636      1915 021640      1916 021641      1917 021667      1918 021674
   1934 022203      1936 022204      1943 022205      1951 022207      1954 022212      1955 022236      1957 022244
   1959 022247      1962 022252      1966 022330      1973 022331      1994 022337      1995 022347      1996 022367
   1998 022403      1999 022406      2001 022437      2003 022440      2004 022442      2005 022463      2006 022473
   2008 022474      2009 022477      2010 022531      2012 022532      2013 022536      2014 022542      2015 022553
   2017 022600      2019 022610      2022 022631      2024 022653      2026 022655      2028 022660      2029 022662
   2030 022720      2031 022722      2032 022723      2034 022724      2035 022725      2039 022744      2041 022765
   2044 023011      2046 023025      2047 023031      2049 023102      2050 023104      2044 023107      2052 023114
   2053 023124      2056 023126      2057 023132      2060 023133      2062 023136      2063 023146      2065 023163
   2066 023164      2067 023166      2068 023213      2071 023233      2072 023240      2076 023273      2077 023300
   2081 023316      2082 023322      2085 023336      2087 023351      2088 023353      2089 023354      2090 023360
   2093 023366      2094 023370      2104 023500      2107 023501      2108 023503      2115 023642      2116 023644
   2118 023645      2120 023654      2123 023660      2125 023663      2126 023665      2130 023763      2131 023765
   2132 023766      2134 023767      2135 023770      2137 024007      2138 024010      2140 024016      2141 024023
   2142 024040      2148 024062      2151 024074      2153 024076      2157 024077      2159 024103      2160 024104
   2161 024110      2164 024113      2166 024116      2167 024141      2170 024143      2171 024144      2173 024145
   2175 024150      2177 024156      2179 024157      2181 024162      2183 024170      2185 024171      2187 024174
   2188 024177      2190 024200      2192 024205      2194 024206      2196 024211      2198 024213      2200 024222
   2201 024236      2204 024240      2205 024244      2207 024245      2209 024250      2210 024251      2212 024252
   2214 024260      2216 024262      2218 024332      2219 024335      2220 024336      2222 024364      2227 024465
   2230 024552      2233 024642      2235 024645      2237 024646      2239 024654      2241 024663      2243 024664
   2246 024711      2247 024712      2248 024715      2250 024716      2252 024724      2254 024726      2256 024776
   2257 025001      2258 025002      2260 025030      2264 025131      2267 025216      2270 025306      2272 025311
   2274 025312      2276 025320      2282 025321      2285 025326      2287 025330      2292 025331      2295 025357
   2298 025364      2312 025413      2314 025417      2315 025420      2318 025605      2320 025614      2322 025616
   2324 025767      2326 025773      2327 025774      2329 026005      2331 026012      2332 026051      2334 026055
   2337 026163      2339 026167      2342 026174      2344 026203      2352 026217      2353 026237      2356 026271
   2358 026337      2368 026341      2385 026352      2386 026401      2388 026403      2390 026411      2391 026414
   2392 026454      2394 026455      2395 026472      2397 026476      2399 026500      2400 026503      2402 026544
   2404 026545      2406 026550      2408 026551      2410 026616      2413 026620      2414 026631      2416 026643
   2419 026652      2421 026654      2423 026714      2425 026715      2429 026762      2432 026764      2433 027020
   2435 027022      2436 027025      2440 027026      2443 027027      2445 027060      2447 027061      2450 027144
   2459 027145      2508 027163      2510 027230      2522 027252      2524 027257      2527 027267      2530 027275
   2531 027300      2535 027302      2537 027314      2539 027316      2540 027330      2541 027332      2542 027333
   2544 027340      2545 027377      2547 027402      2549 027405      2553 027462      2555 027463      2557 027464
   2558 027513      2560 027516      2561 027540      2562 027550      2563 027553      2565 027556      2566 027560
   2569 027561      2571 027562      2572 027565      2575 027667      2579 027673      2581 027677      2582 027752
   2584 027757      2585 027771      2586 027774      2589 030051      2593 030052      2594 030074      2596 030101
   2597 030134      2599 030141      2601 030144      2603 030221      2606 030222      2608 030227      2609 030231
   2610 030257      2612 030262      2614 030345      2616 030351      2618 030352      2619 030363      2620 030410
   2622 030413      2623 030423      2624 030427      2626 030431      2627 030437      2628 030441      2630 030451
   2631 030452      2633 030456      2635 030470      2636 030524      2639 030535      2642 030624      2646 030625
   2650 030632      2651 030636      2653 030720      2657 030724      2659 030772      2661 030775      2664 031103
   2666 031107      2669 031110      2671 031113      2673 031116      2674 031121      2675 031123      2676 031124
   2678 031130      2679 031166      2681 031171      2683 031174      2687 031267      2689 031270      2691 031271
   2692 031317      2694 031322      2695 031344      2696 031354      2697 031357      2699 031362      2700 031364
   2703 031365      2705 031366      2706 031371      2709 031477      2714 031503      2716 031506      2718 031511
   2719 031514      2720 031516      2721 031555      2723 031560      2725 031563      2729 031656      2731 031657
   2733 031660      2734 031664      2738 031772      2743 031776      2745 032005      2751 032052      2753 032134
   2755 032144      2757 032214      2759 032217      2760 032246      2762 032253      2763 032274      2765 032277
   2766 032303      2768 032305      2770 032307      2771 032313      2775 032315      2778 032377      2781 032406
   2785 032470      2788 032477      2790 032531      2793 032537      2795 032541      2797 032543      2799 032545
   2804 032627      2806 032632      2809 032635      2810 032636      2811 032637      2813 032640      2819 032721
   2821 032724      2825 033005


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
