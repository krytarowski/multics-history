	COMPILATION LISTING OF SEGMENT probe_print_fortran_attr_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 11/11/88  1548.9 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 /****^  HISTORY COMMENTS:
       15*  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
       16*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
       17*     Added format control comment to make the source more readable.
       18*                                                   END HISTORY COMMENTS */
       19 
       20 
       21 /* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */
       22 
       23 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       24 
       25 probe_print_fortran_attr_:
       26   proc (P_probe_info_ptr, P_refp, P_long_sw, P_code);
       27 
       28   /* Added hexadecimal types 02/07/84 S. Herbst */
       29 
       30   dcl P_probe_info_ptr	ptr parameter;
       31   dcl P_refp		ptr parameter;
       32   dcl P_long_sw		bit (1) aligned parameter;
       33   dcl P_code		fixed bin (35) parameter;
       34 
       35 
       36   dcl 1 P_reference		aligned like reference_node based (refp);
       37   dcl refp		ptr;
       38   dcl Sym			ptr;	/* to the symbol node to print - used GLOBALLY */
       39   dcl ioa_$ioa_switch	entry options (variable);
       40   dcl null		builtin;
       41 
       42   probe_info_ptr = P_probe_info_ptr;
       43   P_code = 0;
       44   refp = P_refp;
       45   Sym = P_reference.symbol_ptr;
       46 
       47   if Sym = null () then do;
       48 
       49       if P_reference.type = ext_procedure_runtime_dtype
       50         then call ioa_$ioa_switch (probe_info.output_switch, " entrypoint");
       51         else call ioa_$ioa_switch (probe_info.output_switch,
       52 	        " unknown type (^d)", P_reference.type);
       53       return;
       54     end;
       55 
       56   call ioa_$ioa_switch (probe_info.output_switch, "^a ^a ^a",
       57        get_ft_attr_str (),
       58        get_ft_class_str (),
       59        get_ft_dim_str ());
       60 
       61   return;
       62 
       63 get_ft_attr_str:
       64   proc returns (char (168) varying);
       65 
       66   dcl attr_str		char (168) varying;
       67   dcl t			fixed bin;/* data type */
       68   dcl fixed		builtin;
       69 
       70   t = fixed (Sym -> runtime_symbol.type, 6);
       71   if t = ft_integer_dtype
       72     then attr_str = " integer";
       73   else if t = ft_real_dtype
       74     then attr_str = " real";
       75   else if t = ft_double_dtype
       76     then attr_str = " double precision real";
       77   else if t = ft_complex_dtype
       78     then attr_str = " complex";
       79   else if t = ft_complex_double_dtype
       80     then attr_str = " double precision complex ";
       81   else if t = ft_hex_real_dtype
       82     then attr_str = " real hexadecimal";
       83   else if t = ft_hex_double_dtype
       84     then attr_str = " double precision real hexadecimal";
       85   else if t = ft_hex_complex_dtype
       86     then attr_str = " complex hexadecimal";
       87   else if t = ft_hex_complex_double_dtype
       88     then attr_str = " double precision complex hexadecimal";
       89   else if t = ft_external_dtype
       90     then attr_str = " external";
       91   else if t = ft_logical_dtype
       92     then attr_str = " logical";
       93   else if t = ft_char_dtype then do;
       94       attr_str = " char*";
       95       attr_str = attr_str || value (Sym -> runtime_symbol.size, Sym);
       96       if Sym -> runtime_symbol.aligned
       97         then attr_str = attr_str || " (word aligned)";
       98         else attr_str = attr_str || " (byte aligned)";
       99     end;				/* char dtype */
      100   else if t = label_constant_runtime_dtype
      101     then attr_str = " label";
      102   else if t = int_entry_runtime_dtype |
      103        t = ext_entry_runtime_dtype |
      104        t = ext_procedure_runtime_dtype
      105     then attr_str = " entrypoint";
      106   else attr_str = " (unknown type)";
      107 
      108 
      109   return (attr_str);
      110 
      111   end get_ft_attr_str;
      112 
      113 get_ft_class_str:
      114   proc () returns (char (168) varying);
      115 
      116   dcl class_str		char (168) varying;
      117   dcl c			fixed bin;/* the storage class */
      118   dcl (addrel, fixed, index, substr)
      119 			builtin;
      120   dcl tp			ptr;
      121   dcl i			fixed bin;
      122   dcl common_class		fixed bin internal static
      123 			options (constant) init (5);
      124 
      125   dcl ft_class		(15) char (10) internal static
      126 			options (constant) init (
      127 			"automatic", "automatic", "?", "static",
      128 			"common",
      129 			"?", "?", "parameter", "parameter", "?",
      130 			"?", "", "", "?", "?");
      131 
      132   c = fixed (Sym -> runtime_symbol.class, 4);
      133 
      134   class_str = ft_class (c);
      135 
      136   if c = common_class & Sym -> runtime_symbol.level ^= "0"b
      137     then do;
      138       tp = addrel (Sym, Sym -> runtime_symbol.father);
      139       tp = addrel (tp, tp -> runtime_block.name);
      140 				/* point to ACC common name */
      141       i = index (tp -> acc.string, "|");/* will be name|name */
      142       if substr (tp -> acc.string, 1, i - 1)
      143 	 ^= "b_" /* default coommon name */
      144         then do;			/* not in default, so give name */
      145 	class_str = class_str || "/";
      146 	class_str = class_str || substr (tp -> acc.string, 1, i - 1);
      147 	class_str = class_str || "/";
      148         end;			/* copying common name */
      149     end;				/* common hacking */
      150 
      151   return (class_str);
      152 
      153   end get_ft_class_str;
      154 
      155 get_ft_dim_str:
      156   proc () returns (char (168) varying);
      157 
      158   dcl dim_str		char (168) varying;
      159   dcl n			fixed bin;/* number of dims */
      160   dcl i			fixed bin;/* ranges over all dims */
      161   dcl fixed		builtin;
      162 
      163   n = fixed (Sym -> runtime_symbol.ndims, 6);
      164 
      165   if n = 0
      166     then return ("");
      167     else do;
      168       dim_str = " dimension (";
      169       do i = n to 1 by -1;
      170         if Sym -> runtime_symbol.bounds (i).lower ^= 1
      171 	then do;
      172 	  dim_str =
      173 	       dim_str
      174 	       || value (Sym -> runtime_symbol.bounds (i).lower, Sym);
      175 	  dim_str = dim_str || ":";
      176 	end;
      177         dim_str =
      178 	   dim_str || value (Sym -> runtime_symbol.bounds (i).upper, Sym);
      179         if i ^= 1
      180 	then dim_str = dim_str || ",";
      181       end;
      182       dim_str = dim_str || ")";
      183     end;
      184   return (dim_str);
      185 
      186   end get_ft_dim_str;
      187 
      188 value:
      189   procedure (ev, context) returns (character (10) varying);
      190 
      191   dcl ev			fixed bin (35) parameter;
      192 				/* input: an encoded value */
      193   dcl context		ptr parameter;
      194 				/* input: to symbol node of ev */
      195 
      196   dcl val			fixed bin (35);
      197   dcl 1 an_ev		aligned like encoded_value;
      198   dcl refp		ptr;	/* to data itself, for decoding */
      199   dcl block_ptr		ptr;
      200   dcl stack_ptr		ptr;
      201   dcl linkage_ptr		ptr;
      202   dcl based_class		bit (4) internal static options (constant)
      203 			init ("0011"b);
      204   dcl code		fixed bin (35);
      205   dcl (char, ltrim, null, rtrim, string, unspec)
      206 			builtin;
      207 
      208   dcl stu_$get_implicit_qualifier
      209 			entry (ptr, ptr, ptr, ptr, ptr) returns (ptr);
      210   dcl stu_$decode_runtime_value
      211 			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
      212 			fixed bin (35)) returns (fixed bin (35));
      213 
      214   /* GLOBAL imports P_reference */
      215 
      216   string (an_ev) = unspec (ev);
      217   if an_ev.flag = "10"b
      218     then do;			/* it is encoded */
      219       stack_ptr = P_reference.source_info_ptr -> source_info.stack_ptr;
      220       linkage_ptr =
      221 	 P_reference.source_info_ptr -> source_info.seg_info_ptr
      222 	 -> seg_info.linkage_ptr;
      223       block_ptr = P_reference.source_info_ptr -> source_info.block_ptr;
      224       refp = P_reference.address_ptr;
      225       if refp = null
      226         then if context -> runtime_symbol.class = based_class
      227 				/* can try for implicit */
      228 	     then refp =
      229 		     stu_$get_implicit_qualifier (block_ptr, Sym,
      230 		     stack_ptr, linkage_ptr, block_ptr);
      231       val = stu_$decode_runtime_value (ev, block_ptr, stack_ptr, linkage_ptr,
      232 	 block_ptr, refp, code);
      233       if code ^= 0
      234         then return ("*");
      235     end;
      236     else val = ev;
      237 
      238   return (rtrim (ltrim (char (val))));
      239 
      240   end value;
      241 
  1     1 /*	BEGIN INCLUDE FILE probe_references.incl.pl1	*/
  1     2 
  1     3 /****^  HISTORY COMMENTS:
  1     4*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  1     5*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  1     6*     Added new field (c_symbol) for C-Probe support.
  1     7*  2) change(88-10-28,WAAnderson), approve(88-10-28,MCR7952),
  1     8*     audit(88-10-31,RWaters), install(88-11-11,MR12.2-1210):
  1     9*     Added new field (c_sub_c_ptr) for C-Probe_support.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 /*	Split out of probe_tokens, 04/22/79 WOS 	*/
  1    13 /*       modified for probe variables Feb 19 80 JRD         */
  1    14 /*   Modified June 83 JMAthane to add "type_ptr" and "builtin" fields */
  1    15 
  1    16      dcl	   1 reference_node	      aligned based,	/* information about a reference */
  1    17 	     2 symbol_ptr	      pointer aligned,	/* to symbol table entry for reference */
  1    18 	     2 type_ptr	      pointer aligned,	/* to symbol table entry for type (null if none) */
  1    19 	     2 address_ptr	      pointer aligned,	/* to location of variable */
  1    20 	     2 base_addr	      pointer aligned,	/* pointer on which whole symbol is based */
  1    21 	     2 source_info_ptr    pointer aligned,	/* to symbol structure for reference */
  1    22 
  1    23 	     2 name	      char (256) unaligned varying, /* symbol name */
  1    24 
  1    25 	     2 type	      fixed bin (35),	/* data type */
  1    26 	     2 descriptor	      fixed bin (35),	/* type || packed */
  1    27 	     2 precision	      fixed bin (35),	/* scale and precision */
  1    28 	     2 flags,
  1    29 	       3 packed	      bit (1) unal,		/* data is in packed format */
  1    30 	       3 constant	      bit (1) unal,		/* data is really a constant */
  1    31 	       3 cross_section    bit (1) unal,		/* reference is an array cross-section */
  1    32 	       3 function	      bit (1) unal,		/* reference is function value */
  1    33 	       3 octal	      bit (1) unal,		/* indicates that this is the octal bif */
  1    34 	       3 star_extent      bit (1) unal,		/* reference is a star subscript for father */
  1    35 	       3 have_generation  bit (1) unal,		/* this reference has an explicitly specified generation */
  1    36 	       3 pseudo_var	      bit (1) unal,		/* it is ok to assign to it */
  1    37 	       3 probe_variable   bit (1) unal,
  1    38 	       3 path	      bit (1) unal,		/* it's a pathname/virtual entry */
  1    39 	       3 builtin	      bit (1) unal,		/* probe builtinvalue */
  1    40 	       3 c_ptr_to_char    bit (1)  unal,
  1    41                  3 c_sub_c_ptr      bit (1)  unal,
  1    42 	       3 pad2	      bit (23) unal,
  1    43 
  1    44 	     2 optional_info,			/* information which may or may not be present */
  1    45 	       3 argument_list    pointer unaligned,	/* pointer to reference_arg_list */
  1    46 	       3 subscript_ptr    pointer unaligned,	/* pointer to reference_subscripts */
  1    47 	       3 n_arguments      fixed bin,		/* number of arguments in argument list */
  1    48 	       3 n_subscripts     fixed bin,		/* number of subscripts present */
  1    49 
  1    50 	     2 constant_token_ptr pointer unaligned,	/* pointer to constant token if this is a constant */
  1    51 	     2 subscript_refs_ptr pointer unaligned,	/* pointer to array of subscript reference node pointers */
  1    52 	     2 invocation_level   fixed bin,		/* invocation level number ("[-17]") for this reference */
  1    53 	     2 probe_var_info_ptr ptr unal,		/* only if flags.probe_variable */
  1    54                2 c_symbol_ptr  ptr unal,
  1    55 	     2 pad1	      (9) pointer unaligned,
  1    56 	     2 end_of_reference_node pointer aligned;
  1    57 
  1    58 
  1    59      dcl	   1 reference_arg_list   aligned based,	/* argument list; based on reference.argument_list */
  1    60 	     2 number	      fixed bin,		/* number of arguments actually present */
  1    61 	     2 node	      (16) pointer aligned;	/* reference node pointers for each argument */
  1    62 
  1    63 
  1    64      dcl	   1 reference_subscripts aligned based,	/* subscript array; based on reference.subscript_ptr */
  1    65 	     2 number	      fixed bin,		/* number actually present */
  1    66 	     2 value	      (2, 16) fixed bin (24); /* values for lower and upper bound for each */
  1    67 
  1    68 
  1    69      dcl	   1 subscript_reference_ptrs aligned based,	/* array of pointers to subscript reference nodes */
  1    70 	     2 ptr	      (2, 16) pointer aligned;
  1    71 
  1    72 /*	END INCLUDE FILE probe_references.incl.pl1	*/
      242 
      243 
  2     1 /* BEGIN INCLUDE FILE ... probe_source_info.incl.pl1
  2     2*
  2     3*  James R. Davis 2 July 79 */
  2     4 
  2     5 dcl 1 source_info based aligned,
  2     6       2 stmnt_map_entry_index fixed bin,		/* index in stmnt map for this stmnt */
  2     7       2 instruction_ptr ptr,				/* to last instruction executed  */
  2     8       2 block_ptr ptr,				/* to runtime_block node */
  2     9       2 stack_ptr ptr,				/* to a stack frame */
  2    10       2 entry_ptr ptr,				/* to entry seq. for this proc */
  2    11       2 seg_info_ptr ptr;				/* to seg_info */
  2    12 
  2    13 dcl 1 current_source aligned like source_info based (probe_info.ptr_to_current_source);
  2    14 dcl 1 initial_source aligned like source_info based (probe_info.ptr_to_initial_source);
  2    15 
  2    16 /* END INCLUDE FILE ... probe_source_info.incl.pl1 */
      244 
      245 
  3     1 /* BEGIN INCLUDE FILE ... probe_seg_info.incl.pl1
  3     2*
  3     3*   25 June 79 JRDavis
  3     4*
  3     5*   Modified  7 April 1983, TO - Add fields for character offset/line
  3     6*	correction per file.
  3     7**/
  3     8 
  3     9 dcl 1 seg_info based aligned,				/* place to remember information about object seg */
  3    10     2 language_type fixed bin,			/* language of source program */
  3    11     2 bits aligned,
  3    12       3 ignore_case bit (1) unal,
  3    13       3 bound_segment bit (1) unaligned,
  3    14       3 component bit (1) unaligned,
  3    15       3 pad bit (33) unal,
  3    16     2 names,					/* where to find it */
  3    17       3 directory_name character (168) unal,		/* what directory */
  3    18       3 entry_name character (32) unal,			/* what segment */
  3    19       3 segname character (32) unal,			/* procedure segname definition */
  3    20     2 identifier fixed bin (71),			/* time of object creation */
  3    21     2 pointers,					/* location of various parts of segment */
  3    22       3 symbol_header_ptr ptr unal,			/* to symbol section */
  3    23       3 original_source_ptr ptr unal,			/* to segment source map */
  3    24       3 statement_map_ptr ptr unal,			/* to segment statement map */
  3    25       3 break_info ptr unal,				/* for unbound segments, and start of chain for
  3    26*						   bound ones, -> break_map !obsolete, I think! */
  3    27       3 chain ptr unal,				/* to entry for next component if bound */
  3    28       3 linkage_ptr ptr unal,				/* to linkage section */
  3    29     2 bounds aligned,				/* structure of bounds information */
  3    30       3 text_bounds,
  3    31         4 start fixed bin (35),
  3    32         4 end fixed bin (35),
  3    33       3 symbol_bounds,
  3    34         4 start fixed bin (35),
  3    35         4 end fixed bin (35),
  3    36     2 map_size fixed bin,				/* size of statement map */
  3    37     2 error_code fixed bin (35),			/* errors encoutered while getting info, are recorded here */
  3    38     2 bound_create_time fixed bin (71),			/* time seg containing was bound or compiled. */
  3    39     2 bound_sym_header ptr unal,			/* to sym. section header for bound seg */
  3    40     2 pad (1) fixed bin (35),
  3    41 
  3    42     2 nfiles fixed bin,
  3    43     2 per_file (seg_info_nfiles refer (seg_info.nfiles)),
  3    44       3 file_pointers ptr unal,
  3    45       3 break_line (0:3) fixed bin (18) unsigned unaligned;
  3    46 
  3    47 dcl  seg_info_nfiles fixed bin;			/* for allocation purposes */
  3    48 
  3    49 
  3    50 /* END INCLUDE FILE ... probe_seg_info.incl.pl1 */
      246 
      247 
  4     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  4     2 
  4     3 
  4     4 /****^  HISTORY COMMENTS:
  4     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  4     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  4     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  4     8*     Objects of this type are PASCAL string types.
  4     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  4    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  4    11*     Added the new C types.
  4    12*                                                   END HISTORY COMMENTS */
  4    13 
  4    14 /* This include file defines mnemonic names for the Multics
  4    15*   standard descriptor types, using both pl1 and cobol terminology.
  4    16*   PG 780613
  4    17*   JRD 790530
  4    18*   JRD 791016
  4    19*   MBW 810731
  4    20*   TGO 830614 Add hex types.
  4    21*   Modified June 83 JMAthane to add PASCAL data types
  4    22*   TGO 840120 Add float dec extended and generic, float binary generic
  4    23**/
  4    24 
  4    25      dcl	   (real_fix_bin_1_dtype  init (1),
  4    26 	   real_fix_bin_2_dtype   init (2),
  4    27 	   real_flt_bin_1_dtype   init (3),
  4    28 	   real_flt_bin_2_dtype   init (4),
  4    29 	   cplx_fix_bin_1_dtype   init (5),
  4    30 	   cplx_fix_bin_2_dtype   init (6),
  4    31 	   cplx_flt_bin_1_dtype   init (7),
  4    32 	   cplx_flt_bin_2_dtype   init (8),
  4    33 	   real_fix_dec_9bit_ls_dtype init (9),
  4    34 	   real_flt_dec_9bit_dtype init (10),
  4    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  4    36 	   cplx_flt_dec_9bit_dtype init (12),
  4    37 	   pointer_dtype	      init (13),
  4    38 	   offset_dtype	      init (14),
  4    39 	   label_dtype	      init (15),
  4    40 	   entry_dtype	      init (16),
  4    41 	   structure_dtype	      init (17),
  4    42 	   area_dtype	      init (18),
  4    43 	   bit_dtype	      init (19),
  4    44 	   varying_bit_dtype      init (20),
  4    45 	   char_dtype	      init (21),
  4    46 	   varying_char_dtype     init (22),
  4    47 	   file_dtype	      init (23),
  4    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  4    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  4    50 	   real_fix_bin_1_uns_dtype init (33),
  4    51 	   real_fix_bin_2_uns_dtype init (34),
  4    52 	   real_fix_dec_9bit_uns_dtype init (35),
  4    53 	   real_fix_dec_9bit_ts_dtype init (36),
  4    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  4    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  4    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  4    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  4    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  4    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  4    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  4    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  4    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  4    63 	   real_flt_hex_1_dtype   init (47),
  4    64 	   real_flt_hex_2_dtype   init (48),
  4    65 	   cplx_flt_hex_1_dtype   init (49),
  4    66 	   cplx_flt_hex_2_dtype   init (50),
  4    67 	   c_typeref_dtype        init (54),
  4    68 	   c_enum_dtype           init (55),
  4    69              c_enum_const_dtype     init (56),
  4    70 	   c_union_dtype          init (57),
  4    71 	   algol68_straight_dtype init (59),
  4    72 	   algol68_format_dtype   init (60),
  4    73 	   algol68_array_descriptor_dtype init (61),
  4    74 	   algol68_union_dtype    init (62),
  4    75 
  4    76 	   cobol_comp_6_dtype     init (1),
  4    77 	   cobol_comp_7_dtype     init (1),
  4    78 	   cobol_display_ls_dtype init (9),
  4    79 	   cobol_structure_dtype  init (17),
  4    80 	   cobol_char_string_dtype init (21),
  4    81 	   cobol_display_ls_overp_dtype init (29),
  4    82 	   cobol_display_ts_overp_dtype init (30),
  4    83 	   cobol_display_uns_dtype init (35),
  4    84 	   cobol_display_ts_dtype init (36),
  4    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  4    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  4    87 	   cobol_comp_5_uns_dtype init (40),
  4    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  4    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  4    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  4    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  4    92 	   cplx_flt_dec_generic_dtype init (84),
  4    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  4    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  4    95 
  4    96      dcl	   (ft_integer_dtype      init (1),
  4    97 	   ft_real_dtype	      init (3),
  4    98 	   ft_double_dtype	      init (4),
  4    99 	   ft_complex_dtype	      init (7),
  4   100 	   ft_complex_double_dtype init (8),
  4   101 	   ft_external_dtype      init (16),
  4   102 	   ft_logical_dtype	      init (19),
  4   103 	   ft_char_dtype	      init (21),
  4   104 	   ft_hex_real_dtype      init (47),
  4   105 	   ft_hex_double_dtype    init (48),
  4   106 	   ft_hex_complex_dtype   init (49),
  4   107 	   ft_hex_complex_double_dtype init (50)
  4   108 	   )		      fixed bin internal static options (constant);
  4   109 
  4   110      dcl	   (algol68_short_int_dtype init (1),
  4   111 	   algol68_int_dtype      init (1),
  4   112 	   algol68_long_int_dtype init (2),
  4   113 	   algol68_real_dtype     init (3),
  4   114 	   algol68_long_real_dtype init (4),
  4   115 	   algol68_compl_dtype    init (7),
  4   116 	   algol68_long_compl_dtype init (8),
  4   117 	   algol68_bits_dtype     init (19),
  4   118 	   algol68_bool_dtype     init (19),
  4   119 	   algol68_char_dtype     init (21),
  4   120 	   algol68_byte_dtype     init (21),
  4   121 	   algol68_struct_struct_char_dtype init (22),
  4   122 	   algol68_struct_struct_bool_dtype init (20)
  4   123 	   )		      fixed bin internal static options (constant);
  4   124 
  4   125      dcl	   (label_constant_runtime_dtype init (24),
  4   126 	   int_entry_runtime_dtype init (25),
  4   127 	   ext_entry_runtime_dtype init (26),
  4   128 	   ext_procedure_runtime_dtype init (27),
  4   129 	   picture_runtime_dtype  init (63)
  4   130 	   )		      fixed bin internal static options (constant);
  4   131 
  4   132      dcl	   (pascal_integer_dtype  init (1),
  4   133 	   pascal_real_dtype      init (4),
  4   134 	   pascal_label_dtype     init (24),
  4   135 	   pascal_internal_procedure_dtype init (25),
  4   136 	   pascal_exportable_procedure_dtype init (26),
  4   137 	   pascal_imported_procedure_dtype init (27),
  4   138 	   pascal_typed_pointer_type_dtype init (64),
  4   139 	   pascal_char_dtype      init (65),
  4   140 	   pascal_boolean_dtype   init (66),
  4   141 	   pascal_record_file_type_dtype init (67),
  4   142 	   pascal_record_type_dtype init (68),
  4   143 	   pascal_set_dtype	      init (69),
  4   144 	   pascal_enumerated_type_dtype init (70),
  4   145 	   pascal_enumerated_type_element_dtype init (71),
  4   146 	   pascal_enumerated_type_instance_dtype init (72),
  4   147 	   pascal_user_defined_type_dtype init (73),
  4   148 	   pascal_user_defined_type_instance_dtype init (74),
  4   149 	   pascal_text_file_dtype init (75),
  4   150 	   pascal_procedure_type_dtype init (76),
  4   151 	   pascal_variable_formal_parameter_dtype init (77),
  4   152 	   pascal_value_formal_parameter_dtype init (78),
  4   153 	   pascal_entry_formal_parameter_dtype init (79),
  4   154 	   pascal_parameter_procedure_dtype init (80),
  4   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  4   156 
  4   157 
  4   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      248 
  5     1 /*	BEGIN INCLUDE FILE probe_info.incl.pl1		*/
  5     2 
  5     3 
  5     4 
  5     5 /****^  HISTORY COMMENTS:
  5     6*  1) change(88-10-24,WAAnderson), approve(88-10-24,MCR7952),
  5     7*     audit(88-10-24,RWaters), install(88-10-27,MR12.2-1194):
  5     8*     Added field 'retry_using_main' to add new C feature.
  5     9*                                                   END HISTORY COMMENTS */
  5    10 
  5    11 
  5    12 /* Created: 04/22/79 W. Olin Sibert, from subsystem_info	
  5    13*   Modified: 22 Sept 79 JRd to remove: 	default (ptr & (auto|based)) init (null ());
  5    14*   Added flags.setting_break 08/22/83 Steve Herbst
  5    15*   Added flags.executing_quit_request 01/15/85 Steve Herbst
  5    16**/
  5    17 
  5    18 dcl 1 probe_info aligned based (probe_info_ptr),		/* standard data for a probe invocation */
  5    19     2 probe_info_version fixed bin,			/* version of this structure */
  5    20 
  5    21     2 static_info_ptr pointer unaligned,		/* pointer to static information structure */
  5    22     2 modes_ptr pointer unaligned,			/* pointer to probe_modes structure */
  5    23 
  5    24     2 ptr_to_current_source ptr,			/* current_source is based on this */
  5    25     2 ptr_to_initial_source ptr,			/* initial_source is based on this */
  5    26     2 machine_cond_ptr pointer,			/* pointer to machine conditions, if we faulted to get here */
  5    27 
  5    28     2 token_info aligned,				/* information about token chain currently being processed */
  5    29       3 first_token pointer unaligned,			/* first token in chain */
  5    30       3 ct pointer unaligned, 			/* pointer to current token; updated in MANY places */
  5    31       3 end_token bit (18) aligned,			/* token type at which to stop scanning token chain */
  5    32       3 buffer_ptr pointer unaligned,			/* pointer to input buffer */
  5    33       3 buffer_lth fixed bin (21),			/* and length */
  5    34 
  5    35     2 random_info aligned,
  5    36       3 current_stack_frame pointer unaligned,		/* stack frame pointer for frame in which probe was invoked */
  5    37       3 input_type fixed bin, 			/* current input type */
  5    38       3 language_type fixed bin,			/* current language being processed */
  5    39       3 return_method fixed bin,			/* how we should return after exiting probe */
  5    40       3 entry_method fixed bin,			/* how we got here in the first place */
  5    41       3 pad1 (19) bit (36) aligned,
  5    42 
  5    43     2 break_info,					/* break info -- only interesting if we got here via a break */
  5    44       3 break_slot_ptr pointer,			/* pointer to break slot -- non-null IFF at a break */
  5    45       3 last_break_slot_ptr pointer unaligned,		/* pointer to previous break slot, not presently used */
  5    46       3 break_reset bit (1) aligned,			/* this break has been reset by somebody further on */
  5    47       3 real_break_return_loc pointer,			/* where to REALLY return to, modulo previous bit */
  5    48 
  5    49     2 probe_area_info,				/* information about various probe areas */
  5    50       3 break_segment_ptr pointer unaligned,		/* pointer to Personid.probe */
  5    51       3 break_area_ptr pointer unaligned,		/* pointer to area in break segment */
  5    52       3 scratch_area_ptr pointer unaligned,		/* pointer to probe scratch seg in process dir */
  5    53       3 probe_area_ptr pointer unaligned,		/* This area lasts as long as an invocation of probe. */
  5    54       3 work_area_ptr pointer unaligned,		/* This area lasts as long as the current request line */
  5    55       3 expression_area_ptr pointer unaligned,		/* This area lasts as long as the current command */
  5    56 
  5    57     2 flags aligned,				/* this, in particular, should be saved and restored correctly */
  5    58      (3 execute,					/* "1"b => execute requests, "0"b => just check syntax */
  5    59       3 in_listener,				/* ON => in probe listener loop */
  5    60       3 executing_request,				/* ON => executing a request */
  5    61       3 in_interpret_line,				/* executing in probe_listen_$interpret_line */
  5    62       3 setting_break,				/* executing "after" or "before": check syntax of "if" */
  5    63       3 executing_quit_request,			/* to prevent error looping during "quit" request */
  5    64       3 pad (30)) bit (1) unaligned,
  5    65 
  5    66     2 io_switches,					/* switches probe will do normal I/O on */
  5    67       3 input_switch pointer,
  5    68       3 output_switch pointer,
  5    69 
  5    70     2 error_info,					/* information about the last error saved for later printing */
  5    71       3 error_code fixed bin (35),
  5    72       3 error_message char (300) varying,
  5    73 
  5    74     2 listener_info,				/* internal use by probe listener */
  5    75       3 request_name character (32) varying,		/* primary name of the request being processed */
  5    76       3 abort_probe_label label variable,
  5    77       3 abort_line_label label variable,
  5    78       3 depth fixed binary,				/* count of active invocations of probe */
  5    79       3 previous pointer unaligned,			/* -> previous invocation's info */
  5    80       3 next pointer unaligned,
  5    81 
  5    82     2 end_of_probe_info pointer aligned,
  5    83     2 retry_using_main fixed bin aligned;
  5    84    
  5    85 
  5    86 dcl  probe_info_ptr pointer;
  5    87 
  5    88 dcl  probe_info_version fixed bin static options (constant) initial (1);
  5    89 
  5    90 dcl  probe_info_version_1 fixed bin static options (constant) initial (1);
  5    91 
  5    92 dcl  scratch_area area based (probe_info.scratch_area_ptr);
  5    93 dcl  probe_area area based (probe_info.probe_area_ptr);
  5    94 dcl  work_area area based (probe_info.work_area_ptr);
  5    95 dcl  expression_area area based (probe_info.expression_area_ptr);
  5    96 
  5    97 /*	END INCLUDE FILE probe_info.incl.pl1		*/
      249 
      250 
  6     1 /* BEGIN INCLUDE FILE --- acc.incl.pl1 
  6     2*
  6     3*James R. Davis 21 Nov 78
  6     4**/
  6     5 
  6     6 dcl 1 acc based aligned,
  6     7     2 num_chars fixed bin (9) unsigned unaligned,
  6     8     2 string char (0 refer (acc.num_chars)) unaligned;
  6     9 
  6    10 /* END INCLUDE FILE --- acc.incl.pl1 */
      251 
  7     1 /*	BEGIN INCLUDE FILE ... runtime_symbol.incl.pl1 ... Modified 07/79 */
  7     2 
  7     3 dcl	1 runtime_symbol	aligned based,
  7     4 	2 flag		unal bit(1),	/* always "1"b for Version II */
  7     5 	2 use_digit	unal bit(1),	/* if "1"b and units are half words units are really digits */
  7     6 	2 array_units	unal bit(2),
  7     7 	2 units		unal bit(2),	/* addressing units */
  7     8 	2 type		unal bit(6),	/* data type */
  7     9 	2 level		unal bit(6),	/* structure level */
  7    10 	2 ndims		unal bit(6),	/* number of dimensions */
  7    11 	2 bits		unal,
  7    12 	  3 aligned	bit(1),
  7    13 	  3 packed	bit(1),
  7    14 	  3 simple	bit(1),
  7    15 	2 skip		unal bit(1),
  7    16 	2 scale		unal bit(8),	/* arithmetic scale factor */
  7    17 	2 name		unal bit(18),	/* rel ptr to acc name */
  7    18 	2 brother		unal bit(18),	/* rel ptr to brother entry */
  7    19 	2 father		unal bit(18),	/* rel ptr to father entry */
  7    20 	2 son		unal bit(18),	/* rel ptr to son entry */
  7    21 	2 address		unal,
  7    22 	  3 location	bit(18),		/* location in storage class */
  7    23 	  3 class		bit(4),		/* storage class */
  7    24 	  3 next		bit(14),		/* rel ptr to next of same class */
  7    25 	2 size		fixed bin(35),	/* encoded string|arith size */
  7    26 	2 offset		fixed bin(35),	/* encoded offset from address */
  7    27 	2 virtual_org	fixed bin(35),
  7    28 	2 bounds(1),
  7    29 	  3 lower		fixed bin(35),	/* encoded lower bound */
  7    30 	  3 upper		fixed bin(35),	/* encoded upper bound */
  7    31 	  3 multiplier	fixed bin(35);	/* encoded multiplier */
  7    32 
  7    33 dcl	1 runtime_bound	based,
  7    34 	2 lower		fixed bin(35),
  7    35 	2 upper		fixed bin(35),
  7    36 	2 multiplier	fixed bin(35);
  7    37 
  7    38 dcl	1 runtime_block	aligned based,
  7    39 	2 flag		unal bit(1),	/* always "1"b for Version II */
  7    40 	2 quick		unal bit(1),	/* "1"b if quick block */
  7    41 	2 fortran		unal bit(1),	/* "1"b if fortran program */
  7    42 	2 standard	unal bit(1),	/* "1"b if program has std obj segment */
  7    43 	2 owner_flag	unal bit(1),	/* "1"b if block has valid owner field */
  7    44 	2 skip		unal bit(1),
  7    45 	2 type		unal bit(6),	/* = 0 for a block node */
  7    46 	2 number		unal bit(6),	/* begin block number */
  7    47 	2 start		unal bit(18),	/* rel ptr to start of symbols */
  7    48 	2 name		unal bit(18),	/* rel ptr to name of proc */
  7    49 	2 brother		unal bit(18),	/* rel ptr to brother block */
  7    50 	2 father		unal bit(18),	/* rel ptr to father block */
  7    51 	2 son		unal bit(18),	/* rel ptr to son block */
  7    52 	2 map		unal,
  7    53 	  3 first		bit(18),		/* rel ptr to first word of map */
  7    54 	  3 last		bit(18),		/* rel ptr to last word of map */
  7    55 	2 entry_info	unal bit(18),	/* info about entry of quick block */
  7    56 	2 header		unal bit(18),	/* rel ptr to symbol header */
  7    57 	2 chain(4)	unal bit(18),	/* chain(i) is rel ptr to first symbol
  7    58*					   on start list with length >= 2**i */
  7    59 	2 token(0:5)	unal bit(18),	/* token(i) is rel ptr to first token
  7    60*					   on list with length >= 2 ** i */
  7    61 	2 owner		unal bit(18);	/* rel ptr to owner block */
  7    62 
  7    63 dcl	1 runtime_token	aligned based,
  7    64 	2 next		unal bit(18),	/* rel ptr to next token */
  7    65 	2 dcl		unal bit(18),	/* rel ptr to first dcl of this token */
  7    66 	2 name,				/* ACC */
  7    67 	  3 size		unal unsigned fixed bin (9), /* number of chars in token */
  7    68 	  3 string	unal char(n refer(runtime_token.size));
  7    69 
  7    70 dcl	1 encoded_value	aligned based,
  7    71 	2 flag		bit (2) unal,
  7    72 	2 code		bit (4) unal,
  7    73 	2 n1		bit (6) unal,
  7    74 	2 n2		bit (6) unal,
  7    75 	2 n3		bit (18) unal;
  7    76 
  7    77 /*	END INCLUDE FILE ... runtime_symbol.incl.pl1 */
      252 
      253 
      254 
      255   end probe_print_fortran_attr_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/88  1545.0  probe_print_fortran_attr_.pl1     >spec>install>MR12.2-1210>probe_print_fortran_attr_.pl1
242          1    11/11/88  1543.8  probe_references.incl.pl1         >spec>install>MR12.2-1210>probe_references.incl.pl1
244          2    11/26/79  1320.6  probe_source_info.incl.pl1        >ldd>include>probe_source_info.incl.pl1
246          3    11/02/83  1845.0  probe_seg_info.incl.pl1           >ldd>include>probe_seg_info.incl.pl1
248          4    10/26/88  1255.5  std_descriptor_types.incl.pl1     >ldd>include>std_descriptor_types.incl.pl1
249          5    10/27/88  1339.2  probe_info.incl.pl1               >ldd>include>probe_info.incl.pl1
251          6    01/15/79  2202.9  acc.incl.pl1                      >ldd>include>acc.incl.pl1
252          7    11/26/79  1320.6  runtime_symbol.incl.pl1           >ldd>include>runtime_symbol.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_code                                 parameter       fixed bin(35,0)          dcl 33 set ref 25 43*
P_long_sw                              parameter       bit(1)                   dcl 32 ref 25
P_probe_info_ptr                       parameter       pointer                  dcl 30 ref 25 42
P_reference                            based           structure                level 1 dcl 36
P_refp                                 parameter       pointer                  dcl 31 ref 25 44
Sym                             000102 automatic       pointer                  dcl 38 set ref 45* 47 70 95 95* 96 132 136 138 138
                                                                                  163 170 172 172* 177 177* 225*
acc                                    based           structure                level 1 dcl 6-6
addrel                                                 builtin function         dcl 118 ref 138 139
address                   3            based           structure                level 2 packed packed unaligned dcl 7-3
address_ptr               4            based           pointer                  level 2 dcl 36 ref 224
aligned                   0(24)        based           bit(1)                   level 3 packed packed unaligned dcl 7-3 ref 96
an_ev                           000351 automatic       structure                level 1 dcl 197 set ref 216*
attr_str                        000114 automatic       varying char(168)        dcl 66 set ref 71* 73* 75* 77* 79* 81* 83* 85* 87*
                                                                                  89* 91* 94* 95* 95 96* 96 98* 98 100* 102* 106*
                                                                                  109
based_class                            constant        bit(4)                   initial packed unaligned dcl 202 ref 225
bits                      0(24)        based           structure                level 2 packed packed unaligned dcl 7-3
block_ptr                 4            based           pointer                  level 2 in structure "source_info" dcl 2-5
                                                                                  in procedure "probe_print_fortran_attr_" ref 223
block_ptr                       000354 automatic       pointer                  dcl 199 in procedure "value" set ref 223* 225* 225*
                                                                                  231* 231*
bounds                    7            based           structure                array level 2 dcl 7-3
c                               000251 automatic       fixed bin(17,0)          dcl 117 set ref 132* 134 136
char                                                   builtin function         dcl 205 ref 238
class                     3(18)        based           bit(4)                   level 3 packed packed unaligned dcl 7-3 ref 132 225
class_str                       000176 automatic       varying char(168)        dcl 116 set ref 134* 145* 145 146* 146 147* 147 151
code                            000362 automatic       fixed bin(35,0)          dcl 204 set ref 231* 233
common_class                           constant        fixed bin(17,0)          initial dcl 122 ref 136
context                                parameter       pointer                  dcl 193 ref 188 225
dim_str                         000264 automatic       varying char(168)        dcl 158 set ref 168* 172* 172 175* 175 177* 177 179*
                                                                                  179 182* 182 184
encoded_value                          based           structure                level 1 dcl 7-70
ev                                     parameter       fixed bin(35,0)          dcl 191 set ref 188 216 231* 236
ext_entry_runtime_dtype                constant        fixed bin(17,0)          initial dcl 4-125 ref 102
ext_procedure_runtime_dtype            constant        fixed bin(17,0)          initial dcl 4-125 ref 49 102
father                    2            based           bit(18)                  level 2 packed packed unaligned dcl 7-3 ref 138
fixed                                                  builtin function         dcl 161 in procedure "get_ft_dim_str" ref 163
fixed                                                  builtin function         dcl 68 in procedure "get_ft_attr_str" ref 70
fixed                                                  builtin function         dcl 118 in procedure "get_ft_class_str" ref 132
flag                            000351 automatic       bit(2)                   level 2 packed packed unaligned dcl 197 set ref 217
ft_char_dtype                          constant        fixed bin(17,0)          initial dcl 4-96 ref 93
ft_class                        000000 constant        char(10)                 initial array packed unaligned dcl 125 ref 134
ft_complex_double_dtype                constant        fixed bin(17,0)          initial dcl 4-96 ref 79
ft_complex_dtype                       constant        fixed bin(17,0)          initial dcl 4-96 ref 77
ft_double_dtype                        constant        fixed bin(17,0)          initial dcl 4-96 ref 75
ft_external_dtype                      constant        fixed bin(17,0)          initial dcl 4-96 ref 89
ft_hex_complex_double_dtype            constant        fixed bin(17,0)          initial dcl 4-96 ref 87
ft_hex_complex_dtype                   constant        fixed bin(17,0)          initial dcl 4-96 ref 85
ft_hex_double_dtype                    constant        fixed bin(17,0)          initial dcl 4-96 ref 83
ft_hex_real_dtype                      constant        fixed bin(17,0)          initial dcl 4-96 ref 81
ft_integer_dtype                       constant        fixed bin(17,0)          initial dcl 4-96 ref 71
ft_logical_dtype                       constant        fixed bin(17,0)          initial dcl 4-96 ref 91
ft_real_dtype                          constant        fixed bin(17,0)          initial dcl 4-96 ref 73
i                               000340 automatic       fixed bin(17,0)          dcl 160 in procedure "get_ft_dim_str" set ref 169*
                                                                                  170 172 177 179*
i                               000254 automatic       fixed bin(17,0)          dcl 121 in procedure "get_ft_class_str" set ref 141*
                                                                                  142 146
index                                                  builtin function         dcl 118 ref 141
int_entry_runtime_dtype                constant        fixed bin(17,0)          initial dcl 4-125 ref 102
io_switches              66            based           structure                level 2 dcl 5-18
ioa_$ioa_switch                 000010 constant        entry                    external dcl 39 ref 49 51 56
label_constant_runtime_dtype           constant        fixed bin(17,0)          initial dcl 4-125 ref 100
level                     0(12)        based           bit(6)                   level 2 packed packed unaligned dcl 7-3 ref 136
linkage_ptr                     000360 automatic       pointer                  dcl 201 in procedure "value" set ref 220* 225* 231*
linkage_ptr             103            based           pointer                  level 3 in structure "seg_info" packed packed
                                                                                  unaligned dcl 3-9 in procedure
                                                                                  "probe_print_fortran_attr_" ref 220
lower                     7            based           fixed bin(35,0)          array level 3 dcl 7-3 set ref 170 172*
ltrim                                                  builtin function         dcl 205 ref 238
n                               000337 automatic       fixed bin(17,0)          dcl 159 set ref 163* 165 169
name                      1            based           bit(18)                  level 2 packed packed unaligned dcl 7-38 ref 139
ndims                     0(18)        based           bit(6)                   level 2 packed packed unaligned dcl 7-3 ref 163
null                                                   builtin function         dcl 40 in procedure "probe_print_fortran_attr_" ref
                                                                                  47
null                                                   builtin function         dcl 205 in procedure "value" ref 225
num_chars                              based           fixed bin(9,0)           level 2 packed packed unsigned unaligned dcl 6-6 ref
                                                                                  141 142 146
output_switch            70            based           pointer                  level 3 dcl 5-18 set ref 49* 51* 56*
pointers                 76            based           structure                level 2 dcl 3-9
probe_info                             based           structure                level 1 dcl 5-18
probe_info_ptr                  000104 automatic       pointer                  dcl 5-86 set ref 42* 49 51 56
reference_node                         based           structure                level 1 dcl 1-16
refp                            000100 automatic       pointer                  dcl 37 in procedure "probe_print_fortran_attr_" set
                                                                                  ref 44* 45 49 51 219 220 223 224
refp                            000352 automatic       pointer                  dcl 198 in procedure "value" set ref 224* 225 225*
                                                                                  231*
rtrim                                                  builtin function         dcl 205 ref 238
runtime_block                          based           structure                level 1 dcl 7-38
runtime_symbol                         based           structure                level 1 dcl 7-3
seg_info                               based           structure                level 1 dcl 3-9
seg_info_ptr             12            based           pointer                  level 2 dcl 2-5 ref 220
size                      4            based           fixed bin(35,0)          level 2 dcl 7-3 set ref 95*
source_info                            based           structure                level 1 dcl 2-5
source_info_ptr          10            based           pointer                  level 2 dcl 36 ref 219 220 223
stack_ptr                 6            based           pointer                  level 2 in structure "source_info" dcl 2-5
                                                                                  in procedure "probe_print_fortran_attr_" ref 219
stack_ptr                       000356 automatic       pointer                  dcl 200 in procedure "value" set ref 219* 225* 231*
string                    0(09)        based           char                     level 2 in structure "acc" packed packed unaligned
                                                                                  dcl 6-6 in procedure "probe_print_fortran_attr_"
                                                                                  ref 141 142 146
string                                                 builtin function         dcl 205 in procedure "value" set ref 216*
stu_$decode_runtime_value       000014 constant        entry                    external dcl 210 ref 231
stu_$get_implicit_qualifier     000012 constant        entry                    external dcl 208 ref 225
substr                                                 builtin function         dcl 118 ref 142 146
symbol_ptr                             based           pointer                  level 2 dcl 36 ref 45
t                               000167 automatic       fixed bin(17,0)          dcl 67 set ref 70* 71 73 75 77 79 81 83 85 87 89 91
                                                                                  93 100 102 102 102
tp                              000252 automatic       pointer                  dcl 120 set ref 138* 139* 139 139 141 142 146
type                    113            based           fixed bin(35,0)          level 2 in structure "P_reference" dcl 36
                                                                                  in procedure "probe_print_fortran_attr_" set ref
                                                                                  49 51*
type                      0(06)        based           bit(6)                   level 2 in structure "runtime_symbol" packed packed
                                                                                  unaligned dcl 7-3 in procedure
                                                                                  "probe_print_fortran_attr_" ref 70
unspec                                                 builtin function         dcl 205 ref 216
upper                    10            based           fixed bin(35,0)          array level 3 dcl 7-3 set ref 177*
val                             000350 automatic       fixed bin(35,0)          dcl 196 set ref 231* 236* 238

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 4-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 4-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 4-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 4-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 4-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 4-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 4-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 4-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 4-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 4-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 4-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 4-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 4-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 4-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 4-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 4-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 4-25
bit_dtype                              internal static fixed bin(17,0)          initial dcl 4-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 4-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 4-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 4-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 4-25
char_dtype                             internal static fixed bin(17,0)          initial dcl 4-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 4-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 4-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 4-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 4-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 4-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 4-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 4-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 4-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 4-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 4-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 4-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 4-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 4-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 4-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
current_source                         based           structure                level 1 dcl 2-13
entry_dtype                            internal static fixed bin(17,0)          initial dcl 4-25
expression_area                        based           area(1024)               dcl 5-95
file_dtype                             internal static fixed bin(17,0)          initial dcl 4-25
initial_source                         based           structure                level 1 dcl 2-14
label_dtype                            internal static fixed bin(17,0)          initial dcl 4-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 4-25
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 4-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 4-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 4-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 4-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 4-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 4-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 4-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 4-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 4-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 4-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 4-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 4-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 4-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 4-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 4-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 4-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 4-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 4-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 4-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 4-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 4-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 4-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 4-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 4-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 4-125
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 4-25
probe_area                             based           area(1024)               dcl 5-93
probe_info_version                     internal static fixed bin(17,0)          initial dcl 5-88
probe_info_version_1                   internal static fixed bin(17,0)          initial dcl 5-90
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 4-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 4-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 4-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 4-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 4-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 4-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 4-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 4-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 4-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 4-25
reference_arg_list                     based           structure                level 1 dcl 1-59
reference_subscripts                   based           structure                level 1 dcl 1-64
runtime_bound                          based           structure                level 1 unaligned dcl 7-33
runtime_token                          based           structure                level 1 dcl 7-63
scratch_area                           based           area(1024)               dcl 5-92
seg_info_nfiles                        automatic       fixed bin(17,0)          dcl 3-47
structure_dtype                        internal static fixed bin(17,0)          initial dcl 4-25
subscript_reference_ptrs               based           structure                level 1 dcl 1-69
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 4-25
varying_char_dtype                     internal static fixed bin(17,0)          initial dcl 4-25
work_area                              based           area(1024)               dcl 5-94

NAMES DECLARED BY EXPLICIT CONTEXT.
get_ft_attr_str                 000343 constant        entry                    internal dcl 63 ref 56
get_ft_class_str                000627 constant        entry                    internal dcl 113 ref 56
get_ft_dim_str                  000744 constant        entry                    internal dcl 155 ref 56
probe_print_fortran_attr_       000207 constant        entry                    external dcl 25
value                           001116 constant        entry                    internal dcl 188 ref 95 172 177

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1416        1434    1331        1426
Length      1754    1331        16         303      64           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
probe_print_fortran_attr_           493 external procedure  is an external procedure.  
get_ft_attr_str                         internal procedure  shares stack frame of external procedure probe_print_fortran_attr_.  
get_ft_class_str                        internal procedure  shares stack frame of external procedure probe_print_fortran_attr_.  
get_ft_dim_str                          internal procedure  shares stack frame of external procedure probe_print_fortran_attr_.  
value                                   internal procedure  shares stack frame of external procedure probe_print_fortran_attr_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
probe_print_fortran_attr_
                         000100 refp                        probe_print_fortran_attr_
                         000102 Sym                         probe_print_fortran_attr_
                         000104 probe_info_ptr              probe_print_fortran_attr_
                         000114 attr_str                    get_ft_attr_str
                         000167 t                           get_ft_attr_str
                         000176 class_str                   get_ft_class_str
                         000251 c                           get_ft_class_str
                         000252 tp                          get_ft_class_str
                         000254 i                           get_ft_class_str
                         000264 dim_str                     get_ft_dim_str
                         000337 n                           get_ft_dim_str
                         000340 i                           get_ft_dim_str
                         000350 val                         value
                         000351 an_ev                       value
                         000352 refp                        value
                         000354 block_ptr                   value
                         000356 stack_ptr                   value
                         000360 linkage_ptr                 value
                         000362 code                        value

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_$ioa_switch               stu_$decode_runtime_value     stu_$get_implicit_qualifier

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 000202        42 000214        43 000220        44 000221        45 000224        47 000226        49 000232
     51 000256        53 000301        56 000302        61 000342        63 000343        70 000345        71 000351
     73 000361        75 000371        77 000401        79 000411        81 000421        83 000431        85 000441
     87 000451        89 000461        91 000471        93 000501        94 000503        95 000510        96 000535
     98 000553        99 000565       100 000566       102 000576       106 000612       109 000617       113 000627
    132 000631       134 000636       136 000645       138 000653       139 000660       141 000664       142 000677
    145 000705       146 000714       147 000726       151 000735       155 000744       163 000746       165 000752
    168 000757       169 000764       170 000771       172 000777       175 001024       177 001033       179 001062
    181 001074       182 001077       184 001106       188 001116       216 001120       217 001122       219 001126
    220 001132       223 001135       224 001137       225 001142       231 001176       233 001224       235 001235
    236 001236       238 001240


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
