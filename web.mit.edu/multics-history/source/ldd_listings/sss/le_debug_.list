	COMPILATION LISTING OF SEGMENT le_debug_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/10/86  1256.7 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        4*        *                                                         *
        5*        *********************************************************** */
        6 
        7 /****^  HISTORY COMMENTS:
        8*  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
        9*     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
       10*     Originally written to display debugging information if the debug flag
       11*     was set in the input structure.
       12*                                                   END HISTORY COMMENTS */
       13 
       14 /* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */
       15 
       16 le_debug_:
       17   proc;
       18 
       19   /*** ****************************************************************/
       20   /***							*/
       21   /***	Name:	le_debug_					*/
       22   /***	Input:	ioa_ control string and ioa_args		*/
       23   /***	Function:	if debugging is enables (as indicated by the	*/
       24   /***		variable le_data_$debug) then print a message of	*/
       25   /***		the form:					*/
       26   /***		  <caller> (debug): user message		*/
       27   /***		on the user_output switch.  Where <caller> if the	*/
       28   /***		name of the caller of le_ as supplied in the	*/
       29   /***		le_input data structure, and the user message is	*/
       30   /***		that produced by calling ioa_			*/
       31   /***	Output:	none					*/
       32   /***							*/
       33   /*** ****************************************************************/
       34 
       35   /* procedures */
       36 
       37   dcl cu_$arg_list_ptr	entry (ptr);
       38   dcl cu_$generate_call	entry (entry, ptr);
       39   dcl ioa_		entry () options (variable);
       40   dcl ioa_$nnl		entry () options (variable);
       41 
       42   /* external */
       43 
       44   dcl le_data_$caller	external char (32) varying;
       45   dcl le_data_$debug	external bit (1);
       46 
       47   /* automatic */
       48 
       49   dcl arg_listp		ptr automatic;
       50 
       51   /* just return if debugging is off */
       52 
       53   if ^le_data_$debug
       54     then return;
       55 
       56   /* identify the message as a debug message */
       57 
       58   call ioa_$nnl ("^a (debug): ", le_data_$caller);
       59 
       60   /* pass the args on to ioa_ for the user message */
       61 
       62   call cu_$arg_list_ptr (arg_listp);
       63   call cu_$generate_call (ioa_, arg_listp);
       64 
       65   end le_debug_;
       66 
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/10/86  1251.9  le_debug_.pl1                     >special_ldd>install>MR12.0-1241>le_debug_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg_listp                       000100 automatic       pointer                  dcl 49 set ref 62* 63*
cu_$arg_list_ptr                000010 constant        entry                    external dcl 37 ref 62
cu_$generate_call               000012 constant        entry                    external dcl 38 ref 63
ioa_                            000014 constant        entry                    external dcl 39 ref 63 63
ioa_$nnl                        000016 constant        entry                    external dcl 40 ref 58
le_data_$caller                 000020 external static varying char(32)         dcl 44 set ref 58*
le_data_$debug                  000022 external static bit(1)                   unaligned dcl 45 ref 53

NAME DECLARED BY EXPLICIT CONTEXT.
le_debug_                       000006 constant        entry                    external dcl 16

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       160         204      66         170
Length       356      66        24         136      71           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
le_debug_                            86 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
le_debug_                000100 arg_listp                   le_debug_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_list_ptr              cu_$generate_call             ioa_                          ioa_$nnl

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
le_data_$caller               le_data_$debug




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000005        53 000013        58 000015        62 000036        63 000045        65 000062


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
