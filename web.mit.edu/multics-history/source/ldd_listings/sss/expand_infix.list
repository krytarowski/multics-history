	COMPILATION LISTING OF SEGMENT expand_infix
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1358.4 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /*	Modified:	781219 by RAB to fix 1806 (ERROR 316 for star_extent exprs)	*/
       12 /*	Modified: 17 Mar 1980 by PCK to implement by name assignment	*/
       13 
       14 expand_infix: proc(blk,stmnt,tree,context) returns(ptr);
       15 
       16 dcl	(blk,stmnt,tree,a,b,p,r,first) ptr;
       17 dcl	loop5 ptr init(null);
       18 dcl	(i,n,k) fixed bin(15);
       19 dcl	opcode bit(9) aligned;
       20 
       21 dcl	pl1_stat_$LHS ptr ext static;
       22 
       23 dcl	(null,string,substr) builtin;
       24 
       25 	n = tree->operator.number;
       26 	this_context = "0"b;
       27 	def_this_context.by_name_assignment = def_context.by_name_assignment;
       28 	a = tree->operand(n-1);
       29 	b = tree->operand(n);
       30 	if n=3 then first = tree->operand(1); else first = null;
       31 	opcode = tree->op_code;
       32 
       33 	if a->node.type = reference_node
       34 	then	a = process(a,this_context);
       35 
       36 	if b->node.type = reference_node
       37 	then	b = process(b,this_context);
       38 
       39 	if a->node.type=operator_node
       40 	then	if a->op_code^=loop
       41 		&  a->op_code^=join
       42 		then	if a->op_code ^= std_call 
       43 			then	a = simplify_scalar(a);
       44 			else	a = process(a,"0"b);
       45 
       46 	if b->node.type=operator_node
       47 	then	if b->op_code^=loop
       48 		&  b->op_code^=join
       49 		then	if b->op_code ^= std_call
       50 			then	b = simplify_scalar(b);
       51 			else	b = process(b,"0"b);
       52 
       53 	if a->node.type ^= operator_node
       54 	then do;
       55 		k = 2;
       56 		r = walk(b);
       57 		goto ret;
       58 	end;
       59 
       60 	if b->node.type ^= operator_node
       61 	then do;
       62 		k = 3;
       63 		r = walk(a);
       64 		goto ret;
       65 	end;
       66 
       67 			/*   Both operands are operators, now check for promotions from structures to
       68*			     arrays of structures   */
       69 
       70 	if a->op_code=loop & b->op_code=join
       71 	then do;
       72 		do p = a repeat p->operand(1) while(p->operand(1)->op_code=loop);
       73 		end;
       74 
       75 		p->operand(1) = match((p->operand(1)),b);
       76 
       77 		r = a;
       78 		goto ret;
       79 	end;
       80 
       81 	if a->op_code=join & b->op_code=loop
       82 	then do;
       83 		do p = b repeat p->operand(1) while(p->operand(1)->op_code=loop);
       84 		end;
       85 
       86 		p->operand(1) = match(a,(p->operand(1)));
       87 
       88 		r = b;
       89 		goto ret;
       90 	end;
       91 
       92 	r = match(a,b);
       93 
       94 ret:
       95 	if r->op_code=loop
       96 	&  loop5^=null
       97 	then do;
       98 		do p = loop5 repeat p->element(1) while(p^=null);
       99 			p->element(2) = share_expression((p->element(2)));
      100 		end;
      101 
      102 		if r->operand(5)=null
      103 		then	r->operand(5) = loop5;
      104 		else do;
      105 			do p = r->operand(5) repeat p->element(1) while(p->element(1)^=null);
      106 			end;
      107 
      108 			p->element(1) = loop5;
      109 		end;
      110 	end;
      111 
      112 	return(r);
      113 
      114 process: proc(p,context) returns(ptr);
      115 
      116 dcl	context bit(36) aligned;
      117 dcl	(p,q) ptr;
      118 
      119 	if p -> node.type = reference_node
      120 	then	q = p;
      121 	else	q = p->operand(1);
      122 
      123 	if q->reference.symbol->symbol.structure
      124 	|  q->reference.array_ref
      125 	then	return(expand_primitive(blk,stmnt,q,context));
      126 	else	return(simplify_scalar(p));
      127 
      128 	end process;
      129 
      130 /* subroutine to walk down the loop and join ops and create infix operators
      131*   to incorporate a  scalar expression into an aggregate expression.  */
      132 
      133 walk: proc(e) returns(ptr);
      134 
      135 dcl	e ptr;
      136 dcl	i fixed bin(15);
      137 
      138 	if e->node.type = operator_node
      139 	then	if e->op_code = loop
      140 		then do;
      141 			e->operand(1) = walk((e->operand(1)));
      142 			return(e);
      143 		end;
      144 
      145 		else	if e->op_code = join
      146 			then do;
      147 				do i = 1 to e->operator.number;
      148 					e->operand(i) = walk((e->operand(i)));
      149 				end;
      150 				return(e);
      151 			end;
      152 
      153 	if k=2
      154 	then	return(match(share_expression(a),e));
      155 	else	return(match(e,share_expression(b)));
      156 
      157 	end walk;
      158 
      159 /* subroutine to match to aggregate expressions and combine them.  */
      160 
      161 match: proc(aa,bb) returns(ptr);
      162 
      163 dcl	(a,b,aa,bb,p) ptr;
      164 dcl	i fixed bin(15);
      165 
      166 	a = aa;
      167 	b = bb;
      168 
      169 	if a->node.type ^= operator_node then go to scalar_a;
      170 	if a->op_code ^= loop & a->op_code ^= join then go to scalar_a;
      171 	if b->node.type ^= operator_node then go to scalar_b;
      172 	if b->op_code ^= loop & b->op_code ^= join then go to scalar_b;
      173 
      174 	if a->op_code^=b->op_code then goto fail;
      175 
      176 	if a->op_code=loop
      177 	then do;			/* both operands are arrays.  */
      178 		if ^compare_expression((a->operand(4)),(b->operand(4)))
      179 		then do;
      180 			if  a->operand(4)->node.type=reference_node
      181 			then if  a->operand(4)->reference.symbol->symbol.constant
      182 			then if  b->operand(4)->node.type=reference_node
      183 			then if  b->operand(4)->reference.symbol->symbol.constant
      184 			then	goto fail;
      185 
      186 			p = create_operator(bound_ck,4);
      187 			p->operator.processed = "1"b;
      188 			p->operand(1)=declare_temporary(integer_type,default_fix_bin_p,0,null);
      189 			p->operand(2) = a->operand(4);
      190 			p->operand(3) = b->operand(4);
      191 			p->operand(4) = share_expression((p->operand(3)));
      192 			a->operand(4) = p;
      193 		end;
      194 
      195 		a->operand(1) = match((a->operand(1)),(b->operand(1)));
      196 
      197 		if b->operand(5)^=null
      198 		then	if a->operand(5)=null
      199 			then	a->operand(5) = b->operand(5);
      200 			else do;
      201 				do p = a->operand(5) repeat p->element(1) while(p->element(1)^=null);
      202 				end;
      203 
      204 				p->element(1) = b->operand(5);
      205 			end;
      206 
      207 		return(a);
      208 	end;
      209 
      210 	if a->operator.number ^= b->operator.number then go to fail;
      211 
      212 	do i = 1 to a->operator.number;
      213 		a->operand(i) = match((a->operand(i)),(b->operand(i)));
      214 	end;
      215 
      216 	return(a);
      217 
      218 scalar_a:
      219 	if b->node.type = operator_node
      220 	then	if b->op_code = loop | b->op_code = join
      221 		then	go to fail;
      222 
      223 	go to combine;
      224 
      225 scalar_b:
      226 	if a->node.type = operator_node
      227 	then	if a->op_code = loop | a->op_code = join
      228 		then	go to fail;
      229 
      230 combine:
      231 	p = create_operator(opcode,n);
      232 	p->operand(n-1) = a;
      233 	p->operand(n)   = b;
      234 			/*   May be called from builtin   */
      235 	if first^=null
      236 	then	p->operand(1) = first;
      237 	else	p = operator_semantics(blk,stmnt,p,"0"b);
      238 
      239 	return(p);
      240 
      241 fail:
      242 	call semantic_translator$abort(79,null);
      243 
      244 	end match;
      245 
      246 /* subroutine to remove a scalar sub-expression so that it is evaluated only once.   */
      247 
      248 simplify_scalar:	proc(pp) returns(ptr);
      249 
      250 dcl	(e,pp,p,q,st,sy,LHS_sy,r,ret_ptr) ptr;
      251 
      252 	p = pp;
      253 
      254 	if p->node.type=operator_node
      255 	then do;
      256 				/*   the std_call operator may have already been extracted   */
      257 		if stmnt->statement.back->statement.root=p
      258 		then	st = stmnt;
      259 		else	st = create_statement(assignment_statement,(stmnt->statement.back),
      260 				null,(stmnt->statement.prefix));
      261 
      262 
      263 		st->statement.root = p;
      264 
      265 		/* new symbol necessary to prevent optimizer's losing
      266*		   temporary due to commoning of operator */
      267 
      268 		q = create_symbol(blk,null,by_compiler);
      269 		r = q->symbol.reference;
      270 
      271 		r->reference = p->operand(1)->reference;
      272 		q->symbol = r->reference.symbol->symbol;
      273 		q->symbol.next = null;
      274 		q->symbol.reference = r;
      275 		r->reference.symbol = q;
      276 
      277 		r->reference.shared = "0"b;
      278 		r->reference.ref_count = 1;
      279 
      280 		if p->op_code=std_call
      281 		then do;
      282 			r->reference.ref_count = 2;
      283 
      284 			e = p->operand(3)->operand(2);
      285 			e->element(e->list.number) = r;
      286 		end;
      287 
      288 		p->operand(1) = r;
      289 
      290 		ret_ptr = r;
      291 
      292 		goto ret1;
      293 	end;
      294 
      295 	if p->node.type = label_node
      296 	then	return(p);
      297 
      298 	if p->reference.offset^=null
      299 	|  p->reference.length^=null
      300 	|  p->reference.qualifier^=null
      301 	then	goto create;
      302 
      303 	if p->reference.symbol->node.type = label_node
      304 	then	goto ret0;
      305 
      306 	if p->reference.symbol->symbol.constant
      307 	then	goto ret0;
      308 
      309 	if p->reference.symbol->symbol.temporary
      310 	then do;
      311 		p->reference.ref_count = p->reference.ref_count - 1;
      312 		ret_ptr = p;
      313 		go to ret1;
      314 	end;
      315 
      316 	LHS_sy = pl1_stat_$LHS;
      317 	if LHS_sy=null
      318 	then	goto ret0;
      319 
      320 	sy = p->reference.symbol;
      321 
      322 	if LHS_sy->symbol.based
      323 	|  LHS_sy->symbol.defined
      324 	|  LHS_sy->symbol.parameter
      325 	then do;
      326 		if sy->symbol.member
      327 		&  LHS_sy->symbol.structure
      328 		then	goto create;
      329 
      330 		if string(sy->symbol.attributes.data_type)=string(LHS_sy->symbol.attributes.data_type)
      331 		then	goto create;
      332 		else	goto ret0;
      333 	end;
      334 
      335 	if sy->symbol.dimensioned
      336 	&  sy=LHS_sy
      337 	then	goto create;
      338 
      339 	if sy->symbol.member
      340 	then do q = sy repeat q->symbol.father while(q^=null);
      341 		if q=LHS_sy
      342 		then	goto create;
      343 	end;
      344 
      345 	goto ret0;
      346 
      347 create:
      348 	st = create_statement(assignment_statement,(stmnt->statement.back),null,(stmnt->statement.prefix));
      349 	r = create_operator(assign,2);
      350 	sy = create_symbol(null,null,by_compiler);
      351 	sy->symbol.temporary = "1"b;
      352 	sy->symbol.reference->reference.shared = "0"b;
      353 	sy->symbol.reference->reference.ref_count = 1;
      354 
      355 	r->operand(1) = sy->symbol.reference;
      356 	r->operand(2) = p;
      357 
      358 	st->statement.root = expression_semantics(blk,st,r,"0"b);
      359 
      360 	ret_ptr = r->operand(1);
      361 
      362 ret1:
      363 	/* this keeps temps from being released until after loop ends */
      364 
      365 	if loop5=null
      366 	then do;
      367 		loop5 = create_list(2);
      368 		loop5->element(2) = ret_ptr;
      369 	end;
      370 	else do;
      371 		q = create_list(2);
      372 		q->element(2) = ret_ptr;
      373 		q->element(1) = loop5;
      374 		loop5 = q;
      375 	end;
      376 
      377 	return(ret_ptr);
      378 
      379 ret0:
      380 	if ^ p -> reference.shared
      381 	then	p->reference.ref_count = p->reference.ref_count - 1;
      382 
      383 	return(p);
      384 
      385 	end simplify_scalar;
      386 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      387 
  8     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
  8     2 
  8     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  8     4 
  8     5 dcl  (	by_declare	initial("001"b),
  8     6 	by_explicit_context initial("010"b),
  8     7 	by_context	initial("011"b),
  8     8 	by_implication	initial("100"b),
  8     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
  8    10 
  8    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      388 
  9     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  9     2 
  9     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  9     4 
  9     5 
  9     6 dcl	1 list		based aligned,
  9     7 	2 node_type	bit(9) unaligned,
  9     8 	2 reserved	bit(12) unaligned,
  9     9 	2 number		fixed(14) unaligned,
  9    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  9    11 
  9    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  9    13 	                    init(16383);
  9    14 
  9    15 /* END INCLUDE FILE ... list.incl.pl1 */
      389 
 10     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 10     2 
 10     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 10     4 
 10     5 dcl (	block_node		initial("000000001"b),
 10     6 	statement_node		initial("000000010"b),
 10     7 	operator_node		initial("000000011"b),
 10     8 	reference_node		initial("000000100"b),
 10     9 	token_node		initial("000000101"b),
 10    10 	symbol_node		initial("000000110"b),
 10    11 	context_node		initial("000000111"b),
 10    12 	array_node		initial("000001000"b),
 10    13 	bound_node		initial("000001001"b),
 10    14 	format_value_node		initial("000001010"b),
 10    15 	list_node			initial("000001011"b),
 10    16 	default_node		initial("000001100"b),
 10    17 	machine_state_node		initial("000001101"b),
 10    18 	source_node		initial("000001110"b),
 10    19 	label_node		initial("000001111"b),
 10    20 	cross_reference_node	initial("000010000"b),
 10    21 	sf_par_node		initial("000010001"b),
 10    22 	temporary_node		initial("000010010"b),
 10    23 	label_array_element_node	initial("000010011"b),
 10    24 	by_name_agg_node		initial("000010100"b))
 10    25 				bit(9) internal static aligned options(constant);
 10    26 
 10    27 dcl	1 node			based aligned,
 10    28 	2 type			unal bit(9),
 10    29 	2 source_id		unal structure,
 10    30 	  3 file_number		bit(8),
 10    31 	  3 line_number		bit(14),
 10    32 	  3 statement_number	bit(5);
 10    33 
 10    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      390 
 11     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 11     2 
 11     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 11     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 11     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 11     6 /* Modified: 26 July 82 BIM wordno, segno */
 11     7 
 11     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 11     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 11    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 11    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 11    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 11    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 11    14 
 11    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 11    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 11    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 11    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 11    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 11    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 11    21 
 11    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 11    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 11    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 11    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 11    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 11    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 11    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 11    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 11    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 11    31 
 11    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 11    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 11    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 11    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 11    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 11    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 11    38 
 11    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 11    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 11    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 11    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 11    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 11    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 11    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 11    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 11    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 11    48 
 11    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 11    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 11    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 11    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 11    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 11    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 11    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 11    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 11    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 11    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 11    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 11    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 11    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 11    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 11    63 
 11    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 11    65*						   opnd(2) <- opnd(3) / 36		*/
 11    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 11    67*						   opnd(2) <- opnd(3) / 4		*/
 11    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 11    69*						   opnd(2) <- opnd(3) / 2		*/
 11    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 11    71 
 11    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 11    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 11    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 11    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 11    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 11    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 11    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 11    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 11    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 11    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 11    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 11    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 11    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 11    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 11    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 11    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 11    88 
 11    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 11    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 11    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 11    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 11    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 11    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 11    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 11    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 11    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 11    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 11    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 11   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 11   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 11   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 11   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 11   104 
 11   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 11   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 11   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 11   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 11   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 11   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 11   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 11   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 11   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 11   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 11   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 11   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 11   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 11   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 11   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 11   120 
 11   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 11   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 11   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 11   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 11   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 11   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 11   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 11   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 11   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 11   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 11   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 11   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 11   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 11   134 
 11   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 11   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 11   137 
 11   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 11   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 11   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 11   141*						   opnd(2) is the file name
 11   142*						   opnd(3) is the block	*/
 11   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 11   144*						   opnd(2) is the file name	*/
 11   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 11   146*						   opnd(2) is the file name */
 11   147 
 11   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 11   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 11   150*						   opnd(3) is old value, (4) is new value. */
 11   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 11   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 11   153 
 11   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 11   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 11   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 11   157*						   opnd(5) is the list */
 11   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 11   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 11   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 11   161 
 11   162 	r_parn		initial("011110001"b),	/* format op code			*/
 11   163 	l_parn		initial("011110010"b),
 11   164 	r_format		initial("011110011"b),
 11   165 	c_format		initial("011110100"b),
 11   166 	f_format		initial("011110101"b),
 11   167 	e_format		initial("011110110"b),
 11   168 	b_format		initial("011110111"b),
 11   169 	a_format		initial("011111000"b),
 11   170 	x_format		initial("011111001"b),
 11   171 	skip_format	initial("011111010"b),
 11   172 	column_format	initial("011111011"b),
 11   173 	page_format	initial("011111100"b),
 11   174 	line_format	initial("011111101"b),
 11   175 	picture_format	initial("011111110"b),
 11   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 11   177 
 11   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 11   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 11   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 11   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 11   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 11   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 11   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 11   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 11   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 11   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 11   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 11   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 11   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 11   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 11   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 11   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 11   194 
 11   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 11   196 /* They are processed by the semantic translator.						*/
 11   197 
 11   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 11   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 11   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 11   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 11   202 						/* opnd(3) is skip, opnd(4) is list	*/
 11   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 11   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 11   205 						/* opnd(3) is skip,opnd(4) is line	*/
 11   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 11   207 	open_file		initial("100011001"b),
 11   208 	close_file	initial("100011010"b),
 11   209 	read_file		initial("100011011"b),
 11   210 	write_file	initial("100011100"b),
 11   211 	locate_file	initial("100011101"b),
 11   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 11   213 						/* opnd(2) is control variable ref	*/
 11   214 						/* opnd(3) is specification operator	*/
 11   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 11   216 						/* repeat opnd(4) while opnd(5)	*/
 11   217 						/* opnd(6) is next specification	*/
 11   218 
 11   219 	rewrite_file	initial("100100000"b),
 11   220 	delete_file	initial("100100001"b),
 11   221 	unlock_file	initial("100100010"b),
 11   222 	lock_file		initial("100100011"b),
 11   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 11   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 11   225 	nop		initial("100100111"b),	/* no-op */
 11   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 11   227 
 11   228 /* These operators are produced by the semantic translator in processing the math
 11   229*   builtin functions and are used as input to the code generator			*/
 11   230 
 11   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 11   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 11   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 11   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 11   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 11   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 11   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 11   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 11   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 11   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 11   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 11   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 11   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 11   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 11   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 11   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 11   247 
 11   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 11   249 
 11   250 			bit(9) aligned internal static options(constant);
 11   251 
 11   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      391 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      392 
 13     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 13     2 
 13     3 dcl	1 reference		based aligned,
 13     4 	2 node_type		bit(9) unaligned,
 13     5 	2 array_ref		bit(1) unaligned,
 13     6 	2 varying_ref		bit(1) unaligned,
 13     7 	2 shared			bit(1) unaligned,
 13     8 	2 put_data_sw		bit(1) unaligned,
 13     9 	2 processed		bit(1) unaligned,
 13    10 	2 units			fixed(3) unaligned,
 13    11 	2 ref_count		fixed(17) unaligned,
 13    12 	2 c_offset		fixed(24),
 13    13 	2 c_length		fixed(24),
 13    14 	2 symbol			ptr unaligned,
 13    15 	2 qualifier		ptr unaligned,
 13    16 	2 offset			ptr unaligned,
 13    17 	2 length			ptr unaligned,
 13    18 	2 subscript_list		ptr unaligned,
 13    19 						/* these fields are used by the 645 code generator */
 13    20 	2 address			structure unaligned,
 13    21 	  3 base			bit(3),
 13    22 	  3 offset		bit(15),
 13    23 	  3 op			bit(9),
 13    24 	  3 no_address		bit(1),
 13    25 	  3 inhibit		bit(1),
 13    26 	  3 ext_base		bit(1),
 13    27 	  3 tag			bit(6),
 13    28 	2 info			structure unaligned,
 13    29 	  3 address_in		structure,
 13    30 	    4 b			dimension(0:7) bit(1),
 13    31 	    4 storage		bit(1),
 13    32 	  3 value_in		structure,
 13    33 	    4 a			bit(1),
 13    34 	    4 q			bit(1),
 13    35 	    4 aq			bit(1),
 13    36 	    4 string_aq		bit(1),
 13    37 	    4 complex_aq		bit(1),
 13    38 	    4 decimal_aq		bit(1),
 13    39 	    4 b			dimension(0:7) bit(1),
 13    40 	    4 storage		bit(1),
 13    41 	    4 indicators		bit(1),
 13    42 	    4 x			dimension(0:7) bit(1),
 13    43 	  3 other			structure,
 13    44 	    4 big_offset		bit(1),
 13    45 	    4 big_length		bit(1),
 13    46 	    4 modword_in_offset	bit(1),
 13    47 	2 data_type		fixed(5) unaligned,
 13    48 	2 bits			structure unaligned,
 13    49 	  3 padded_ref		bit(1),
 13    50 	  3 aligned_ref		bit(1),
 13    51 	  3 long_ref		bit(1),
 13    52 	  3 forward_ref		bit(1),
 13    53 	  3 ic_ref		bit(1),
 13    54 	  3 temp_ref		bit(1),
 13    55 	  3 defined_ref		bit(1),
 13    56 	  3 evaluated		bit(1),
 13    57 	  3 allocate		bit(1),
 13    58 	  3 allocated		bit(1),
 13    59 	  3 aliasable		bit(1),
 13    60 	  3 even			bit(1),
 13    61 	  3 perm_address		bit(1),
 13    62 	  3 aggregate		bit(1),
 13    63 	  3 hit_zero		bit(1),
 13    64 	  3 dont_save		bit(1),
 13    65 	  3 fo_in_qual		bit(1),
 13    66 	  3 hard_to_load		bit(1),
 13    67 	2 relocation		bit(12) unaligned,
 13    68 	2 more_bits		structure unaligned,
 13    69 	  3 substr		bit(1),
 13    70 	  3 padded_for_store_ref	bit(1),
 13    71 	  3 aligned_for_store_ref	bit(1),
 13    72 	  3 mbz			bit(15),
 13    73 	2 store_ins		bit(18) unaligned;
 13    74 
 13    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      393 
 14     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 14     2 
 14     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 14     4 
 14     5 dcl	context aligned bit(36),
 14     6 	this_context aligned bit(36);
 14     7 
 14     8 dcl	1 def_context		aligned based(addr(context)),
 14     9 	2 aggregate		unaligned bit(1),
 14    10 	2 arg_list		unaligned bit(1),
 14    11 	2 left_side		unaligned bit(1),
 14    12 	2 return			unaligned bit(1),
 14    13 	2 evaluate_offset		unaligned bit(1),
 14    14 	2 top			unaligned bit(1),
 14    15 	2 RHS_aggregate		unaligned bit(1),
 14    16 	2 return_from_empty		unaligned bit(1),
 14    17 	2 ignore_based		unaligned bit(1),
 14    18 	2 ext_param		unaligned bit(1),
 14    19 	2 cross_section		unaligned bit(1),
 14    20 	2 string_unspec		unaligned bit(1),
 14    21 	2 f_offset_to_be_added	unaligned bit(1),
 14    22 	2 suppress_cross_ref	unaligned bit(1),
 14    23 	2 by_name_assignment	unaligned bit(1),
 14    24 	2 by_name_lookup		unaligned bit(1),
 14    25 	2 pad			unaligned bit(20);
 14    26 
 14    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 14    28 
 14    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
      394 
 15     1 /* ***********************************************************
 15     2*   *                                                         *
 15     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 15     4*   *                                                         *
 15     5*   *********************************************************** */
 15     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 15     7 /* Internal interface of the PL/I compiler */
 15     8 
 15     9 dcl	1 statement		based aligned,
 15    10 	2 node_type		bit(9) unaligned,
 15    11 	2 source_id		structure unaligned,
 15    12 	  3 file_number		bit(8),
 15    13 	  3 line_number		bit(14),
 15    14 	  3 statement_number	bit(5),
 15    15 	2 next			ptr unaligned,
 15    16 	2 back			ptr unaligned,
 15    17 	2 root			ptr unaligned,
 15    18 	2 labels			ptr unaligned,
 15    19 	2 reference_list		ptr unaligned,
 15    20 	2 state_list		ptr unaligned,
 15    21 	2 reference_count		fixed(17) unaligned,
 15    22 	2 ref_count_copy		fixed(17) unaligned,
 15    23 	2 object			structure unaligned,
 15    24 	  3 start			fixed(17),
 15    25 	  3 finish		fixed(17),
 15    26 	2 source			structure unaligned,
 15    27 	  3 segment		fixed(11),
 15    28 	  3 start			fixed(23),
 15    29 	  3 length		fixed(11),
 15    30 	2 prefix			bit(12) unaligned,
 15    31 	2 optimized		bit(1) unaligned,
 15    32 	2 free_temps		bit(1) unaligned,
 15    33 	2 LHS_in_RHS		bit(1) unaligned,
 15    34 	2 statement_type		bit(9) unaligned,
 15    35 	2 bits			structure unaligned,
 15    36 	  3 processed		bit(1) unaligned,
 15    37 	  3 put_in_profile		bit(1) unaligned,
 15    38 	  3 generated		bit(1) unaligned,
 15    39 	  3 snap			bit(1) unaligned,
 15    40 	  3 system		bit(1) unaligned,
 15    41 	  3 irreducible		bit(1) unaligned,
 15    42 	  3 checked		bit(1) unaligned,
 15    43 	  3 save_temps		bit(1) unaligned,
 15    44 	  3 suppress_warnings	bit(1) unaligned,
 15    45 	  3 force_nonquick		bit(1) unaligned,
 15    46 	  3 expanded_by_name	bit(1) unaligned,
 15    47 	  3 begins_loop		bit(1) unaligned,
 15    48 	  3 pad			bit(24) unaligned;
 15    49 
 15    50 /* END INCLUDE FILE ... statement.incl.pl1 */
      395 
 16     1 	/* statement types */
 16     2 
 16     3 dcl (	unknown_statement		initial("000000000"b),
 16     4 	allocate_statement		initial("000000001"b),
 16     5 	assignment_statement	initial("000000010"b),
 16     6 	begin_statement		initial("000000011"b),
 16     7 	call_statement		initial("000000100"b),
 16     8 	close_statement		initial("000000101"b),
 16     9 	declare_statement		initial("000000110"b),
 16    10 	lock_statement		initial("000000111"b),
 16    11 	delete_statement		initial("000001000"b),
 16    12 	display_statement		initial("000001001"b),
 16    13 	do_statement		initial("000001010"b),
 16    14 	else_clause		initial("000001011"b),
 16    15 	end_statement		initial("000001100"b),
 16    16 	entry_statement		initial("000001101"b),
 16    17 	exit_statement		initial("000001110"b),
 16    18 	format_statement		initial("000001111"b),
 16    19 	free_statement		initial("000010000"b),
 16    20 	get_statement		initial("000010001"b),
 16    21 	goto_statement		initial("000010010"b),
 16    22 	if_statement		initial("000010011"b),
 16    23 	locate_statement		initial("000010100"b),
 16    24 	null_statement		initial("000010101"b),
 16    25 	on_statement		initial("000010110"b),
 16    26 	open_statement		initial("000010111"b),
 16    27 	procedure_statement 	initial("000011000"b),
 16    28 	put_statement		initial("000011001"b),
 16    29 	read_statement		initial("000011010"b),
 16    30 	return_statement		initial("000011011"b),
 16    31 	revert_statement		initial("000011100"b),
 16    32 	rewrite_statement		initial("000011101"b),
 16    33 	signal_statement		initial("000011110"b),
 16    34 	stop_statement		initial("000011111"b),
 16    35 	system_on_unit		initial("000100000"b),
 16    36 	unlock_statement		initial("000100001"b),
 16    37 	wait_statement		initial("000100010"b),
 16    38 	write_statement		initial("000100011"b),
 16    39 	default_statement		initial("000100100"b),
 16    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
      396 
 17     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 17     2 
 17     3 dcl	1 symbol			based aligned,
 17     4 	2 node_type		bit(9) unal,
 17     5 	2 source_id		structure unal,
 17     6 	  3 file_number		bit(8),
 17     7 	  3 line_number		bit(14),
 17     8 	  3 statement_number	bit(5),
 17     9 	2 location		fixed(18) unal unsigned,
 17    10 	2 allocated		bit(1) unal,
 17    11 	2 dcl_type		bit(3) unal,
 17    12 	2 reserved		bit(6) unal,
 17    13 	2 pix			unal,
 17    14 	  3 pic_fixed		bit(1) unal,
 17    15 	  3 pic_float		bit(1) unal,
 17    16 	  3 pic_char		bit(1) unal,
 17    17 	  3 pic_scale		fixed(7) unal,
 17    18 	  3 pic_size		fixed(7) unal,
 17    19 	2 level			fixed(8) unal,
 17    20 	2 boundary		fixed(3) unal,
 17    21 	2 size_units		fixed(3) unal,
 17    22 	2 scale			fixed(7) unal,
 17    23 	2 runtime			bit(18) unal,
 17    24 	2 runtime_offset		bit(18) unal,
 17    25 	2 block_node		ptr unal,
 17    26 	2 token			ptr unal,
 17    27 	2 next			ptr unal,
 17    28 	2 multi_use		ptr unal,
 17    29 	2 cross_references		ptr unal,
 17    30 	2 initial			ptr unal,
 17    31 	2 array			ptr unal,
 17    32 	2 descriptor		ptr unal,
 17    33 	2 equivalence		ptr unal,
 17    34 	2 reference		ptr unal,
 17    35 	2 general			ptr unal,
 17    36 	2 father			ptr unal,
 17    37 	2 brother			ptr unal,
 17    38 	2 son			ptr unal,
 17    39 	2 word_size		ptr unal,
 17    40 	2 bit_size		ptr unal,
 17    41 	2 dcl_size		ptr unal,
 17    42 	2 symtab_size		ptr unal,
 17    43 	2 c_word_size		fixed(24),
 17    44 	2 c_bit_size		fixed(24),
 17    45 	2 c_dcl_size		fixed(24),
 17    46 
 17    47 	2 attributes		structure aligned,
 17    48 	  3 data_type		structure unal,
 17    49 	    4 structure		bit(1) ,
 17    50 	    4 fixed		bit(1),
 17    51 	    4 float		bit(1),
 17    52 	    4 bit			bit(1),
 17    53 	    4 char		bit(1),
 17    54 	    4 ptr			bit(1),
 17    55 	    4 offset		bit(1),
 17    56 	    4 area		bit(1),
 17    57 	    4 label		bit(1),
 17    58 	    4 entry		bit(1),
 17    59 	    4 file		bit(1),
 17    60 	    4 arg_descriptor	bit(1),
 17    61 	    4 storage_block		bit(1),
 17    62 	    4 explicit_packed	bit(1), /* options(packed) */
 17    63 	    4 condition		bit(1),
 17    64 	    4 format		bit(1),
 17    65 	    4 builtin		bit(1),
 17    66 	    4 generic		bit(1),
 17    67 	    4 picture		bit(1),
 17    68 
 17    69 	  3 misc_attributes		structure unal,
 17    70 	    4 dimensioned		bit(1),
 17    71 	    4 initialed		bit(1),
 17    72 	    4 aligned		bit(1),
 17    73 	    4 unaligned		bit(1),
 17    74 	    4 signed		bit(1),
 17    75 	    4 unsigned		bit(1),
 17    76 	    4 precision		bit(1),
 17    77 	    4 varying		bit(1),
 17    78 	    4 local		bit(1),
 17    79 	    4 decimal		bit(1),
 17    80 	    4 binary		bit(1),
 17    81 	    4 real		bit(1),
 17    82 	    4 complex		bit(1),
 17    83 	    4 variable		bit(1),
 17    84 	    4 reducible		bit(1),
 17    85 	    4 irreducible		bit(1),
 17    86 	    4 returns		bit(1),
 17    87 	    4 position		bit(1),
 17    88 	    4 internal		bit(1),
 17    89 	    4 external		bit(1),
 17    90 	    4 like		bit(1),
 17    91 	    4 member		bit(1),
 17    92 	    4 non_varying		bit(1),
 17    93 	    4 options		bit(1),
 17    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 17    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 17    96 
 17    97 	  3 storage_class		structure unal,
 17    98 	    4 auto		bit(1),
 17    99 	    4 based		bit(1),
 17   100 	    4 static		bit(1),
 17   101 	    4 controlled		bit(1),
 17   102 	    4 defined		bit(1),
 17   103 	    4 parameter		bit(1),
 17   104 	    4 param_desc		bit(1),
 17   105 	    4 constant		bit(1),
 17   106 	    4 temporary		bit(1),
 17   107 	    4 return_value		bit(1),
 17   108 
 17   109 	  3 file_attributes		structure unal,
 17   110 	    4 print		bit(1),
 17   111 	    4 input		bit(1),
 17   112 	    4 output		bit(1),
 17   113 	    4 update		bit(1),
 17   114 	    4 stream		bit(1),
 17   115 	    4 reserved_1		bit(1),
 17   116 	    4 record		bit(1),
 17   117 	    4 sequential		bit(1),
 17   118 	    4 direct		bit(1),
 17   119 	    4 interactive		bit(1),		/* env(interactive) */
 17   120 	    4 reserved_2		bit(1),
 17   121 	    4 reserved_3		bit(1),
 17   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 17   123 	    4 keyed		bit(1),
 17   124 	    4 reserved_4		bit(1),
 17   125 	    4 environment		bit(1),
 17   126 
 17   127 	  3 compiler_developed	structure unal,
 17   128 	    4 aliasable		bit(1),
 17   129 	    4 packed		bit(1),
 17   130 	    4 passed_as_arg		bit(1),
 17   131 	    4 allocate		bit(1),
 17   132 	    4 set			bit(1),
 17   133 	    4 exp_extents		bit(1),
 17   134 	    4 refer_extents		bit(1),
 17   135 	    4 star_extents		bit(1),
 17   136 	    4 isub		bit(1),
 17   137 	    4 put_in_symtab		bit(1),
 17   138 	    4 contiguous		bit(1),
 17   139 	    4 put_data		bit(1),
 17   140 	    4 overlayed		bit(1),
 17   141 	    4 error		bit(1),
 17   142 	    4 symtab_processed	bit(1),
 17   143 	    4 overlayed_by_builtin	bit(1),
 17   144 	    4 defaulted		bit(1),
 17   145 	    4 connected		bit(1);
 17   146 
 17   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      397 
 18     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 18     2 
 18     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 18     4 
 18     5 dcl (	max_p_flt_bin_1			initial(27),
 18     6 	max_p_flt_bin_2			initial(63),
 18     7 	max_p_fix_bin_1			initial(35),
 18     8 	max_p_fix_bin_2			initial(71),
 18     9 
 18    10 	max_p_dec				initial(59),
 18    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 18    12 
 18    13 	min_scale				initial(-128),
 18    14 	max_scale				initial(+127),
 18    15 	max_bit_string			initial(9437184),
 18    16 	max_char_string			initial(1048576),
 18    17 	max_area_size			initial(262144),
 18    18 	min_area_size			initial(28),
 18    19 
 18    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 18    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 18    22 	max_identifier_length		initial (256),
 18    23 	max_number_of_dimensions		initial (127),
 18    24 
 18    25 	max_length_precision		initial(24),
 18    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 18    27 
 18    28 	max_words_per_variable		initial (262144),
 18    29 
 18    30 	bits_per_word			initial(36),
 18    31 	bits_per_double			initial(72),
 18    32 	packed_digits_per_character		initial(2),
 18    33 	characters_per_half			initial(2),
 18    34 	characters_per_word			initial(4),
 18    35 	characters_per_double		initial(8),
 18    36 
 18    37 	bits_per_character			initial(9),
 18    38 	bits_per_half			initial(18),
 18    39 	bits_per_decimal_digit		initial(9),
 18    40 	bits_per_binary_exponent		initial(8),
 18    41 	bits_per_packed_ptr			initial(36),
 18    42 	words_per_packed_pointer		initial(1),
 18    43 
 18    44 	words_per_fix_bin_1			initial(1),
 18    45 	words_per_fix_bin_2			initial(2),
 18    46 	words_per_flt_bin_1			initial(1),
 18    47 	words_per_flt_bin_2			initial(2),
 18    48 	words_per_varying_string_header	initial(1),
 18    49 	words_per_offset			initial(1),
 18    50 	words_per_pointer			initial(2),
 18    51 	words_per_label_var			initial(4),
 18    52 	words_per_entry_var			initial(4),
 18    53 	words_per_file_var			initial(4),
 18    54 	words_per_format			initial(4),
 18    55 	words_per_condition_var		initial(6),
 18    56 
 18    57 	max_index_register_value		initial(262143),
 18    58 	max_signed_index_register_value	initial(131071),
 18    59 
 18    60 	max_signed_xreg_precision		initial(17),
 18    61 	max_uns_xreg_precision		initial(18),
 18    62 
 18    63 	default_area_size			initial(1024),
 18    64 	default_flt_bin_p			initial(27),
 18    65 	default_fix_bin_p			initial(17),
 18    66 	default_flt_dec_p			initial(10),
 18    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 18    68 
 18    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 18    70 
 18    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 18    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 18    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 18    74 	real_type			initial("001000000000000000000100000001100000"b),
 18    75 	complex_type		initial("001000000000000000000100000001010000"b),
 18    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 18    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 18    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 18    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 18    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 18    81 	bit_type			initial("000100000000000000000000000000000000"b),
 18    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 18    83 									options(constant);
 18    84 
 18    85 /* END INCLUDE FILE ... system.incl.pl1 */
      398 
      399 
      400 	end expand_infix;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.5  expand_infix.pl1                  >spec>install>MR12.3-1066>expand_infix.pl1
387          1    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
2-307        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
388          8    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
389          9    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
390         10    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
391         11    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
392         12    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
393         13    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
394         14    07/21/80  1546.3  semantic_bits.incl.pl1            >ldd>include>semantic_bits.incl.pl1
395         15    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
396         16    05/03/76  1320.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
397         17    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
398         18    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LHS_sy                          000150 automatic       pointer                  dcl 250 set ref 316* 317 322 322 322 326 330 335 341
a                               000100 automatic       pointer                  dcl 16 in procedure "expand_infix" set ref 28* 33
                                                                                  33* 33* 39 39 39 39 39* 39* 44* 44* 53 63* 70 72
                                                                                  77 81 86* 92* 153* 153*
a                               000100 automatic       pointer                  dcl 163 in procedure "match" set ref 166* 169 170
                                                                                  170 174 176 178 180 180 189 192 195 195 197 197
                                                                                  201 207 210 212 213 213 216 225 225 225 232
aa                                     parameter       pointer                  dcl 163 ref 161 166
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 13-3 set ref 123
assign                          000004 constant        bit(9)                   initial dcl 11-8 set ref 349*
assignment_statement            000002 constant        bit(9)                   initial dcl 16-3 set ref 259* 347*
attributes               31            based           structure                level 2 dcl 17-3
b                               000102 automatic       pointer                  dcl 163 in procedure "match" set ref 167* 171 172
                                                                                  172 174 178 180 180 190 195 197 197 204 210 213
                                                                                  218 218 218 233
b                               000102 automatic       pointer                  dcl 16 in procedure "expand_infix" set ref 29* 36
                                                                                  36* 36* 46 46 46 46 46* 46* 51* 51* 56* 60 70 75*
                                                                                  81 83 88 92* 155* 155*
back                      2            based           pointer                  level 2 packed packed unaligned dcl 15-9 ref 257 259
                                                                                  347
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref 322
bb                                     parameter       pointer                  dcl 163 ref 161 167
blk                                    parameter       pointer                  dcl 16 set ref 14 123* 237* 268* 358*
bound_ck                        000003 constant        bit(9)                   initial dcl 11-8 set ref 186*
by_compiler                     000005 constant        bit(3)                   initial dcl 8-5 set ref 268* 350*
by_name_assignment        0(14)        based           bit(1)                   level 2 in structure "def_context" packed packed
                                                                                  unaligned dcl 14-8 in procedure "expand_infix" ref
                                                                                  27
by_name_assignment        0(14)        based           bit(1)                   level 2 in structure "def_this_context" packed
                                                                                  packed unaligned dcl 14-27 in procedure
                                                                                  "expand_infix" set ref 27*
compare_expression              000020 constant        entry                    external dcl 2-48 ref 178
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref 180
                                                                                  180 306
context                                parameter       bit(36)                  dcl 14-5 in procedure "expand_infix" set ref 14 27
context                                parameter       bit(36)                  dcl 116 in procedure "process" set ref 114 123*
create_list                     000022 constant        entry                    external dcl 2-147 ref 367 371
create_operator                 000024 constant        entry                    external dcl 2-152 ref 186 230 349
create_statement                000026 constant        entry                    external dcl 2-163 ref 259 347
create_symbol                   000030 constant        entry                    external dcl 2-184 ref 268 350
data_type                31            based           structure                level 3 packed packed unaligned dcl 17-3 set ref 330
                                                                                  330
declare_temporary               000032 constant        entry                    external dcl 2-292 ref 188
def_context                            based           structure                level 1 dcl 14-8
def_this_context                       based           structure                level 1 dcl 14-27
default_fix_bin_p               000001 constant        fixed bin(31,0)          initial dcl 18-5 set ref 188*
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref 322
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref 335
e                                      parameter       pointer                  dcl 135 in procedure "walk" set ref 133 138 138 141
                                                                                  141 142 145 147 148 148 150 153* 155*
e                               000136 automatic       pointer                  dcl 250 in procedure "simplify_scalar" set ref 284*
                                                                                  285 285
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 9-6 set
                                                                                  ref 99* 99 100 105 106 108* 201 202 204* 285* 368*
                                                                                  372* 373*
expand_primitive                000012 constant        entry                    external dcl 1-97 ref 123
expression_semantics            000014 constant        entry                    external dcl 1-105 ref 358
father                   17            based           pointer                  level 2 packed packed unaligned dcl 17-3 set ref 343
first                           000110 automatic       pointer                  dcl 16 set ref 30* 30* 235 235
i                               000100 automatic       fixed bin(15,0)          dcl 136 in procedure "walk" set ref 147* 148 148*
i                               000106 automatic       fixed bin(15,0)          dcl 164 in procedure "match" set ref 212* 213 213
                                                                                  213*
integer_type                    000000 constant        bit(36)                  initial dcl 18-71 set ref 188*
join                                   constant        bit(9)                   initial dcl 11-8 ref 39 46 70 81 145 170 172 218 225
k                               000115 automatic       fixed bin(15,0)          dcl 18 set ref 55* 62* 153
label_node                             constant        bit(9)                   initial dcl 10-5 ref 295 303
length                    6            based           pointer                  level 2 packed packed unaligned dcl 13-3 set ref 298
list                                   based           structure                level 1 dcl 9-6
loop                                   constant        bit(9)                   initial dcl 11-8 ref 39 46 70 72 81 83 94 138 170
                                                                                  172 176 218 225
loop5                           000112 automatic       pointer                  initial dcl 17 set ref 17* 94 98 102 108 362 367*
                                                                                  368 373 374*
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref 326
                                                                                  339
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 17-3
n                               000114 automatic       fixed bin(15,0)          dcl 18 set ref 25* 28 29 30 230* 232 233
next                      6            based           pointer                  level 2 packed packed unaligned dcl 17-3 set ref
                                                                                  273*
node                                   based           structure                level 1 dcl 10-27
null                                                   builtin function         dcl 23 ref 17 30 94 98 102 105 188 188 197 197 201
                                                                                  235 241 241 259 259 268 268 273 298 298 298 317
                                                                                  339 347 347 350 350 350 350 362
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 12-6 in procedure "expand_infix" ref
                                                                                  25 147 210 210 212
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "list" packed packed unaligned
                                                                                  dcl 9-6 in procedure "expand_infix" ref 285
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 13-3 set ref 298
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 12-6 ref 31 39
                                                                                  39 39 46 46 46 70 70 72 81 81 83 94 138 145 170
                                                                                  170 172 172 174 174 176 218 218 225 225 280
opcode                          000116 automatic       bit(9)                   dcl 19 set ref 31* 230*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 set
                                                                                  ref 28 29 30 72 73 75* 75 83 84 86* 86 102 102*
                                                                                  105 121 141* 141 148* 148 178 178 180 180 180 180
                                                                                  188* 189* 189 190* 190 191* 191 192* 195* 195 195
                                                                                  197 197 197* 197 201 204 213* 213 213 232* 233*
                                                                                  235* 271 284 284 288* 355* 356* 360
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 10-5 ref 39 46 53 60 138 169 171 218 225
                                                                                  254
operator_semantics              000016 constant        entry                    external dcl 1-184 ref 237
p                               000104 automatic       pointer                  dcl 163 in procedure "match" set ref 186* 187 188
                                                                                  189 190 191 191 192 201* 201* 202 204 230* 232 233
                                                                                  235 237* 237* 239
p                               000104 automatic       pointer                  dcl 16 in procedure "expand_infix" set ref 72* 72*
                                                                                  73 75 75 83* 83* 84 86 86 98* 98* 99 99* 100 105*
                                                                                  105* 106 108
p                               000140 automatic       pointer                  dcl 250 in procedure "simplify_scalar" set ref 252*
                                                                                  254 257 263 271 280 284 288 295 295 298 298 298
                                                                                  303 306 309 311 311 312 320 356 379 379 379 383
p                                      parameter       pointer                  dcl 117 in procedure "process" set ref 114 119 119
                                                                                  121 126*
parameter                32(14)        based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref 322
pl1_stat_$LHS                   000010 external static pointer                  dcl 21 ref 316
pp                                     parameter       pointer                  dcl 250 ref 248 252
prefix                   12(12)        based           bit(12)                  level 2 packed packed unaligned dcl 15-9 ref 259 347
processed                 0(19)        based           bit(1)                   level 2 packed packed unaligned dcl 12-6 set ref
                                                                                  187*
q                               000142 automatic       pointer                  dcl 250 in procedure "simplify_scalar" set ref 268*
                                                                                  269 272 273 274 275 339* 339* 341* 343 371* 372
                                                                                  373 374
q                               000126 automatic       pointer                  dcl 117 in procedure "process" set ref 119* 121* 123
                                                                                  123 123*
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 13-3 set ref 298
r                               000106 automatic       pointer                  dcl 16 in procedure "expand_infix" set ref 56* 63*
                                                                                  77* 88* 92* 94 102 102 105 112
r                               000152 automatic       pointer                  dcl 250 in procedure "simplify_scalar" set ref 269*
                                                                                  271 272 274 275 277 278 282 285 288 290 349* 355
                                                                                  356 358* 360
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 13-3 set ref
                                                                                  278* 282* 311* 311 353* 379* 379
reference                              based           structure                level 1 dcl 13-3 in procedure "expand_infix" set ref
                                                                                  271* 271
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 17-3 in procedure "expand_infix" set
                                                                                  ref 269 274* 352 353 355
reference_node                         constant        bit(9)                   initial dcl 10-5 ref 33 36 119 180 180
ret_ptr                         000154 automatic       pointer                  dcl 250 set ref 290* 312* 360* 368 372 377
root                      3            based           pointer                  level 2 packed packed unaligned dcl 15-9 set ref 257
                                                                                  263* 358*
semantic_translator$abort       000034 constant        entry                    external dcl 2-446 ref 241
share_expression                000036 constant        entry                    external dcl 2-454 ref 99 153 153 155 155 191
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 13-3 set ref
                                                                                  277* 352* 379
st                              000144 automatic       pointer                  dcl 250 set ref 257* 259* 263 347* 358 358*
statement                              based           structure                level 1 dcl 15-9
std_call                               constant        bit(9)                   initial dcl 11-8 ref 39 46 280
stmnt                                  parameter       pointer                  dcl 16 set ref 14 123* 237* 257 257 259 259 347 347
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 17-3
string                                                 builtin function         dcl 23 ref 330 330
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref 123
                                                                                  326
sy                              000146 automatic       pointer                  dcl 250 set ref 320* 326 330 335 335 339 339 350*
                                                                                  351 352 353 355
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 13-3 in procedure "expand_infix" set
                                                                                  ref 123 180 180 272 275* 303 306 309 320
symbol                                 based           structure                level 1 dcl 17-3 in procedure "expand_infix" set ref
                                                                                  272* 272
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref 309
                                                                                  351*
this_context                    000117 automatic       bit(36)                  dcl 14-5 set ref 26* 27 33* 36*
tree                                   parameter       pointer                  dcl 16 ref 14 25 28 29 30 31
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 10-27 ref 33 36
                                                                                  39 46 53 60 119 138 169 171 180 180 218 225 254
                                                                                  295 303

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 11-8
abs_fun                                internal static bit(9)                   initial dcl 11-8
acos_fun                               internal static bit(9)                   initial dcl 11-8
acosd_fun                              internal static bit(9)                   initial dcl 11-8
add                                    internal static bit(9)                   initial dcl 11-8
addbitno_fun                           internal static bit(9)                   initial dcl 11-8
addcharno_fun                          internal static bit(9)                   initial dcl 11-8
addr_fun                               internal static bit(9)                   initial dcl 11-8
addr_fun_bits                          internal static bit(9)                   initial dcl 11-8
addrel_fun                             internal static bit(9)                   initial dcl 11-8
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocate_statement                     internal static bit(9)                   initial dcl 16-3
allocation_fun                         internal static bit(9)                   initial dcl 11-8
allot_auto                             internal static bit(9)                   initial dcl 11-8
allot_based                            internal static bit(9)                   initial dcl 11-8
allot_ctl                              internal static bit(9)                   initial dcl 11-8
allot_var                              internal static bit(9)                   initial dcl 11-8
and_bits                               internal static bit(9)                   initial dcl 11-8
arg_desc_type                          internal static bit(36)                  initial dcl 18-71
array_node                             internal static bit(9)                   initial dcl 10-5
asin_fun                               internal static bit(9)                   initial dcl 11-8
asind_fun                              internal static bit(9)                   initial dcl 11-8
assign_by_name                         internal static bit(9)                   initial dcl 11-8
assign_round                           internal static bit(9)                   initial dcl 11-8
assign_size_ck                         internal static bit(9)                   initial dcl 11-8
assign_zero                            internal static bit(9)                   initial dcl 11-8
atan_fun                               internal static bit(9)                   initial dcl 11-8
atand_fun                              internal static bit(9)                   initial dcl 11-8
b_format                               internal static bit(9)                   initial dcl 11-8
baseno_fun                             internal static bit(9)                   initial dcl 11-8
baseptr_fun                            internal static bit(9)                   initial dcl 11-8
begin_statement                        internal static bit(9)                   initial dcl 16-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_pointer                            internal static bit(9)                   initial dcl 11-8
bit_to_char                            internal static bit(9)                   initial dcl 11-8
bit_to_word                            internal static bit(9)                   initial dcl 11-8
bit_type                               internal static bit(36)                  initial dcl 18-71
bitno_fun                              internal static bit(9)                   initial dcl 11-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 18-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 18-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 18-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 18-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 18-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 18-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 18-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 18-5
block_node                             internal static bit(9)                   initial dcl 10-5
bn_format                              internal static bit(9)                   initial dcl 11-8
bool_fun                               internal static bit(9)                   initial dcl 11-8
bound_node                             internal static bit(9)                   initial dcl 10-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 18-71
by_context                             internal static bit(3)                   initial dcl 8-5
by_declare                             internal static bit(3)                   initial dcl 8-5
by_explicit_context                    internal static bit(3)                   initial dcl 8-5
by_implication                         internal static bit(3)                   initial dcl 8-5
by_name_agg_node                       internal static bit(9)                   initial dcl 10-5
byte_fun                               internal static bit(9)                   initial dcl 11-8
c_format                               internal static bit(9)                   initial dcl 11-8
call_statement                         internal static bit(9)                   initial dcl 16-3
cat_string                             internal static bit(9)                   initial dcl 11-8
ceil_fun                               internal static bit(9)                   initial dcl 11-8
char_to_word                           internal static bit(9)                   initial dcl 11-8
char_type                              internal static bit(36)                  initial dcl 18-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 18-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 18-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 18-5
charno_fun                             internal static bit(9)                   initial dcl 11-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 11-8
close_file                             internal static bit(9)                   initial dcl 11-8
close_statement                        internal static bit(9)                   initial dcl 16-3
codeptr_fun                            internal static bit(9)                   initial dcl 11-8
column_format                          internal static bit(9)                   initial dcl 11-8
compare_declaration             000000 constant        entry                    external dcl 1-31
complex_fun                            internal static bit(9)                   initial dcl 11-8
complex_type                           internal static bit(36)                  initial dcl 18-71
conjg_fun                              internal static bit(9)                   initial dcl 11-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 10-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 16-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 11-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 11-8
cos_fun                                internal static bit(9)                   initial dcl 11-8
cosd_fun                               internal static bit(9)                   initial dcl 11-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_reference                000000 constant        entry                    external dcl 2-158
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 10-5
dec_integer_type                       internal static bit(36)                  initial dcl 18-71
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_statement                      internal static bit(9)                   initial dcl 16-3
declare_structure               000000 constant        entry                    external dcl 1-44
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 18-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 18-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 18-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 18-5
default_node                           internal static bit(9)                   initial dcl 10-5
default_statement                      internal static bit(9)                   initial dcl 16-3
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 11-8
delete_statement                       internal static bit(9)                   initial dcl 16-3
desc_size                              internal static bit(9)                   initial dcl 11-8
digit_to_bit                           internal static bit(9)                   initial dcl 11-8
display_statement                      internal static bit(9)                   initial dcl 16-3
div                                    internal static bit(9)                   initial dcl 11-8
do_fun                                 internal static bit(9)                   initial dcl 11-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 11-8
do_statement                           internal static bit(9)                   initial dcl 16-3
e_format                               internal static bit(9)                   initial dcl 11-8
else_clause                            internal static bit(9)                   initial dcl 16-3
empty_area                             internal static bit(9)                   initial dcl 11-8
enable_on                              internal static bit(9)                   initial dcl 11-8
end_statement                          internal static bit(9)                   initial dcl 16-3
entry_statement                        internal static bit(9)                   initial dcl 16-3
entry_var_type                         internal static bit(36)                  initial dcl 18-71
environmentptr_fun                     internal static bit(9)                   initial dcl 11-8
equal                                  internal static bit(9)                   initial dcl 11-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 11-8
exit_statement                         internal static bit(9)                   initial dcl 16-3
exp                                    internal static bit(9)                   initial dcl 11-8
exp_fun                                internal static bit(9)                   initial dcl 11-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
f_format                               internal static bit(9)                   initial dcl 11-8
fill_refer                      000000 constant        entry                    external dcl 1-113
floor_fun                              internal static bit(9)                   initial dcl 11-8
format_statement                       internal static bit(9)                   initial dcl 16-3
format_value_node                      internal static bit(9)                   initial dcl 10-5
fortran_read                           internal static bit(9)                   initial dcl 11-8
fortran_write                          internal static bit(9)                   initial dcl 11-8
free_based                             internal static bit(9)                   initial dcl 11-8
free_ctl                               internal static bit(9)                   initial dcl 11-8
free_node                       000000 constant        entry                    external dcl 2-345
free_statement                         internal static bit(9)                   initial dcl 16-3
free_var                               internal static bit(9)                   initial dcl 11-8
ftn_file_manip                         internal static bit(9)                   initial dcl 11-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 11-8
function                        000000 constant        entry                    external dcl 1-125
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 11-8
get_edit_trans                         internal static bit(9)                   initial dcl 11-8
get_file                               internal static bit(9)                   initial dcl 11-8
get_list_trans                         internal static bit(9)                   initial dcl 11-8
get_size                        000000 constant        entry                    external dcl 2-352
get_statement                          internal static bit(9)                   initial dcl 16-3
get_string                             internal static bit(9)                   initial dcl 11-8
goto_statement                         internal static bit(9)                   initial dcl 16-3
greater_or_equal                       internal static bit(9)                   initial dcl 11-8
greater_than                           internal static bit(9)                   initial dcl 11-8
half_to_word                           internal static bit(9)                   initial dcl 11-8
i                                      automatic       fixed bin(15,0)          dcl 18
if_statement                           internal static bit(9)                   initial dcl 16-3
imag_fun                               internal static bit(9)                   initial dcl 11-8
index_after_fun                        internal static bit(9)                   initial dcl 11-8
index_before_fun                       internal static bit(9)                   initial dcl 11-8
index_fun                              internal static bit(9)                   initial dcl 11-8
index_rev_fun                          internal static bit(9)                   initial dcl 11-8
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
jump                                   internal static bit(9)                   initial dcl 11-8
jump_false                             internal static bit(9)                   initial dcl 11-8
jump_if_eq                             internal static bit(9)                   initial dcl 11-8
jump_if_ge                             internal static bit(9)                   initial dcl 11-8
jump_if_gt                             internal static bit(9)                   initial dcl 11-8
jump_if_le                             internal static bit(9)                   initial dcl 11-8
jump_if_lt                             internal static bit(9)                   initial dcl 11-8
jump_if_ne                             internal static bit(9)                   initial dcl 11-8
jump_true                              internal static bit(9)                   initial dcl 11-8
l_parn                                 internal static bit(9)                   initial dcl 11-8
label_array_element_node               internal static bit(9)                   initial dcl 10-5
length_fun                             internal static bit(9)                   initial dcl 11-8
less_or_equal                          internal static bit(9)                   initial dcl 11-8
less_than                              internal static bit(9)                   initial dcl 11-8
line_format                            internal static bit(9)                   initial dcl 11-8
list_node                              internal static bit(9)                   initial dcl 10-5
local_label_var_type                   internal static bit(36)                  initial dcl 18-71
locate_file                            internal static bit(9)                   initial dcl 11-8
locate_statement                       internal static bit(9)                   initial dcl 16-3
lock_file                              internal static bit(9)                   initial dcl 11-8
lock_fun                               internal static bit(9)                   initial dcl 11-8
lock_statement                         internal static bit(9)                   initial dcl 16-3
log10_fun                              internal static bit(9)                   initial dcl 11-8
log2_fun                               internal static bit(9)                   initial dcl 11-8
log_fun                                internal static bit(9)                   initial dcl 11-8
lookup                          000000 constant        entry                    external dcl 1-153
machine_state_node                     internal static bit(9)                   initial dcl 10-5
make_desc                              internal static bit(9)                   initial dcl 11-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 18-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 18-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 18-5
max_char_string                        internal static fixed bin(31,0)          initial dcl 18-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 18-5
max_fun                                internal static bit(9)                   initial dcl 11-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 18-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 18-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 18-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 9-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 18-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 18-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 18-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 18-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 18-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 18-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 18-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 18-5
max_scale                              internal static fixed bin(31,0)          initial dcl 18-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 18-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 18-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 18-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 18-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 18-5
min_fun                                internal static bit(9)                   initial dcl 11-8
min_scale                              internal static fixed bin(31,0)          initial dcl 18-5
mod_bit                                internal static bit(9)                   initial dcl 11-8
mod_byte                               internal static bit(9)                   initial dcl 11-8
mod_fun                                internal static bit(9)                   initial dcl 11-8
mod_half                               internal static bit(9)                   initial dcl 11-8
mod_word                               internal static bit(9)                   initial dcl 11-8
mult                                   internal static bit(9)                   initial dcl 11-8
negate                                 internal static bit(9)                   initial dcl 11-8
nop                                    internal static bit(9)                   initial dcl 11-8
not_bits                               internal static bit(9)                   initial dcl 11-8
not_equal                              internal static bit(9)                   initial dcl 11-8
null_statement                         internal static bit(9)                   initial dcl 16-3
off_fun                                internal static bit(9)                   initial dcl 11-8
offset_adder                    000000 constant        entry                    external dcl 1-172
on_statement                           internal static bit(9)                   initial dcl 16-3
open_file                              internal static bit(9)                   initial dcl 11-8
open_statement                         internal static bit(9)                   initial dcl 16-3
optimizer                       000000 constant        entry                    external dcl 2-361
or_bits                                internal static bit(9)                   initial dcl 11-8
pack                                   internal static bit(9)                   initial dcl 11-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 18-5
page_format                            internal static bit(9)                   initial dcl 11-8
param_desc_ptr                         internal static bit(9)                   initial dcl 11-8
param_ptr                              internal static bit(9)                   initial dcl 11-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
picture_format                         internal static bit(9)                   initial dcl 11-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 11-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
pointer_type                           internal static bit(36)                  initial dcl 18-71
prefix_plus                            internal static bit(9)                   initial dcl 11-8
procedure_statement                    internal static bit(9)                   initial dcl 16-3
propagate_bit                   000000 constant        entry                    external dcl 1-192
ptr_fun                                internal static bit(9)                   initial dcl 11-8
put_control                            internal static bit(9)                   initial dcl 11-8
put_data_trans                         internal static bit(9)                   initial dcl 11-8
put_edit_trans                         internal static bit(9)                   initial dcl 11-8
put_field                              internal static bit(9)                   initial dcl 11-8
put_field_chk                          internal static bit(9)                   initial dcl 11-8
put_file                               internal static bit(9)                   initial dcl 11-8
put_list_trans                         internal static bit(9)                   initial dcl 11-8
put_statement                          internal static bit(9)                   initial dcl 16-3
put_string                             internal static bit(9)                   initial dcl 11-8
r_format                               internal static bit(9)                   initial dcl 11-8
r_parn                                 internal static bit(9)                   initial dcl 11-8
range_ck                               internal static bit(9)                   initial dcl 11-8
rank_fun                               internal static bit(9)                   initial dcl 11-8
read_file                              internal static bit(9)                   initial dcl 11-8
read_statement                         internal static bit(9)                   initial dcl 16-3
real_fun                               internal static bit(9)                   initial dcl 11-8
real_type                              internal static bit(36)                  initial dcl 18-71
record_io                              internal static bit(9)                   initial dcl 11-8
refer                                  internal static bit(9)                   initial dcl 11-8
refer_extent                    000000 constant        entry                    external dcl 2-426
rel_fun                                internal static bit(9)                   initial dcl 11-8
repeat_fun                             internal static bit(9)                   initial dcl 11-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 11-8
return_statement                       internal static bit(9)                   initial dcl 16-3
return_string                          internal static bit(9)                   initial dcl 11-8
return_value                           internal static bit(9)                   initial dcl 11-8
return_words                           internal static bit(9)                   initial dcl 11-8
reverse_fun                            internal static bit(9)                   initial dcl 11-8
revert_on                              internal static bit(9)                   initial dcl 11-8
revert_statement                       internal static bit(9)                   initial dcl 16-3
rewrite_file                           internal static bit(9)                   initial dcl 11-8
rewrite_statement                      internal static bit(9)                   initial dcl 16-3
round_fun                              internal static bit(9)                   initial dcl 11-8
search_fun                             internal static bit(9)                   initial dcl 11-8
search_rev_fun                         internal static bit(9)                   initial dcl 11-8
segno_fun                              internal static bit(9)                   initial dcl 11-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
setbitno_fun                           internal static bit(9)                   initial dcl 11-8
setcharno_fun                          internal static bit(9)                   initial dcl 11-8
sf_par_node                            internal static bit(9)                   initial dcl 10-5
sign_fun                               internal static bit(9)                   initial dcl 11-8
signal_on                              internal static bit(9)                   initial dcl 11-8
signal_statement                       internal static bit(9)                   initial dcl 16-3
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 11-8
sind_fun                               internal static bit(9)                   initial dcl 11-8
skip_format                            internal static bit(9)                   initial dcl 11-8
source_node                            internal static bit(9)                   initial dcl 10-5
sqrt_fun                               internal static bit(9)                   initial dcl 11-8
stack_ptr                              internal static bit(9)                   initial dcl 11-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 11-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 11-8
stacq_fun                              internal static bit(9)                   initial dcl 11-8
statement_node                         internal static bit(9)                   initial dcl 10-5
std_arg_list                           internal static bit(9)                   initial dcl 11-8
std_entry                              internal static bit(9)                   initial dcl 11-8
std_return                             internal static bit(9)                   initial dcl 11-8
stop                                   internal static bit(9)                   initial dcl 11-8
stop_statement                         internal static bit(9)                   initial dcl 16-3
storage_block_type                     internal static bit(36)                  initial dcl 18-71
stream_prep                            internal static bit(9)                   initial dcl 11-8
sub                                    internal static bit(9)                   initial dcl 11-8
subscripter                     000000 constant        entry                    external dcl 1-216
substr                                                 builtin function         dcl 23
symbol_node                            internal static bit(9)                   initial dcl 10-5
system_on_unit                         internal static bit(9)                   initial dcl 16-3
tan_fun                                internal static bit(9)                   initial dcl 11-8
tand_fun                               internal static bit(9)                   initial dcl 11-8
temporary_node                         internal static bit(9)                   initial dcl 10-5
terminate_trans                        internal static bit(9)                   initial dcl 11-8
token_node                             internal static bit(9)                   initial dcl 10-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 11-8
trunc_fun                              internal static bit(9)                   initial dcl 11-8
unknown_statement                      internal static bit(9)                   initial dcl 16-3
unlock_file                            internal static bit(9)                   initial dcl 11-8
unlock_statement                       internal static bit(9)                   initial dcl 16-3
unpack                                 internal static bit(9)                   initial dcl 11-8
validate                        000000 constant        entry                    external dcl 1-225
vclock_fun                             internal static bit(9)                   initial dcl 11-8
verify_fun                             internal static bit(9)                   initial dcl 11-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 11-8
verify_rev_fun                         internal static bit(9)                   initial dcl 11-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 11-8
wait_statement                         internal static bit(9)                   initial dcl 16-3
word_to_mod2                           internal static bit(9)                   initial dcl 11-8
word_to_mod4                           internal static bit(9)                   initial dcl 11-8
word_to_mod8                           internal static bit(9)                   initial dcl 11-8
wordno_fun                             internal static bit(9)                   initial dcl 11-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 18-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 18-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 18-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 18-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 18-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 18-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 18-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 18-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 18-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 18-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 18-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 18-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 18-5
write_file                             internal static bit(9)                   initial dcl 11-8
write_statement                        internal static bit(9)                   initial dcl 16-3
x_format                               internal static bit(9)                   initial dcl 11-8
xor_bits                               internal static bit(9)                   initial dcl 11-8

NAMES DECLARED BY EXPLICIT CONTEXT.
combine                         001317 constant        label                    dcl 230 ref 223
create                          001711 constant        label                    dcl 347 ref 298 326 330 335 341
expand_infix                    000033 constant        entry                    external dcl 14
fail                            001376 constant        label                    dcl 241 ref 174 180 210 218 225
match                           000733 constant        entry                    internal dcl 161 ref 75 86 92 153 155 195 213
process                         000447 constant        entry                    internal dcl 114 ref 33 36 44 51
ret                             000356 constant        label                    dcl 94 ref 57 64 78 89
ret0                            002114 constant        label                    dcl 379 ref 303 306 317 332 345
ret1                            002045 constant        label                    dcl 362 ref 292 313
scalar_a                        001273 constant        label                    dcl 218 ref 169 170
scalar_b                        001307 constant        label                    dcl 225 ref 171 172
simplify_scalar                 001417 constant        entry                    internal dcl 248 ref 39 46 126
walk                            000536 constant        entry                    internal dcl 133 ref 56 63 141 148

NAME DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 27 27

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2406        2446    2210        2416
Length      3216    2210        40         534     175           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
expand_infix                        172 external procedure  is an external procedure.  
process                                 internal procedure  shares stack frame of external procedure expand_infix.  
walk                                110 internal procedure  calls itself recursively.  
match                               122 internal procedure  calls itself recursively.  
simplify_scalar                         internal procedure  shares stack frame of external procedure expand_infix.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
expand_infix             000100 a                           expand_infix
                         000102 b                           expand_infix
                         000104 p                           expand_infix
                         000106 r                           expand_infix
                         000110 first                       expand_infix
                         000112 loop5                       expand_infix
                         000114 n                           expand_infix
                         000115 k                           expand_infix
                         000116 opcode                      expand_infix
                         000117 this_context                expand_infix
                         000126 q                           process
                         000136 e                           simplify_scalar
                         000140 p                           simplify_scalar
                         000142 q                           simplify_scalar
                         000144 st                          simplify_scalar
                         000146 sy                          simplify_scalar
                         000150 LHS_sy                      simplify_scalar
                         000152 r                           simplify_scalar
                         000154 ret_ptr                     simplify_scalar
match                    000100 a                           match
                         000102 b                           match
                         000104 p                           match
                         000106 i                           match
walk                     000100 i                           walk

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ext_out        call_int_this       call_int_other      return_mac          signal_op
ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
compare_expression            create_list                   create_operator               create_statement
create_symbol                 declare_temporary             expand_primitive              expression_semantics
operator_semantics            semantic_translator$abort     share_expression

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$LHS




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000026        17 000040        25 000042        26 000050        27 000051        28 000055        29 000060
     30 000062        30 000067        31 000071        33 000075        36 000103        39 000111        44 000131
     46 000135        51 000155        53 000161        55 000165        56 000167        57 000177        60 000200
     62 000204        63 000206        64 000216        70 000217        72 000235        73 000247        75 000253
     77 000273        78 000275        81 000276        83 000304        84 000315        86 000321        88 000341
     89 000343        92 000344        94 000356        98 000367        99 000376       100 000415       102 000420
    105 000427       106 000436       108 000441       112 000443       114 000447       119 000451       121 000461
    123 000464       126 000521       133 000535       138 000543       141 000557       142 000600       145 000602
    147 000604       148 000615       149 000637       150 000641       153 000646       155 000702       161 000732
    166 000740       167 000744       169 000747       170 000754       171 000764       172 000770       174 001000
    176 001002       178 001005       180 001026       186 001054       187 001071       188 001073       189 001120
    190 001123       191 001126       192 001144       195 001146       197 001172       201 001204       202 001212
    204 001215       207 001220       210 001224       212 001235       213 001243       214 001265       216 001267
    218 001273       223 001306       225 001307       230 001317       232 001332       233 001337       235 001341
    237 001350       239 001372       241 001376       244 001413       248 001417       252 001421       254 001424
    257 001431       259 001443       263 001472       268 001475       269 001515       271 001520       272 001525
    273 001532       274 001534       275 001535       277 001536       278 001540       280 001542       282 001547
    284 001551       285 001555       288 001561       290 001563       292 001564       295 001565       298 001571
    303 001602       306 001607       309 001612       311 001615       312 001622       313 001623       316 001624
    317 001630       320 001634       322 001636       326 001642       330 001650       332 001657       335 001660
    339 001667       341 001700       343 001704       345 001710       347 001711       349 001743       350 001760
    351 002000       352 002003       353 002006       355 002010       356 002013       358 002015       360 002042
    362 002045       367 002051       368 002064       369 002067       371 002070       372 002103       373 002106
    374 002110       377 002111       379 002114       383 002125


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
