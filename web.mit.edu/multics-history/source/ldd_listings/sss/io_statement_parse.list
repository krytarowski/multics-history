	COMPILATION LISTING OF SEGMENT io_statement_parse
	Compiled by: Multics PL/I Compiler, Release 33c, of October 25, 1990
	Compiled at: ACTC Technologies Inc.          
	Compiled on: 92-04-24_1116.00_Fri_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 io_statement_parse:	proc(k_index,entry_ptr,conditions_par,father_block_par,end_ptr_par,return_flag_par,statement_type_par);
       12 
       13 				/*
       14*				   forwards added as open keyword.
       15*				   buffered,unbuffered deleted.
       16*				*/
       17 
       18 
       19 
       20 
       21 dcl	k_index fixed bin(15),
       22 	statement_ptr ptr,
       23 	father_block_par ptr,
       24 	(stype_b9,statement_type_par) bit(9) aligned,
       25 	(end_ptr_par,label_ptr,end_ptr,t,q,loc) ptr,
       26 	(return_flag_par,return_flag) bit(1) aligned,
       27 	(conditions,conditions_par) bit(12) aligned;
       28 
       29 
       30 
       31 dcl	( addr,bit,char,fixed,hbound,null,substr ) builtin;
       32 
       33 
       34 dcl	pl1_stat_$cur_statement ptr static ext;
       35 dcl	pl1_stat_$check_ansi bit(1) aligned ext;
       36 dcl	(arg,cur_block,dp,fnp,root_op,st,entry_ptr) ptr,
       37 	(dpt,errp,locate_variable,previous_edit_ptr) ptr init(null),
       38 
       39 	(options_allowed_index,iocode,error_number,i,k,n,open_index,operand_number) fixed bin(15),
       40 	(data_index,operands,option_index,stype) fixed bin(15),
       41 
       42 	get_put bit(1) aligned,
       43 	try_else bit(1) aligned init("0"b),
       44 	opcode bit(9) aligned,
       45 	(fab2_bits, io_job,io_job_item,io_jobs_allowed) bit(36) aligned,
       46 
       47 	tstring12 char(12) aligned,
       48 	tstring char(8) aligned;
       49 
       50 
       51 dcl	action_index(0:38) fixed bin(15) int static
       52 	init ( 0,0,0,1,0,	7,5,7,7,0,	2,0,5,5,0,	5,0,7,6,3,
       53 	       7,0,4,7,5,	7,7,5,0,7,	0,0,4,7,0,	7,5,5,0);
       54 
       55 dcl	option_keyword(19) char(8) aligned int static
       56 		init("file","string","skip","title","key",
       57 		     "keyto","keyfrom","copy","line","linesize",
       58 		     "set","into","ignore","from","page",
       59 		     "pagesize","list","data","edit");
       60 
       61 
       62 dcl	plio_options(19) fixed bin(15) int static
       63 		init(1,2,11,36,21,
       64 		     22,23,12,10,33,
       65 		     24,25,26,27,9,
       66 		     32,6,4,5);
       67 
       68 
       69 	/* order of bits for io_job and options_allowed:
       70*
       71*	file,stri,vary,	data,edit,list,
       72*	get ,put, page,	line,skip,copy,
       73*	x,   x,   x,   	read,writ,rewr,
       74*	dele,loca,key,	kyto,kyfr,set,
       75*	into,igno,from,	else,ref, x,
       76*	x,   psiz,lsiz,	open,clos,title		*/
       77 
       78 
       79 dcl	options_allowed(9) bit(36) aligned int static
       80 		init(	"110111000011"b,
       81 			"11011100111"b,
       82 			"1000000000000000000011011100001"b,
       83 			"100000000000000000000010001"b,
       84 			"100000000000000000001000001"b,
       85 			"100000000000000000001"b,
       86 			"100000000000000000000011"b,
       87 			"100000000000000000000000000000011001"b,
       88 			"1"b   );
       89 
       90 
       91 dcl	io_jobs_forbidden(19) bit(36) aligned int static init(
       92 
       93 /*	 fsvdelgpplsc lurwrdlkkksiifer nploct	(see declaration of "option_keyword"
       94*	 itaadieuaiko onereeoeyyengrle lsspli	for list down and  "order of bits
       95*	 lrrtisttgnip claiwlcytfttnosf oiieot	for io_job and options_allowed" for
       96*	 eiyatt  eepy kkdtrea or oome  kzznsl	list across)		*/
       97 
       98 	"000111001111111111111111111111111111"b,	/* file */
       99 	"000111000001"b,				/* string */
      100 	"100111000011"b,				/* skip */
      101 	"100000000000000000000000000000011000"b,	/* title */
      102 	"1000000000000000000000011110001"b,		/* key */
      103 	"1000000000000000000000011110001"b,		/* keyto */
      104 	"1000000000000000000000010010000"b,		/* keyfrom */
      105 	"110111001111"b,				/* copy */
      106 	"100111001100"b,				/* line */
      107 	"100000000000000000000000000000010001"b,	/* linesize */
      108 	"1000000000000000000011100010001"b,		/* set */
      109 	"1000000000000000000011000010001"b,		/* into */
      110 	"1000000000000000000011000010001"b,		/* ignore */
      111 	"100000000000000000001010001000"b,		/* from */
      112 	"100111001100"b,				/* page */
      113 	"100000000000000000000000000000001001"b,	/* pagesize */
      114 	"111000001111"b,				/* list */
      115 	"111000001111"b,				/* data */
      116 	"111000001111"b	);			/* edit */
      117 
      118 
      119 
      120 
      121 dcl	open_keyword(12) char(12) aligned int static
      122 		init("print","input","output","update","stream",
      123 		     "record","sequential","seql","direct","keyed",
      124 		     "environment","env");
      125 
      126 dcl	bit_index(12) fixed bin(15) int static
      127 		init(5,6,7,8,9,  11,12,12,13,18  ,20,20);
      128 
      129 dcl	label_index(19) fixed bin(15) int static
      130 		init(1,2,2,2,2,1,2,1,2,2,1,1,2,1,3,2,4,4,4);
      131 
      132 
      133 
      134 
  1     1 /* BEGIN INCLUDE FILE parse.incl.pl1 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(91-01-09,Blackmore), approve(91-01-09,MCR8234),
  1     6*     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
  1     7*     Change entry points for 'lex', 'lex$write_last_line', and
  1     8*     'statement_type', for constant reference resolution fix.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 declare	attribute_parse	entry(ptr,ptr,fixed bin(15),bit(1) aligned);
  1    12 			/* parameter 1:	(input)	block node ptr		*/
  1    13 			/* parameter 2:	(input)	symbol node ptr		*/
  1    14 			/* parameter 3:	(in/out)	token index		*/
  1    15 			/* parameter 4:	(input)   called while doing generic	*/
  1    16 
  1    17 declare	context		entry(ptr,ptr,fixed bin(15));
  1    18 			/* parameter 1:	(input)	usually token node ptr	*/
  1    19 			/* parameter 2:	(input)	block node ptr		*/
  1    20 			/* parameter 3:	(input)	context type		*/
  1    21 
  1    22 declare	data_list_parse	entry(fixed bin(15),ptr,ptr)
  1    23 			returns(bit(1) aligned);
  1    24 			/* parameter 1:	(in/out)	token index		*/
  1    25 			/* parameter 2:	(input)	block node ptr		*/
  1    26 			/* parameter 3:	(output)	data list parse tree ptr	*/
  1    27 			/* return:	(output)	valid parse bit		*/
  1    28 
  1    29 declare	declare_label	entry(ptr,ptr,ptr,bit(3) aligned);
  1    30 			/* parameter 1:	(input)	block node ptr		*/
  1    31 			/* parameter 2:	(input)	statement node ptr	*/
  1    32 			/* parameter 3:	(input)	label list ptr or null	*/
  1    33 			/* parameter 4:	(input)	declare type		*/
  1    34 
  1    35 declare	declare_parse	entry(fixed bin(15),ptr,ptr);
  1    36 			/* parameter 1:	(input)	token index		*/
  1    37 			/* parameter 2:	(input)	block node ptr		*/
  1    38 			/* parameter 3:	(input)	label list ptr or null	*/
  1    39 
  1    40 declare	declare_parse$abort	entry(fixed bin(15),ptr);
  1    41 			/* parameter 1:	(input)	error number		*/
  1    42 			/* parameter 2:	(input)	any node ptr		*/
  1    43 
  1    44 declare	default_parse	entry(fixed bin(15),ptr,ptr);
  1    45 			/* parameter 1:	(input)	token index		*/
  1    46 			/* parameter 2:	(input)	block node ptr		*/
  1    47 			/* parameter 3:	(input)	label list ptr or null	*/
  1    48 
  1    49 declare	descriptor_parse	entry(ptr,ptr,fixed bin(15))
  1    50 			returns(ptr);
  1    51 			/* parameter 1:	(input)	block node ptr		*/
  1    52 			/* parameter 2:	(input)	token node ptr or null	*/
  1    53 			/* parameter 3:	(in/out)	token index		*/
  1    54 			/* return:	(output)	symbol node ptr		*/
  1    55 
  1    56 declare	do_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    57 			bit(1) aligned,bit(1) aligned,bit(1) aligned);
  1    58 			/* parameter 1:	(in/out)	token index		*/
  1    59 			/* parameter 2:	(input)	label list ptr or null	*/
  1    60 			/* parameter 3:	(input)	conditions		*/
  1    61 			/* parameter 4:	(input)	father block node ptr	*/
  1    62 			/* parameter 5:	(output)	end ptr			*/
  1    63 			/* parameter 6:	(input)	entry bit			*/
  1    64 			/* parameter 7:	(input)	return bit		*/
  1    65 			/* parameter 8:	(input)	iterative do bit		*/
  1    66 
  1    67 declare	evaluate		entry(bit(9) aligned,ptr,ptr) returns(ptr);
  1    68 			/* parameter 1:	(input)	opcode		*/
  1    69 			/* parameter 2:	(input)	left operand (token ptr)	*/
  1    70 			/* parameter 3:	(input)	right operand (token ptr)	*/
  1    71 			/* return:	(output)	ptr to result node	*/
  1    72 
  1    73 declare	expression_parse	entry(fixed bin(15),ptr)
  1    74 			returns(ptr);
  1    75 			/* parameter 1:	(in/out)	token index		*/
  1    76 			/* parameter 2:	(input)	block node ptr		*/
  1    77 			/* return:	(output)	expression parse tree ptr	*/
  1    78 
  1    79 declare	format_list_parse	entry(fixed bin(15),ptr,ptr,ptr)
  1    80 			returns(bit(1) aligned);
  1    81 			/* parameter 1:	(in/out)	token index		*/
  1    82 			/* parameter 2:	(input)	block node ptr		*/
  1    83 			/* parameter 3:	(input)	statement node ptr		*/
  1    84 			/* parameter 4:	(output)	format list parse tree ptr	*/
  1    85 			/* return:	(output)	valid parse bit		*/
  1    86 
  1    87 declare	if_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    88 			bit(1) aligned);
  1    89 			/* parameter 1:	(in/out)	token index		*/
  1    90 			/* parameter 2:	(input)	label list ptr or null	*/
  1    91 			/* parameter 3:	(input)	conditions		*/
  1    92 			/* parameter 4:	(input)	father block node ptr	*/
  1    93 			/* parameter 5:	(input)	end ptr			*/
  1    94 			/* parameter 6:	(output)	valid parse bit		*/
  1    95 
  1    96 declare	io_statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    97 			bit(1) aligned,bit(9) aligned);
  1    98 			/* parameter 1:	(in/out)	token index		*/
  1    99 			/* parameter 2:	(input)	label list ptr or null	*/
  1   100 			/* parameter 3:	(input)	conditions		*/
  1   101 			/* parameter 4:	(input)	father block node ptr	*/
  1   102 			/* parameter 5:	(output)	end ptr			*/
  1   103 			/* parameter 6:	(output)	valid parse bit		*/
  1   104 			/* parameter 7:	(output)	statement type		*/
  1   105 
  1   106 declare	lex		entry(ptr);
  1   107 			/* parameter 1:	(input)	block node ptr		*/
  1   108 
  1   109 declare	lex$write_last_line	entry(ptr);
  1   110 			/* parameter 1:	(input)	block node ptr		*/
  1   111 
  1   112 declare	lex$initialize_lex	entry(ptr,fixed bin(15));
  1   113 			/* parameter 1:	(input)	ptr to source		*/
  1   114 			/* parameter 2:	(input)	length of source (chars)	*/
  1   115 
  1   116 declare	on_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr);
  1   117 			/* parameter 1:	(in/out)	token index		*/
  1   118 			/* parameter 2:	(input)	label list ptr or null	*/
  1   119 			/* parameter 3:	(input)	conditions		*/
  1   120 			/* parameter 4:	(input)	father block node ptr	*/
  1   121 			/* parameter 5:	(output)	end ptr (set to null)	*/
  1   122 
  1   123 declare	on_parse$revert	entry(fixed bin(15),ptr,ptr);
  1   124 			/* parameter 1:	(input)	token index	*/
  1   125 			/* parameter 2:	(input)	statement node ptr	*/
  1   126 			/* parameter 3:	(input)	block node ptr	*/
  1   127 
  1   128 declare	parse		entry(ptr,ptr,fixed bin(15));
  1   129 			/* parameter 1:	(output)	root ptr		*/
  1   130 			/* parameter 2	(input)	source ptr		*/
  1   131 			/* parameter 3:	(input)	source length		*/
  1   132 
  1   133 declare	procedure_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1   134 			bit(9) aligned,bit(1) aligned);
  1   135 			/* parameter 1:	(in/out)	token index		*/
  1   136 			/* parameter 2:	(input)	label list ptr or null	*/
  1   137 			/* parameter 3:	(input)	conditions		*/
  1   138 			/* parameter 4:	(input)	father block node ptr	*/
  1   139 			/* parameter 5:	(output)	end ptr		*/
  1   140 			/* parameter 6:	(input)	block type		*/
  1   141 			/* parameter 7:	(input)	no return statement bit	*/
  1   142 
  1   143 declare	process_entry	entry(fixed bin(15),bit(9) aligned,ptr,ptr,bit(12) aligned);
  1   144 			/* parameter 1:	(in/out)	token index		*/
  1   145 			/* parameter 2:	(input)	statement type		*/
  1   146 			/* parameter 3:	(input)	block node ptr		*/
  1   147 			/* parameter 4:	(input)	label list ptr or null	*/
  1   148 			/* parameter 5:	(input)	conditions		*/
  1   149 
  1   150 declare	reference_parse	entry(fixed bin(15),ptr)
  1   151 			returns(ptr);
  1   152 			/* parameter 1:	(in/out)	token index		*/
  1   153 			/* parameter 2:	(input)	block node ptr		*/
  1   154 			/* return:	(output)	reference parse tree ptr	*/
  1   155 
  1   156 declare	reserve$rename_parse entry(fixed bin(15)) returns(bit(1) aligned);
  1   157 			/* parameter 1:	(in/out)	token index	 */
  1   158 			/* return:	(output)	success bit	 */
  1   159 
  1   160 declare	statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,fixed bin(15));
  1   161 			/* parameter 1:	(in/out)	token index		*/
  1   162 			/* parameter 2:	(input)	label list ptr or null	*/
  1   163 			/* parameter 3:	(input)	conditions		*/
  1   164 			/* parameter 4:	(input)	block node ptr		*/
  1   165 			/* parameter 5:	(input)	statement type		*/
  1   166 
  1   167 declare	statement_type	entry(ptr,fixed bin(15),ptr,bit(12) aligned)
  1   168 			returns(fixed bin(15));
  1   169 			/* parameter 1:	(input)	block node ptr		*/
  1   170 			/* parameter 2:	(in/out)	token index		*/
  1   171 			/* parameter 3:	(output)	label list ptr or null	*/
  1   172 			/* parameter 4:	(output)	conditions		*/
  1   173 			/* return:	(output)	statement type		*/
  1   174 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   175 
  1   176 /* END INCLUDE FILE parse.incl.pl1 */
      135 
  8     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  8     2 
  8     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  8     4 
  8     5 
  8     6 dcl	1 list		based aligned,
  8     7 	2 node_type	bit(9) unaligned,
  8     8 	2 reserved	bit(12) unaligned,
  8     9 	2 number		fixed(14) unaligned,
  8    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  8    11 
  8    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  8    13 	                    init(16383);
  8    14 
  8    15 /* END INCLUDE FILE ... list.incl.pl1 */
      136 
  9     1 dcl (	root_block		initial("000000001"b),
  9     2 	external_procedure		initial("000000010"b),
  9     3 	internal_procedure		initial("000000011"b),
  9     4 	begin_block		initial("000000100"b),
  9     5 	on_unit			initial("000000101"b))  internal static bit(9) aligned options(constant);
      137 
 10     1 dcl	1 label			based aligned,
 10     2 	2 node_type		bit(9) unaligned,
 10     3 	2 source_id		structure unaligned,
 10     4 	  3 file_number		bit(8),
 10     5 	  3 line_number		bit(14),
 10     6 	  3 statement_number	bit(5),
 10     7 	2 location		fixed(17) unaligned,
 10     8 	2 allocated		bit(1) unaligned,
 10     9 	2 dcl_type		bit(3) unaligned,
 10    10 	2 reserved		bit(29) unaligned,
 10    11 	2 array			bit(1) unaligned,
 10    12 	2 used_as_format		bit(1) unaligned,
 10    13 	2 used_in_goto		bit(1) unaligned,
 10    14 	2 symbol_table		bit(18) unaligned,
 10    15 	2 low_bound		fixed(17) unaligned,
 10    16 	2 high_bound		fixed(17) unaligned,
 10    17 	2 block_node		ptr unaligned,
 10    18 	2 token			ptr unaligned,
 10    19 	2 next			ptr unaligned,
 10    20 	2 multi_use		ptr unaligned,
 10    21 	2 cross_reference		ptr unaligned,
 10    22 	2 statement		ptr unaligned;
      138 
 11     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 11     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 11     3 /* format: style3,idind30 */
 11     4 
 11     5 declare	1 block			aligned based,
 11     6 	  2 node_type		bit (9) unaligned,
 11     7 	  2 source_id		structure unaligned,
 11     8 	    3 file_number		bit (8),
 11     9 	    3 line_number		bit (14),
 11    10 	    3 statement_number	bit (5),
 11    11 	  2 father		ptr unaligned,
 11    12 	  2 brother		ptr unaligned,
 11    13 	  2 son			ptr unaligned,
 11    14 	  2 declaration		ptr unaligned,
 11    15 	  2 end_declaration		ptr unaligned,
 11    16 	  2 default		ptr unaligned,
 11    17 	  2 end_default		ptr unaligned,
 11    18 	  2 context		ptr unaligned,
 11    19 	  2 prologue		ptr unaligned,
 11    20 	  2 end_prologue		ptr unaligned,
 11    21 	  2 main			ptr unaligned,
 11    22 	  2 end_main		ptr unaligned,
 11    23 	  2 return_values		ptr unaligned,
 11    24 	  2 return_count		ptr unaligned,
 11    25 	  2 plio_ps		ptr unaligned,
 11    26 	  2 plio_fa		ptr unaligned,
 11    27 	  2 plio_ffsb		ptr unaligned,
 11    28 	  2 plio_ssl		ptr unaligned,
 11    29 	  2 plio_fab2		ptr unaligned,
 11    30 	  2 block_type		bit (9) unaligned,
 11    31 	  2 prefix		bit (12) unaligned,
 11    32 	  2 like_attribute		bit (1) unaligned,
 11    33 	  2 no_stack		bit (1) unaligned,
 11    34 	  2 get_data		bit (1) unaligned,
 11    35 	  2 flush_at_call		bit (1) unaligned,
 11    36 	  2 processed		bit (1) unaligned,
 11    37 	  2 text_displayed		bit (1) unaligned,
 11    38 	  2 number		fixed bin (9) unsigned unaligned,
 11    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 11    40 	  2 temp_list		ptr,
 11    41 	  2 entry_list		ptr,
 11    42 	  2 o_and_s		ptr,
 11    43 	  2 why_nonquick		aligned,
 11    44 	    3 auto_adjustable_storage bit (1) unaligned,
 11    45 	    3 returns_star_extents	bit (1) unaligned,
 11    46 	    3 stack_extended_by_args	bit (1) unaligned,
 11    47 	    3 invoked_by_format	bit (1) unaligned,
 11    48 	    3 format_statement	bit (1) unaligned,
 11    49 	    3 io_statements		bit (1) unaligned,
 11    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 11    51 	    3 condition_statements	bit (1) unaligned,
 11    52 	    3 no_owner		bit (1) unaligned,
 11    53 	    3 recursive_call	bit (1) unaligned,
 11    54 	    3 options_non_quick	bit (1) unaligned,
 11    55 	    3 options_variable	bit (1) unaligned,
 11    56 	    3 never_referenced	bit (1) unaligned,
 11    57 	    3 pad_nonquick		bit (5) unaligned,
 11    58 	  2 prologue_flag		bit (1) unaligned,
 11    59 	  2 options_main		bit (1) unaligned,
 11    60 	  2 pad			bit (16) unaligned,
 11    61 	  2 number_of_entries	fixed bin (17),
 11    62 	  2 level			fixed bin (17),
 11    63 	  2 last_auto_loc		fixed bin (17),
 11    64 	  2 symbol_block		fixed bin (17),
 11    65 	  2 entry_info		fixed bin (18),
 11    66 	  2 enter			structure unaligned,
 11    67 	    3 start		fixed bin (17),
 11    68 	    3 end			fixed bin (17),
 11    69 	  2 leave			structure unaligned,
 11    70 	    3 start		fixed bin (17),
 11    71 	    3 end			fixed bin (17),
 11    72 	  2 owner			ptr;
 11    73 
 11    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 11    75 
 11    76 /* END INCLUDE FILE ... block.incl.pl1 */
      139 
 12     1 dcl (	pointer_context		initial(6),
 12     2 	area_context		initial(8),
 12     3 	file_name_context		initial(11),
 12     4 	condition_context		initial(15),
 12     5 	parameter_context		initial(20)) fixed bin(15) internal static options(constant);
      140 
 13     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 13     2 
 13     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 13     4 
 13     5 dcl (	block_node		initial("000000001"b),
 13     6 	statement_node		initial("000000010"b),
 13     7 	operator_node		initial("000000011"b),
 13     8 	reference_node		initial("000000100"b),
 13     9 	token_node		initial("000000101"b),
 13    10 	symbol_node		initial("000000110"b),
 13    11 	context_node		initial("000000111"b),
 13    12 	array_node		initial("000001000"b),
 13    13 	bound_node		initial("000001001"b),
 13    14 	format_value_node		initial("000001010"b),
 13    15 	list_node			initial("000001011"b),
 13    16 	default_node		initial("000001100"b),
 13    17 	machine_state_node		initial("000001101"b),
 13    18 	source_node		initial("000001110"b),
 13    19 	label_node		initial("000001111"b),
 13    20 	cross_reference_node	initial("000010000"b),
 13    21 	sf_par_node		initial("000010001"b),
 13    22 	temporary_node		initial("000010010"b),
 13    23 	label_array_element_node	initial("000010011"b),
 13    24 	by_name_agg_node		initial("000010100"b))
 13    25 				bit(9) internal static aligned options(constant);
 13    26 
 13    27 dcl	1 node			based aligned,
 13    28 	2 type			unal bit(9),
 13    29 	2 source_id		unal structure,
 13    30 	  3 file_number		bit(8),
 13    31 	  3 line_number		bit(14),
 13    32 	  3 statement_number	bit(5);
 13    33 
 13    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      141 
 14     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 14     2 
 14     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 14     4 
 14     5 dcl  (	by_declare	initial("001"b),
 14     6 	by_explicit_context initial("010"b),
 14     7 	by_context	initial("011"b),
 14     8 	by_implication	initial("100"b),
 14     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 14    10 
 14    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      142 
 15     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 15     2 
 15     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 15     4 
 15     5 /* format: style3 */
 15     6 dcl	1 operator	based aligned,
 15     7 	  2 node_type	bit (9) unaligned,
 15     8 	  2 op_code	bit (9) unaligned,
 15     9 	  2 shared	bit (1) unaligned,
 15    10 	  2 processed	bit (1) unaligned,
 15    11 	  2 optimized	bit (1) unaligned,
 15    12 	  2 number	fixed (14) unaligned,
 15    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 15    14 
 15    15 dcl	max_number_of_operands
 15    16 			fixed bin (15) int static options (constant) initial (32767);
 15    17 
 15    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      143 
 16     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 16     2 
 16     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 16     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 16     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 16     6 /* Modified: 26 July 82 BIM wordno, segno */
 16     7 
 16     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 16     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 16    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 16    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 16    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 16    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 16    14 
 16    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 16    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 16    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 16    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 16    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 16    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 16    21 
 16    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 16    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 16    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 16    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 16    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 16    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 16    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 16    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 16    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 16    31 
 16    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 16    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 16    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 16    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 16    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 16    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 16    38 
 16    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 16    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 16    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 16    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 16    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 16    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 16    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 16    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 16    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 16    48 
 16    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 16    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 16    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 16    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 16    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 16    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 16    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 16    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 16    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 16    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 16    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 16    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 16    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 16    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 16    63 
 16    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 16    65*						   opnd(2) <- opnd(3) / 36		*/
 16    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 16    67*						   opnd(2) <- opnd(3) / 4		*/
 16    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 16    69*						   opnd(2) <- opnd(3) / 2		*/
 16    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 16    71 
 16    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 16    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 16    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 16    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 16    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 16    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 16    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 16    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 16    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 16    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 16    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 16    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 16    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 16    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 16    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 16    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 16    88 
 16    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 16    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 16    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 16    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 16    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 16    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 16    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 16    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 16    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 16    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 16    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 16   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 16   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 16   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 16   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 16   104 
 16   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 16   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 16   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 16   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 16   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 16   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 16   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 16   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 16   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 16   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 16   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 16   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 16   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 16   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 16   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 16   120 
 16   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 16   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 16   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 16   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 16   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 16   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 16   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 16   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 16   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 16   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 16   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 16   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 16   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 16   134 
 16   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 16   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 16   137 
 16   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 16   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 16   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 16   141*						   opnd(2) is the file name
 16   142*						   opnd(3) is the block	*/
 16   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 16   144*						   opnd(2) is the file name	*/
 16   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 16   146*						   opnd(2) is the file name */
 16   147 
 16   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 16   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 16   150*						   opnd(3) is old value, (4) is new value. */
 16   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 16   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 16   153 
 16   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 16   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 16   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 16   157*						   opnd(5) is the list */
 16   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 16   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 16   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 16   161 
 16   162 	r_parn		initial("011110001"b),	/* format op code			*/
 16   163 	l_parn		initial("011110010"b),
 16   164 	r_format		initial("011110011"b),
 16   165 	c_format		initial("011110100"b),
 16   166 	f_format		initial("011110101"b),
 16   167 	e_format		initial("011110110"b),
 16   168 	b_format		initial("011110111"b),
 16   169 	a_format		initial("011111000"b),
 16   170 	x_format		initial("011111001"b),
 16   171 	skip_format	initial("011111010"b),
 16   172 	column_format	initial("011111011"b),
 16   173 	page_format	initial("011111100"b),
 16   174 	line_format	initial("011111101"b),
 16   175 	picture_format	initial("011111110"b),
 16   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 16   177 
 16   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 16   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 16   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 16   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 16   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 16   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 16   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 16   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 16   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 16   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 16   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 16   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 16   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 16   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 16   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 16   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 16   194 
 16   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 16   196 /* They are processed by the semantic translator.						*/
 16   197 
 16   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 16   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 16   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 16   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 16   202 						/* opnd(3) is skip, opnd(4) is list	*/
 16   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 16   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 16   205 						/* opnd(3) is skip,opnd(4) is line	*/
 16   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 16   207 	open_file		initial("100011001"b),
 16   208 	close_file	initial("100011010"b),
 16   209 	read_file		initial("100011011"b),
 16   210 	write_file	initial("100011100"b),
 16   211 	locate_file	initial("100011101"b),
 16   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 16   213 						/* opnd(2) is control variable ref	*/
 16   214 						/* opnd(3) is specification operator	*/
 16   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 16   216 						/* repeat opnd(4) while opnd(5)	*/
 16   217 						/* opnd(6) is next specification	*/
 16   218 
 16   219 	rewrite_file	initial("100100000"b),
 16   220 	delete_file	initial("100100001"b),
 16   221 	unlock_file	initial("100100010"b),
 16   222 	lock_file		initial("100100011"b),
 16   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 16   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 16   225 	nop		initial("100100111"b),	/* no-op */
 16   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 16   227 
 16   228 /* These operators are produced by the semantic translator in processing the math
 16   229*   builtin functions and are used as input to the code generator			*/
 16   230 
 16   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 16   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 16   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 16   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 16   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 16   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 16   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 16   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 16   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 16   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 16   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 16   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 16   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 16   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 16   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 16   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 16   247 
 16   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 16   249 
 16   250 			bit(9) aligned internal static options(constant);
 16   251 
 16   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      144 
 17     1 /* ***********************************************************
 17     2*   *                                                         *
 17     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 17     4*   *                                                         *
 17     5*   *********************************************************** */
 17     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 17     7 /* Internal interface of the PL/I compiler */
 17     8 
 17     9 dcl	1 statement		based aligned,
 17    10 	2 node_type		bit(9) unaligned,
 17    11 	2 source_id		structure unaligned,
 17    12 	  3 file_number		bit(8),
 17    13 	  3 line_number		bit(14),
 17    14 	  3 statement_number	bit(5),
 17    15 	2 next			ptr unaligned,
 17    16 	2 back			ptr unaligned,
 17    17 	2 root			ptr unaligned,
 17    18 	2 labels			ptr unaligned,
 17    19 	2 reference_list		ptr unaligned,
 17    20 	2 state_list		ptr unaligned,
 17    21 	2 reference_count		fixed(17) unaligned,
 17    22 	2 ref_count_copy		fixed(17) unaligned,
 17    23 	2 object			structure unaligned,
 17    24 	  3 start			fixed(17),
 17    25 	  3 finish		fixed(17),
 17    26 	2 source			structure unaligned,
 17    27 	  3 segment		fixed(11),
 17    28 	  3 start			fixed(23),
 17    29 	  3 length		fixed(11),
 17    30 	2 prefix			bit(12) unaligned,
 17    31 	2 optimized		bit(1) unaligned,
 17    32 	2 free_temps		bit(1) unaligned,
 17    33 	2 LHS_in_RHS		bit(1) unaligned,
 17    34 	2 statement_type		bit(9) unaligned,
 17    35 	2 bits			structure unaligned,
 17    36 	  3 processed		bit(1) unaligned,
 17    37 	  3 put_in_profile		bit(1) unaligned,
 17    38 	  3 generated		bit(1) unaligned,
 17    39 	  3 snap			bit(1) unaligned,
 17    40 	  3 system		bit(1) unaligned,
 17    41 	  3 irreducible		bit(1) unaligned,
 17    42 	  3 checked		bit(1) unaligned,
 17    43 	  3 save_temps		bit(1) unaligned,
 17    44 	  3 suppress_warnings	bit(1) unaligned,
 17    45 	  3 force_nonquick		bit(1) unaligned,
 17    46 	  3 expanded_by_name	bit(1) unaligned,
 17    47 	  3 begins_loop		bit(1) unaligned,
 17    48 	  3 pad			bit(24) unaligned;
 17    49 
 17    50 /* END INCLUDE FILE ... statement.incl.pl1 */
      145 
 18     1 	/* statement types */
 18     2 
 18     3 dcl (	unknown_statement		initial("000000000"b),
 18     4 	allocate_statement		initial("000000001"b),
 18     5 	assignment_statement	initial("000000010"b),
 18     6 	begin_statement		initial("000000011"b),
 18     7 	call_statement		initial("000000100"b),
 18     8 	close_statement		initial("000000101"b),
 18     9 	declare_statement		initial("000000110"b),
 18    10 	lock_statement		initial("000000111"b),
 18    11 	delete_statement		initial("000001000"b),
 18    12 	display_statement		initial("000001001"b),
 18    13 	do_statement		initial("000001010"b),
 18    14 	else_clause		initial("000001011"b),
 18    15 	end_statement		initial("000001100"b),
 18    16 	entry_statement		initial("000001101"b),
 18    17 	exit_statement		initial("000001110"b),
 18    18 	format_statement		initial("000001111"b),
 18    19 	free_statement		initial("000010000"b),
 18    20 	get_statement		initial("000010001"b),
 18    21 	goto_statement		initial("000010010"b),
 18    22 	if_statement		initial("000010011"b),
 18    23 	locate_statement		initial("000010100"b),
 18    24 	null_statement		initial("000010101"b),
 18    25 	on_statement		initial("000010110"b),
 18    26 	open_statement		initial("000010111"b),
 18    27 	procedure_statement 	initial("000011000"b),
 18    28 	put_statement		initial("000011001"b),
 18    29 	read_statement		initial("000011010"b),
 18    30 	return_statement		initial("000011011"b),
 18    31 	revert_statement		initial("000011100"b),
 18    32 	rewrite_statement		initial("000011101"b),
 18    33 	signal_statement		initial("000011110"b),
 18    34 	stop_statement		initial("000011111"b),
 18    35 	system_on_unit		initial("000100000"b),
 18    36 	unlock_statement		initial("000100001"b),
 18    37 	wait_statement		initial("000100010"b),
 18    38 	write_statement		initial("000100011"b),
 18    39 	default_statement		initial("000100100"b),
 18    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
      146 
 19     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 19     2 
 19     3 dcl	1 symbol			based aligned,
 19     4 	2 node_type		bit(9) unal,
 19     5 	2 source_id		structure unal,
 19     6 	  3 file_number		bit(8),
 19     7 	  3 line_number		bit(14),
 19     8 	  3 statement_number	bit(5),
 19     9 	2 location		fixed(18) unal unsigned,
 19    10 	2 allocated		bit(1) unal,
 19    11 	2 dcl_type		bit(3) unal,
 19    12 	2 reserved		bit(6) unal,
 19    13 	2 pix			unal,
 19    14 	  3 pic_fixed		bit(1) unal,
 19    15 	  3 pic_float		bit(1) unal,
 19    16 	  3 pic_char		bit(1) unal,
 19    17 	  3 pic_scale		fixed(7) unal,
 19    18 	  3 pic_size		fixed(7) unal,
 19    19 	2 level			fixed(8) unal,
 19    20 	2 boundary		fixed(3) unal,
 19    21 	2 size_units		fixed(3) unal,
 19    22 	2 scale			fixed(7) unal,
 19    23 	2 runtime			bit(18) unal,
 19    24 	2 runtime_offset		bit(18) unal,
 19    25 	2 block_node		ptr unal,
 19    26 	2 token			ptr unal,
 19    27 	2 next			ptr unal,
 19    28 	2 multi_use		ptr unal,
 19    29 	2 cross_references		ptr unal,
 19    30 	2 initial			ptr unal,
 19    31 	2 array			ptr unal,
 19    32 	2 descriptor		ptr unal,
 19    33 	2 equivalence		ptr unal,
 19    34 	2 reference		ptr unal,
 19    35 	2 general			ptr unal,
 19    36 	2 father			ptr unal,
 19    37 	2 brother			ptr unal,
 19    38 	2 son			ptr unal,
 19    39 	2 word_size		ptr unal,
 19    40 	2 bit_size		ptr unal,
 19    41 	2 dcl_size		ptr unal,
 19    42 	2 symtab_size		ptr unal,
 19    43 	2 c_word_size		fixed(24),
 19    44 	2 c_bit_size		fixed(24),
 19    45 	2 c_dcl_size		fixed(24),
 19    46 
 19    47 	2 attributes		structure aligned,
 19    48 	  3 data_type		structure unal,
 19    49 	    4 structure		bit(1) ,
 19    50 	    4 fixed		bit(1),
 19    51 	    4 float		bit(1),
 19    52 	    4 bit			bit(1),
 19    53 	    4 char		bit(1),
 19    54 	    4 ptr			bit(1),
 19    55 	    4 offset		bit(1),
 19    56 	    4 area		bit(1),
 19    57 	    4 label		bit(1),
 19    58 	    4 entry		bit(1),
 19    59 	    4 file		bit(1),
 19    60 	    4 arg_descriptor	bit(1),
 19    61 	    4 storage_block		bit(1),
 19    62 	    4 explicit_packed	bit(1), /* options(packed) */
 19    63 	    4 condition		bit(1),
 19    64 	    4 format		bit(1),
 19    65 	    4 builtin		bit(1),
 19    66 	    4 generic		bit(1),
 19    67 	    4 picture		bit(1),
 19    68 
 19    69 	  3 misc_attributes		structure unal,
 19    70 	    4 dimensioned		bit(1),
 19    71 	    4 initialed		bit(1),
 19    72 	    4 aligned		bit(1),
 19    73 	    4 unaligned		bit(1),
 19    74 	    4 signed		bit(1),
 19    75 	    4 unsigned		bit(1),
 19    76 	    4 precision		bit(1),
 19    77 	    4 varying		bit(1),
 19    78 	    4 local		bit(1),
 19    79 	    4 decimal		bit(1),
 19    80 	    4 binary		bit(1),
 19    81 	    4 real		bit(1),
 19    82 	    4 complex		bit(1),
 19    83 	    4 variable		bit(1),
 19    84 	    4 reducible		bit(1),
 19    85 	    4 irreducible		bit(1),
 19    86 	    4 returns		bit(1),
 19    87 	    4 position		bit(1),
 19    88 	    4 internal		bit(1),
 19    89 	    4 external		bit(1),
 19    90 	    4 like		bit(1),
 19    91 	    4 member		bit(1),
 19    92 	    4 non_varying		bit(1),
 19    93 	    4 options		bit(1),
 19    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 19    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 19    96 
 19    97 	  3 storage_class		structure unal,
 19    98 	    4 auto		bit(1),
 19    99 	    4 based		bit(1),
 19   100 	    4 static		bit(1),
 19   101 	    4 controlled		bit(1),
 19   102 	    4 defined		bit(1),
 19   103 	    4 parameter		bit(1),
 19   104 	    4 param_desc		bit(1),
 19   105 	    4 constant		bit(1),
 19   106 	    4 temporary		bit(1),
 19   107 	    4 return_value		bit(1),
 19   108 
 19   109 	  3 file_attributes		structure unal,
 19   110 	    4 print		bit(1),
 19   111 	    4 input		bit(1),
 19   112 	    4 output		bit(1),
 19   113 	    4 update		bit(1),
 19   114 	    4 stream		bit(1),
 19   115 	    4 reserved_1		bit(1),
 19   116 	    4 record		bit(1),
 19   117 	    4 sequential		bit(1),
 19   118 	    4 direct		bit(1),
 19   119 	    4 interactive		bit(1),		/* env(interactive) */
 19   120 	    4 reserved_2		bit(1),
 19   121 	    4 reserved_3		bit(1),
 19   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 19   123 	    4 keyed		bit(1),
 19   124 	    4 reserved_4		bit(1),
 19   125 	    4 environment		bit(1),
 19   126 
 19   127 	  3 compiler_developed	structure unal,
 19   128 	    4 aliasable		bit(1),
 19   129 	    4 packed		bit(1),
 19   130 	    4 passed_as_arg		bit(1),
 19   131 	    4 allocate		bit(1),
 19   132 	    4 set			bit(1),
 19   133 	    4 exp_extents		bit(1),
 19   134 	    4 refer_extents		bit(1),
 19   135 	    4 star_extents		bit(1),
 19   136 	    4 isub		bit(1),
 19   137 	    4 put_in_symtab		bit(1),
 19   138 	    4 contiguous		bit(1),
 19   139 	    4 put_data		bit(1),
 19   140 	    4 overlayed		bit(1),
 19   141 	    4 error		bit(1),
 19   142 	    4 symtab_processed	bit(1),
 19   143 	    4 overlayed_by_builtin	bit(1),
 19   144 	    4 defaulted		bit(1),
 19   145 	    4 connected		bit(1);
 19   146 
 19   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      147 
 20     1 dcl	pl1_stat_$token_list_ptr ptr external static;		/* pointer to token list	*/
 20     2 dcl	token_list(token_list_length) ptr based(token_list_pointer);
 20     3 dcl	token_list_pointer ptr initial(pl1_stat_$token_list_ptr);	/* for efficiency only */
 20     4 dcl	token_list_length fixed(15) internal static initial(3000) options(constant);
 20     5 
 20     6 dcl	1 pl1_stat_$statement_id	external static,
 20     7 	2 file_number		bit(8),
 20     8 	2 line_number		bit(14),
 20     9 	2 statement_number		bit(5);
 20    10 
 20    11 dcl	1 t_table 		based(token_list(k)) aligned,
 20    12 	2 node_type		bit(9) unaligned,
 20    13 	2 type			bit(9) unaligned,
 20    14 	2 loc			bit(18) unaligned,
 20    15 	2 declaration		ptr unaligned,
 20    16 	2 next			ptr unaligned,
 20    17 	2 size			fixed(9),
 20    18 	2 string			char(n refer(t_table.size));
      148 
 21     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 21     2 
 21     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 21     4 	identifier	initial("100000000"b),
 21     5 	isub		initial("010000000"b),
 21     6 	plus		initial("001000001"b),
 21     7 	minus		initial("001000010"b),
 21     8 	asterisk		initial("001000011"b),
 21     9 	slash		initial("001000100"b),
 21    10 	expon		initial("001000101"b),
 21    11 	not		initial("001000110"b),
 21    12 	and		initial("001000111"b),
 21    13 	or		initial("001001000"b),
 21    14 	cat		initial("001001001"b),
 21    15 	eq		initial("001001010"b),
 21    16 	ne		initial("001001011"b),
 21    17 	lt		initial("001001100"b),
 21    18 	gt		initial("001001101"b),
 21    19 	le		initial("001001110"b),
 21    20 	ge		initial("001001111"b),
 21    21 	ngt		initial("001010000"b),
 21    22 	nlt		initial("001010001"b),
 21    23 	assignment	initial("001010010"b),
 21    24 	colon		initial("001010011"b),
 21    25 	semi_colon	initial("001010100"b),
 21    26 	comma		initial("001010101"b),
 21    27 	period		initial("001010110"b),
 21    28 	arrow		initial("001010111"b),
 21    29 	left_parn		initial("001011000"b),
 21    30 	right_parn	initial("001011001"b),
 21    31 	percent		initial("001011100"b),
 21    32 	bit_string	initial("000100001"b),
 21    33 	char_string	initial("000100010"b),
 21    34 	bin_integer	initial("000110001"b),
 21    35 	dec_integer	initial("000110011"b),
 21    36 	fixed_bin		initial("000110000"b),
 21    37 	fixed_dec		initial("000110010"b),
 21    38 	float_bin		initial("000110100"b),
 21    39 	float_dec		initial("000110110"b),
 21    40 	i_bin_integer	initial("000111001"b),
 21    41 	i_dec_integer	initial("000111011"b),
 21    42 	i_fixed_bin	initial("000111000"b),
 21    43 	i_fixed_dec	initial("000111010"b),
 21    44 	i_float_bin	initial("000111100"b),
 21    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 21    46 
 21    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 21    48 	is_isub			initial ("010000000"b),
 21    49 	is_delimiter		initial ("001000000"b),
 21    50 	is_constant		initial ("000100000"b),
 21    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 21    52 	is_arithmetic_constant	initial ("000110000"b),
 21    53 	is_imaginary_constant	initial ("000111000"b),
 21    54 	is_float_constant		initial ("000110100"b),
 21    55 	is_decimal_constant		initial ("000110010"b),
 21    56 	is_integral_constant 	initial ("000110001"b)
 21    57 	) bit(9) internal static aligned options(constant);
 21    58 
 21    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      149 
      150 
      151 /* 		Build the IO statement  */
      152 
      153 
      154 	k=k_index+1;
      155 	stype_b9 =statement_type_par;
      156 	cur_block=father_block_par;
      157 	conditions=conditions_par;
      158 	return_flag=return_flag_par;
      159 	end_ptr_par=null;
      160 	pl1_stat_$cur_statement,
      161 	statement_ptr=create_statement(stype_b9,cur_block,entry_ptr,conditions);
      162 
      163 	if stype_b9 ^= format_statement then
      164 		if entry_ptr ^= null	/* LABEL on non-format statement */
      165 		then call declare_label(cur_block,statement_ptr,entry_ptr,by_explicit_context);
      166 		else;
      167 	else	do;			/* FORMAT STATEMENT */
      168 		t=statement_ptr->statement.labels;
      169 		statement_ptr->statement.labels=null;
      170 			do while (t^=null);
      171 			q=t->list.element(2);
      172 			if q->node.type=reference_node then call parse_error(169,null);
      173 			else	do;
      174 				q=create_symbol(cur_block,q,by_explicit_context);
      175 				q->symbol.constant,
      176 				q->symbol.format="1"b;
      177 				q->symbol.initial=statement_ptr;
      178 				end;
      179 			t=t->list.element(1);
      180 			end;
      181 
      182 		if format_list_parse(k,cur_block,statement_ptr,fnp)
      183 		then	if t_table.type^=semi_colon
      184 			then	goto err428;
      185 			else	goto ret;
      186 		else	goto error_recover;
      187 		end;
      188 
      189 
      190 	if stype_b9=get_statement
      191 	then do;
      192 		opcode=get_file;
      193 		operands=5;
      194 		iocode=7;
      195 		options_allowed_index=1;
      196 	end;				else
      197 
      198 	if stype_b9=put_statement
      199 	then do;
      200 		opcode=put_file;
      201 		operands=5;
      202 		iocode=8;
      203 		options_allowed_index=2;
      204 	end;				else /* (to make the label work)  */
      205 comma_loop:
      206 	if stype_b9=open_statement
      207 	then do;
      208 		fab2_bits="0"b;
      209 		opcode=open_file;
      210 		operands=6;
      211 		iocode=34;
      212 		options_allowed_index=8;
      213 	end;				else
      214 
      215 	if stype_b9=close_statement
      216 	then do;
      217 		opcode=close_file;
      218 		operands=3;
      219 		iocode=35;
      220 		options_allowed_index=9;
      221 	end;				else
      222 
      223 	if stype_b9=read_statement
      224 	then do;
      225 		opcode=read_file;
      226 		operands=4;
      227 		iocode=16;
      228 		options_allowed_index=3;
      229 	end;				else
      230 
      231 	if stype_b9=write_statement
      232 	then do;
      233 		opcode=write_file;
      234 		operands=4;
      235 		iocode=17;
      236 		options_allowed_index=4;
      237 	end;				else
      238 
      239 	if stype_b9=rewrite_statement
      240 	then do;
      241 		opcode=rewrite_file;
      242 		operands=4;
      243 		iocode=18;
      244 		options_allowed_index=5;
      245 	end;				else
      246 
      247 	if stype_b9=locate_statement
      248 	then do;
      249 		opcode=locate_file;
      250 		operands=5;
      251 		iocode=20;
      252 		options_allowed_index=7;
      253 
      254 		if t_table.type=identifier then
      255 			do;
      256 			locate_variable=token_list(k);
      257 			k=k+1;
      258 			end;
      259 		else goto err257;
      260 
      261 	end;				else
      262 
      263 	if stype_b9=delete_statement
      264 	then do;
      265 		opcode=delete_file;
      266 		operands=4;
      267 		iocode=19;
      268 		options_allowed_index=6;
      269 	end;				else
      270 
      271 
      272 	goto err288;
      273 
      274 /* 		Set up the statement */
      275 
      276 
      277 
      278 	statement_ptr->statement.root  ,
      279 	root_op=create_operator(opcode,operands);
      280 
      281 
      282 
      283 	get_put = stype_b9=get_statement | stype_b9=put_statement;
      284 	io_job="0"b;
      285 	substr(io_job,iocode,1)="1"b;	/* shows statement type */
      286 	io_jobs_allowed=options_allowed(options_allowed_index);
      287 
      288 	/*  */
      289 
      290 options_loop:
      291 	tstring=t_table.string;
      292 
      293 	if t_table.type=identifier
      294 	then 	do;
      295 		io_job_item="0"b;
      296 			do option_index=1 to hbound(option_keyword,1) while(tstring^=option_keyword(option_index));
      297 			end;
      298 		if option_index<=hbound(option_keyword,1)
      299 		then	do;
      300 
      301 			substr(io_job_item,plio_options(option_index),1)="1"b;
      302 			if (io_job_item & io_jobs_allowed)="0"b then go to err239;
      303 			if io_job_item & io_job then go to err247;
      304 			io_job=io_job | io_job_item;
      305 
      306 			io_jobs_allowed=io_jobs_allowed & io_jobs_forbidden(option_index);
      307 
      308 
      309 
      310 			if option_index<3
      311 			then	operand_number=2;		else
      312 
      313 			if option_index<8
      314 			then	operand_number=3;		else
      315 
      316 			if option_index<15
      317 			then	operand_number=1;
      318 
      319 			else	operand_number=4;
      320 
      321 
      322 
      323 				/*
      324*				   THIS TABLE TO BE USED BY
      325*				   IO-SEMANTICS !!!!!!!!!!!
      326*
      327*				operand(1):	copy,line,linesize,set,into,ignore,from
      328*				   operand(2):	file,string,(ref)
      329*				   operand(3):	key,keyto,keyfrom,skip,title
      330*				   operand(4):	pagesize,data_spec,locate's variable
      331*				   operand(5):	fab2_bits
      332*				   operand(last)=
      333*				   operand(operands)=io_job OR fab2_bits
      334*					*/
      335 
      336 			k=k+1;
      337 			goto option_label(label_index(option_index));
      338 			end;
      339 
      340 
      341 /*  OPEN STATEMENT  */
      342 		if stype_b9 ^= open_statement then goto err288;
      343 
      344 		tstring12=t_table.string;
      345 		do open_index=1 to hbound(open_keyword,1) while(tstring12^=open_keyword(open_index));
      346 		end;
      347 
      348 		if open_index>hbound(open_keyword,1) then goto err288;
      349 
      350 		substr(io_job_item,bit_index(open_index),1)="1"b;
      351 		if io_job_item & fab2_bits then goto err247;
      352 		fab2_bits = fab2_bits | io_job_item;
      353 		k=k+1;
      354 		if open_index=11 | open_index=12	/* environment(interactive)  */
      355 		then	do;
      356 			if pl1_stat_$check_ansi
      357 			     then call parse_error(355,token_list(k-1));
      358 			if t_table.type^=left_parn then goto err197;
      359 			k=k+1;
      360 			if t_table.string = "interactive" then substr(fab2_bits,14,1) = "1"b; 
      361 				else if t_table.string = "stringvalue" then substr(fab2_bits,17,1) = "1"b; 
      362 					else goto err197;
      363 			k=k+1;
      364 			if t_table.type^=right_parn then goto err197;
      365 			k=k+1;
      366 			end;
      367 		goto options_loop;
      368 		end;
      369 
      370 /* 		Let's get out now */
      371 
      372 
      373 
      374 	if t_table.type=semi_colon
      375 	|  t_table.type=comma
      376 	then	do;
      377 exit:		if get_put
      378 		then	if (io_job & "000111001110"b)="0"b
      379 			then	goto err254;		/* GET and PUT requires either SKIP or LINE or PAGE or DS */
      380 
      381 		if  root_op->operator.operand(2)=null	/* FILE or (REF) required for non-stream */
      382 		then	do;
      383 			if ^get_put then goto err245;
      384 			if substr(io_job,7,1)
      385 			then	root_op->operator.operand(2)=
      386 				create_token("sysin",identifier);
      387 			else	root_op->operator.operand(2)=
      388 				create_token("sysprint",identifier);
      389 			substr(io_job,1,1)="1"b;
      390 			end;
      391 
      392 
      393 		if stype_b9=write_statement & root_op->operator.operand(1)=null
      394 		then	goto err241;
      395 
      396 
      397 		if stype_b9=read_statement then
      398 			do;
      399 			if substr(io_job,24,3)="000"b then  goto err448;
      400 					/* into, set, ignore : one must appear  */
      401 			if substr(io_job,26,1) then if substr(io_job,21,2)^="00"b then goto err449;
      402 					/* ignore cannot have key or keyto */
      403 			end;
      404 
      405 		if stype_b9=locate_statement
      406 		then	root_op->operator.operand(4)=locate_variable;
      407 
      408 		if substr(io_job,1,1)	/* file context */
      409 		then	call context((root_op->operator.operand(2)),cur_block,file_name_context);
      410 		else 	if substr(io_job,2,1)
      411 			then	if io_job & "00000000111"b then goto err239;
      412 
      413 		if substr(io_job,12,1)	/* copy-file */
      414 		then	call context((root_op->operator.operand(1)),cur_block,file_name_context);
      415 
      416 		if substr(io_job,24,1)	/* set */
      417 		then	call context((root_op->operand(1)),cur_block,pointer_context);
      418 
      419 		if stype_b9=open_statement
      420 		then	root_op->operator.operand(5)=create_token(char(fab2_bits,36)||"b",bit_string);
      421 
      422 		root_op->operator.operand(operands)=
      423 		create_token(char(io_job,36)||"b",bit_string);
      424 
      425 		if t_table.type=comma
      426 		then	do;
      427 			if stype_b9^=open_statement
      428 			then if stype_b9^=close_statement
      429 			      then goto err288;
      430 	
      431 			pl1_stat_$cur_statement,
      432 			statement_ptr=create_statement(stype_b9,cur_block,null,conditions);
      433 			k=k+1;
      434 			goto comma_loop;
      435 			end;
      436 
      437 
      438 
      439 		go to ret;
      440 
      441 
      442 
      443 		end;
      444 	go to err1;	/* mysterious token */
      445 
      446 			/*      */
      447 
      448 option_label(1):
      449 
      450 	if t_table.type^=left_parn
      451 	then do;
      452 		if option_index ^=8 /* copy */ then go to err237;
      453 		root_op->operator.operand(1)=create_token("sysprint",identifier);
      454 		goto options_loop;
      455 	end;
      456 
      457 
      458 
      459 	k=k+1;
      460 	arg = reference_parse(k,cur_block);
      461 	if arg = null then go to err240;
      462 
      463 	goto attach_arg;
      464 
      465 option_label(2):
      466 
      467 	if t_table.type^=left_parn
      468 	then do;
      469 		if option_index^=3			/*   skip   */
      470 		then goto err237;
      471 
      472 		goto option_label(3);
      473 	end;
      474 
      475 	k=k+1;
      476 	arg = expression_parse(k,cur_block);
      477 	if arg = null then go to err290;
      478 
      479 	goto attach_arg;
      480 
      481 option_label(3):
      482 
      483 ck_labels:
      484 	if option_index=2 then		/* string option adjustments */
      485 
      486 		do;
      487 		if stype_b9=put_statement & root_op->operator.operand(2)->node.type=operator_node
      488 		then goto err243;
      489 	
      490 		if stype_b9=get_statement
      491 		then	root_op->operator.op_code=get_string;
      492 		else	root_op->operator.op_code=put_string;
      493 		end;
      494 
      495 	goto options_loop;
      496 
      497 			/*      */
      498 
      499 attach_arg:
      500 	root_op->operator.operand(operand_number)=arg;
      501 
      502 locate_right_parn:
      503 	if t_table.type^=right_parn then goto err238;
      504 
      505 	k=k+1;
      506 	goto ck_labels;
      507 
      508 option_label(4):
      509 	k=k-1;
      510 	if ^get_put then goto err289;
      511 		data_index=1+8*(option_index-17);	/* for historical reasons */
      512 
      513 	if stype_b9=get_statement
      514 	then	if data_index=1
      515 		then	opcode=get_list_trans;	else
      516 
      517 		if data_index=9
      518 		then	opcode=get_data_trans;
      519 
      520 		else	opcode=get_edit_trans;
      521 
      522 	else	if data_index=1
      523 		then	opcode=put_list_trans;	else
      524 
      525 		if data_index=9
      526 		then	opcode=put_data_trans;	else
      527 
      528 		if data_index=17
      529 		then	opcode=put_edit_trans;
      530 
      531 		else	goto err288;
      532 
      533 	k=k+1;
      534 
      535 	if data_index=9 & t_table.type^=left_parn
      536 	then do;
      537 		root_op->operator.operand(4)=create_operator(opcode,2);
      538 		goto options_loop;
      539 	end;
      540 
      541 edit_loop:
      542 	if ^data_list_parse(k,cur_block,dp) then goto error_recover;
      543 	if dp->operator.op_code=do_fun then goto err293;
      544 
      545 	if data_index<17
      546 	then do;
      547 		dpt=create_operator(opcode,2);
      548 		dpt->operator.operand(1)=dp;
      549 
      550 		root_op->operator.operand(4)=dpt;
      551 	end;
      552 	else do;
      553 		if ^format_list_parse(k,cur_block,(null),fnp) then goto error_recover;
      554 
      555 		dpt=create_operator(opcode,3);
      556 		dpt->operator.operand(1)=dp;
      557 		dpt->operator.operand(2)=fnp;
      558 
      559 		if previous_edit_ptr^=null
      560 		then	previous_edit_ptr->operator.operand(3)=dpt;
      561 		else	root_op->operator.operand(4)=dpt;
      562 
      563 		previous_edit_ptr=dpt;
      564 		if t_table.type=left_parn then goto edit_loop;
      565 	end;
      566 
      567 	goto options_loop;
      568 
      569 
      570 
      571 			/*      */
      572 
      573 err1:
      574 	error_number=1;
      575 	goto err_list;
      576 
      577 err197:
      578 	error_number=197;
      579 	goto err;
      580 
      581 err237:
      582 	error_number=237;
      583 	goto err_list;
      584 
      585 err238:
      586 	error_number=238;
      587 	goto err_list;
      588 
      589 err239:
      590 	error_number=239;
      591 	goto err;
      592 
      593 err240:
      594 	error_number=240;
      595 	goto err_list;
      596 
      597 err241:
      598 	error_number=241;
      599 	goto err;
      600 
      601 err243:
      602 	error_number=243;
      603 	goto err;
      604 
      605 err245:
      606 	error_number=245;
      607 	goto err;
      608 
      609 err247:
      610 	error_number=247;
      611 	goto err;
      612 
      613 err254:
      614 	error_number=254;
      615 	goto err;
      616 
      617 err257:
      618 	error_number=257;
      619 	goto err;
      620 
      621 err288:
      622 	call parse_error(288,token_list(k));
      623 	k=k+1;
      624 	goto options_loop;
      625 
      626 err289:
      627 	error_number=289;
      628 	goto err;
      629 
      630 err290:
      631 	error_number=290;
      632 	errp=arg;
      633 	goto err_list;
      634 
      635 err293:
      636 	error_number=293;
      637 	goto err;
      638 
      639 err428:
      640 	error_number=428;
      641 	errp=null;
      642 	goto err;
      643 
      644 err448:
      645 	error_number=448;
      646 	goto err;
      647 
      648 err449:
      649 	error_number=449;
      650 	goto err;
      651 
      652 
      653 err_list:
      654 	errp=token_list(k);
      655 
      656 err:
      657 	call parse_error(error_number,errp);
      658 
      659 error_recover:
      660 	statement_ptr->statement.statement_type=null_statement;
      661 	statement_ptr->statement.root=null;
      662 
      663 
      664 
      665 ret:
      666 	return;
      667 
      668 
      669 	end io_statement_parse;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/24/92  1102.4  io_statement_parse.pl1            >spec>install>MR12.5-1011>io_statement_parse.pl1
135          1    04/24/92  1056.9  parse.incl.pl1                    >spec>install>MR12.5-1011>parse.incl.pl1
1-175        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
136          8    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
137          9    05/03/76  1420.8  block_types.incl.pl1              >ldd>incl>block_types.incl.pl1
138         10    05/06/74  1842.1  label.incl.pl1                    >ldd>incl>label.incl.pl1
139         11    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
140         12    05/03/76  1420.8  context_codes.incl.pl1            >ldd>incl>context_codes.incl.pl1
141         13    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
142         14    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
143         15    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
144         16    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
145         17    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
146         18    05/03/76  1420.4  statement_types.incl.pl1          >ldd>incl>statement_types.incl.pl1
147         19    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
148         20    09/14/77  1805.7  token_list.incl.pl1               >ldd>incl>token_list.incl.pl1
149         21    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg                             000112 automatic       pointer                  dcl 36 set ref 460* 461 476* 477 499 632
attributes               31            based           structure                level 2 dcl 19-3
bit_index                       000031 constant        fixed bin(15,0)          initial array dcl 126 ref 350
bit_string                      000004 constant        bit(9)                   initial dcl 21-3 set ref 419* 422*
by_explicit_context             000005 constant        bit(3)                   initial dcl 14-5 set ref 163* 174*
char                                                   builtin function         dcl 31 ref 419 422
close_file                             constant        bit(9)                   initial dcl 16-8 ref 217
close_statement                        constant        bit(9)                   initial dcl 18-3 ref 213 427
comma                                  constant        bit(9)                   initial dcl 21-3 ref 374 425
conditions                      000111 automatic       bit(12)                  dcl 21 set ref 157* 160* 431*
conditions_par                         parameter       bit(12)                  dcl 21 ref 11 157
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref
                                                                                  175*
context                         000014 constant        entry                    external dcl 1-17 ref 408 413 416
create_operator                 000030 constant        entry                    external dcl 2-152 ref 278 537 547 555
create_statement                000032 constant        entry                    external dcl 2-163 ref 160 431
create_symbol                   000034 constant        entry                    external dcl 2-184 ref 174
create_token                    000036 constant        entry                    external dcl 2-191 ref 384 387 419 422 453
cur_block                       000114 automatic       pointer                  dcl 36 set ref 156* 160* 163* 174* 182* 408* 413*
                                                                                  416* 431* 460* 476* 541* 553*
data_index                      000142 automatic       fixed bin(15,0)          dcl 36 set ref 511* 513 515 522 523 526 535 545
data_list_parse                 000016 constant        entry                    external dcl 1-22 ref 541
data_type                31            based           structure                level 3 packed packed unaligned dcl 19-3
declare_label                   000020 constant        entry                    external dcl 1-29 ref 163
delete_file                            constant        bit(9)                   initial dcl 16-8 ref 265
delete_statement                       constant        bit(9)                   initial dcl 18-3 ref 261
do_fun                                 constant        bit(9)                   initial dcl 16-8 ref 543
dp                              000116 automatic       pointer                  dcl 36 set ref 541* 543 548 556
dpt                             000124 automatic       pointer                  initial dcl 36 set ref 36* 547* 548 550 555* 556 557
                                                                                  559 561 563
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 8-6 ref
                                                                                  171 179
end_ptr_par                            parameter       pointer                  dcl 21 set ref 11 159*
entry_ptr                              parameter       pointer                  dcl 36 set ref 11 160* 163 163*
error_number                    000136 automatic       fixed bin(15,0)          dcl 36 set ref 573* 577* 581* 585* 589* 593* 597*
                                                                                  601* 605* 609* 613* 617* 626* 630* 635* 639* 644*
                                                                                  648* 656*
errp                            000126 automatic       pointer                  initial dcl 36 set ref 36* 632* 641* 653* 656*
expression_parse                000022 constant        entry                    external dcl 1-73 ref 476
fab2_bits                       000150 automatic       bit(36)                  dcl 36 set ref 208* 351 352* 352 360* 361* 419
father_block_par                       parameter       pointer                  dcl 21 ref 11 156
file_name_context               000241 constant        fixed bin(15,0)          initial dcl 12-1 set ref 408* 413*
fnp                             000120 automatic       pointer                  dcl 36 set ref 182* 553* 557
format                   31(15)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref
                                                                                  175*
format_list_parse               000024 constant        entry                    external dcl 1-79 ref 182 553
format_statement                       constant        bit(9)                   initial dcl 18-3 ref 163
get_data_trans                         constant        bit(9)                   initial dcl 16-8 ref 515
get_edit_trans                         constant        bit(9)                   initial dcl 16-8 ref 520
get_file                               constant        bit(9)                   initial dcl 16-8 ref 192
get_list_trans                         constant        bit(9)                   initial dcl 16-8 ref 513
get_put                         000145 automatic       bit(1)                   dcl 36 set ref 283* 377 383 510
get_statement                          constant        bit(9)                   initial dcl 18-3 ref 190 283 490 513
get_string                             constant        bit(9)                   initial dcl 16-8 ref 490
hbound                                                 builtin function         dcl 31 ref 296 298 345 348
identifier                      000242 constant        bit(9)                   initial dcl 21-3 set ref 254 293 384* 387* 453*
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 19-3 set ref
                                                                                  177*
io_job                          000151 automatic       bit(36)                  dcl 36 set ref 284* 285* 303 304* 304 377 384 389*
                                                                                  399 401 401 408 410 410 413 416 422
io_job_item                     000152 automatic       bit(36)                  dcl 36 set ref 295* 301* 302 303 304 350* 351 352
io_jobs_allowed                 000153 automatic       bit(36)                  dcl 36 set ref 286* 302 306* 306
io_jobs_forbidden               000111 constant        bit(36)                  initial array dcl 91 ref 306
iocode                          000135 automatic       fixed bin(15,0)          dcl 36 set ref 194* 202* 211* 219* 227* 235* 243*
                                                                                  251* 267* 285
k                               000137 automatic       fixed bin(15,0)          dcl 36 set ref 154* 182* 182 254 256 257* 257 290
                                                                                  293 336* 336 344 353* 353 356 358 359* 359 360 361
                                                                                  363* 363 364 365* 365 374 374 425 433* 433 448
                                                                                  459* 459 460* 465 475* 475 476* 502 505* 505 508*
                                                                                  508 533* 533 535 541* 553* 564 621 623* 623 653
k_index                                parameter       fixed bin(15,0)          dcl 21 ref 11 154
label_index                     000006 constant        fixed bin(15,0)          initial array dcl 129 ref 337
labels                    4            based           pointer                  level 2 packed packed unaligned dcl 17-9 set ref 168
                                                                                  169*
left_parn                              constant        bit(9)                   initial dcl 21-3 ref 358 448 465 535 564
list                                   based           structure                level 1 dcl 8-6
locate_file                            constant        bit(9)                   initial dcl 16-8 ref 249
locate_statement                       constant        bit(9)                   initial dcl 18-3 ref 245 405
locate_variable                 000130 automatic       pointer                  initial dcl 36 set ref 36* 256* 405
node                                   based           structure                level 1 dcl 13-27
null                                                   builtin function         dcl 31 ref 36 36 36 36 159 163 169 170 172 172 381
                                                                                  393 431 431 461 477 553 559 641 661
null_statement                         constant        bit(9)                   initial dcl 18-3 ref 659
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 15-6 set ref
                                                                                  490* 492* 543
opcode                          000147 automatic       bit(9)                   dcl 36 set ref 192* 200* 209* 217* 225* 233* 241*
                                                                                  249* 265* 278* 513* 515* 520* 522* 523* 526* 537*
                                                                                  547* 555*
open_file                              constant        bit(9)                   initial dcl 16-8 ref 209
open_index                      000140 automatic       fixed bin(15,0)          dcl 36 set ref 345* 345* 348 350 354 354
open_keyword                    000045 constant        char(12)                 initial array dcl 121 ref 345 345 348
open_statement                         constant        bit(9)                   initial dcl 18-3 ref 204 342 419 427
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 15-6 set
                                                                                  ref 381 384* 387* 393 405* 408 413 416 419* 422*
                                                                                  453* 487 499* 537* 548* 550* 556* 557* 559* 561*
operand_number                  000141 automatic       fixed bin(15,0)          dcl 36 set ref 310* 311* 314* 319* 499
operands                        000143 automatic       fixed bin(15,0)          dcl 36 set ref 193* 201* 210* 218* 226* 234* 242*
                                                                                  250* 266* 278* 422
operator                               based           structure                level 1 dcl 15-6
operator_node                          constant        bit(9)                   initial dcl 13-5 ref 487
option_index                    000144 automatic       fixed bin(15,0)          dcl 36 set ref 296* 296* 298 301 306 310 311 314 337
                                                                                  452 469 481 511
option_keyword                  000170 constant        char(8)                  initial array dcl 55 ref 296 296 298
options_allowed                 000134 constant        bit(36)                  initial array dcl 79 ref 286
options_allowed_index           000134 automatic       fixed bin(15,0)          dcl 36 set ref 195* 203* 212* 220* 228* 236* 244*
                                                                                  252* 268* 286
parse_error                     000040 constant        entry                    external dcl 2-364 ref 172 356 621 656
pl1_stat_$check_ansi            000012 external static bit(1)                   dcl 35 ref 356
pl1_stat_$cur_statement         000010 external static pointer                  dcl 34 set ref 160* 431*
pl1_stat_$token_list_ptr        000042 external static pointer                  dcl 20-1 ref 20-3
plio_options                    000145 constant        fixed bin(15,0)          initial array dcl 62 ref 301
pointer_context                 000250 constant        fixed bin(15,0)          initial dcl 12-1 set ref 416*
previous_edit_ptr               000132 automatic       pointer                  initial dcl 36 set ref 36* 559 559 563*
put_data_trans                         constant        bit(9)                   initial dcl 16-8 ref 523
put_edit_trans                         constant        bit(9)                   initial dcl 16-8 ref 526
put_file                               constant        bit(9)                   initial dcl 16-8 ref 200
put_list_trans                         constant        bit(9)                   initial dcl 16-8 ref 522
put_statement                          constant        bit(9)                   initial dcl 18-3 ref 196 283 487
put_string                             constant        bit(9)                   initial dcl 16-8 ref 492
q                               000106 automatic       pointer                  dcl 21 set ref 171* 172 174* 174* 175 175 177
read_file                              constant        bit(9)                   initial dcl 16-8 ref 225
read_statement                         constant        bit(9)                   initial dcl 18-3 ref 221 397
reference_node                         constant        bit(9)                   initial dcl 13-5 ref 172
reference_parse                 000026 constant        entry                    external dcl 1-150 ref 460
return_flag                     000110 automatic       bit(1)                   dcl 21 set ref 158*
return_flag_par                        parameter       bit(1)                   dcl 21 ref 11 158
rewrite_file                           constant        bit(9)                   initial dcl 16-8 ref 241
rewrite_statement                      constant        bit(9)                   initial dcl 18-3 ref 237
right_parn                             constant        bit(9)                   initial dcl 21-3 ref 364 502
root                      3            based           pointer                  level 2 packed packed unaligned dcl 17-9 set ref
                                                                                  278* 661*
root_op                         000122 automatic       pointer                  dcl 36 set ref 278* 381 384 387 393 405 408 413 416
                                                                                  419 422 453 487 490 492 499 537 550 561
semi_colon                             constant        bit(9)                   initial dcl 21-3 ref 182 374
size                      3            based           fixed bin(9,0)           level 2 dcl 20-11 ref 290 344 360 361
statement                              based           structure                level 1 dcl 17-9
statement_ptr                   000100 automatic       pointer                  dcl 21 set ref 160* 163* 168 169 177 182* 278 431*
                                                                                  659 661
statement_type           12(27)        based           bit(9)                   level 2 packed packed unaligned dcl 17-9 set ref
                                                                                  659*
statement_type_par                     parameter       bit(9)                   dcl 21 ref 11 155
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 19-3
string                    4            based           char                     level 2 dcl 20-11 ref 290 344 360 361
stype_b9                        000102 automatic       bit(9)                   dcl 21 set ref 155* 160* 163 190 196 204 213 221 229
                                                                                  237 245 261 283 283 342 393 397 405 419 427 427
                                                                                  431* 487 490 513
substr                                                 builtin function         dcl 31 set ref 285* 301* 350* 360* 361* 384 389* 399
                                                                                  401 401 408 410 413 416
symbol                                 based           structure                level 1 dcl 19-3
t                               000104 automatic       pointer                  dcl 21 set ref 168* 170 171 179* 179
t_table                                based           structure                level 1 dcl 20-11
token_list                             based           pointer                  array dcl 20-2 set ref 182 254 256 290 293 344 356*
                                                                                  358 360 361 364 374 374 425 448 465 502 535 564
                                                                                  621* 653
token_list_pointer              000162 automatic       pointer                  initial dcl 20-3 set ref 182 254 256 290 293 344 356
                                                                                  358 360 361 364 374 374 425 448 465 502 535 564
                                                                                  621 653 20-3*
try_else                        000146 automatic       bit(1)                   initial dcl 36 set ref 36*
tstring                         000160 automatic       char(8)                  dcl 36 set ref 290* 296
tstring12                       000154 automatic       char(12)                 dcl 36 set ref 344* 345
type                      0(09)        based           bit(9)                   level 2 in structure "t_table" packed packed
                                                                                  unaligned dcl 20-11 in procedure
                                                                                  "io_statement_parse" ref 182 254 293 358 364 374
                                                                                  374 425 448 465 502 535 564
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 13-27 in procedure "io_statement_parse" ref
                                                                                  172 487
write_file                             constant        bit(9)                   initial dcl 16-8 ref 233
write_statement                        constant        bit(9)                   initial dcl 18-3 ref 229 393

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 16-8
abs_fun                                internal static bit(9)                   initial dcl 16-8
acos_fun                               internal static bit(9)                   initial dcl 16-8
acosd_fun                              internal static bit(9)                   initial dcl 16-8
action_index                           internal static fixed bin(15,0)          initial array dcl 51
add                                    internal static bit(9)                   initial dcl 16-8
addbitno_fun                           internal static bit(9)                   initial dcl 16-8
addcharno_fun                          internal static bit(9)                   initial dcl 16-8
addr                                                   builtin function         dcl 31
addr_fun                               internal static bit(9)                   initial dcl 16-8
addr_fun_bits                          internal static bit(9)                   initial dcl 16-8
addrel_fun                             internal static bit(9)                   initial dcl 16-8
adjust_count                    000000 constant        entry                    external dcl 2-20
allocate_statement                     internal static bit(9)                   initial dcl 18-3
allocation_fun                         internal static bit(9)                   initial dcl 16-8
allot_auto                             internal static bit(9)                   initial dcl 16-8
allot_based                            internal static bit(9)                   initial dcl 16-8
allot_ctl                              internal static bit(9)                   initial dcl 16-8
allot_var                              internal static bit(9)                   initial dcl 16-8
and                                    internal static bit(9)                   initial dcl 21-3
and_bits                               internal static bit(9)                   initial dcl 16-8
area_context                           internal static fixed bin(15,0)          initial dcl 12-1
array_node                             internal static bit(9)                   initial dcl 13-5
arrow                                  internal static bit(9)                   initial dcl 21-3
asin_fun                               internal static bit(9)                   initial dcl 16-8
asind_fun                              internal static bit(9)                   initial dcl 16-8
assign                                 internal static bit(9)                   initial dcl 16-8
assign_by_name                         internal static bit(9)                   initial dcl 16-8
assign_round                           internal static bit(9)                   initial dcl 16-8
assign_size_ck                         internal static bit(9)                   initial dcl 16-8
assign_zero                            internal static bit(9)                   initial dcl 16-8
assignment                             internal static bit(9)                   initial dcl 21-3
assignment_statement                   internal static bit(9)                   initial dcl 18-3
asterisk                               internal static bit(9)                   initial dcl 21-3
atan_fun                               internal static bit(9)                   initial dcl 16-8
atand_fun                              internal static bit(9)                   initial dcl 16-8
attribute_parse                 000000 constant        entry                    external dcl 1-11
b_format                               internal static bit(9)                   initial dcl 16-8
baseno_fun                             internal static bit(9)                   initial dcl 16-8
baseptr_fun                            internal static bit(9)                   initial dcl 16-8
begin_block                            internal static bit(9)                   initial dcl 9-1
begin_statement                        internal static bit(9)                   initial dcl 18-3
bin_integer                            internal static bit(9)                   initial dcl 21-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit                                                    builtin function         dcl 31
bit_pointer                            internal static bit(9)                   initial dcl 16-8
bit_to_char                            internal static bit(9)                   initial dcl 16-8
bit_to_word                            internal static bit(9)                   initial dcl 16-8
bitno_fun                              internal static bit(9)                   initial dcl 16-8
block                                  based           structure                level 1 dcl 11-5
block_node                             internal static bit(9)                   initial dcl 13-5
bn_format                              internal static bit(9)                   initial dcl 16-8
bool_fun                               internal static bit(9)                   initial dcl 16-8
bound_ck                               internal static bit(9)                   initial dcl 16-8
bound_node                             internal static bit(9)                   initial dcl 13-5
by_compiler                            internal static bit(3)                   initial dcl 14-5
by_context                             internal static bit(3)                   initial dcl 14-5
by_declare                             internal static bit(3)                   initial dcl 14-5
by_implication                         internal static bit(3)                   initial dcl 14-5
by_name_agg_node                       internal static bit(9)                   initial dcl 13-5
byte_fun                               internal static bit(9)                   initial dcl 16-8
c_format                               internal static bit(9)                   initial dcl 16-8
call_statement                         internal static bit(9)                   initial dcl 18-3
cat                                    internal static bit(9)                   initial dcl 21-3
cat_string                             internal static bit(9)                   initial dcl 16-8
ceil_fun                               internal static bit(9)                   initial dcl 16-8
char_string                            internal static bit(9)                   initial dcl 21-3
char_to_word                           internal static bit(9)                   initial dcl 16-8
charno_fun                             internal static bit(9)                   initial dcl 16-8
clock_fun                              internal static bit(9)                   initial dcl 16-8
codeptr_fun                            internal static bit(9)                   initial dcl 16-8
colon                                  internal static bit(9)                   initial dcl 21-3
column_format                          internal static bit(9)                   initial dcl 16-8
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 16-8
condition_context                      internal static fixed bin(15,0)          initial dcl 12-1
conjg_fun                              internal static bit(9)                   initial dcl 16-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 13-5
continue_statement                     internal static bit(9)                   initial dcl 18-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 16-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 16-8
cos_fun                                internal static bit(9)                   initial dcl 16-8
cosd_fun                               internal static bit(9)                   initial dcl 16-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_reference                000000 constant        entry                    external dcl 2-158
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 13-5
dec_integer                            internal static bit(9)                   initial dcl 21-3
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_parse                   000000 constant        entry                    external dcl 1-35
declare_parse$abort             000000 constant        entry                    external dcl 1-40
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_statement                      internal static bit(9)                   initial dcl 18-3
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_node                           internal static bit(9)                   initial dcl 13-5
default_parse                   000000 constant        entry                    external dcl 1-44
default_statement                      internal static bit(9)                   initial dcl 18-3
desc_size                              internal static bit(9)                   initial dcl 16-8
descriptor_parse                000000 constant        entry                    external dcl 1-49
digit_to_bit                           internal static bit(9)                   initial dcl 16-8
display_statement                      internal static bit(9)                   initial dcl 18-3
div                                    internal static bit(9)                   initial dcl 16-8
do_parse                        000000 constant        entry                    external dcl 1-56
do_spec                                internal static bit(9)                   initial dcl 16-8
do_statement                           internal static bit(9)                   initial dcl 18-3
e_format                               internal static bit(9)                   initial dcl 16-8
else_clause                            internal static bit(9)                   initial dcl 18-3
empty_area                             internal static bit(9)                   initial dcl 16-8
enable_on                              internal static bit(9)                   initial dcl 16-8
end_ptr                                automatic       pointer                  dcl 21
end_statement                          internal static bit(9)                   initial dcl 18-3
entry_statement                        internal static bit(9)                   initial dcl 18-3
environmentptr_fun                     internal static bit(9)                   initial dcl 16-8
eq                                     internal static bit(9)                   initial dcl 21-3
equal                                  internal static bit(9)                   initial dcl 16-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
evaluate                        000000 constant        entry                    external dcl 1-67
ex_prologue                            internal static bit(9)                   initial dcl 16-8
exit_statement                         internal static bit(9)                   initial dcl 18-3
exp                                    internal static bit(9)                   initial dcl 16-8
exp_fun                                internal static bit(9)                   initial dcl 16-8
expon                                  internal static bit(9)                   initial dcl 21-3
external_procedure                     internal static bit(9)                   initial dcl 9-1
f_format                               internal static bit(9)                   initial dcl 16-8
fixed                                                  builtin function         dcl 31
fixed_bin                              internal static bit(9)                   initial dcl 21-3
fixed_dec                              internal static bit(9)                   initial dcl 21-3
float_bin                              internal static bit(9)                   initial dcl 21-3
float_dec                              internal static bit(9)                   initial dcl 21-3
floor_fun                              internal static bit(9)                   initial dcl 16-8
format_value_node                      internal static bit(9)                   initial dcl 13-5
fortran_read                           internal static bit(9)                   initial dcl 16-8
fortran_write                          internal static bit(9)                   initial dcl 16-8
free_based                             internal static bit(9)                   initial dcl 16-8
free_ctl                               internal static bit(9)                   initial dcl 16-8
free_node                       000000 constant        entry                    external dcl 2-345
free_statement                         internal static bit(9)                   initial dcl 18-3
free_var                               internal static bit(9)                   initial dcl 16-8
ftn_file_manip                         internal static bit(9)                   initial dcl 16-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 16-8
ge                                     internal static bit(9)                   initial dcl 21-3
get_array_size                  000000 constant        entry                    external dcl 2-348
get_size                        000000 constant        entry                    external dcl 2-352
goto_statement                         internal static bit(9)                   initial dcl 18-3
greater_or_equal                       internal static bit(9)                   initial dcl 16-8
greater_than                           internal static bit(9)                   initial dcl 16-8
gt                                     internal static bit(9)                   initial dcl 21-3
half_to_word                           internal static bit(9)                   initial dcl 16-8
i                                      automatic       fixed bin(15,0)          dcl 36
i_bin_integer                          internal static bit(9)                   initial dcl 21-3
i_dec_integer                          internal static bit(9)                   initial dcl 21-3
i_fixed_bin                            internal static bit(9)                   initial dcl 21-3
i_fixed_dec                            internal static bit(9)                   initial dcl 21-3
i_float_bin                            internal static bit(9)                   initial dcl 21-3
i_float_dec                            internal static bit(9)                   initial dcl 21-3
if_parse                        000000 constant        entry                    external dcl 1-87
if_statement                           internal static bit(9)                   initial dcl 18-3
imag_fun                               internal static bit(9)                   initial dcl 16-8
index_after_fun                        internal static bit(9)                   initial dcl 16-8
index_before_fun                       internal static bit(9)                   initial dcl 16-8
index_fun                              internal static bit(9)                   initial dcl 16-8
index_rev_fun                          internal static bit(9)                   initial dcl 16-8
internal_procedure                     internal static bit(9)                   initial dcl 9-1
io_statement_parse              000000 constant        entry                    external dcl 1-96
is_arith_constant                      internal static bit(9)                   initial dcl 21-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 21-47
is_constant                            internal static bit(9)                   initial dcl 21-47
is_decimal_constant                    internal static bit(9)                   initial dcl 21-47
is_delimiter                           internal static bit(9)                   initial dcl 21-47
is_float_constant                      internal static bit(9)                   initial dcl 21-47
is_identifier                          internal static bit(9)                   initial dcl 21-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 21-47
is_integral_constant                   internal static bit(9)                   initial dcl 21-47
is_isub                                internal static bit(9)                   initial dcl 21-47
isub                                   internal static bit(9)                   initial dcl 21-3
join                                   internal static bit(9)                   initial dcl 16-8
jump                                   internal static bit(9)                   initial dcl 16-8
jump_false                             internal static bit(9)                   initial dcl 16-8
jump_if_eq                             internal static bit(9)                   initial dcl 16-8
jump_if_ge                             internal static bit(9)                   initial dcl 16-8
jump_if_gt                             internal static bit(9)                   initial dcl 16-8
jump_if_le                             internal static bit(9)                   initial dcl 16-8
jump_if_lt                             internal static bit(9)                   initial dcl 16-8
jump_if_ne                             internal static bit(9)                   initial dcl 16-8
jump_true                              internal static bit(9)                   initial dcl 16-8
l_parn                                 internal static bit(9)                   initial dcl 16-8
label                                  based           structure                level 1 dcl 10-1
label_array_element_node               internal static bit(9)                   initial dcl 13-5
label_node                             internal static bit(9)                   initial dcl 13-5
label_ptr                              automatic       pointer                  dcl 21
le                                     internal static bit(9)                   initial dcl 21-3
length_fun                             internal static bit(9)                   initial dcl 16-8
less_or_equal                          internal static bit(9)                   initial dcl 16-8
less_than                              internal static bit(9)                   initial dcl 16-8
lex                             000000 constant        entry                    external dcl 1-106
lex$initialize_lex              000000 constant        entry                    external dcl 1-112
lex$write_last_line             000000 constant        entry                    external dcl 1-109
line_format                            internal static bit(9)                   initial dcl 16-8
list_node                              internal static bit(9)                   initial dcl 13-5
loc                                    automatic       pointer                  dcl 21
lock_file                              internal static bit(9)                   initial dcl 16-8
lock_fun                               internal static bit(9)                   initial dcl 16-8
lock_statement                         internal static bit(9)                   initial dcl 18-3
log10_fun                              internal static bit(9)                   initial dcl 16-8
log2_fun                               internal static bit(9)                   initial dcl 16-8
log_fun                                internal static bit(9)                   initial dcl 16-8
loop                                   internal static bit(9)                   initial dcl 16-8
lt                                     internal static bit(9)                   initial dcl 21-3
machine_state_node                     internal static bit(9)                   initial dcl 13-5
make_desc                              internal static bit(9)                   initial dcl 16-8
max_block_number                       internal static fixed bin(17,0)          initial dcl 11-74
max_fun                                internal static bit(9)                   initial dcl 16-8
max_list_elements                      internal static fixed bin(17,0)          initial dcl 8-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 15-15
merge_attributes                000000 constant        entry                    external dcl 2-355
min_fun                                internal static bit(9)                   initial dcl 16-8
minus                                  internal static bit(9)                   initial dcl 21-3
mod_bit                                internal static bit(9)                   initial dcl 16-8
mod_byte                               internal static bit(9)                   initial dcl 16-8
mod_fun                                internal static bit(9)                   initial dcl 16-8
mod_half                               internal static bit(9)                   initial dcl 16-8
mod_word                               internal static bit(9)                   initial dcl 16-8
mult                                   internal static bit(9)                   initial dcl 16-8
n                                      automatic       fixed bin(15,0)          dcl 36
ne                                     internal static bit(9)                   initial dcl 21-3
negate                                 internal static bit(9)                   initial dcl 16-8
ngt                                    internal static bit(9)                   initial dcl 21-3
nlt                                    internal static bit(9)                   initial dcl 21-3
no_token                               internal static bit(9)                   initial dcl 21-3
nop                                    internal static bit(9)                   initial dcl 16-8
not                                    internal static bit(9)                   initial dcl 21-3
not_bits                               internal static bit(9)                   initial dcl 16-8
not_equal                              internal static bit(9)                   initial dcl 16-8
off_fun                                internal static bit(9)                   initial dcl 16-8
on_parse                        000000 constant        entry                    external dcl 1-116
on_parse$revert                 000000 constant        entry                    external dcl 1-123
on_statement                           internal static bit(9)                   initial dcl 18-3
on_unit                                internal static bit(9)                   initial dcl 9-1
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 21-3
or_bits                                internal static bit(9)                   initial dcl 16-8
pack                                   internal static bit(9)                   initial dcl 16-8
page_format                            internal static bit(9)                   initial dcl 16-8
param_desc_ptr                         internal static bit(9)                   initial dcl 16-8
param_ptr                              internal static bit(9)                   initial dcl 16-8
parameter_context                      internal static fixed bin(15,0)          initial dcl 12-1
parse                           000000 constant        entry                    external dcl 1-128
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 21-3
period                                 internal static bit(9)                   initial dcl 21-3
picture_format                         internal static bit(9)                   initial dcl 16-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 16-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
pl1_stat_$statement_id                 external static structure                level 1 packed packed unaligned dcl 20-6
plus                                   internal static bit(9)                   initial dcl 21-3
prefix_plus                            internal static bit(9)                   initial dcl 16-8
procedure_parse                 000000 constant        entry                    external dcl 1-133
procedure_statement                    internal static bit(9)                   initial dcl 18-3
process_entry                   000000 constant        entry                    external dcl 1-143
ptr_fun                                internal static bit(9)                   initial dcl 16-8
put_control                            internal static bit(9)                   initial dcl 16-8
put_field                              internal static bit(9)                   initial dcl 16-8
put_field_chk                          internal static bit(9)                   initial dcl 16-8
r_format                               internal static bit(9)                   initial dcl 16-8
r_parn                                 internal static bit(9)                   initial dcl 16-8
range_ck                               internal static bit(9)                   initial dcl 16-8
rank_fun                               internal static bit(9)                   initial dcl 16-8
real_fun                               internal static bit(9)                   initial dcl 16-8
record_io                              internal static bit(9)                   initial dcl 16-8
refer                                  internal static bit(9)                   initial dcl 16-8
refer_extent                    000000 constant        entry                    external dcl 2-426
rel_fun                                internal static bit(9)                   initial dcl 16-8
repeat_fun                             internal static bit(9)                   initial dcl 16-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
reserve$rename_parse            000000 constant        entry                    external dcl 1-156
return_bits                            internal static bit(9)                   initial dcl 16-8
return_statement                       internal static bit(9)                   initial dcl 18-3
return_string                          internal static bit(9)                   initial dcl 16-8
return_value                           internal static bit(9)                   initial dcl 16-8
return_words                           internal static bit(9)                   initial dcl 16-8
reverse_fun                            internal static bit(9)                   initial dcl 16-8
revert_on                              internal static bit(9)                   initial dcl 16-8
revert_statement                       internal static bit(9)                   initial dcl 18-3
root_block                             internal static bit(9)                   initial dcl 9-1
round_fun                              internal static bit(9)                   initial dcl 16-8
search_fun                             internal static bit(9)                   initial dcl 16-8
search_rev_fun                         internal static bit(9)                   initial dcl 16-8
segno_fun                              internal static bit(9)                   initial dcl 16-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$abort       000000 constant        entry                    external dcl 2-446
semantic_translator$error       000000 constant        entry                    external dcl 2-450
setbitno_fun                           internal static bit(9)                   initial dcl 16-8
setcharno_fun                          internal static bit(9)                   initial dcl 16-8
sf_par_node                            internal static bit(9)                   initial dcl 13-5
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 16-8
signal_on                              internal static bit(9)                   initial dcl 16-8
signal_statement                       internal static bit(9)                   initial dcl 18-3
sin_fun                                internal static bit(9)                   initial dcl 16-8
sind_fun                               internal static bit(9)                   initial dcl 16-8
skip_format                            internal static bit(9)                   initial dcl 16-8
slash                                  internal static bit(9)                   initial dcl 21-3
source_node                            internal static bit(9)                   initial dcl 13-5
sqrt_fun                               internal static bit(9)                   initial dcl 16-8
st                                     automatic       pointer                  dcl 36
stack_ptr                              internal static bit(9)                   initial dcl 16-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 16-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 16-8
stacq_fun                              internal static bit(9)                   initial dcl 16-8
statement_node                         internal static bit(9)                   initial dcl 13-5
statement_parse                 000000 constant        entry                    external dcl 1-160
statement_type                  000000 constant        entry                    external dcl 1-167
std_arg_list                           internal static bit(9)                   initial dcl 16-8
std_call                               internal static bit(9)                   initial dcl 16-8
std_entry                              internal static bit(9)                   initial dcl 16-8
std_return                             internal static bit(9)                   initial dcl 16-8
stop                                   internal static bit(9)                   initial dcl 16-8
stop_statement                         internal static bit(9)                   initial dcl 18-3
stream_prep                            internal static bit(9)                   initial dcl 16-8
stype                                  automatic       fixed bin(15,0)          dcl 36
sub                                    internal static bit(9)                   initial dcl 16-8
symbol_node                            internal static bit(9)                   initial dcl 13-5
system_on_unit                         internal static bit(9)                   initial dcl 18-3
tan_fun                                internal static bit(9)                   initial dcl 16-8
tand_fun                               internal static bit(9)                   initial dcl 16-8
temporary_node                         internal static bit(9)                   initial dcl 13-5
terminate_trans                        internal static bit(9)                   initial dcl 16-8
token_list_length                      internal static fixed bin(15,0)          initial dcl 20-4
token_node                             internal static bit(9)                   initial dcl 13-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 16-8
trunc_fun                              internal static bit(9)                   initial dcl 16-8
unknown_statement                      internal static bit(9)                   initial dcl 18-3
unlock_file                            internal static bit(9)                   initial dcl 16-8
unlock_statement                       internal static bit(9)                   initial dcl 18-3
unpack                                 internal static bit(9)                   initial dcl 16-8
vclock_fun                             internal static bit(9)                   initial dcl 16-8
verify_fun                             internal static bit(9)                   initial dcl 16-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 16-8
verify_rev_fun                         internal static bit(9)                   initial dcl 16-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 16-8
wait_statement                         internal static bit(9)                   initial dcl 18-3
word_to_mod2                           internal static bit(9)                   initial dcl 16-8
word_to_mod4                           internal static bit(9)                   initial dcl 16-8
word_to_mod8                           internal static bit(9)                   initial dcl 16-8
wordno_fun                             internal static bit(9)                   initial dcl 16-8
x_format                               internal static bit(9)                   initial dcl 16-8
xor_bits                               internal static bit(9)                   initial dcl 16-8

NAMES DECLARED BY EXPLICIT CONTEXT.
attach_arg                      002003 constant        label                    dcl 499 ref 463 479
ck_labels                       001751 constant        label                    dcl 481 ref 506
comma_loop                      000563 constant        label                    dcl 204 ref 434
edit_loop                       002130 constant        label                    dcl 541 ref 564
err                             002413 constant        label                    dcl 656 ref 579 591 599 603 607 611 615 619 628 637
                                                                                  642 646 650
err1                            002274 constant        label                    dcl 573 ref 444
err197                          002277 constant        label                    dcl 577 ref 358 361 364
err237                          002302 constant        label                    dcl 581 ref 452 469
err238                          002305 constant        label                    dcl 585 ref 502
err239                          002310 constant        label                    dcl 589 ref 302 410
err240                          002313 constant        label                    dcl 593 ref 461
err241                          002316 constant        label                    dcl 597 ref 393
err243                          002321 constant        label                    dcl 601 ref 487
err245                          002324 constant        label                    dcl 605 ref 383
err247                          002327 constant        label                    dcl 609 ref 303 351
err254                          002332 constant        label                    dcl 613 ref 377
err257                          002335 constant        label                    dcl 617 ref 254
err288                          002340 constant        label                    dcl 621 ref 261 342 348 427 526
err289                          002360 constant        label                    dcl 626 ref 510
err290                          002363 constant        label                    dcl 630 ref 477
err293                          002370 constant        label                    dcl 635 ref 543
err428                          002373 constant        label                    dcl 639 ref 182
err448                          002400 constant        label                    dcl 644 ref 399
err449                          002403 constant        label                    dcl 648 ref 401
err_list                        002406 constant        label                    dcl 653 ref 575 583 587 595 633
error_recover                   002424 constant        label                    dcl 659 ref 182 541 553
exit                            001226 constant        label                    dcl 377
io_statement_parse              000300 constant        entry                    external dcl 11
locate_right_parn               002006 constant        label                    dcl 502
option_label                    000000 constant        label                    array(4) dcl 448 ref 337 472
options_loop                    000761 constant        label                    dcl 290 ref 367 454 495 538 567 624
ret                             002431 constant        label                    dcl 665 ref 185 439

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2626        2672    2434        2636
Length      3500    2434        44         572     172           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
io_statement_parse                  324 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
io_statement_parse       000100 statement_ptr               io_statement_parse
                         000102 stype_b9                    io_statement_parse
                         000104 t                           io_statement_parse
                         000106 q                           io_statement_parse
                         000110 return_flag                 io_statement_parse
                         000111 conditions                  io_statement_parse
                         000112 arg                         io_statement_parse
                         000114 cur_block                   io_statement_parse
                         000116 dp                          io_statement_parse
                         000120 fnp                         io_statement_parse
                         000122 root_op                     io_statement_parse
                         000124 dpt                         io_statement_parse
                         000126 errp                        io_statement_parse
                         000130 locate_variable             io_statement_parse
                         000132 previous_edit_ptr           io_statement_parse
                         000134 options_allowed_index       io_statement_parse
                         000135 iocode                      io_statement_parse
                         000136 error_number                io_statement_parse
                         000137 k                           io_statement_parse
                         000140 open_index                  io_statement_parse
                         000141 operand_number              io_statement_parse
                         000142 data_index                  io_statement_parse
                         000143 operands                    io_statement_parse
                         000144 option_index                io_statement_parse
                         000145 get_put                     io_statement_parse
                         000146 try_else                    io_statement_parse
                         000147 opcode                      io_statement_parse
                         000150 fab2_bits                   io_statement_parse
                         000151 io_job                      io_statement_parse
                         000152 io_job_item                 io_statement_parse
                         000153 io_jobs_allowed             io_statement_parse
                         000154 tstring12                   io_statement_parse
                         000160 tstring                     io_statement_parse
                         000162 token_list_pointer          io_statement_parse

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ext_out_desc   call_ext_out        return_mac          ext_entry           any_to_any_truncate_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
context                       create_operator               create_statement              create_symbol
create_token                  data_list_parse               declare_label                 expression_parse
format_list_parse             parse_error                   reference_parse

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$check_ansi          pl1_stat_$cur_statement       pl1_stat_$token_list_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000272        36 000305   20    3 000313       154 000316       155 000322       156 000325       157 000330
    158 000333       159 000336       160 000340       163 000362       166 000407       168 000410       169 000413
    170 000416       171 000422       172 000425       174 000447       175 000464       177 000471       179 000473
    180 000476       182 000477       185 000532       190 000533       192 000537       193 000541       194 000543
    195 000545       196 000547       196 000550       200 000552       201 000554       202 000556       203 000560
    204 000562       204 000563       208 000567       209 000570       210 000572       211 000574       212 000576
    213 000600       213 000601       217 000603       218 000605       219 000607       220 000611       221 000613
    221 000614       225 000616       226 000620       227 000622       228 000624       229 000626       229 000627
    233 000631       234 000633       235 000635       236 000637       237 000641       237 000642       241 000644
    242 000646       243 000650       244 000652       245 000654       245 000655       249 000657       250 000661
    251 000663       252 000665       254 000667       256 000700       257 000703       261 000704       261 000705
    265 000707       266 000711       267 000713       268 000715       278 000717       283 000736       284 000751
    285 000752       286 000756       290 000761       293 000771       295 001000       296 001001       297 001016
    298 001020       301 001023       302 001027       303 001032       304 001034       306 001035       310 001037
    311 001044       314 001051       319 001056       336 001060       337 001061       342 001064       344 001070
    345 001100       346 001113       348 001115       350 001120       351 001124       352 001127       353 001130
    354 001131       356 001135       358 001155       359 001165       360 001166       361 001202       363 001210
    364 001211       365 001220       367 001221       374 001222       377 001226       381 001233       383 001237
    384 001241       387 001273       389 001321       393 001323       397 001333       399 001337       401 001342
    405 001350       408 001357       410 001401       413 001407       416 001430       419 001451       422 001517
    425 001561       427 001570       431 001576       433 001623       434 001624       439 001625       444 001626
    448 001627       452 001640       453 001643       454 001671       459 001672       460 001673       461 001706
    463 001712       465 001713       469 001724       472 001727       475 001730       476 001731       477 001744
    479 001750       481 001751       487 001754       490 001767       492 001777       495 002002       499 002003
    502 002006       505 002017       506 002020       508 002021       510 002023       511 002025       513 002032
    515 002044       520 002051       522 002054       523 002062       526 002067       533 002073       535 002074
    537 002107       538 002127       541 002130       543 002150       545 002155       547 002160       548 002175
    550 002200       551 002202       553 002203       555 002227       556 002244       557 002247       559 002251
    561 002260       563 002262       564 002263       567 002273       573 002274       575 002276       577 002277
    579 002301       581 002302       583 002304       585 002305       587 002307       589 002310       591 002312
    593 002313       595 002315       597 002316       599 002320       601 002321       603 002323       605 002324
    607 002326       609 002327       611 002331       613 002332       615 002334       617 002335       619 002337
    621 002340       623 002356       624 002357       626 002360       628 002362       630 002363       632 002365
    633 002367       635 002370       637 002372       639 002373       641 002375       642 002377       644 002400
    646 002402       648 002403       650 002405       653 002406       656 002413       659 002424       661 002427
    665 002431


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
