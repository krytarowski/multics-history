	COMPILATION LISTING OF SEGMENT declare_descriptor
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1404.6 mst Mon
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 /****^  HISTORY COMMENTS:
       15*  1) change(87-06-26,Huen), approve(87-06-26,MCR7712), audit(87-12-01,RWaters),
       16*     install(87-12-01,MR12.2-1005):
       17*     Fix bug1895
       18*  2) change(88-01-29,RWaters), approve(88-01-29,MCR7724), audit(88-02-05,Huen),
       19*     install(88-02-16,MR12.2-1024):
       20*     Treat explicit_packed as packed.
       21*                                                   END HISTORY COMMENTS */
       22 
       23 
       24 /* format: style2 */
       25 
       26 declare_descriptor:
       27      proc (cblk, stmnt, ps, loc, bit2) returns (ptr);
       28 
       29 /*	Modified 780616 by PG for unsigned
       30*	Modified:	790106 by RAB to fix 1811 (bad descriptors for interleaved
       31*		packed arrays if array of structures is unpacked)	
       32*	Modified:	810626 by EBush to remove the limit of 128 descriptors
       33*		per constant size structure
       34*          Modified: 871806 by RWaters to fix 1895 by diagnosing bad returns
       35*		options
       36*	Modified: 882801 by RW to accept symbol.explicit_packed as packed
       37**/
       38 
       39 	dcl     (s, d, r, stmnt, blk, cblk, q, loc, st, ps)
       40 				 ptr;
       41 	dcl     (first, ptr_saver)	 ptr;
       42 	dcl     (offset, size)	 fixed bin (15);
       43 	dcl     scale		 fixed bin (12);
       44 	dcl     bit2		 bit (2) aligned;
       45 	dcl     (constant, actl, array_desc, cross_section, before_get_size, top_level, star_extents, controlled,
       46 	        use_new)		 bit (1) aligned;
       47 
       48 	dcl     pl1_stat_$util_abort	 variable static ext entry (fixed bin (15), ptr);
       49 
       50 	dcl     max_desc		 (512) fixed bin (31);
       51 						/* reserve 512 words in the stack */
       52 
       53 	dcl     basic_desc		 bit (36) aligned based (addr (desc.bit_type));
       54 
       55 	dcl     bit_image		 bit (size * bits_per_word) aligned based (addr (max_desc));
       56 
       57 	dcl     1 desc		 based (addr (max_desc)),
       58 		2 spacer		 (offset) fixed bin (31),
       59 		2 basic_desc_image	 aligned,
       60 		  3 bit_type	 unaligned,
       61 		    4 flag	 unal bit (1),
       62 		    4 type	 unal bit (6),
       63 		    4 packed	 unal bit (1),
       64 		    4 number_dims	 unal bit (4),
       65 		  3 size		 unal bit (24),
       66 		2 desc_image	 fixed bin (31);
       67 
       68 /* internal static */
       69 
       70 	dcl     star_bits		 bit (36) aligned internal static init ("100000000000000000000000000000000000"b);
       71 
       72 /* builtins */
       73 
       74 	dcl     (null, substr, string, fixed, bit, addr, unspec)
       75 				 builtin;
       76 
       77 /* program */
       78 
       79 	before_get_size = "0"b;
       80 	actl = "0"b;
       81 	st = stmnt;
       82 
       83 common:
       84 	s = ps;
       85 	use_new = "1"b;
       86 
       87 	array_desc = substr (bit2, 1, 1);
       88 	cross_section = substr (bit2, 2, 1);
       89 
       90 /* see if a descriptor has already been made which can be
       91*	   used in the present case.   */
       92 
       93 	if ^(s -> symbol.based | s -> symbol.temporary | s -> symbol.position | actl)
       94 	then if s -> symbol.dimensioned & ^array_desc
       95 	     then if s -> symbol.array -> array.element_descriptor ^= null
       96 		then if ^((s -> symbol.parameter | s -> symbol.controlled)
       97 			& (s -> symbol.star_extents | s -> symbol.exp_extents))
       98 		     then return (copy ((s -> symbol.array -> array.element_descriptor)));
       99 		     else ;
      100 		else ;
      101 	     else if s -> symbol.descriptor ^= null
      102 	     then if s -> symbol.star_extents & s -> symbol.parameter
      103 		     & s -> symbol.descriptor -> reference.symbol -> symbol.descriptor = null
      104 		then use_new = "0"b;
      105 		else return (copy ((s -> symbol.descriptor)));
      106 	     else ;
      107 	else ;
      108 
      109 	if before_get_size
      110 	then call set_star (s);
      111 
      112 	blk = s -> symbol.block_node;
      113 	if blk = null
      114 	then blk = cblk;
      115 
      116 	controlled = s -> symbol.controlled & (st = null | actl);
      117 	star_extents =
      118 	     (s -> symbol.star_extents | (s -> symbol.parameter & s -> symbol.exp_extents)) & (st = null | actl);
      119 
      120 	if s -> symbol.exp_extents | s -> symbol.star_extents
      121 	then do;
      122 		constant = "0"b;
      123 		if (^actl | s -> symbol.descriptor = null) & use_new
      124 		then do;
      125 			d = create_symbol (blk, null, by_compiler);
      126 			d -> symbol.boundary = word_;
      127 			if s -> symbol.temporary | s -> symbol.return_value | s -> symbol.based
      128 			     | (s -> symbol.parameter & ^star_extents) | (s -> symbol.controlled & ^before_get_size)
      129 			then d -> symbol.temporary = "1"b;
      130 			else do;
      131 				d -> symbol.allocate = "1"b;
      132 				if s -> symbol.controlled & before_get_size
      133 				then do;
      134 					d -> symbol.controlled = "1"b;
      135 					d -> symbol.descriptor = s;
      136 				     end;
      137 				else d -> symbol.auto = "1"b;
      138 			     end;
      139 
      140 			d -> symbol.aligned, d -> symbol.variable, d -> symbol.internal,
      141 			     d -> symbol.arg_descriptor = "1"b;
      142 			r = d -> symbol.reference;
      143 		     end;
      144 		else do;
      145 			r = copy ((s -> symbol.descriptor));
      146 			d = r -> reference.symbol;
      147 		     end;
      148 	     end;
      149 	else do;
      150 		if before_get_size
      151 		then return (null);
      152 
      153 		constant = "1"b;
      154 		r = create_reference (null);
      155 	     end;
      156 
      157 	if star_extents & ^s -> symbol.return_value
      158 	then do;
      159 		d -> symbol.location = s -> symbol.location;
      160 		d -> symbol.allocated = s -> symbol.allocated;
      161 
      162 		if d -> symbol.allocated
      163 		then q = declare_pointer (blk);
      164 		else do;
      165 			q = create_operator (param_desc_ptr, 3);
      166 			q -> operand (1) = declare_temporary (pointer_type, 0, 0, null);
      167 			q -> operand (2) = declare_constant$integer (fixed (d -> symbol.location, 31));
      168 			q -> operand (3) = blk;
      169 		     end;
      170 
      171 		r -> reference.qualifier = q;
      172 		d -> symbol.param_desc = "1"b;
      173 		d -> symbol.auto = "0"b;
      174 	     end;
      175 
      176 
      177 /* call the builder to create the descriptor.	*/
      178 
      179 	size, offset = 0;
      180 	top_level = "1"b;
      181 	first = null;
      182 
      183 	call builder (s);
      184 
      185 	if constant
      186 	then do;
      187 		d = declare_constant$desc (bit_image) -> reference.symbol;
      188 		do while (first ^= null);
      189 		     ptr_saver = first -> reference.symbol;
      190 		     first -> reference.symbol = d;
      191 		     first = ptr_saver;
      192 		end;
      193 	     end;
      194 	else do;
      195 		if s -> symbol.parameter & array_desc & st = null
      196 		then if ^(before_get_size & s -> symbol.structure)
      197 		     then d -> symbol.descriptor = declare_constant$desc (bit_image) -> reference.symbol;
      198 		d -> symbol.c_word_size = size;
      199 		d -> symbol.c_bit_size = size * bits_per_word;
      200 	     end;
      201 
      202 	d -> symbol.reference -> reference.units = 0;
      203 
      204 	return (d -> symbol.reference);
      205 
      206 
      207 /* Special entry point for making assignments to controlled descriptors
      208*  at allocate time */
      209 
      210 ctl:
      211      entry (cblk, stmnt, ps, loc, bit2) returns (ptr);
      212 	actl = "1"b;
      213 	before_get_size = "0"b;
      214 	st = create_statement (null_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
      215 	go to common;
      216 
      217 /* Entry point for calls to declare_descriptor before all extents and bounds
      218*   have been calculated by get_size */
      219 
      220 param:
      221      entry (cblk, stmnt, ps, loc, bit2) returns (ptr);
      222 	actl = "0"b;
      223 	st = stmnt;
      224 	before_get_size = "1"b;
      225 	go to common;
      226 
      227 /* routine to propagate star_extents bit upwards */
      228 
      229 set_star:
      230      proc (pp);
      231 	dcl     (pp, p, d)		 pointer;
      232 	p = pp;
      233 
      234 	do d = p -> symbol.son repeat d -> symbol.brother while (d ^= null);
      235 	     call set_star (d);
      236 
      237 	     p -> symbol.star_extents = p -> symbol.star_extents | d -> symbol.star_extents;
      238 	     p -> symbol.exp_extents = p -> symbol.exp_extents | d -> symbol.exp_extents;
      239 	end;
      240 
      241      end set_star;
      242 
      243 /* subroutine to make a copy of a reference node only if offset|length|qual
      244*   are non-null */
      245 
      246 copy:
      247      proc (ref) returns (ptr);
      248 
      249 	dcl     ref		 ptr,
      250 	        p			 ptr;
      251 
      252 	p = ref;
      253 
      254 	if p -> reference.offset ^= null | p -> reference.length ^= null | p -> reference.qualifier ^= null
      255 	then p = copy_expression ((p));
      256 
      257 	return (p);
      258 
      259      end;
      260 
      261 /* subroutine to build a descriptor and fill it in.	*/
      262 
      263 builder:
      264      proc (pp);
      265 
      266 	dcl     (p, q, b, sf, pp)	 ptr;
      267 	dcl     (i, m, mdims, ndims, nbounds, type)
      268 				 fixed bin (15);
      269 	dcl     (cdcl, have_star)	 bit (1);
      270 
      271 	p = pp;
      272 
      273 	type = pl1_descriptor_type (substr (string (p -> symbol.attributes), 1, 36), (p -> symbol.c_dcl_size));
      274 
      275 	offset = size;
      276 	if offset ^= 0
      277 	then r -> reference.units = word_;
      278 	size = size + 1;
      279 
      280 	if size > 512
      281 	then call pl1_stat_$util_abort (28, s);
      282 
      283 	desc.type = bit (fixed (type, 6), 6);
      284 	desc.flag = "1"b;
      285 	desc.packed = p -> symbol.packed | p -> symbol.explicit_packed;
      286 /* the bit image made for parameters may have this bit incorrectly be "0"b */
      287 
      288 /* Get number of bounds to process */
      289 
      290 	ndims = 0;
      291 	do sf = p repeat sf -> symbol.father while (sf ^= null & (array_desc | sf ^= s));
      292 	     if sf -> symbol.array ^= null
      293 	     then ndims = ndims + sf -> symbol.array -> array.own_number_of_dimensions;
      294 
      295 	     if cross_section
      296 	     then if sf = s
      297 		then go to set_mdims;
      298 	end;
      299 
      300 set_mdims:
      301 	if ndims > 15
      302 	then call pl1_stat_$util_abort (492, s);
      303 
      304 	mdims = ndims;
      305 
      306 	if ndims ^= 0
      307 	then desc.number_dims = bit (fixed (ndims, 4), 4);
      308 	else desc.number_dims = "0"b;
      309 
      310 	desc.size = "0"b;
      311 
      312 /* fill in the size field of the descriptor.	*/
      313 
      314 	if p -> symbol.char | p -> symbol.bit | p -> symbol.area | p -> symbol.float | p -> symbol.fixed
      315 	     | p -> symbol.picture
      316 	then desc.size = bit (fixed (p -> symbol.c_dcl_size, 24), 24);
      317 
      318 	if p -> symbol.fixed
      319 	then do;
      320 		scale = p -> symbol.scale;
      321 		if scale < 0
      322 		then scale = scale + 1000000000000b;
      323 		substr (desc.size, 1, 12) = bit (scale, 12);
      324 	     end;
      325 
      326 	if p -> symbol.structure
      327 	then do;
      328 		m = 0;
      329 		q = p -> symbol.son;
      330 		do while (q ^= null);
      331 		     m = m + 1;
      332 		     q = q -> symbol.brother;
      333 		end;
      334 		desc.size = bit (fixed (m, 24), 24);
      335 	     end;
      336 
      337 	if ^constant
      338 	then do;
      339 		cdcl, have_star = "0"b;
      340 		if p -> symbol.dcl_size = null
      341 		then cdcl = "1"b;
      342 		else if p -> symbol.dcl_size -> node.type = token_node
      343 		then if p -> symbol.dcl_size -> token.type = dec_integer
      344 		     then do;
      345 			     cdcl = "1"b;
      346 			     desc.size = bit (fixed (token_to_binary ((p -> symbol.dcl_size)), 24), 24);
      347 			end;
      348 		     else have_star = p -> symbol.dcl_size -> token.type = asterisk;
      349 
      350 		if (p -> symbol.bit | p -> symbol.char | p -> symbol.area) & ^cdcl
      351 		then if star_extents
      352 		     then do;
      353 			     if have_star
      354 			     then do;
      355 				     q = create_operator (desc_size, 2);
      356 				     q -> operand (2) = copy_expression ((r));
      357 				     q -> operand (2) -> reference.c_offset = offset;
      358 				     p -> symbol.dcl_size = q;
      359 
      360 				     if ^p -> symbol.area & ^p -> symbol.varying
      361 				     then p -> symbol.reference -> reference.length = q;
      362 				end;
      363 
      364 			     desc.size = (24)"1"b;
      365 			end;
      366 		     else do;
      367 			     q = create_operator (make_desc, 3);
      368 			     q -> operand (1) = d -> symbol.reference;
      369 			     q -> operand (2) = declare_constant$desc (string (desc.bit_type));
      370 			     if ^actl
      371 			     then do;
      372 				     q -> operand (3) = p -> symbol.dcl_size;
      373 				     if controlled
      374 				     then do;
      375 					     p -> symbol.symtab_size = p -> symbol.dcl_size;
      376 					     q = create_operator (desc_size, 2);
      377 					     q -> operand (2) = copy_expression ((r));
      378 					     q -> operand (2) -> reference.c_offset = offset;
      379 					     p -> symbol.dcl_size = q;
      380 					end;
      381 				     else call assignf (q, offset);
      382 				end;
      383 			     else do;
      384 				     q -> operand (3) = p -> symbol.symtab_size;
      385 				     call assignf (q, offset);
      386 				end;
      387 			end;
      388 		else if star_extents | (controlled & ^actl)
      389 		then ;
      390 		else call assignf (declare_constant$desc (basic_desc), offset);
      391 	     end;
      392 
      393 /* process the array attribute by putting the bounds and multipliers in the descriptor.	*/
      394 
      395 	if ndims ^= 0
      396 	then do;
      397 		r -> reference.units = word_;
      398 		sf = p;
      399 
      400 /* In dimensioned structures the bound nodes get factored down when get_size
      401*   (and thus get_array_size) gets called.  If the bounds have been factored
      402*   down, number_of_dimensions tells us how many bounds get processed.  If
      403*   they have not been factored down, we use the sum of own_number_of_dimensions
      404*   for the element and each of its ancestors to determine how many bounds get
      405*   processed.
      406**/
      407 
      408 
      409 		do while (mdims > 0);
      410 
      411 		     do while (sf -> symbol.array = null);
      412 			sf = sf -> symbol.father;
      413 		     end;
      414 
      415 		     b = sf -> symbol.array -> array.bounds;
      416 
      417 		     if before_get_size
      418 		     then nbounds = sf -> symbol.array -> array.own_number_of_dimensions;
      419 		     else nbounds = sf -> symbol.array -> array.number_of_dimensions;
      420 
      421 		     sf = sf -> symbol.father;
      422 
      423 		     do i = 1 to nbounds;
      424 			size = size + 3;
      425 			if size > 512
      426 			then call pl1_stat_$util_abort (28, s);
      427 			if ^constant & ^before_get_size
      428 						/* before_get_size --> parameter --> bounds are either constant or * */
      429 			then do;
      430 				if b -> bound.lower = null
      431 				then b -> bound.lower = declare_constant$integer ((b -> bound.c_lower));
      432 				if b -> bound.upper = null
      433 				then b -> bound.upper = declare_constant$integer ((b -> bound.c_upper));
      434 			     end;
      435 
      436 			call do_lbound;
      437 			offset = offset + 1;
      438 			call do_hbound;		/* input here */
      439 			offset = offset + 1;
      440 			call do_mult;
      441 
      442 			offset = offset + 1;
      443 			b = b -> bound.next;
      444 			mdims = mdims - 1;
      445 			if mdims = 0
      446 			then go to record_reference;
      447 		     end;
      448 
      449 		end;
      450 
      451 	     end;
      452 
      453 /* Record a reference to the descriptor either in the symbol node or in the array node.  */
      454 
      455 record_reference:
      456 	q = copy_expression ((r));
      457 	q -> reference.c_offset = offset - ndims * 3;
      458 	if offset = 0
      459 	then q -> reference.units = 0;
      460 
      461 	if p -> symbol.dimensioned & ^array_desc
      462 	then if p -> symbol.array -> array.element_descriptor = null & top_level
      463 	     then p -> symbol.array -> array.element_descriptor = q;
      464 	     else ;
      465 	else if p -> symbol.descriptor = null
      466 	then p -> symbol.descriptor = q;
      467 
      468 
      469 /* If this is a constant descriptor chain this reference so that its symbol ptr
      470*   can be filled in when the symbol node is created. */
      471 
      472 	if constant
      473 	then do;
      474 		q -> reference.symbol = first;
      475 		first = q;
      476 	     end;
      477 
      478 /* If this is a structure call the builder to create descriptors for the members.
      479*   The members descriptors are part of the structure's descriptor.  */
      480 
      481 	if p -> symbol.structure
      482 	then do;
      483 		top_level = "0"b;
      484 
      485 		do q = p -> symbol.son repeat q -> symbol.brother while (q ^= null);
      486 		     call builder (q);
      487 		end;
      488 	     end;
      489 
      490 do_lbound:
      491      procedure;
      492 
      493 	declare lbound_constant	 bit (1) aligned;
      494 
      495 	lbound_constant = "0"b;
      496 	if star_extents
      497 	then if b -> bound.lower -> node.type = token_node
      498 	     then if b -> bound.lower -> token.type = dec_integer
      499 						/* has to be that or * */
      500 		then do;
      501 			lbound_constant = "1"b;
      502 			b -> bound.c_lower = token_to_binary ((b -> bound.lower));
      503 		     end;
      504 		else ;				/* not dec integer */
      505 	     else lbound_constant = "1"b;		/* not token at all, error */
      506 
      507 	lbound_constant = lbound_constant | constant;
      508 
      509 	if lbound_constant
      510 	then desc_image = b -> bound.c_lower;
      511 	else if star_extents
      512 	then do;
      513 		unspec (desc_image) = star_bits;
      514 		b -> bound.lower = copy_expression ((r));
      515 		b -> bound.lower -> reference.c_offset = offset + 1;
      516 	     end;
      517 	else if controlled
      518 	then if ^actl
      519 	     then do;
      520 		     if b -> bound.symtab_lower = null
      521 		     then b -> bound.symtab_lower = b -> bound.lower;
      522 		     if b -> bound.lower -> node.type = token_node
      523 		     then if b -> bound.lower -> token.type = dec_integer
      524 			then return;
      525 		     b -> bound.lower = copy_expression ((r));
      526 		     b -> bound.lower -> reference.c_offset = offset + 1;
      527 		end;
      528 	     else call assignf ((b -> bound.symtab_lower), offset + 1);
      529 	else call assignf ((b -> bound.lower), offset + 1);
      530 
      531      end do_lbound;
      532 
      533 do_hbound:
      534      procedure;
      535 
      536 	declare hbound_constant	 bit (1) aligned;
      537 
      538 	hbound_constant = "0"b;
      539 
      540 	if star_extents
      541 	then if b -> bound.upper -> node.type = token_node
      542 	     then if b -> bound.upper -> token.type = dec_integer
      543 						/* has to be that or * */
      544 		then do;
      545 			hbound_constant = "1"b;
      546 			b -> bound.c_upper = token_to_binary ((b -> bound.upper));
      547 		     end;
      548 		else ;				/* not dec integer */
      549 	     else hbound_constant = "1"b;		/* not token at all, error */
      550 
      551 	hbound_constant = constant | hbound_constant;
      552 
      553 	if hbound_constant
      554 	then desc_image = b -> bound.c_upper;
      555 	else if star_extents
      556 	then do;
      557 		unspec (desc_image) = star_bits;
      558 		b -> bound.upper = copy_expression ((r));
      559 		b -> bound.upper -> reference.c_offset = offset + 1;
      560 	     end;
      561 	else if controlled
      562 	then if ^actl
      563 	     then do;
      564 		     if b -> bound.symtab_upper = null
      565 		     then b -> bound.symtab_upper = b -> bound.upper;
      566 		     if b -> bound.upper -> node.type = token_node
      567 		     then if b -> bound.upper -> token.type = dec_integer
      568 			then return;
      569 		     b -> bound.upper = copy_expression ((r));
      570 		     b -> bound.upper -> reference.c_offset = offset + 1;
      571 		end;
      572 	     else call assignf ((b -> bound.symtab_upper), offset + 1);
      573 	else call assignf ((b -> bound.upper), offset + 1);
      574 
      575      end do_hbound;
      576 
      577 do_mult:
      578      procedure;
      579 
      580 	if star_extents
      581 	then do;
      582 		unspec (desc_image) = star_bits;
      583 		if b -> bound.desc_multiplier = null
      584 		then do;
      585 			b -> bound.desc_multiplier, b -> bound.multiplier = copy_expression ((r));
      586 			b -> bound.desc_multiplier -> reference.c_offset = offset + 1;
      587 		     end;
      588 	     end;
      589 	else if constant
      590 	then desc_image = b -> bound.c_desc_multiplier;
      591 	else if controlled
      592 	then if ^actl
      593 	     then do;
      594 		     b -> bound.desc_multiplier, b -> bound.multiplier = copy_expression ((r));
      595 		     b -> bound.desc_multiplier -> reference.c_offset = offset + 1;
      596 		end;
      597 	     else call assignm ((b -> bound.symtab_multiplier), offset + 1);
      598 	else call assignf ((b -> bound.desc_multiplier), offset + 1);
      599      end do_mult;
      600      end builder;
      601 
      602 /* subroutine to make an assignment to a descriptor.	*/
      603 
      604 assignf:
      605      proc (e, offset);
      606 
      607 	dcl     (e, p, q, stp)	 ptr;
      608 	dcl     offset		 fixed bin (15);
      609 
      610 	stp = st;
      611 
      612 common:
      613 	p = create_operator (assign, 2);
      614 	p -> operand (1) = copy_expression ((r));
      615 	p -> operand (1) -> reference.c_offset = offset;
      616 	q = copy_expression ((e));
      617 
      618 	if s -> symbol.refer_extents
      619 	then call refer_extent (q, loc);
      620 
      621 	p -> operand (2) = q;
      622 
      623 	if s -> symbol.based | s -> symbol.temporary | s -> symbol.position | s -> symbol.controlled
      624 	     | s -> symbol.parameter | s -> symbol.return_value
      625 	then do;
      626 		if stp = null   /* Bug 1895: diagnose bad returns options */
      627 		then do;
      628 			if s -> symbol.reference -> reference.padded_ref
      629 			then call pl1_stat_$util_abort (37,s);   /* in stmnt */
      630 			else call pl1_stat_$util_abort (22,s);   /* in dcl */
      631 		     end;
      632 		q = create_statement (assignment_statement, (stp -> statement.back), null, (stp -> statement.prefix));
      633 		q -> statement.root = expression_semantics (blk, q, p, "0"b);
      634 	     end;
      635 	else do;
      636 		q = create_statement$prologue (assignment_statement, blk, null, (blk -> block.prefix));
      637 		q -> statement.root = p;
      638 		if cblk ^= blk
      639 		then q -> statement.root = expression_semantics (cblk, q, (q -> statement.root), "0"b);
      640 	     end;
      641 
      642 	return;
      643 
      644 /* Special entry point for generating multiplier assignments to controlled descriptors */
      645 
      646 assignm:
      647      entry (e, offset);
      648 
      649 	stp = stmnt;
      650 	go to common;
      651 
      652      end assignf;
      653 
  1     1 /* BEGIN INCLUDE FILE ... pl1_descriptor_type_fcn.incl.pl1 */
  1     2 
  1     3 /* Program to convert symbol_node information into a descriptor type code.
  1     4*   Written 780614 by PG
  1     5*	Modified: 25 Apr 1979 by PCK to implement 4-bit decimal
  1     6**/
  1     7 
  1     8 pl1_descriptor_type:
  1     9      procedure (bv_type, bv_prec) returns (fixed bin);
  1    10 
  1    11 /* parameters */
  1    12 
  1    13 dcl (	bv_type bit (36),
  1    14 	bv_prec fixed bin (24)) parameter;
  1    15 
  1    16 /* automatic */
  1    17 
  1    18 dcl	prec fixed bin (24),
  1    19 	dtype fixed bin;
  1    20 
  1    21 /* builtins */
  1    22 
  1    23 dcl	string builtin;
  1    24 
  1    25 /* include files */
  1    26 
  2     1 /* BEGIN INCLUDE FILE ... pl1_symbol_type.incl.pl1 */
  2     2 
  2     3 dcl	1 type,
  2     4 	2 structure	bit,
  2     5 	2 fixed		bit,
  2     6 	2 float		bit,
  2     7 	2 bit		bit,
  2     8 	2 char		bit,
  2     9 	2 ptr		bit,
  2    10 	2 offset		bit,
  2    11 	2 area		bit,
  2    12 	2 label		bit,
  2    13 	2 entry		bit,
  2    14 	2 file		bit,
  2    15 	2 arg_descriptor	bit,
  2    16 	2 storage_block	bit,
  2    17 	2 explicit_packed	bit,
  2    18 	2 condition	bit,
  2    19 	2 format		bit,
  2    20 	2 builtin		bit,
  2    21 	2 generic		bit,
  2    22 	2 picture		bit,
  2    23 	2 dimensioned	bit,
  2    24 	2 initialed	bit,
  2    25 	2 aligned		bit,
  2    26 	2 unaligned	bit,
  2    27 	2 signed		bit,
  2    28 	2 unsigned	bit,
  2    29 	2 precision	bit,
  2    30 	2 varying		bit,
  2    31 	2 local		bit,
  2    32 	2 decimal		bit,
  2    33 	2 binary		bit,
  2    34 	2 real		bit,
  2    35 	2 complex		bit,
  2    36 	2 variable	bit,
  2    37 	2 reducible	bit,
  2    38 	2 irreducible	bit,
  2    39 	2 returns		bit;
  2    40 
  2    41 /* END INCLUDE FILE ... pl1_symbol_type.incl.pl1 */
  1    27 
  3     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  3     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  3     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  3     8*     Objects of this type are PASCAL string types.
  3     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  3    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  3    11*     Added the new C types.
  3    12*                                                   END HISTORY COMMENTS */
  3    13 
  3    14 /* This include file defines mnemonic names for the Multics
  3    15*   standard descriptor types, using both pl1 and cobol terminology.
  3    16*   PG 780613
  3    17*   JRD 790530
  3    18*   JRD 791016
  3    19*   MBW 810731
  3    20*   TGO 830614 Add hex types.
  3    21*   Modified June 83 JMAthane to add PASCAL data types
  3    22*   TGO 840120 Add float dec extended and generic, float binary generic
  3    23**/
  3    24 
  3    25      dcl	   (real_fix_bin_1_dtype  init (1),
  3    26 	   real_fix_bin_2_dtype   init (2),
  3    27 	   real_flt_bin_1_dtype   init (3),
  3    28 	   real_flt_bin_2_dtype   init (4),
  3    29 	   cplx_fix_bin_1_dtype   init (5),
  3    30 	   cplx_fix_bin_2_dtype   init (6),
  3    31 	   cplx_flt_bin_1_dtype   init (7),
  3    32 	   cplx_flt_bin_2_dtype   init (8),
  3    33 	   real_fix_dec_9bit_ls_dtype init (9),
  3    34 	   real_flt_dec_9bit_dtype init (10),
  3    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  3    36 	   cplx_flt_dec_9bit_dtype init (12),
  3    37 	   pointer_dtype	      init (13),
  3    38 	   offset_dtype	      init (14),
  3    39 	   label_dtype	      init (15),
  3    40 	   entry_dtype	      init (16),
  3    41 	   structure_dtype	      init (17),
  3    42 	   area_dtype	      init (18),
  3    43 	   bit_dtype	      init (19),
  3    44 	   varying_bit_dtype      init (20),
  3    45 	   char_dtype	      init (21),
  3    46 	   varying_char_dtype     init (22),
  3    47 	   file_dtype	      init (23),
  3    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  3    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  3    50 	   real_fix_bin_1_uns_dtype init (33),
  3    51 	   real_fix_bin_2_uns_dtype init (34),
  3    52 	   real_fix_dec_9bit_uns_dtype init (35),
  3    53 	   real_fix_dec_9bit_ts_dtype init (36),
  3    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  3    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  3    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  3    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  3    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  3    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  3    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  3    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  3    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  3    63 	   real_flt_hex_1_dtype   init (47),
  3    64 	   real_flt_hex_2_dtype   init (48),
  3    65 	   cplx_flt_hex_1_dtype   init (49),
  3    66 	   cplx_flt_hex_2_dtype   init (50),
  3    67 	   c_typeref_dtype        init (54),
  3    68 	   c_enum_dtype           init (55),
  3    69              c_enum_const_dtype     init (56),
  3    70 	   c_union_dtype          init (57),
  3    71 	   algol68_straight_dtype init (59),
  3    72 	   algol68_format_dtype   init (60),
  3    73 	   algol68_array_descriptor_dtype init (61),
  3    74 	   algol68_union_dtype    init (62),
  3    75 
  3    76 	   cobol_comp_6_dtype     init (1),
  3    77 	   cobol_comp_7_dtype     init (1),
  3    78 	   cobol_display_ls_dtype init (9),
  3    79 	   cobol_structure_dtype  init (17),
  3    80 	   cobol_char_string_dtype init (21),
  3    81 	   cobol_display_ls_overp_dtype init (29),
  3    82 	   cobol_display_ts_overp_dtype init (30),
  3    83 	   cobol_display_uns_dtype init (35),
  3    84 	   cobol_display_ts_dtype init (36),
  3    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  3    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  3    87 	   cobol_comp_5_uns_dtype init (40),
  3    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  3    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  3    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  3    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  3    92 	   cplx_flt_dec_generic_dtype init (84),
  3    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  3    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  3    95 
  3    96      dcl	   (ft_integer_dtype      init (1),
  3    97 	   ft_real_dtype	      init (3),
  3    98 	   ft_double_dtype	      init (4),
  3    99 	   ft_complex_dtype	      init (7),
  3   100 	   ft_complex_double_dtype init (8),
  3   101 	   ft_external_dtype      init (16),
  3   102 	   ft_logical_dtype	      init (19),
  3   103 	   ft_char_dtype	      init (21),
  3   104 	   ft_hex_real_dtype      init (47),
  3   105 	   ft_hex_double_dtype    init (48),
  3   106 	   ft_hex_complex_dtype   init (49),
  3   107 	   ft_hex_complex_double_dtype init (50)
  3   108 	   )		      fixed bin internal static options (constant);
  3   109 
  3   110      dcl	   (algol68_short_int_dtype init (1),
  3   111 	   algol68_int_dtype      init (1),
  3   112 	   algol68_long_int_dtype init (2),
  3   113 	   algol68_real_dtype     init (3),
  3   114 	   algol68_long_real_dtype init (4),
  3   115 	   algol68_compl_dtype    init (7),
  3   116 	   algol68_long_compl_dtype init (8),
  3   117 	   algol68_bits_dtype     init (19),
  3   118 	   algol68_bool_dtype     init (19),
  3   119 	   algol68_char_dtype     init (21),
  3   120 	   algol68_byte_dtype     init (21),
  3   121 	   algol68_struct_struct_char_dtype init (22),
  3   122 	   algol68_struct_struct_bool_dtype init (20)
  3   123 	   )		      fixed bin internal static options (constant);
  3   124 
  3   125      dcl	   (label_constant_runtime_dtype init (24),
  3   126 	   int_entry_runtime_dtype init (25),
  3   127 	   ext_entry_runtime_dtype init (26),
  3   128 	   ext_procedure_runtime_dtype init (27),
  3   129 	   picture_runtime_dtype  init (63)
  3   130 	   )		      fixed bin internal static options (constant);
  3   131 
  3   132      dcl	   (pascal_integer_dtype  init (1),
  3   133 	   pascal_real_dtype      init (4),
  3   134 	   pascal_label_dtype     init (24),
  3   135 	   pascal_internal_procedure_dtype init (25),
  3   136 	   pascal_exportable_procedure_dtype init (26),
  3   137 	   pascal_imported_procedure_dtype init (27),
  3   138 	   pascal_typed_pointer_type_dtype init (64),
  3   139 	   pascal_char_dtype      init (65),
  3   140 	   pascal_boolean_dtype   init (66),
  3   141 	   pascal_record_file_type_dtype init (67),
  3   142 	   pascal_record_type_dtype init (68),
  3   143 	   pascal_set_dtype	      init (69),
  3   144 	   pascal_enumerated_type_dtype init (70),
  3   145 	   pascal_enumerated_type_element_dtype init (71),
  3   146 	   pascal_enumerated_type_instance_dtype init (72),
  3   147 	   pascal_user_defined_type_dtype init (73),
  3   148 	   pascal_user_defined_type_instance_dtype init (74),
  3   149 	   pascal_text_file_dtype init (75),
  3   150 	   pascal_procedure_type_dtype init (76),
  3   151 	   pascal_variable_formal_parameter_dtype init (77),
  3   152 	   pascal_value_formal_parameter_dtype init (78),
  3   153 	   pascal_entry_formal_parameter_dtype init (79),
  3   154 	   pascal_parameter_procedure_dtype init (80),
  3   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  3   156 
  3   157 
  3   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  1    28 
  4     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
  4     2 
  4     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
  4     4 
  4     5 dcl (	max_p_flt_bin_1			initial(27),
  4     6 	max_p_flt_bin_2			initial(63),
  4     7 	max_p_fix_bin_1			initial(35),
  4     8 	max_p_fix_bin_2			initial(71),
  4     9 
  4    10 	max_p_dec				initial(59),
  4    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
  4    12 
  4    13 	min_scale				initial(-128),
  4    14 	max_scale				initial(+127),
  4    15 	max_bit_string			initial(9437184),
  4    16 	max_char_string			initial(1048576),
  4    17 	max_area_size			initial(262144),
  4    18 	min_area_size			initial(28),
  4    19 
  4    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
  4    21 	max_char_string_constant		initial (254),	/* max length of character literals */
  4    22 	max_identifier_length		initial (256),
  4    23 	max_number_of_dimensions		initial (127),
  4    24 
  4    25 	max_length_precision		initial(24),
  4    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
  4    27 
  4    28 	max_words_per_variable		initial (262144),
  4    29 
  4    30 	bits_per_word			initial(36),
  4    31 	bits_per_double			initial(72),
  4    32 	packed_digits_per_character		initial(2),
  4    33 	characters_per_half			initial(2),
  4    34 	characters_per_word			initial(4),
  4    35 	characters_per_double		initial(8),
  4    36 
  4    37 	bits_per_character			initial(9),
  4    38 	bits_per_half			initial(18),
  4    39 	bits_per_decimal_digit		initial(9),
  4    40 	bits_per_binary_exponent		initial(8),
  4    41 	bits_per_packed_ptr			initial(36),
  4    42 	words_per_packed_pointer		initial(1),
  4    43 
  4    44 	words_per_fix_bin_1			initial(1),
  4    45 	words_per_fix_bin_2			initial(2),
  4    46 	words_per_flt_bin_1			initial(1),
  4    47 	words_per_flt_bin_2			initial(2),
  4    48 	words_per_varying_string_header	initial(1),
  4    49 	words_per_offset			initial(1),
  4    50 	words_per_pointer			initial(2),
  4    51 	words_per_label_var			initial(4),
  4    52 	words_per_entry_var			initial(4),
  4    53 	words_per_file_var			initial(4),
  4    54 	words_per_format			initial(4),
  4    55 	words_per_condition_var		initial(6),
  4    56 
  4    57 	max_index_register_value		initial(262143),
  4    58 	max_signed_index_register_value	initial(131071),
  4    59 
  4    60 	max_signed_xreg_precision		initial(17),
  4    61 	max_uns_xreg_precision		initial(18),
  4    62 
  4    63 	default_area_size			initial(1024),
  4    64 	default_flt_bin_p			initial(27),
  4    65 	default_fix_bin_p			initial(17),
  4    66 	default_flt_dec_p			initial(10),
  4    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
  4    68 
  4    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
  4    70 
  4    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
  4    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
  4    73 	pointer_type		initial("000001000000000000000100000000000000"b),
  4    74 	real_type			initial("001000000000000000000100000001100000"b),
  4    75 	complex_type		initial("001000000000000000000100000001010000"b),
  4    76 	builtin_type		initial("000000000000000010000000000000000000"b),
  4    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
  4    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
  4    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
  4    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
  4    81 	bit_type			initial("000100000000000000000000000000000000"b),
  4    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
  4    83 									options(constant);
  4    84 
  4    85 /* END INCLUDE FILE ... system.incl.pl1 */
  1    29 
  1    30 
  1    31 /* program */
  1    32 
  1    33 	string (type) = bv_type;
  1    34 	prec = bv_prec;
  1    35 
  1    36 	if type.structure
  1    37 	then dtype = structure_dtype;
  1    38 	else
  1    39 
  1    40 	if type.real
  1    41 	then if type.fixed
  1    42 	     then if type.binary
  1    43 		then if type.unsigned
  1    44 		     then if prec <= max_p_fix_bin_1
  1    45 			then dtype = real_fix_bin_1_uns_dtype;
  1    46 			else dtype = real_fix_bin_2_uns_dtype;
  1    47 		     else if prec <= max_p_fix_bin_1
  1    48 			then dtype = real_fix_bin_1_dtype;
  1    49 			else dtype = real_fix_bin_2_dtype;
  1    50 		else if type.unaligned
  1    51 		     then dtype = real_fix_dec_4bit_bytealigned_ls_dtype;
  1    52 		     else dtype = real_fix_dec_9bit_ls_dtype;
  1    53 	     else if type.binary
  1    54 		then if prec <= max_p_flt_bin_1
  1    55 		     then dtype = real_flt_bin_1_dtype;
  1    56 		     else dtype = real_flt_bin_2_dtype;
  1    57 		else if type.unaligned
  1    58 		     then dtype = real_flt_dec_4bit_bytealigned_dtype;
  1    59 		     else dtype = real_flt_dec_9bit_dtype;
  1    60 	else
  1    61 
  1    62 	if type.complex
  1    63 	then if type.fixed
  1    64 	     then if type.binary
  1    65 		then if prec <= max_p_fix_bin_1
  1    66 		     then dtype = cplx_fix_bin_1_dtype;
  1    67 		     else dtype = cplx_fix_bin_2_dtype;
  1    68 		else if type.unaligned
  1    69 		     then dtype = cplx_fix_dec_4bit_bytealigned_ls_dtype;
  1    70 		     else dtype = cplx_fix_dec_9bit_ls_dtype;
  1    71 	     else if type.binary
  1    72 		then if prec <= max_p_flt_bin_1
  1    73 		     then dtype = cplx_flt_bin_1_dtype;
  1    74 		     else dtype = cplx_flt_bin_2_dtype;
  1    75 		else if type.unaligned
  1    76 		     then dtype = cplx_flt_dec_4bit_bytealigned_dtype;
  1    77 		     else dtype = cplx_flt_dec_9bit_dtype;
  1    78 	else
  1    79 
  1    80 	if type.bit
  1    81 	then if type.varying
  1    82 	     then dtype = varying_bit_dtype;
  1    83 	     else dtype = bit_dtype;
  1    84 	else
  1    85 
  1    86 	if type.char
  1    87 	then if type.varying
  1    88 	     then dtype = varying_char_dtype;
  1    89 	     else dtype = char_dtype;
  1    90 	else
  1    91 
  1    92 	if type.ptr
  1    93 	then dtype = pointer_dtype;
  1    94 	else
  1    95 
  1    96 	if type.offset
  1    97 	then dtype = offset_dtype;
  1    98 	else
  1    99 
  1   100 	if type.area
  1   101 	then dtype = area_dtype;
  1   102 	else
  1   103 
  1   104 	if type.label
  1   105 	then dtype = label_dtype;
  1   106 	else
  1   107 
  1   108 	if type.entry
  1   109 	then dtype = entry_dtype;
  1   110 	else
  1   111 
  1   112 	if type.file
  1   113 	then dtype = file_dtype;
  1   114 	else
  1   115 
  1   116 	if type.picture
  1   117 	then dtype = char_dtype;
  1   118 	else dtype = 0;
  1   119 
  1   120 	return (dtype);
  1   121 
  1   122      end /* pl1_descriptor_type */;
  1   123 
  1   124 /* END INCLUDE FILE ... pl1_descriptor_type_fcn.incl.pl1 */
      654 
      655 
      656 /* include files */
      657 
  5     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  5     2 
  5     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  5     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  5     5 
  5     6 
  5     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  5     8 			/* parameter 1:	(input)	block node pointer		*/
  5     9 			/* parameter 2:	(input)	statement node pointer	*/
  5    10 			/* parameter 3:	(in/out)	tree pointer		*/
  5    11 
  5    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  5    13 			/* parameter 1:	(input)	qualifier pointer		*/
  5    14 			/* parameter 2:	(input)	statement node pointer	*/
  5    15 			/* parameter 3:	(input)	symbol node pointer		*/
  5    16 
  5    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  5    18 			returns(pointer);
  5    19 			/* parameter 1:	(input)	block node pointer		*/
  5    20 			/* parameter 2:	(input)	statement node pointer	*/
  5    21 			/* parameter 3:	(input)	tree pointer		*/
  5    22 			/* parameter 4:	(input)	subscript pointer		*/
  5    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  5    24 			/* parameter 6:	(in/out)	context			*/
  5    25 			/* return:	(output)	tree pointer		*/
  5    26 
  5    27 declare	check_star_extents	entry(pointer,pointer);
  5    28 			/* parameter 1:	(input) symbol node of procedure	*/
  5    29 			/* parameter 2:	(input) argument list pointer		*/
  5    30 
  5    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  5    32 			returns(bit(1) aligned);
  5    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  5    34 			/* parameter 2:	(input)	symbol node ptr	*/
  5    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  5    36 			/* return:	(output)	compare bit		*/
  5    37 
  5    38 declare	context_processor	entry(pointer,label);
  5    39 			/* parameter 1:	(input)	root block node pointer	*/
  5    40 
  5    41 declare	declare		entry(pointer);
  5    42 			/* parameter 1:	(input)	symbol node pointer		*/
  5    43 
  5    44 declare	declare_structure	entry(pointer);
  5    45 			/* parameter 1:	(input)	symbol node pointer		*/
  5    46 
  5    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  5    48 			returns(pointer);
  5    49 			/* parameter 1:	(input)	block node pointer		*/
  5    50 			/* parameter 2:	(input)	statement node pointer	*/
  5    51 			/* parameter 3:	(input)	tree pointer		*/
  5    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  5    53 			/* parameter 5:	(input)	symbol node pointer		*/
  5    54 			/* parameter 6:	(in/out)	context			*/
  5    55 			/* return:	(output)	tree pointer		*/
  5    56 
  5    57 declare	do_semantics	entry(pointer,pointer,pointer);
  5    58 			/* parameter 1:	(input)	block node pointer		*/
  5    59 			/* parameter 2:	(input)	statement node pointer	*/
  5    60 			/* parameter 3:	(input)	tree pointer		*/
  5    61 
  5    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  5    63 			returns(pointer);
  5    64 			/* parameter 1:	(input)	block node pointer		*/
  5    65 			/* parameter 2:	(input)	statement node pointer	*/
  5    66 			/* parameter 3:	(input)	tree pointer		*/
  5    67 			/* parameter 4:	(in/out)	context			*/
  5    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  5    69 			/* return:	(output)	tree pointer		*/
  5    70 
  5    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  5    72 			/* parameter 1:	(input)	block node pointer		*/
  5    73 			/* parameter 2:	(input)	statement node pointer	*/
  5    74 			/* parameter 3:	(input/output)	tree pointer		*/
  5    75 
  5    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  5    77 			returns(pointer);
  5    78 			/* parameter 1:	(input)	block node pointer		*/
  5    79 			/* parameter 2:	(input)	statement node pointer	*/
  5    80 			/* parameter 3:	(input)	tree pointer		*/
  5    81 			/* parameter 4:	(in/out)	context			*/
  5    82 			/* return:	(output)	tree pointer		*/
  5    83 
  5    84 declare	expand_initial	entry(pointer,pointer,pointer);
  5    85 			/* parameter 1:	(input)	symbol node pointer		*/
  5    86 			/* parameter 2:	(input)	statement node pointer	*/
  5    87 			/* parameter 3:	(input)	locator			*/
  5    88 
  5    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  5    90 			returns(pointer);
  5    91 			/* parameter 1:	(input)	block node pointer		*/
  5    92 			/* parameter 2:	(input)	statement node pointer	*/
  5    93 			/* parameter 3:	(input)	tree pointer		*/
  5    94 			/* parameter 4:	(in/out)	context			*/
  5    95 			/* return:	(output)	tree pointer		*/
  5    96 
  5    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  5    98 			returns(pointer);
  5    99 			/* parameter 1:	(input)	block node pointer		*/
  5   100 			/* parameter 2:	(input)	statement node pointer	*/
  5   101 			/* parameter 3:	(input)	tree pointer		*/
  5   102 			/* parameter 4:	(input)	context			*/
  5   103 			/* return:	(output)	tree pointer		*/
  5   104 
  5   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  5   106 			returns(pointer);
  5   107 			/* parameter 1:	(input)	block node pointer		*/
  5   108 			/* parameter 2:	(input)	statement node pointer	*/
  5   109 			/* parameter 3:	(input)	tree pointer		*/
  5   110 			/* parameter 4:	(in/out)	context			*/
  5   111 			/* return:	(output)	tree pointer		*/
  5   112 
  5   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  5   114 			returns(pointer);
  5   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  5   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  5   117 			/* parameter 3:	(input)	copy switch for param 2 */
  5   118 			/* return:	(output)	ptr to processed tree */
  5   119 
  5   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  5   121 			/* parameter 1:	(input)	block node pointer		*/
  5   122 			/* parameter 2:	(input)	statement node pointer	*/
  5   123 			/* parameter 3:	(in/out)	tree pointer		*/
  5   124 
  5   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  5   126 			returns(pointer);
  5   127 			/* parameter 1:	(input)	block node pointer		*/
  5   128 			/* parameter 2:	(input)	statement node pointer	*/
  5   129 			/* parameter 3:	(input)	tree pointer		*/
  5   130 			/* parameter 4:	(input)	symbol node pointer		*/
  5   131 			/* parameter 5:	(in/out)	context			*/
  5   132 			/* return:	(output)	tree pointer		*/
  5   133 
  5   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  5   135 			returns(pointer);
  5   136 			/* parameter 1:	(input)	block node pointer	*/
  5   137 			/* parameter 2:	(input)	statement node pointer	*/
  5   138 			/* parameter 3:	(input)	tree pointer	*/
  5   139 			/* parameter 4:	(input)	pointer to argument list	*/
  5   140 			/* parameter 5:	(in/out)	context		*/
  5   141 			/* return:	(output)	tree pointer	*/
  5   142 
  5   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  5   144 			/* parameter 1:	(input)	block node pointer		*/
  5   145 			/* parameter 2:	(input)	statement node pointer	*/
  5   146 			/* parameter 3:	(input)	operator node pointer	*/
  5   147 
  5   148 declare	io_semantics	entry(pointer,pointer,pointer);
  5   149 			/* parameter 1:	(input)	block node pointer		*/
  5   150 			/* parameter 2:	(input)	statement node pointer	*/
  5   151 			/* parameter 3:	(input)	tree pointer		*/
  5   152 
  5   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  5   154 			returns(bit(1) aligned);
  5   155 			/* parameter 1:	(input)	block node pointer		*/
  5   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  5   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  5   158 			/* parameter 4:	(output)	symbol node pointer		*/
  5   159 			/* parameter 5:	(in/out)	context			*/
  5   160 			/* return:	(output)	symbol found bit		*/
  5   161 
  5   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  5   163 			/* parameter 1:	(input)	tree pointer	*/
  5   164 			/* parameter 2:	(input)	reason why being made nonquick */
  5   165 
  5   166 declare	match_arguments	entry(pointer,pointer) reducible
  5   167 			returns(bit(1) aligned);
  5   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  5   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  5   170 			/* return:	(output)	compare bit		*/
  5   171 
  5   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  5   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  5   174 			/* parameter 1:	(in/out)	tree pointer		*/
  5   175 			/* parameter 2:	(in/out)	constant size		*/
  5   176 			/* parameter 3:	(in/out)	units			*/
  5   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  5   178 			/* parameter 5:	(input)	tree pointer		*/
  5   179 			/* parameter 6:	(input)	constant size		*/
  5   180 			/* parameter 7:	(input)	units			*/
  5   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  5   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  5   183 
  5   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  5   185 			returns(pointer);
  5   186 			/* parameter 1:	(input)	block node pointer		*/
  5   187 			/* parameter 2:	(input)	statement node pointer	*/
  5   188 			/* parameter 3:	(input)	tree pointer		*/
  5   189 			/* parameter 4:	(in/out)	context			*/
  5   190 			/* return:	(output)	tree pointer		*/
  5   191 
  5   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  5   193 			/* parameter 1:	(input)	symbol node pointer		*/
  5   194 			/* parameter 2:	(input)	attribute number		*/
  5   195 
  5   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  5   197 			returns(pointer);
  5   198 			/* parameter 1:	(input)	block ptr	*/
  5   199 			/* parameter 2:	(input)	statement ptr	*/
  5   200 			/* parameter 3:	(input)	tree ptr	*/
  5   201 			/* parameter 4:	(input)	failure label	*/
  5   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  5   203 			/* return:	(output)	tree ptr		*/
  5   204 
  5   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  5   206 			/* parameter 1:	(in/out)	tree pointer		*/
  5   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  5   208*						is simplified		*/
  5   209 			/* parameter 3:	(output)	bit indicating if the tree has
  5   210*						been simplified		*/
  5   211 
  5   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  5   213 			/* parameter 1:	(input)	reference node pointer	*/
  5   214 			/* parameter 2:	(input)	context			*/
  5   215 
  5   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  5   217 			returns(pointer);
  5   218 			/* parameter 1:	(input)	block node pointer		*/
  5   219 			/* parameter 2:	(input)	statement node pointer	*/
  5   220 			/* parameter 3:	(input)	tree pointer		*/
  5   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  5   222 			/* parameter 5:	(input)	symbol node pointer		*/
  5   223 			/* return:	(output)	reference node pointer	*/
  5   224 
  5   225 declare	validate		entry(pointer);
  5   226 			/* parameter 1:	(input)	symbol node pointer		*/
  5   227 
  6     1 /****^  *********************************************************
  6     2*        *                                                       *
  6     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  6     4*        *                                                       *
  6     5*        ********************************************************* */
  6     6 
  6     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  6     8 
  6     9 
  6    10 /****^  HISTORY COMMENTS:
  6    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  6    12*     install(89-07-31,MR12.3-1066):	
  6    13*     Removed the obsolete parameter source_line from the dcl of error_().
  6    14*                                                   END HISTORY COMMENTS */
  6    15 
  6    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  6    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  6    18* */
  6    19 
  6    20 declare	adjust_count	entry(pointer);
  6    21 			/* parameter 1:	(input)	any node pointer		*/
  6    22 
  6    23 declare	bindec		entry(fixed bin(31)) reducible
  6    24 			returns(character(12) aligned);
  6    25 			/* parameter 1:	(input)	bin value			*/
  6    26 			/* return:	(output)	character value with blanks	*/
  6    27 
  6    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  6    29 			returns(character(12) aligned varying);
  6    30 			/* parameter 1:	(input)	binary value		*/
  6    31 			/* return:	(output)	char value without blanks	*/
  6    32 
  6    33 declare	binoct		entry(fixed bin(31)) reducible
  6    34 			returns(char(12) aligned);
  6    35 			/* parameter 1:	(input)	binary value		*/
  6    36 			/* return:	(output)	char value with blanks	*/
  6    37 
  6    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  6    39 			returns(char(12) aligned);
  6    40 			/* parameter 1:	(input)	binary value		*/
  6    41 			/* return:	(output)	right-aligned char value	*/
  6    42 
  6    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  6    44 			returns(char(12) varying aligned);
  6    45 			/* parameter 1:	(input)	binary value		*/
  6    46 			/* returns:	(output)	char value without blanks	*/
  6    47 
  6    48 declare	compare_expression	entry(pointer,pointer) reducible
  6    49 			returns(bit(1) aligned);
  6    50 			/* parameter 1:	(input)	any node pointer		*/
  6    51 			/* parameter 2:	(input)	any node pointer		*/
  6    52 			/* return:	(output)	compare bit		*/
  6    53 
  6    54 declare	constant_length	entry (pointer, fixed bin (71))
  6    55 			returns (bit (1) aligned);
  6    56 			/* parameter 1:	(input)	reference node pointer	*/
  6    57 			/* parameter 2:	(input)	value of constant length	*/
  6    58 			/* return:	(output)	"1"b if constant length	*/
  6    59 
  6    60 declare	convert		entry(pointer,bit(36) aligned)
  6    61 			returns(pointer);
  6    62 			/* parameter 1:	(input)	any node pointer		*/
  6    63 			/* parameter 2:	(input)	target type		*/
  6    64 			/* return:	(output)	target value tree pointer	*/
  6    65 
  6    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  6    67 			returns(pointer);
  6    68 			/* parameter 1:	(input)	any node pointer		*/
  6    69 			/* parameter 2:	(input)	target type		*/
  6    70 			/* return:	(output)	target value tree pointer	*/
  6    71 
  6    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  6    73 			returns(pointer);
  6    74 			/* parameter 1:	(input)	any node pointer		*/
  6    75 			/* parameter 2:	(input)	target type		*/
  6    76 			/* return:	(output)	target value tree pointer	*/
  6    77 
  6    78 declare	convert$validate	entry(pointer,pointer);
  6    79 			/* parameter 1:	(input)	source value tree pointer	*/
  6    80 			/* parameter 2:	(input)	target reference node pointer	*/
  6    81 
  6    82 declare	convert$to_target_fb entry(pointer,pointer)
  6    83 			returns(pointer);
  6    84 			/* parameter 1:	(input)	source value tree pointer	*/
  6    85 			/* parameter 2:	(input)	target reference node pointer	*/
  6    86 			/* return:	(output)	target value tree pointer	*/
  6    87 
  6    88 declare	convert$to_target	entry(pointer,pointer)
  6    89 			returns(pointer);
  6    90 			/* parameter 1:	(input)	source value tree pointer	*/
  6    91 			/* parameter 2:	(input)	target reference node pointer	*/
  6    92 			/* return:	(output)	target value tree pointer	*/
  6    93 
  6    94 declare	copy_expression	entry(pointer unaligned)
  6    95 			returns(pointer);
  6    96 			/* parameter 1:	(input)	any node pointer		*/
  6    97 			/* return:	(output)	any node pointer		*/
  6    98 
  6    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  6   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  6   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  6   102 
  6   103 declare	copy_unique_expression entry(pointer)
  6   104 			returns(pointer);
  6   105 			/* parameter 1:	(input)	any node pointer		*/
  6   106 			/* return:	(output)	any node pointer		*/
  6   107 
  6   108 declare	create_array	entry()
  6   109 			returns(pointer);
  6   110 			/* return:	(output)	array node pointer		*/
  6   111 
  6   112 declare	create_block	entry(bit(9) aligned,pointer)
  6   113 			returns(pointer);
  6   114 			/* parameter 1:	(input)	block type		*/
  6   115 			/* parameter 2:	(input)	father block node pointer	*/
  6   116 			/* return:	(output)	block node pointer		*/
  6   117 
  6   118 declare	create_bound	entry()
  6   119 			returns(pointer);
  6   120 			/* return:	(output)	bound node pointer		*/
  6   121 
  6   122 declare	create_context	entry(pointer,pointer)
  6   123 			returns(pointer);
  6   124 			/* parameter 1:	(input)	block node pointer		*/
  6   125 			/* parameter 2:	(input)	token pointer		*/
  6   126 			/* return:	(output)	context node pointer	*/
  6   127 
  6   128 declare	create_cross_reference entry()
  6   129 			returns(pointer);
  6   130 			/* return:	(output)	cross reference node pointer	*/
  6   131 
  6   132 declare	create_default	entry
  6   133 			returns(pointer);
  6   134 			/* return:	(output)	default node pointer	*/
  6   135 
  6   136 declare	create_identifier	entry()
  6   137 			returns(pointer);
  6   138 			/* return:	(output)	token node pointer		*/
  6   139 
  6   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  6   141 			returns(pointer);
  6   142 			/* parameter 1:	(input)	block node pointer		*/
  6   143 			/* parameter 2:	(input)	token node pointer		*/
  6   144 			/* parameter 3:	(input)	declare type		*/
  6   145 			/* return:	(output)	label node pointer		*/
  6   146 
  6   147 declare	create_list	entry(fixed bin(15))
  6   148 			returns(pointer);
  6   149 			/* parameter 1:	(input)	number of list elements	*/
  6   150 			/* return:	(output)	list node pointer		*/
  6   151 
  6   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  6   153 			returns(pointer);
  6   154 			/* parameter 1:	(input)	operator type		*/
  6   155 			/* parameter 2:	(input)	number of operands		*/
  6   156 			/* return:	(output)	operator node pointer	*/
  6   157 
  6   158 declare	create_reference	entry(pointer)
  6   159 			returns(pointer);
  6   160 			/* parameter 1:	(input)	symbol node pointer		*/
  6   161 			/* return:	(output)	reference node pointer	*/
  6   162 
  6   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  6   164 			returns(pointer);
  6   165 			/* parameter 1:	(input)	statement type		*/
  6   166 			/* parameter 2:	(input)	block node pointer		*/
  6   167 			/* parameter 3:	(input)	label node pointer		*/
  6   168 			/* parameter 4:	(input)	conditions		*/
  6   169 			/* return:	(output)	statement node pointer	*/
  6   170 
  6   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  6   172 			returns(pointer);
  6   173 			/* parameter 1:	(input)	statement type		*/
  6   174 			/* parameter 2:	(input)	block node pointer		*/
  6   175 			/* parameter 3:	(input)	label node pointer		*/
  6   176 			/* parameter 4:	(input)	conditions		*/
  6   177 			/* return:	(output)	statement node pointer	*/
  6   178 
  6   179 declare	create_storage	entry(fixed bin(15))
  6   180 			returns(pointer);
  6   181 			/* parameter 1:	(input)	number of words		*/
  6   182 			/* return:	(output)	storage block pointer	*/
  6   183 
  6   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  6   185 			returns(pointer);
  6   186 			/* parameter 1:	(input)	block node pointer		*/
  6   187 			/* parameter 2:	(input)	token node pointer		*/
  6   188 			/* parameter 3:	(input)	declare type		*/
  6   189 			/* return:	(output)	symbol node pointer		*/
  6   190 
  6   191 declare	create_token	entry (character (*), bit (9) aligned)
  6   192 			returns (ptr);
  6   193 			/* parameter 1:	(input)	token string		*/
  6   194 			/* parameter 2:	(input)	token type		*/
  6   195 			/* return:	(output)	token node ptr		*/
  6   196 
  6   197 declare	create_token$init_hash_table entry ();
  6   198 
  6   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  6   200 			returns (ptr);
  6   201 			/* parameter 1:	(input)	token string		*/
  6   202 			/* parameter 2:	(input)	token type		*/
  6   203 			/* parameter 3:	(input)	protected flag		*/
  6   204 			/* return:	(output)	token node ptr		*/
  6   205 
  6   206 declare	decbin		entry(character(*) aligned) reducible
  6   207 			returns(fixed bin(31));
  6   208 			/* parameter 1:	(input)	decimal character string	*/
  6   209 			/* return:	(output)	binary value		*/
  6   210 
  6   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  6   212 			returns(pointer);
  6   213 			/* parameter 1:	(input)	value			*/
  6   214 			/* parameter 2:	(input)	type			*/
  6   215 			/* parameter 3:	(input)	size			*/
  6   216 			/* parameter 4:	(input)	scale			*/
  6   217 			/* return:	(output)	reference node pointer	*/
  6   218 
  6   219 declare	declare_constant$bit entry(bit(*) aligned)
  6   220 			returns(pointer);
  6   221 			/* parameter 1:	(input)	bit			*/
  6   222 			/* return:	(output)	reference node pointer	*/
  6   223 
  6   224 declare	declare_constant$char entry(character(*) aligned)
  6   225 			returns(pointer);
  6   226 			/* parameter 1:	(input)	character			*/
  6   227 			/* return:	(output)	reference node pointer	*/
  6   228 
  6   229 declare	declare_constant$desc entry(bit(*) aligned)
  6   230 			returns(pointer);
  6   231 			/* parameter 1:	(input)	descriptor bit value	*/
  6   232 			/* return:	(output)	reference node pointer	*/
  6   233 
  6   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  6   235 			returns(pointer);
  6   236 			/* parameter 1:	(input)	integer			*/
  6   237 			/* return:	(output)	reference node pointer	*/
  6   238 
  6   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   240 			returns(pointer);
  6   241 			/* parameter 1:	(input)	block node pointer		*/
  6   242 			/* parameter 2:	(input)	statement node pointer	*/
  6   243 			/* parameter 3:	(input)	symbol node pointer		*/
  6   244 			/* parameter 4:	(input)	loc pointer		*/
  6   245 			/* parameter 5:	(input)	array descriptor bit
  6   246*						cross_section bit	*/
  6   247 			/* return:	(output)	reference node pointer	*/
  6   248 
  6   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   250 			returns(pointer);
  6   251 			/* parameter 1:	(input)	block node pointer	*/
  6   252 			/* parameter 2:	(input)	statement node pointer 	*/
  6   253 			/* parameter 3:	(input)	symbol node pointer	*/
  6   254 			/* parameter 4:	(input)	loc pointer	*/
  6   255 			/* parameter 5:	(input)	array descriptor bit
  6   256*						cross_section bit	*/
  6   257 			/* return:	(output)	reference node pointer	*/
  6   258 
  6   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   260 			returns(pointer);
  6   261 			/* parameter 1:	(input)	block node pointer		*/
  6   262 			/* parameter 2:	(input)	statement node pointer	*/
  6   263 			/* parameter 3:	(input)	symbol node pointer		*/
  6   264 			/* parameter 4:	(input)	loc pointer		*/
  6   265 			/* parameter 5:	(input)	array descriptor bit
  6   266*						cross_section bit	*/
  6   267 			/* return:	(output)	reference node pointer	*/
  6   268 
  6   269 declare	declare_integer	entry(pointer)
  6   270 			returns(pointer);
  6   271 			/* parameter 1:	(input)	block node pointer		*/
  6   272 			/* return:	(output)	reference node pointer 	*/
  6   273 
  6   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  6   275 			/* parameter 1:	(input)	picture string		*/
  6   276 			/* parameter 2:	(input)	symbol node pointer		*/
  6   277 			/* parameter 3:	(output)	error code, if any		*/
  6   278 
  6   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  6   280 			returns(pointer);
  6   281 			/* parameter 1:	(input)	picture string		*/
  6   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  6   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  6   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  6   285 			/* return:	(output)	reference node pointer	*/
  6   286 
  6   287 declare	declare_pointer	entry(pointer)
  6   288 			returns(pointer);
  6   289 			/* parameter 1:	(input)	block node pointer		*/
  6   290 			/* return:	(output)	reference node pointer	*/
  6   291 
  6   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  6   293 			returns(pointer);
  6   294 			/* parameter 1:	(input)	type			*/
  6   295 			/* parameter 2:	(input)	precision			*/
  6   296 			/* parameter 3:	(input)	scale			*/
  6   297 			/* parameter 4:	(input)	length			*/
  6   298 			/* return:	(output)	reference node pointer	*/
  6   299 
  6   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  6   301 			returns(char(120) varying);
  6   302 			/* parameter 1:	(input)	node pointer		*/
  6   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  6   304 			/* return:	(output)	source line id		*/
  6   305 
  6   306 declare	decode_source_id	entry(
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  6   307 
  6   308 			bit(1) aligned)
  6   309 			returns(char(120) varying);
  6   310 			/* parameter 1:	(input)	source id			*/
  6   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  6   312 			/* return:	(output)	source line id		*/
  6   313 
  6   314 declare	error		entry(fixed bin(15),pointer,pointer);
  6   315 			/* parameter 1:	(input)	error number		*/
  6   316 			/* parameter 2:	(input)	statement node pointer or null*/
  6   317 			/* parameter 3:	(input)	token node pointer 		*/
  6   318 
  6   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  6   320 			/* parameter 1:	(input)	error number		*/
  6   321 			/* parameter 2:	(input)	statement node pointer or null*/
  6   322 			/* parameter 3:	(input)	token node pointer 		*/
  6   323 
  6   324 declare	error_		entry(fixed bin(15),
  8     1 			1 structure unaligned,
  8     2 			  2 /* file_number */	bit(8),
  8     3 			  2 /* line_number */	bit(14),
  8     4 			  2 /* stmt_number */	bit(5),
  6   325 
  6   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  6   327 			/* parameter 1:	(input)	error number		*/
  6   328 			/* parameter 2:	(input)	statement id		*/
  6   329 			/* parameter 3:	(input)	any node pointer		*/
  6   330 			/* parameter 4:	(input)	source segment		*/
  6   331 			/* parameter 5:	(input)	source starting character	*/
  6   332 			/* parameter 6:	(input)	source length		*/
  6   333 
  6   334 declare	error_$no_text	entry(fixed bin(15),
  9     1 			1 structure unaligned,
  9     2 			  2 /* file_number */	bit(8),
  9     3 			  2 /* line_number */	bit(14),
  9     4 			  2 /* stmt_number */	bit(5),
  6   335 
  6   336 			pointer);
  6   337 			/* parameter 1:	(input)	error number		*/
  6   338 			/* parameter 2:	(input)	statement id		*/
  6   339 			/* parameter 3:	(input)	any node pointer		*/
  6   340 
  6   341 declare	error_$initialize_error entry();
  6   342 
  6   343 declare	error_$finish	entry();
  6   344 
  6   345 declare	free_node		entry(pointer);
  6   346 			/* parameter 1:	any node pointer			*/
  6   347 
  6   348 declare	get_array_size	entry(pointer,fixed bin(3));
  6   349 			/* parameter 1:	(input)	symbol node pointer		*/
  6   350 			/* parameter 2:	(input)	units			*/
  6   351 
  6   352 declare	get_size		entry(pointer);
  6   353 			/* parameter 1:	(input)	symbol node pointer		*/
  6   354 
  6   355 declare	merge_attributes	external entry(pointer,pointer)
  6   356 			returns(bit(1) aligned);
  6   357 			/* parameter 1:	(input)	target symbol node pointer */
  6   358 			/* parameter 2:	(input)	source symbol node pointer */
  6   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  6   360 
  6   361 declare	optimizer		entry(pointer);
  6   362 			/* parameter 1:	(input)	root pointer		*/
  6   363 
  6   364 declare	parse_error	entry(fixed bin(15),pointer);
  6   365 			/* parameter 1:	(input)	error number		*/
  6   366 			/* parameter 2:	(input)	any node pointer		*/
  6   367 
  6   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  6   369 			/* parameter 1:	(input)	error number		*/
  6   370 			/* parameter 2:	(input)	any node pointer		*/
  6   371 
  6   372 declare	pl1_error_print$write_out
  6   373 			entry(fixed bin(15),
 10     1 			1 structure unaligned,
 10     2 			  2 /* file_number */	bit(8),
 10     3 			  2 /* line_number */	bit(14),
 10     4 			  2 /* stmt_number */	bit(5),
  6   374 
  6   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  6   376 			/* parameter 1:	(input)	error number		*/
  6   377 			/* parameter 2:	(input)	statement identification	*/
  6   378 			/* parameter 3:	(input)	any node pointer		*/
  6   379 			/* parameter 4:	(input)	source segment		*/
  6   380 			/* parameter 5:	(input)	source character index	*/
  6   381 			/* parameter 6:	(input)	source length		*/
  6   382 			/* parameter 7:	(input)	source line		*/
  6   383 
  6   384 declare	pl1_error_print$listing_segment
  6   385 			entry(fixed bin(15),
 11     1 			1 structure unaligned,
 11     2 			  2 /* file_number */	bit(8),
 11     3 			  2 /* line_number */	bit(14),
 11     4 			  2 /* stmt_number */	bit(5),
  6   386 
  6   387 			pointer);
  6   388 			/* parameter 1:	(input)	error number		*/
  6   389 			/* parameter 2:	(input)	statement identification	*/
  6   390 			/* parameter 3:	(input)	token node pointer		*/
  6   391 
  6   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  6   393 			/* parameter 1:	(input)	string			*/
  6   394 
  6   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  6   396 			/* parameter 1:	(input)	string			*/
  6   397 
  6   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  6   399 			/* parameter 1:	(input)	string			*/
  6   400 			/* parameter 2:	(input)	string length or 0		*/
  6   401 
  6   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  6   403 			/* parameter 1:	(input)	string			*/
  6   404 			/* parameter 2:	(input)	string length or 0		*/
  6   405 
  6   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  6   407 			/* parameter 1:	(input)	string pointer		*/
  6   408 			/* parameter 2:	(input)	string size		*/
  6   409 
  6   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  6   411 			/* parameter 1:	(input)	string pointer		*/
  6   412 			/* parameter 2:	(input)	string length or 0		*/
  6   413 
  6   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  6   415 			/* parameter 1:	(input)	string			*/
  6   416 			/* parameter 2:	(input)	length			*/
  6   417 
  6   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  6   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  6   420 			/* parameter 2:	(input)	line number		*/
  6   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  6   422 			/* parameter 4:	(input)	number of chars to copy	*/
  6   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  6   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  6   425 
  6   426 declare	refer_extent	entry(pointer,pointer);
  6   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  6   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  6   429 
  6   430 declare	reserve$clear	entry()
  6   431 			returns(pointer);
  6   432 			/* return:	(output)	pointer			*/
  6   433 
  6   434 declare	reserve$declare_lib	entry(fixed bin(15))
  6   435 			returns(pointer);
  6   436 			/* parameter 1:	(input)	builtin function number	*/
  6   437 			/* return:	(output)	pointer			*/
  6   438 
  6   439 declare	reserve$read_lib	entry(fixed bin(15))
  6   440 			returns(pointer);
  6   441 			/* parameter 1:	(input)	builtin function number	*/
  6   442 			/* return:	(output)	pointer			*/
  6   443 
  6   444 declare	semantic_translator	entry();
  6   445 
  6   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  6   447 			/* parameter 1:	(input)	error number		*/
  6   448 			/* parameter 2:	(input)	any node pointer		*/
  6   449 
  6   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  6   451 			/* parameter 1:	(input)	error number		*/
  6   452 			/* parameter 2:	(input)	any node pointer		*/
  6   453 
  6   454 declare	share_expression	entry(ptr)
  6   455 			returns(ptr);
  6   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  6   457 			/* return:	(output)	tree pointer or null	*/
  6   458 
  6   459 declare	token_to_binary	entry(ptr) reducible
  6   460 			returns(fixed bin(31));
  6   461 			/* parameter 1:	(input)	token node pointer		*/
  6   462 			/* return:	(output)	converted binary value	*/
  6   463 
  6   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  5   228 
  5   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      658 
 12     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 12     2 
 12     3 dcl	1 symbol			based aligned,
 12     4 	2 node_type		bit(9) unal,
 12     5 	2 source_id		structure unal,
 12     6 	  3 file_number		bit(8),
 12     7 	  3 line_number		bit(14),
 12     8 	  3 statement_number	bit(5),
 12     9 	2 location		fixed(18) unal unsigned,
 12    10 	2 allocated		bit(1) unal,
 12    11 	2 dcl_type		bit(3) unal,
 12    12 	2 reserved		bit(6) unal,
 12    13 	2 pix			unal,
 12    14 	  3 pic_fixed		bit(1) unal,
 12    15 	  3 pic_float		bit(1) unal,
 12    16 	  3 pic_char		bit(1) unal,
 12    17 	  3 pic_scale		fixed(7) unal,
 12    18 	  3 pic_size		fixed(7) unal,
 12    19 	2 level			fixed(8) unal,
 12    20 	2 boundary		fixed(3) unal,
 12    21 	2 size_units		fixed(3) unal,
 12    22 	2 scale			fixed(7) unal,
 12    23 	2 runtime			bit(18) unal,
 12    24 	2 runtime_offset		bit(18) unal,
 12    25 	2 block_node		ptr unal,
 12    26 	2 token			ptr unal,
 12    27 	2 next			ptr unal,
 12    28 	2 multi_use		ptr unal,
 12    29 	2 cross_references		ptr unal,
 12    30 	2 initial			ptr unal,
 12    31 	2 array			ptr unal,
 12    32 	2 descriptor		ptr unal,
 12    33 	2 equivalence		ptr unal,
 12    34 	2 reference		ptr unal,
 12    35 	2 general			ptr unal,
 12    36 	2 father			ptr unal,
 12    37 	2 brother			ptr unal,
 12    38 	2 son			ptr unal,
 12    39 	2 word_size		ptr unal,
 12    40 	2 bit_size		ptr unal,
 12    41 	2 dcl_size		ptr unal,
 12    42 	2 symtab_size		ptr unal,
 12    43 	2 c_word_size		fixed(24),
 12    44 	2 c_bit_size		fixed(24),
 12    45 	2 c_dcl_size		fixed(24),
 12    46 
 12    47 	2 attributes		structure aligned,
 12    48 	  3 data_type		structure unal,
 12    49 	    4 structure		bit(1) ,
 12    50 	    4 fixed		bit(1),
 12    51 	    4 float		bit(1),
 12    52 	    4 bit			bit(1),
 12    53 	    4 char		bit(1),
 12    54 	    4 ptr			bit(1),
 12    55 	    4 offset		bit(1),
 12    56 	    4 area		bit(1),
 12    57 	    4 label		bit(1),
 12    58 	    4 entry		bit(1),
 12    59 	    4 file		bit(1),
 12    60 	    4 arg_descriptor	bit(1),
 12    61 	    4 storage_block		bit(1),
 12    62 	    4 explicit_packed	bit(1), /* options(packed) */
 12    63 	    4 condition		bit(1),
 12    64 	    4 format		bit(1),
 12    65 	    4 builtin		bit(1),
 12    66 	    4 generic		bit(1),
 12    67 	    4 picture		bit(1),
 12    68 
 12    69 	  3 misc_attributes		structure unal,
 12    70 	    4 dimensioned		bit(1),
 12    71 	    4 initialed		bit(1),
 12    72 	    4 aligned		bit(1),
 12    73 	    4 unaligned		bit(1),
 12    74 	    4 signed		bit(1),
 12    75 	    4 unsigned		bit(1),
 12    76 	    4 precision		bit(1),
 12    77 	    4 varying		bit(1),
 12    78 	    4 local		bit(1),
 12    79 	    4 decimal		bit(1),
 12    80 	    4 binary		bit(1),
 12    81 	    4 real		bit(1),
 12    82 	    4 complex		bit(1),
 12    83 	    4 variable		bit(1),
 12    84 	    4 reducible		bit(1),
 12    85 	    4 irreducible		bit(1),
 12    86 	    4 returns		bit(1),
 12    87 	    4 position		bit(1),
 12    88 	    4 internal		bit(1),
 12    89 	    4 external		bit(1),
 12    90 	    4 like		bit(1),
 12    91 	    4 member		bit(1),
 12    92 	    4 non_varying		bit(1),
 12    93 	    4 options		bit(1),
 12    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 12    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 12    96 
 12    97 	  3 storage_class		structure unal,
 12    98 	    4 auto		bit(1),
 12    99 	    4 based		bit(1),
 12   100 	    4 static		bit(1),
 12   101 	    4 controlled		bit(1),
 12   102 	    4 defined		bit(1),
 12   103 	    4 parameter		bit(1),
 12   104 	    4 param_desc		bit(1),
 12   105 	    4 constant		bit(1),
 12   106 	    4 temporary		bit(1),
 12   107 	    4 return_value		bit(1),
 12   108 
 12   109 	  3 file_attributes		structure unal,
 12   110 	    4 print		bit(1),
 12   111 	    4 input		bit(1),
 12   112 	    4 output		bit(1),
 12   113 	    4 update		bit(1),
 12   114 	    4 stream		bit(1),
 12   115 	    4 reserved_1		bit(1),
 12   116 	    4 record		bit(1),
 12   117 	    4 sequential		bit(1),
 12   118 	    4 direct		bit(1),
 12   119 	    4 interactive		bit(1),		/* env(interactive) */
 12   120 	    4 reserved_2		bit(1),
 12   121 	    4 reserved_3		bit(1),
 12   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 12   123 	    4 keyed		bit(1),
 12   124 	    4 reserved_4		bit(1),
 12   125 	    4 environment		bit(1),
 12   126 
 12   127 	  3 compiler_developed	structure unal,
 12   128 	    4 aliasable		bit(1),
 12   129 	    4 packed		bit(1),
 12   130 	    4 passed_as_arg		bit(1),
 12   131 	    4 allocate		bit(1),
 12   132 	    4 set			bit(1),
 12   133 	    4 exp_extents		bit(1),
 12   134 	    4 refer_extents		bit(1),
 12   135 	    4 star_extents		bit(1),
 12   136 	    4 isub		bit(1),
 12   137 	    4 put_in_symtab		bit(1),
 12   138 	    4 contiguous		bit(1),
 12   139 	    4 put_data		bit(1),
 12   140 	    4 overlayed		bit(1),
 12   141 	    4 error		bit(1),
 12   142 	    4 symtab_processed	bit(1),
 12   143 	    4 overlayed_by_builtin	bit(1),
 12   144 	    4 defaulted		bit(1),
 12   145 	    4 connected		bit(1);
 12   146 
 12   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      659 
 13     1 dcl	1 array			based aligned,
 13     2 	2 node_type		bit(9) unaligned,
 13     3 	2 reserved		bit(34) unaligned,
 13     4 	2 number_of_dimensions	fixed(7) unaligned,
 13     5 	2 own_number_of_dimensions	fixed(7) unaligned,
 13     6 	2 element_boundary		fixed(3) unaligned,
 13     7 	2 size_units		fixed(3) unaligned,
 13     8 	2 offset_units		fixed(3) unaligned,
 13     9 	2 interleaved		bit(1) unaligned,
 13    10 	2 c_element_size		fixed(24),
 13    11 	2 c_element_size_bits	fixed(24),
 13    12 	2 c_virtual_origin		fixed(24),
 13    13 	2 element_size		ptr unaligned,
 13    14 	2 element_size_bits		ptr unaligned,
 13    15 	2 virtual_origin		ptr unaligned,
 13    16 	2 symtab_virtual_origin	ptr unaligned,
 13    17 	2 symtab_element_size	ptr unaligned,
 13    18 	2 bounds			ptr unaligned,
 13    19 	2 element_descriptor	ptr unaligned;
 13    20 
 13    21 dcl	1 bound			based aligned,
 13    22 	2 node_type		bit(9),
 13    23 	2 c_lower			fixed(24),
 13    24 	2 c_upper			fixed(24),
 13    25 	2 c_multiplier		fixed(24),
 13    26 	2 c_desc_multiplier		fixed(24),
 13    27 	2 lower			ptr unaligned,
 13    28 	2 upper			ptr unaligned,
 13    29 	2 multiplier		ptr unaligned,
 13    30 	2 desc_multiplier		ptr unaligned,
 13    31 	2 symtab_lower		ptr unaligned,
 13    32 	2 symtab_upper		ptr unaligned,
 13    33 	2 symtab_multiplier		ptr unaligned,
 13    34 	2 next			ptr unaligned;
      660 
 14     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 14     2 
 14     3 dcl	1 reference		based aligned,
 14     4 	2 node_type		bit(9) unaligned,
 14     5 	2 array_ref		bit(1) unaligned,
 14     6 	2 varying_ref		bit(1) unaligned,
 14     7 	2 shared			bit(1) unaligned,
 14     8 	2 put_data_sw		bit(1) unaligned,
 14     9 	2 processed		bit(1) unaligned,
 14    10 	2 units			fixed(3) unaligned,
 14    11 	2 ref_count		fixed(17) unaligned,
 14    12 	2 c_offset		fixed(24),
 14    13 	2 c_length		fixed(24),
 14    14 	2 symbol			ptr unaligned,
 14    15 	2 qualifier		ptr unaligned,
 14    16 	2 offset			ptr unaligned,
 14    17 	2 length			ptr unaligned,
 14    18 	2 subscript_list		ptr unaligned,
 14    19 						/* these fields are used by the 645 code generator */
 14    20 	2 address			structure unaligned,
 14    21 	  3 base			bit(3),
 14    22 	  3 offset		bit(15),
 14    23 	  3 op			bit(9),
 14    24 	  3 no_address		bit(1),
 14    25 	  3 inhibit		bit(1),
 14    26 	  3 ext_base		bit(1),
 14    27 	  3 tag			bit(6),
 14    28 	2 info			structure unaligned,
 14    29 	  3 address_in		structure,
 14    30 	    4 b			dimension(0:7) bit(1),
 14    31 	    4 storage		bit(1),
 14    32 	  3 value_in		structure,
 14    33 	    4 a			bit(1),
 14    34 	    4 q			bit(1),
 14    35 	    4 aq			bit(1),
 14    36 	    4 string_aq		bit(1),
 14    37 	    4 complex_aq		bit(1),
 14    38 	    4 decimal_aq		bit(1),
 14    39 	    4 b			dimension(0:7) bit(1),
 14    40 	    4 storage		bit(1),
 14    41 	    4 indicators		bit(1),
 14    42 	    4 x			dimension(0:7) bit(1),
 14    43 	  3 other			structure,
 14    44 	    4 big_offset		bit(1),
 14    45 	    4 big_length		bit(1),
 14    46 	    4 modword_in_offset	bit(1),
 14    47 	2 data_type		fixed(5) unaligned,
 14    48 	2 bits			structure unaligned,
 14    49 	  3 padded_ref		bit(1),
 14    50 	  3 aligned_ref		bit(1),
 14    51 	  3 long_ref		bit(1),
 14    52 	  3 forward_ref		bit(1),
 14    53 	  3 ic_ref		bit(1),
 14    54 	  3 temp_ref		bit(1),
 14    55 	  3 defined_ref		bit(1),
 14    56 	  3 evaluated		bit(1),
 14    57 	  3 allocate		bit(1),
 14    58 	  3 allocated		bit(1),
 14    59 	  3 aliasable		bit(1),
 14    60 	  3 even			bit(1),
 14    61 	  3 perm_address		bit(1),
 14    62 	  3 aggregate		bit(1),
 14    63 	  3 hit_zero		bit(1),
 14    64 	  3 dont_save		bit(1),
 14    65 	  3 fo_in_qual		bit(1),
 14    66 	  3 hard_to_load		bit(1),
 14    67 	2 relocation		bit(12) unaligned,
 14    68 	2 more_bits		structure unaligned,
 14    69 	  3 substr		bit(1),
 14    70 	  3 padded_for_store_ref	bit(1),
 14    71 	  3 aligned_for_store_ref	bit(1),
 14    72 	  3 mbz			bit(15),
 14    73 	2 store_ins		bit(18) unaligned;
 14    74 
 14    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      661 
 15     1 /* ***********************************************************
 15     2*   *                                                         *
 15     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 15     4*   *                                                         *
 15     5*   *********************************************************** */
 15     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 15     7 /* Internal interface of the PL/I compiler */
 15     8 
 15     9 dcl	1 statement		based aligned,
 15    10 	2 node_type		bit(9) unaligned,
 15    11 	2 source_id		structure unaligned,
 15    12 	  3 file_number		bit(8),
 15    13 	  3 line_number		bit(14),
 15    14 	  3 statement_number	bit(5),
 15    15 	2 next			ptr unaligned,
 15    16 	2 back			ptr unaligned,
 15    17 	2 root			ptr unaligned,
 15    18 	2 labels			ptr unaligned,
 15    19 	2 reference_list		ptr unaligned,
 15    20 	2 state_list		ptr unaligned,
 15    21 	2 reference_count		fixed(17) unaligned,
 15    22 	2 ref_count_copy		fixed(17) unaligned,
 15    23 	2 object			structure unaligned,
 15    24 	  3 start			fixed(17),
 15    25 	  3 finish		fixed(17),
 15    26 	2 source			structure unaligned,
 15    27 	  3 segment		fixed(11),
 15    28 	  3 start			fixed(23),
 15    29 	  3 length		fixed(11),
 15    30 	2 prefix			bit(12) unaligned,
 15    31 	2 optimized		bit(1) unaligned,
 15    32 	2 free_temps		bit(1) unaligned,
 15    33 	2 LHS_in_RHS		bit(1) unaligned,
 15    34 	2 statement_type		bit(9) unaligned,
 15    35 	2 bits			structure unaligned,
 15    36 	  3 processed		bit(1) unaligned,
 15    37 	  3 put_in_profile		bit(1) unaligned,
 15    38 	  3 generated		bit(1) unaligned,
 15    39 	  3 snap			bit(1) unaligned,
 15    40 	  3 system		bit(1) unaligned,
 15    41 	  3 irreducible		bit(1) unaligned,
 15    42 	  3 checked		bit(1) unaligned,
 15    43 	  3 save_temps		bit(1) unaligned,
 15    44 	  3 suppress_warnings	bit(1) unaligned,
 15    45 	  3 force_nonquick		bit(1) unaligned,
 15    46 	  3 expanded_by_name	bit(1) unaligned,
 15    47 	  3 begins_loop		bit(1) unaligned,
 15    48 	  3 pad			bit(24) unaligned;
 15    49 
 15    50 /* END INCLUDE FILE ... statement.incl.pl1 */
      662 
 16     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 16     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 16     3 /* format: style3,idind30 */
 16     4 
 16     5 declare	1 block			aligned based,
 16     6 	  2 node_type		bit (9) unaligned,
 16     7 	  2 source_id		structure unaligned,
 16     8 	    3 file_number		bit (8),
 16     9 	    3 line_number		bit (14),
 16    10 	    3 statement_number	bit (5),
 16    11 	  2 father		ptr unaligned,
 16    12 	  2 brother		ptr unaligned,
 16    13 	  2 son			ptr unaligned,
 16    14 	  2 declaration		ptr unaligned,
 16    15 	  2 end_declaration		ptr unaligned,
 16    16 	  2 default		ptr unaligned,
 16    17 	  2 end_default		ptr unaligned,
 16    18 	  2 context		ptr unaligned,
 16    19 	  2 prologue		ptr unaligned,
 16    20 	  2 end_prologue		ptr unaligned,
 16    21 	  2 main			ptr unaligned,
 16    22 	  2 end_main		ptr unaligned,
 16    23 	  2 return_values		ptr unaligned,
 16    24 	  2 return_count		ptr unaligned,
 16    25 	  2 plio_ps		ptr unaligned,
 16    26 	  2 plio_fa		ptr unaligned,
 16    27 	  2 plio_ffsb		ptr unaligned,
 16    28 	  2 plio_ssl		ptr unaligned,
 16    29 	  2 plio_fab2		ptr unaligned,
 16    30 	  2 block_type		bit (9) unaligned,
 16    31 	  2 prefix		bit (12) unaligned,
 16    32 	  2 like_attribute		bit (1) unaligned,
 16    33 	  2 no_stack		bit (1) unaligned,
 16    34 	  2 get_data		bit (1) unaligned,
 16    35 	  2 flush_at_call		bit (1) unaligned,
 16    36 	  2 processed		bit (1) unaligned,
 16    37 	  2 text_displayed		bit (1) unaligned,
 16    38 	  2 number		fixed bin (9) unsigned unaligned,
 16    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 16    40 	  2 temp_list		ptr,
 16    41 	  2 entry_list		ptr,
 16    42 	  2 o_and_s		ptr,
 16    43 	  2 why_nonquick		aligned,
 16    44 	    3 auto_adjustable_storage bit (1) unaligned,
 16    45 	    3 returns_star_extents	bit (1) unaligned,
 16    46 	    3 stack_extended_by_args	bit (1) unaligned,
 16    47 	    3 invoked_by_format	bit (1) unaligned,
 16    48 	    3 format_statement	bit (1) unaligned,
 16    49 	    3 io_statements		bit (1) unaligned,
 16    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 16    51 	    3 condition_statements	bit (1) unaligned,
 16    52 	    3 no_owner		bit (1) unaligned,
 16    53 	    3 recursive_call	bit (1) unaligned,
 16    54 	    3 options_non_quick	bit (1) unaligned,
 16    55 	    3 options_variable	bit (1) unaligned,
 16    56 	    3 never_referenced	bit (1) unaligned,
 16    57 	    3 pad_nonquick		bit (5) unaligned,
 16    58 	  2 prologue_flag		bit (1) unaligned,
 16    59 	  2 options_main		bit (1) unaligned,
 16    60 	  2 pad			bit (16) unaligned,
 16    61 	  2 number_of_entries	fixed bin (17),
 16    62 	  2 level			fixed bin (17),
 16    63 	  2 last_auto_loc		fixed bin (17),
 16    64 	  2 symbol_block		fixed bin (17),
 16    65 	  2 entry_info		fixed bin (18),
 16    66 	  2 enter			structure unaligned,
 16    67 	    3 start		fixed bin (17),
 16    68 	    3 end			fixed bin (17),
 16    69 	  2 leave			structure unaligned,
 16    70 	    3 start		fixed bin (17),
 16    71 	    3 end			fixed bin (17),
 16    72 	  2 owner			ptr;
 16    73 
 16    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 16    75 
 16    76 /* END INCLUDE FILE ... block.incl.pl1 */
      663 
 17     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 17     2 
 17     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 17     4 
 17     5 /* format: style3 */
 17     6 dcl	1 operator	based aligned,
 17     7 	  2 node_type	bit (9) unaligned,
 17     8 	  2 op_code	bit (9) unaligned,
 17     9 	  2 shared	bit (1) unaligned,
 17    10 	  2 processed	bit (1) unaligned,
 17    11 	  2 optimized	bit (1) unaligned,
 17    12 	  2 number	fixed (14) unaligned,
 17    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 17    14 
 17    15 dcl	max_number_of_operands
 17    16 			fixed bin (15) int static options (constant) initial (32767);
 17    17 
 17    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      664 
 18     1 	/* statement types */
 18     2 
 18     3 dcl (	unknown_statement		initial("000000000"b),
 18     4 	allocate_statement		initial("000000001"b),
 18     5 	assignment_statement	initial("000000010"b),
 18     6 	begin_statement		initial("000000011"b),
 18     7 	call_statement		initial("000000100"b),
 18     8 	close_statement		initial("000000101"b),
 18     9 	declare_statement		initial("000000110"b),
 18    10 	lock_statement		initial("000000111"b),
 18    11 	delete_statement		initial("000001000"b),
 18    12 	display_statement		initial("000001001"b),
 18    13 	do_statement		initial("000001010"b),
 18    14 	else_clause		initial("000001011"b),
 18    15 	end_statement		initial("000001100"b),
 18    16 	entry_statement		initial("000001101"b),
 18    17 	exit_statement		initial("000001110"b),
 18    18 	format_statement		initial("000001111"b),
 18    19 	free_statement		initial("000010000"b),
 18    20 	get_statement		initial("000010001"b),
 18    21 	goto_statement		initial("000010010"b),
 18    22 	if_statement		initial("000010011"b),
 18    23 	locate_statement		initial("000010100"b),
 18    24 	null_statement		initial("000010101"b),
 18    25 	on_statement		initial("000010110"b),
 18    26 	open_statement		initial("000010111"b),
 18    27 	procedure_statement 	initial("000011000"b),
 18    28 	put_statement		initial("000011001"b),
 18    29 	read_statement		initial("000011010"b),
 18    30 	return_statement		initial("000011011"b),
 18    31 	revert_statement		initial("000011100"b),
 18    32 	rewrite_statement		initial("000011101"b),
 18    33 	signal_statement		initial("000011110"b),
 18    34 	stop_statement		initial("000011111"b),
 18    35 	system_on_unit		initial("000100000"b),
 18    36 	unlock_statement		initial("000100001"b),
 18    37 	wait_statement		initial("000100010"b),
 18    38 	write_statement		initial("000100011"b),
 18    39 	default_statement		initial("000100100"b),
 18    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
      665 
 19     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 19     2 
 19     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 19     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 19     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 19     6 /* Modified: 26 July 82 BIM wordno, segno */
 19     7 
 19     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 19     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 19    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 19    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 19    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 19    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 19    14 
 19    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 19    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 19    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 19    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 19    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 19    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 19    21 
 19    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 19    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 19    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 19    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 19    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 19    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 19    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 19    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 19    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 19    31 
 19    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 19    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 19    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 19    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 19    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 19    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 19    38 
 19    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 19    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 19    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 19    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 19    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 19    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 19    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 19    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 19    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 19    48 
 19    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 19    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 19    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 19    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 19    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 19    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 19    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 19    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 19    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 19    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 19    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 19    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 19    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 19    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 19    63 
 19    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 19    65*						   opnd(2) <- opnd(3) / 36		*/
 19    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 19    67*						   opnd(2) <- opnd(3) / 4		*/
 19    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 19    69*						   opnd(2) <- opnd(3) / 2		*/
 19    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 19    71 
 19    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 19    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 19    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 19    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 19    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 19    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 19    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 19    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 19    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 19    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 19    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 19    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 19    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 19    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 19    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 19    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 19    88 
 19    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 19    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 19    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 19    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 19    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 19    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 19    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 19    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 19    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 19    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 19    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 19   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 19   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 19   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 19   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 19   104 
 19   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 19   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 19   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 19   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 19   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 19   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 19   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 19   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 19   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 19   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 19   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 19   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 19   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 19   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 19   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 19   120 
 19   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 19   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 19   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 19   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 19   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 19   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 19   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 19   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 19   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 19   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 19   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 19   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 19   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 19   134 
 19   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 19   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 19   137 
 19   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 19   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 19   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 19   141*						   opnd(2) is the file name
 19   142*						   opnd(3) is the block	*/
 19   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 19   144*						   opnd(2) is the file name	*/
 19   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 19   146*						   opnd(2) is the file name */
 19   147 
 19   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 19   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 19   150*						   opnd(3) is old value, (4) is new value. */
 19   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 19   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 19   153 
 19   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 19   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 19   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 19   157*						   opnd(5) is the list */
 19   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 19   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 19   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 19   161 
 19   162 	r_parn		initial("011110001"b),	/* format op code			*/
 19   163 	l_parn		initial("011110010"b),
 19   164 	r_format		initial("011110011"b),
 19   165 	c_format		initial("011110100"b),
 19   166 	f_format		initial("011110101"b),
 19   167 	e_format		initial("011110110"b),
 19   168 	b_format		initial("011110111"b),
 19   169 	a_format		initial("011111000"b),
 19   170 	x_format		initial("011111001"b),
 19   171 	skip_format	initial("011111010"b),
 19   172 	column_format	initial("011111011"b),
 19   173 	page_format	initial("011111100"b),
 19   174 	line_format	initial("011111101"b),
 19   175 	picture_format	initial("011111110"b),
 19   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 19   177 
 19   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 19   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 19   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 19   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 19   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 19   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 19   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 19   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 19   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 19   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 19   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 19   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 19   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 19   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 19   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 19   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 19   194 
 19   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 19   196 /* They are processed by the semantic translator.						*/
 19   197 
 19   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 19   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 19   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 19   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 19   202 						/* opnd(3) is skip, opnd(4) is list	*/
 19   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 19   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 19   205 						/* opnd(3) is skip,opnd(4) is line	*/
 19   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 19   207 	open_file		initial("100011001"b),
 19   208 	close_file	initial("100011010"b),
 19   209 	read_file		initial("100011011"b),
 19   210 	write_file	initial("100011100"b),
 19   211 	locate_file	initial("100011101"b),
 19   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 19   213 						/* opnd(2) is control variable ref	*/
 19   214 						/* opnd(3) is specification operator	*/
 19   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 19   216 						/* repeat opnd(4) while opnd(5)	*/
 19   217 						/* opnd(6) is next specification	*/
 19   218 
 19   219 	rewrite_file	initial("100100000"b),
 19   220 	delete_file	initial("100100001"b),
 19   221 	unlock_file	initial("100100010"b),
 19   222 	lock_file		initial("100100011"b),
 19   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 19   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 19   225 	nop		initial("100100111"b),	/* no-op */
 19   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 19   227 
 19   228 /* These operators are produced by the semantic translator in processing the math
 19   229*   builtin functions and are used as input to the code generator			*/
 19   230 
 19   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 19   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 19   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 19   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 19   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 19   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 19   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 19   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 19   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 19   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 19   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 19   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 19   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 19   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 19   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 19   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 19   247 
 19   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 19   249 
 19   250 			bit(9) aligned internal static options(constant);
 19   251 
 19   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      666 
 20     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 20     2 
 20     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 20     4 
 20     5 dcl (	max_p_flt_bin_1			initial(27),
 20     6 	max_p_flt_bin_2			initial(63),
 20     7 	max_p_fix_bin_1			initial(35),
 20     8 	max_p_fix_bin_2			initial(71),
 20     9 
 20    10 	max_p_dec				initial(59),
 20    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 20    12 
 20    13 	min_scale				initial(-128),
 20    14 	max_scale				initial(+127),
 20    15 	max_bit_string			initial(9437184),
 20    16 	max_char_string			initial(1048576),
 20    17 	max_area_size			initial(262144),
 20    18 	min_area_size			initial(28),
 20    19 
 20    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 20    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 20    22 	max_identifier_length		initial (256),
 20    23 	max_number_of_dimensions		initial (127),
 20    24 
 20    25 	max_length_precision		initial(24),
 20    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 20    27 
 20    28 	max_words_per_variable		initial (262144),
 20    29 
 20    30 	bits_per_word			initial(36),
 20    31 	bits_per_double			initial(72),
 20    32 	packed_digits_per_character		initial(2),
 20    33 	characters_per_half			initial(2),
 20    34 	characters_per_word			initial(4),
 20    35 	characters_per_double		initial(8),
 20    36 
 20    37 	bits_per_character			initial(9),
 20    38 	bits_per_half			initial(18),
 20    39 	bits_per_decimal_digit		initial(9),
 20    40 	bits_per_binary_exponent		initial(8),
 20    41 	bits_per_packed_ptr			initial(36),
 20    42 	words_per_packed_pointer		initial(1),
 20    43 
 20    44 	words_per_fix_bin_1			initial(1),
 20    45 	words_per_fix_bin_2			initial(2),
 20    46 	words_per_flt_bin_1			initial(1),
 20    47 	words_per_flt_bin_2			initial(2),
 20    48 	words_per_varying_string_header	initial(1),
 20    49 	words_per_offset			initial(1),
 20    50 	words_per_pointer			initial(2),
 20    51 	words_per_label_var			initial(4),
 20    52 	words_per_entry_var			initial(4),
 20    53 	words_per_file_var			initial(4),
 20    54 	words_per_format			initial(4),
 20    55 	words_per_condition_var		initial(6),
 20    56 
 20    57 	max_index_register_value		initial(262143),
 20    58 	max_signed_index_register_value	initial(131071),
 20    59 
 20    60 	max_signed_xreg_precision		initial(17),
 20    61 	max_uns_xreg_precision		initial(18),
 20    62 
 20    63 	default_area_size			initial(1024),
 20    64 	default_flt_bin_p			initial(27),
 20    65 	default_fix_bin_p			initial(17),
 20    66 	default_flt_dec_p			initial(10),
 20    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 20    68 
 20    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 20    70 
 20    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 20    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 20    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 20    74 	real_type			initial("001000000000000000000100000001100000"b),
 20    75 	complex_type		initial("001000000000000000000100000001010000"b),
 20    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 20    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 20    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 20    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 20    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 20    81 	bit_type			initial("000100000000000000000000000000000000"b),
 20    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 20    83 									options(constant);
 20    84 
 20    85 /* END INCLUDE FILE ... system.incl.pl1 */
      667 
 21     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 21     2 
 21     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 21     4 
 21     5 dcl  (	by_declare	initial("001"b),
 21     6 	by_explicit_context initial("010"b),
 21     7 	by_context	initial("011"b),
 21     8 	by_implication	initial("100"b),
 21     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 21    10 
 21    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      668 
 22     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
 22     2 
 22     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
 22     4 
 22     5 dcl (	bit_		init(1),
 22     6 	digit_		init(2),
 22     7 	character_	init(3),
 22     8 	half_		init(4),
 22     9 	word_		init(5),
 22    10 	mod2_		init(6),
 22    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
 22    12 
 22    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
      669 
 23     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 23     2 
 23     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 23     4 
 23     5 dcl (	block_node		initial("000000001"b),
 23     6 	statement_node		initial("000000010"b),
 23     7 	operator_node		initial("000000011"b),
 23     8 	reference_node		initial("000000100"b),
 23     9 	token_node		initial("000000101"b),
 23    10 	symbol_node		initial("000000110"b),
 23    11 	context_node		initial("000000111"b),
 23    12 	array_node		initial("000001000"b),
 23    13 	bound_node		initial("000001001"b),
 23    14 	format_value_node		initial("000001010"b),
 23    15 	list_node			initial("000001011"b),
 23    16 	default_node		initial("000001100"b),
 23    17 	machine_state_node		initial("000001101"b),
 23    18 	source_node		initial("000001110"b),
 23    19 	label_node		initial("000001111"b),
 23    20 	cross_reference_node	initial("000010000"b),
 23    21 	sf_par_node		initial("000010001"b),
 23    22 	temporary_node		initial("000010010"b),
 23    23 	label_array_element_node	initial("000010011"b),
 23    24 	by_name_agg_node		initial("000010100"b))
 23    25 				bit(9) internal static aligned options(constant);
 23    26 
 23    27 dcl	1 node			based aligned,
 23    28 	2 type			unal bit(9),
 23    29 	2 source_id		unal structure,
 23    30 	  3 file_number		bit(8),
 23    31 	  3 line_number		bit(14),
 23    32 	  3 statement_number	bit(5);
 23    33 
 23    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      670 
 24     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 24     2 
 24     3 dcl	1 token			based aligned,
 24     4 	2 node_type		bit(9) unaligned,
 24     5 	2 type			bit(9) unaligned,
 24     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 24     7 	2 declaration		ptr unaligned,
 24     8 	2 next			ptr unaligned,
 24     9 	2 size			fixed(9),
 24    10 	2 string			char(n refer(token.size));
 24    11 
 24    12 /* END INCLUDE FILE ... token.incl.pl1 */
      671 
 25     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 25     2 
 25     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 25     4 	identifier	initial("100000000"b),
 25     5 	isub		initial("010000000"b),
 25     6 	plus		initial("001000001"b),
 25     7 	minus		initial("001000010"b),
 25     8 	asterisk		initial("001000011"b),
 25     9 	slash		initial("001000100"b),
 25    10 	expon		initial("001000101"b),
 25    11 	not		initial("001000110"b),
 25    12 	and		initial("001000111"b),
 25    13 	or		initial("001001000"b),
 25    14 	cat		initial("001001001"b),
 25    15 	eq		initial("001001010"b),
 25    16 	ne		initial("001001011"b),
 25    17 	lt		initial("001001100"b),
 25    18 	gt		initial("001001101"b),
 25    19 	le		initial("001001110"b),
 25    20 	ge		initial("001001111"b),
 25    21 	ngt		initial("001010000"b),
 25    22 	nlt		initial("001010001"b),
 25    23 	assignment	initial("001010010"b),
 25    24 	colon		initial("001010011"b),
 25    25 	semi_colon	initial("001010100"b),
 25    26 	comma		initial("001010101"b),
 25    27 	period		initial("001010110"b),
 25    28 	arrow		initial("001010111"b),
 25    29 	left_parn		initial("001011000"b),
 25    30 	right_parn	initial("001011001"b),
 25    31 	percent		initial("001011100"b),
 25    32 	bit_string	initial("000100001"b),
 25    33 	char_string	initial("000100010"b),
 25    34 	bin_integer	initial("000110001"b),
 25    35 	dec_integer	initial("000110011"b),
 25    36 	fixed_bin		initial("000110000"b),
 25    37 	fixed_dec		initial("000110010"b),
 25    38 	float_bin		initial("000110100"b),
 25    39 	float_dec		initial("000110110"b),
 25    40 	i_bin_integer	initial("000111001"b),
 25    41 	i_dec_integer	initial("000111011"b),
 25    42 	i_fixed_bin	initial("000111000"b),
 25    43 	i_fixed_dec	initial("000111010"b),
 25    44 	i_float_bin	initial("000111100"b),
 25    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 25    46 
 25    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 25    48 	is_isub			initial ("010000000"b),
 25    49 	is_delimiter		initial ("001000000"b),
 25    50 	is_constant		initial ("000100000"b),
 25    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 25    52 	is_arithmetic_constant	initial ("000110000"b),
 25    53 	is_imaginary_constant	initial ("000111000"b),
 25    54 	is_float_constant		initial ("000110100"b),
 25    55 	is_decimal_constant		initial ("000110010"b),
 25    56 	is_integral_constant 	initial ("000110001"b)
 25    57 	) bit(9) internal static aligned options(constant);
 25    58 
 25    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      672 
      673      end /* declare_descriptor */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.3  declare_descriptor.pl1            >spec>install>MR12.3-1066>declare_descriptor.pl1
654          1    10/25/79  1645.8  pl1_descriptor_type_fcn.incl.pl1  >ldd>include>pl1_descriptor_type_fcn.incl.pl1
1-27         2    12/07/83  1700.1  pl1_symbol_type.incl.pl1          >ldd>include>pl1_symbol_type.incl.pl1
1-28         3    10/26/88  1255.5  std_descriptor_types.incl.pl1     >ldd>include>std_descriptor_types.incl.pl1
1-29         4    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
658          5    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
5-228        6    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
6-307        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
6-325        8    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
6-335        9    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
6-374       10    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
6-386       11    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
659         12    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
660         13    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
661         14    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
662         15    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
663         16    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
664         17    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
665         18    05/03/76  1320.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
666         19    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
667         20    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
668         21    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
669         22    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
670         23    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
671         24    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
672         25    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
actl                            000124 automatic       bit(1)                   dcl 45 set ref 80* 93 116 117 123 212* 222* 370 388
                                                                                  517 561 591
addr                                                   builtin function         dcl 74 ref 187 195 283 284 285 306 308 310 314 323
                                                                                  334 346 364 369 369 390 390 390 390 509 513 553
                                                                                  557 582 589
aligned                  31(21)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref
                                                                                  140*
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref
                                                                                  131*
allocated                 1(18)        based           bit(1)                   level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  160* 160 162
area                     31(07)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 314 350 360
area                      0(07) 000174 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-98
area_dtype                             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-98
arg_descriptor           31(11)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref
                                                                                  140*
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 93 93 292 292 411 415 417
                                                                                  419 461 461
array                                  based           structure                level 1 dcl 13-1 in procedure "declare_descriptor"
array_desc                      000125 automatic       bit(1)                   dcl 45 set ref 87* 93 195 291 461
assign                          000005 constant        bit(9)                   initial dcl 19-8 set ref 612*
assignment_statement            000007 constant        bit(9)                   initial dcl 18-3 set ref 632* 636*
asterisk                               constant        bit(9)                   initial dcl 25-3 ref 348
attributes               31            based           structure                level 2 dcl 12-3 set ref 273 273
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref
                                                                                  137* 173*
b                               000104 automatic       pointer                  dcl 266 set ref 415* 430 430 430 432 432 432 443*
                                                                                  443 496 496 502 502 509 514 515 520 520 520 522
                                                                                  522 525 526 528 529 540 540 546 546 553 558 559
                                                                                  564 564 564 566 566 569 570 572 573 583 585 585
                                                                                  586 589 594 594 595 597 598
back                      2            based           pointer                  level 2 packed packed unaligned dcl 15-9 ref 214 632
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 93 127
                                                                                  623
basic_desc                             based           bit(36)                  dcl 53 set ref 390* 390*
basic_desc_image                       based           structure                level 2 dcl 57
before_get_size                 000127 automatic       bit(1)                   dcl 45 set ref 79* 109 127 132 150 195 213* 224* 417
                                                                                  427
binary                    0(29) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-38
                                                                                  1-53 1-60 1-71
bit                      31(03)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 314 350
bit                       0(03) 000174 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-78
bit                                                    builtin function         dcl 74 in procedure "declare_descriptor" ref 283 306
                                                                                  314 323 334 346
bit2                                   parameter       bit(2)                   dcl 44 ref 26 87 88 210 220
bit_dtype                              constant        fixed bin(17,0)          initial dcl 3-25 ref 1-83
bit_image                              based           bit                      dcl 55 set ref 187* 195*
bit_type                               based           structure                level 3 packed packed unaligned dcl 57 set ref 369
                                                                                  369 390 390
bits                     12(06)        based           structure                level 2 packed packed unaligned dcl 14-3
bits_per_word                          constant        fixed bin(31,0)          initial dcl 20-5 ref 187 187 195 195 199
blk                             000106 automatic       pointer                  dcl 39 set ref 112* 113 113* 125* 162* 168 633* 636*
                                                                                  636 638
block                                  based           structure                level 1 dcl 16-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 112
bound                                  based           structure                level 1 dcl 13-21
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  126*
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 13-1 ref 415
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 239 332
                                                                                  487
bv_prec                                parameter       fixed bin(24,0)          dcl 1-13 ref 1-8 1-34
bv_type                                parameter       bit(36)                  packed unaligned dcl 1-13 ref 1-8 1-33
by_compiler                     000000 constant        bit(3)                   initial dcl 21-5 set ref 125*
c_bit_size               27            based           fixed bin(24,0)          level 2 dcl 12-3 set ref 199*
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 12-3 ref 273 314
c_desc_multiplier         4            based           fixed bin(24,0)          level 2 dcl 13-21 ref 589
c_lower                   1            based           fixed bin(24,0)          level 2 dcl 13-21 set ref 430 502* 509
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 14-3 set ref 357* 378* 457* 515* 526*
                                                                                  559* 570* 586* 595* 615*
c_upper                   2            based           fixed bin(24,0)          level 2 dcl 13-21 set ref 432 546* 553
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 12-3 set ref 198*
cblk                                   parameter       pointer                  dcl 39 set ref 26 113 210 220 638 638*
cdcl                            000116 automatic       bit(1)                   packed unaligned dcl 269 set ref 339* 340* 345* 350
char                      0(04) 000174 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-84
char                     31(04)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 314 350
char_dtype                             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-89 1-114
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 12-3
complex                   0(31) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-60
constant                        000123 automatic       bit(1)                   dcl 45 set ref 122* 153* 185 337 427 472 507 551 589
controlled                      000132 automatic       bit(1)                   dcl 45 in procedure "declare_descriptor" set ref
                                                                                  116* 373 388 517 561 591
controlled               32(12)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" set ref 93 116 127 132 134*
                                                                                  623
copy_expression                 000014 constant        entry                    external dcl 6-94 ref 254 356 377 455 514 525 558
                                                                                  569 585 594 614 616
cplx_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-60
cplx_fix_bin_2_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-67
cplx_fix_dec_4bit_bytealigned_ls_dtype constant        fixed bin(17,0)          initial dcl 3-25 ref 1-68
cplx_fix_dec_9bit_ls_dtype             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-70
cplx_flt_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-71
cplx_flt_bin_2_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-74
cplx_flt_dec_4bit_bytealigned_dtype    constant        fixed bin(17,0)          initial dcl 3-25 ref 1-75
cplx_flt_dec_9bit_dtype                constant        fixed bin(17,0)          initial dcl 3-25 ref 1-77
create_operator                 000016 constant        entry                    external dcl 6-152 ref 165 355 367 376 612
create_reference                000020 constant        entry                    external dcl 6-158 ref 154
create_statement                000022 constant        entry                    external dcl 6-163 ref 214 632
create_statement$prologue       000024 constant        entry                    external dcl 6-171 ref 636
create_symbol                   000026 constant        entry                    external dcl 6-184 ref 125
cross_section                   000126 automatic       bit(1)                   dcl 45 set ref 88* 295
d                               000102 automatic       pointer                  dcl 231 in procedure "set_star" set ref 234* 234*
                                                                                  235* 237 238* 239
d                               000102 automatic       pointer                  dcl 39 in procedure "declare_descriptor" set ref
                                                                                  125* 126 127 131 134 135 137 140 140 140 140 142
                                                                                  146* 159 160 162 167 167 172 173 187* 190 195 198
                                                                                  199 202 204 368
data_type                31            based           structure                level 3 packed packed unaligned dcl 12-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 12-3 set ref 340
                                                                                  342 342 346 348 358* 372 375 379*
dec_integer                            constant        bit(9)                   initial dcl 25-3 ref 342 496 522 540 566
declare_constant$desc           000030 constant        entry                    external dcl 6-229 ref 187 195 369 390 390
declare_constant$integer        000032 constant        entry                    external dcl 6-234 ref 167 430 432
declare_pointer                 000034 constant        entry                    external dcl 6-287 ref 162
declare_temporary               000036 constant        entry                    external dcl 6-292 ref 166
desc                                   based           structure                level 1 unaligned dcl 57
desc_image                             based           fixed bin(31,0)          level 2 dcl 57 set ref 509* 513* 553* 557* 582* 589*
desc_multiplier          10            based           pointer                  level 2 packed packed unaligned dcl 13-21 set ref
                                                                                  583 585* 586 594* 595 598
desc_size                       000002 constant        bit(9)                   initial dcl 19-8 set ref 355* 376*
descriptor               13            based           pointer                  level 2 packed packed unaligned dcl 12-3 set ref 101
                                                                                  101 101 105 123 135* 145 195* 465 465*
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 93 461
dtype                           000173 automatic       fixed bin(17,0)          dcl 1-18 set ref 1-36* 1-38* 1-46* 1-47* 1-49* 1-50*
                                                                                  1-52* 1-53* 1-56* 1-57* 1-59* 1-60* 1-67* 1-68*
                                                                                  1-70* 1-71* 1-74* 1-75* 1-77* 1-78* 1-83* 1-84*
                                                                                  1-89* 1-90* 1-94* 1-98* 1-102* 1-106* 1-110*
                                                                                  1-114* 1-118* 1-120
e                                      parameter       pointer                  dcl 607 ref 604 616 646
element_descriptor       13            based           pointer                  level 2 packed packed unaligned dcl 13-1 set ref 93
                                                                                  93 461 461*
entry                     0(09) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref
                                                                                  1-106
entry_dtype                            constant        fixed bin(17,0)          initial dcl 3-25 ref 1-106
exp_extents              33(04)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref 93
                                                                                  117 120 238* 238 238
explicit_packed          31(13)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 285
expression_semantics            000012 constant        entry                    external dcl 5-105 ref 633 638
father                   17            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 298 412
                                                                                  421
file                      0(10) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref
                                                                                  1-110
file_dtype                             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-110
first                           000114 automatic       pointer                  dcl 41 set ref 181* 188 189 190 191* 474 475*
fixed                                                  builtin function         dcl 74 in procedure "declare_descriptor" ref 167 167
                                                                                  283 306 314 334 346
fixed                     0(01) 000174 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-38 1-60
fixed                    31(01)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 314 318
flag                                   based           bit(1)                   level 4 packed packed unaligned dcl 57 set ref 284*
float                    31(02)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 314
have_star                       000117 automatic       bit(1)                   packed unaligned dcl 269 set ref 339* 348* 353
hbound_constant                 000140 automatic       bit(1)                   dcl 536 set ref 538* 545* 549* 551* 551 553
i                               000110 automatic       fixed bin(15,0)          dcl 267 set ref 423*
internal                 32(01)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref
                                                                                  140*
label                     0(08) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref
                                                                                  1-102
label_dtype                            constant        fixed bin(17,0)          initial dcl 3-25 ref 1-102
lbound_constant                 000130 automatic       bit(1)                   dcl 493 set ref 495* 501* 505* 507* 507 509
length                    6            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref 254
                                                                                  360*
loc                                    parameter       pointer                  dcl 39 set ref 26 210 220 618*
location                  1            based           fixed bin(18,0)          level 2 packed packed unsigned unaligned dcl 12-3
                                                                                  set ref 159* 159 167 167
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 13-21 set ref
                                                                                  430 430* 496 496 502 514* 515 520 522 522 525* 526
                                                                                  529
m                               000111 automatic       fixed bin(15,0)          dcl 267 set ref 328* 331* 331 334
make_desc                       000004 constant        bit(9)                   initial dcl 19-8 set ref 367*
max_desc                        000134 automatic       fixed bin(31,0)          array dcl 50 set ref 187 195 283 284 285 306 308 310
                                                                                  314 323 334 346 364 369 369 390 390 509 513 553
                                                                                  557 582 589
max_p_fix_bin_1                        constant        fixed bin(31,0)          initial dcl 4-5 ref 1-38 1-47 1-60
max_p_flt_bin_1                        constant        fixed bin(31,0)          initial dcl 4-5 ref 1-53 1-71
mdims                           000112 automatic       fixed bin(15,0)          dcl 267 set ref 304* 409 444* 444 445
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 12-3
multiplier                7            based           pointer                  level 2 packed packed unaligned dcl 13-21 set ref
                                                                                  585* 594*
nbounds                         000114 automatic       fixed bin(15,0)          dcl 267 set ref 417* 419* 423
ndims                           000113 automatic       fixed bin(15,0)          dcl 267 set ref 290* 292* 292 300 304 306 306 395
                                                                                  457
next                     14            based           pointer                  level 2 packed packed unaligned dcl 13-21 ref 443
node                                   based           structure                level 1 dcl 23-27
null                                                   builtin function         dcl 74 ref 93 101 101 113 116 117 123 125 125 150
                                                                                  154 154 166 166 181 188 195 214 214 234 254 254
                                                                                  254 291 292 330 340 411 430 432 461 465 485 520
                                                                                  564 583 626 632 632 636 636
null_statement                  000006 constant        bit(9)                   initial dcl 18-3 set ref 214*
number_dims                            based           bit(4)                   level 4 packed packed unaligned dcl 57 set ref 306*
                                                                                  308*
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 13-1 ref 419
offset                    5            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 14-3 in procedure
                                                                                  "declare_descriptor" ref 254
offset                                 parameter       fixed bin(15,0)          dcl 608 in procedure "assignf" ref 604 615 646
offset                    0(06) 000174 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-94
offset                          000120 automatic       fixed bin(15,0)          dcl 42 in procedure "declare_descriptor" set ref
                                                                                  179* 275* 276 283 284 285 306 308 310 314 323 334
                                                                                  346 357 364 369 369 378 381* 385* 390 390 390*
                                                                                  437* 437 439* 439 442* 442 457 458 509 513 515 526
                                                                                  528 529 553 557 559 570 572 573 582 586 589 595
                                                                                  597 598
offset_dtype                           constant        fixed bin(17,0)          initial dcl 3-25 ref 1-94
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 17-6 set
                                                                                  ref 166* 167* 168* 356* 357 368* 369* 372* 377*
                                                                                  378 384* 614* 615 621*
operator                               based           structure                level 1 dcl 17-6
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 13-1 ref 292 417
p                               000100 automatic       pointer                  dcl 266 in procedure "builder" set ref 271* 273 273
                                                                                  273 285 285 291 314 314 314 314 314 314 314 318
                                                                                  320 326 329 340 342 342 346 348 350 350 350 358
                                                                                  360 360 360 372 375 375 379 384 398 461 461 461
                                                                                  465 465 481 485
p                               001142 automatic       pointer                  dcl 249 in procedure "copy" set ref 252* 254 254 254
                                                                                  254* 254 257
p                               000100 automatic       pointer                  dcl 231 in procedure "set_star" set ref 232* 234 237
                                                                                  237 238 238
p                               000156 automatic       pointer                  dcl 607 in procedure "assignf" set ref 612* 614 615
                                                                                  621 633* 637
packed                                 based           bit(1)                   level 4 in structure "desc" packed packed unaligned
                                                                                  dcl 57 in procedure "declare_descriptor" set ref
                                                                                  285*
packed                   33            based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 285
padded_ref               12(06)        based           bit(1)                   level 3 packed packed unaligned dcl 14-3 ref 628
param_desc               32(15)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref
                                                                                  172*
param_desc_ptr                  000003 constant        bit(9)                   initial dcl 19-8 set ref 165*
parameter                32(14)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 93 101
                                                                                  117 127 195 623
picture                  31(18)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 314
picture                   0(18) 000174 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-114
pl1_stat_$util_abort            000010 external static entry variable           dcl 48 ref 280 300 425 628 630
pointer_dtype                          constant        fixed bin(17,0)          initial dcl 3-25 ref 1-90
pointer_type                    000001 constant        bit(36)                  initial dcl 20-71 set ref 166*
position                 32            based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 93 623
pp                                     parameter       pointer                  dcl 266 in procedure "builder" ref 263 271
pp                                     parameter       pointer                  dcl 231 in procedure "set_star" ref 229 232
prec                            000172 automatic       fixed bin(24,0)          dcl 1-18 set ref 1-34* 1-38 1-47 1-53 1-60 1-71
prefix                   24(09)        based           bit(12)                  level 2 in structure "block" packed packed unaligned
                                                                                  dcl 16-5 in procedure "declare_descriptor" ref 636
prefix                   12(12)        based           bit(12)                  level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 15-9 in procedure
                                                                                  "declare_descriptor" ref 214 632
ps                                     parameter       pointer                  dcl 39 ref 26 83 210 220
ptr                       0(05) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-90
ptr_saver                       000116 automatic       pointer                  dcl 41 set ref 189* 191
q                               000102 automatic       pointer                  dcl 266 in procedure "builder" set ref 329* 330 332*
                                                                                  332 355* 356 357 358 360 367* 368 369 372 376* 377
                                                                                  378 379 381* 384 385* 455* 457 458 461 465 474 475
                                                                                  485* 485* 486* 487
q                               000160 automatic       pointer                  dcl 607 in procedure "assignf" set ref 616* 618* 621
                                                                                  632* 633 633* 636* 637 638 638* 638
q                               000110 automatic       pointer                  dcl 39 in procedure "declare_descriptor" set ref
                                                                                  162* 165* 166 167 168 171
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref
                                                                                  171* 254
r                               000104 automatic       pointer                  dcl 39 set ref 142* 145* 146 154* 171 276 356 377
                                                                                  397 455 514 525 558 569 585 594 614
real                      0(30) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-38
real_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-47
real_fix_bin_1_uns_dtype               constant        fixed bin(17,0)          initial dcl 3-25 ref 1-38
real_fix_bin_2_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-49
real_fix_bin_2_uns_dtype               constant        fixed bin(17,0)          initial dcl 3-25 ref 1-46
real_fix_dec_4bit_bytealigned_ls_dtype constant        fixed bin(17,0)          initial dcl 3-25 ref 1-50
real_fix_dec_9bit_ls_dtype             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-52
real_flt_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-53
real_flt_bin_2_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-56
real_flt_dec_4bit_bytealigned_dtype    constant        fixed bin(17,0)          initial dcl 3-25 ref 1-57
real_flt_dec_9bit_dtype                constant        fixed bin(17,0)          initial dcl 3-25 ref 1-59
ref                                    parameter       pointer                  dcl 249 ref 246 252
refer_extent                    000040 constant        entry                    external dcl 6-426 ref 618
refer_extents            33(05)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 618
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 142 202 204 360 368 628
reference                              based           structure                level 1 dcl 14-3 in procedure "declare_descriptor"
return_value             32(18)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 127 157
                                                                                  623
root                      3            based           pointer                  level 2 packed packed unaligned dcl 15-9 set ref
                                                                                  633* 637* 638* 638
s                               000100 automatic       pointer                  dcl 39 set ref 83* 93 93 93 93 93 93 93 93 93 93 101
                                                                                  101 101 101 105 109* 112 116 117 117 117 120 120
                                                                                  123 127 127 127 127 127 132 135 145 157 159 160
                                                                                  183* 195 195 280* 291 295 300* 425* 618 623 623
                                                                                  623 623 623 623 628 628* 630*
scale                     2(28)        based           fixed bin(7,0)           level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 320
scale                           000122 automatic       fixed bin(12,0)          dcl 43 in procedure "declare_descriptor" set ref
                                                                                  320* 321 321* 321 323
sf                              000106 automatic       pointer                  dcl 266 set ref 291* 291 291* 292 292 295* 298 398*
                                                                                  411 412* 412 415 417 419 421* 421
size                                   based           bit(24)                  level 3 in structure "desc" packed packed unaligned
                                                                                  dcl 57 in procedure "declare_descriptor" set ref
                                                                                  310* 314* 323* 334* 346* 364*
size                            000121 automatic       fixed bin(15,0)          dcl 42 in procedure "declare_descriptor" set ref
                                                                                  179* 187 187 195 195 198 199 275 278* 278 280 424*
                                                                                  424 425
son                      21            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 234 329
                                                                                  485
st                              000112 automatic       pointer                  dcl 39 set ref 81* 116 117 195 214* 223* 610
star_bits                              constant        bit(36)                  initial dcl 70 ref 513 557 582
star_extents             33(06)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" set ref 93 101 117 120 237*
                                                                                  237 237
star_extents                    000131 automatic       bit(1)                   dcl 45 in procedure "declare_descriptor" set ref
                                                                                  117* 127 157 350 388 496 511 540 555 580
statement                              based           structure                level 1 dcl 15-9
stmnt                                  parameter       pointer                  dcl 39 ref 26 81 210 214 214 220 223 649
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 12-3
stp                             000162 automatic       pointer                  dcl 607 set ref 610* 626 632 632 649*
string                                                 builtin function         dcl 1-23 in procedure "pl1_descriptor_type" set ref
                                                                                  1-33*
string                                                 builtin function         dcl 74 in procedure "declare_descriptor" ref 273 273
                                                                                  369 369
structure                31            based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 195 326 481
structure                       000174 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-36
structure_dtype                        constant        fixed bin(17,0)          initial dcl 3-25 ref 1-36
substr                                                 builtin function         dcl 74 set ref 87 88 273 273 323*
symbol                                 based           structure                level 1 dcl 12-3 in procedure "declare_descriptor"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 14-3 in procedure
                                                                                  "declare_descriptor" set ref 101 146 187 189 190*
                                                                                  195 474*
symtab_lower             11            based           pointer                  level 2 packed packed unaligned dcl 13-21 set ref
                                                                                  520 520* 528
symtab_multiplier        13            based           pointer                  level 2 packed packed unaligned dcl 13-21 ref 597
symtab_size              25            based           pointer                  level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  375* 384
symtab_upper             12            based           pointer                  level 2 packed packed unaligned dcl 13-21 set ref
                                                                                  564 564* 572
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref 93
                                                                                  127 127* 623
token                                  based           structure                level 1 dcl 24-3
token_node                             constant        bit(9)                   initial dcl 23-5 ref 342 496 522 540 566
token_to_binary                 000042 constant        entry                    external dcl 6-459 ref 346 502 546
top_level                       000130 automatic       bit(1)                   dcl 45 set ref 180* 461 483*
type                                   based           bit(6)                   level 4 in structure "desc" packed packed unaligned
                                                                                  dcl 57 in procedure "declare_descriptor" set ref
                                                                                  283*
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 23-27 in procedure "declare_descriptor" ref
                                                                                  342 496 522 540 566
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 24-3 in procedure "declare_descriptor" ref 342
                                                                                  348 496 522 540 566
type                            000174 automatic       structure                level 1 packed packed unaligned dcl 2-3 in procedure
                                                                                  "pl1_descriptor_type" set ref 1-33*
type                            000115 automatic       fixed bin(15,0)          dcl 267 in procedure "builder" set ref 273* 283
unaligned                 0(22) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-50
                                                                                  1-57 1-68 1-75
units                     0(14)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 14-3 set ref
                                                                                  202* 276* 397* 458*
unsigned                  0(24) 000174 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-38
unspec                                                 builtin function         dcl 74 set ref 513* 557* 582*
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 13-21 set ref
                                                                                  432 432* 540 540 546 558* 559 564 566 566 569* 570
                                                                                  573
use_new                         000133 automatic       bit(1)                   dcl 45 set ref 85* 101* 123
variable                 31(32)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref
                                                                                  140*
varying                   0(26) 000174 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-78 1-84
varying                  31(26)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "declare_descriptor" ref 360
varying_bit_dtype                      constant        fixed bin(17,0)          initial dcl 3-25 ref 1-78
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 3-25 ref 1-84
word_                                  constant        fixed bin(3,0)           initial dcl 22-5 ref 126 276 397

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 19-8
abs_fun                                internal static bit(9)                   initial dcl 19-8
acos_fun                               internal static bit(9)                   initial dcl 19-8
acosd_fun                              internal static bit(9)                   initial dcl 19-8
add                                    internal static bit(9)                   initial dcl 19-8
addbitno_fun                           internal static bit(9)                   initial dcl 19-8
addcharno_fun                          internal static bit(9)                   initial dcl 19-8
addr_fun                               internal static bit(9)                   initial dcl 19-8
addr_fun_bits                          internal static bit(9)                   initial dcl 19-8
addrel_fun                             internal static bit(9)                   initial dcl 19-8
adjust_count                    000000 constant        entry                    external dcl 6-20
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 3-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 3-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 3-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 3-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 3-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 3-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 3-25
alloc_semantics                 000000 constant        entry                    external dcl 5-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 5-12
allocate_statement                     internal static bit(9)                   initial dcl 18-3
allocation_fun                         internal static bit(9)                   initial dcl 19-8
allot_auto                             internal static bit(9)                   initial dcl 19-8
allot_based                            internal static bit(9)                   initial dcl 19-8
allot_ctl                              internal static bit(9)                   initial dcl 19-8
allot_var                              internal static bit(9)                   initial dcl 19-8
and                                    internal static bit(9)                   initial dcl 25-3
and_bits                               internal static bit(9)                   initial dcl 19-8
arg_desc_type                          internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
arg_desc_type                          internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
array_node                             internal static bit(9)                   initial dcl 23-5
arrow                                  internal static bit(9)                   initial dcl 25-3
asin_fun                               internal static bit(9)                   initial dcl 19-8
asind_fun                              internal static bit(9)                   initial dcl 19-8
assign_by_name                         internal static bit(9)                   initial dcl 19-8
assign_round                           internal static bit(9)                   initial dcl 19-8
assign_size_ck                         internal static bit(9)                   initial dcl 19-8
assign_zero                            internal static bit(9)                   initial dcl 19-8
assignment                             internal static bit(9)                   initial dcl 25-3
atan_fun                               internal static bit(9)                   initial dcl 19-8
atand_fun                              internal static bit(9)                   initial dcl 19-8
b_format                               internal static bit(9)                   initial dcl 19-8
baseno_fun                             internal static bit(9)                   initial dcl 19-8
baseptr_fun                            internal static bit(9)                   initial dcl 19-8
begin_statement                        internal static bit(9)                   initial dcl 18-3
bin_integer                            internal static bit(9)                   initial dcl 25-3
binary_to_octal_string          000000 constant        entry                    external dcl 6-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 6-43
bindec                          000000 constant        entry                    external dcl 6-23
bindec$vs                       000000 constant        entry                    external dcl 6-28
binoct                          000000 constant        entry                    external dcl 6-33
bit_                                   internal static fixed bin(3,0)           initial dcl 22-5
bit_pointer                            internal static bit(9)                   initial dcl 19-8
bit_string                             internal static bit(9)                   initial dcl 25-3
bit_to_char                            internal static bit(9)                   initial dcl 19-8
bit_to_word                            internal static bit(9)                   initial dcl 19-8
bit_type                               internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
bit_type                               internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
bitno_fun                              internal static bit(9)                   initial dcl 19-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_character                     internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_character                     internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 20-69 in procedure "declare_descriptor"
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 4-69 in procedure "pl1_descriptor_type"
bits_per_double                        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_double                        internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
bits_per_half                          internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_half                          internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
bits_per_word                          internal static fixed bin(31,0)          initial dcl 4-5
block_node                             internal static bit(9)                   initial dcl 23-5
bn_format                              internal static bit(9)                   initial dcl 19-8
bool_fun                               internal static bit(9)                   initial dcl 19-8
bound_ck                               internal static bit(9)                   initial dcl 19-8
bound_node                             internal static bit(9)                   initial dcl 23-5
builtin                         000000 constant        entry                    external dcl 5-17
builtin_type                           internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
builtin_type                           internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
by_context                             internal static bit(3)                   initial dcl 21-5
by_declare                             internal static bit(3)                   initial dcl 21-5
by_explicit_context                    internal static bit(3)                   initial dcl 21-5
by_implication                         internal static bit(3)                   initial dcl 21-5
by_name_agg_node                       internal static bit(9)                   initial dcl 23-5
byte_fun                               internal static bit(9)                   initial dcl 19-8
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 3-25
c_format                               internal static bit(9)                   initial dcl 19-8
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 3-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 3-25
call_statement                         internal static bit(9)                   initial dcl 18-3
cat                                    internal static bit(9)                   initial dcl 25-3
cat_string                             internal static bit(9)                   initial dcl 19-8
ceil_fun                               internal static bit(9)                   initial dcl 19-8
char_string                            internal static bit(9)                   initial dcl 25-3
char_to_word                           internal static bit(9)                   initial dcl 19-8
char_type                              internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
char_type                              internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
character_                             internal static fixed bin(3,0)           initial dcl 22-5
characters_per_double                  internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
characters_per_double                  internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
characters_per_half                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
characters_per_half                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
characters_per_word                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
characters_per_word                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
charno_fun                             internal static bit(9)                   initial dcl 19-8
check_star_extents              000000 constant        entry                    external dcl 5-27
clock_fun                              internal static bit(9)                   initial dcl 19-8
close_file                             internal static bit(9)                   initial dcl 19-8
close_statement                        internal static bit(9)                   initial dcl 18-3
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 3-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
codeptr_fun                            internal static bit(9)                   initial dcl 19-8
colon                                  internal static bit(9)                   initial dcl 25-3
column_format                          internal static bit(9)                   initial dcl 19-8
comma                                  internal static bit(9)                   initial dcl 25-3
compare_declaration             000000 constant        entry                    external dcl 5-31
compare_expression              000000 constant        entry                    external dcl 6-48
complex_fun                            internal static bit(9)                   initial dcl 19-8
complex_type                           internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
complex_type                           internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
conjg_fun                              internal static bit(9)                   initial dcl 19-8
constant_length                 000000 constant        entry                    external dcl 6-54
context_node                           internal static bit(9)                   initial dcl 23-5
context_processor               000000 constant        entry                    external dcl 5-38
continue_statement                     internal static bit(9)                   initial dcl 18-3
convert                         000000 constant        entry                    external dcl 6-60
convert$from_builtin            000000 constant        entry                    external dcl 6-72
convert$to_integer              000000 constant        entry                    external dcl 6-66
convert$to_target               000000 constant        entry                    external dcl 6-88
convert$to_target_fb            000000 constant        entry                    external dcl 6-82
convert$validate                000000 constant        entry                    external dcl 6-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 6-99
copy_string                            internal static bit(9)                   initial dcl 19-8
copy_unique_expression          000000 constant        entry                    external dcl 6-103
copy_words                             internal static bit(9)                   initial dcl 19-8
cos_fun                                internal static bit(9)                   initial dcl 19-8
cosd_fun                               internal static bit(9)                   initial dcl 19-8
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
create_array                    000000 constant        entry                    external dcl 6-108
create_block                    000000 constant        entry                    external dcl 6-112
create_bound                    000000 constant        entry                    external dcl 6-118
create_context                  000000 constant        entry                    external dcl 6-122
create_cross_reference          000000 constant        entry                    external dcl 6-128
create_default                  000000 constant        entry                    external dcl 6-132
create_identifier               000000 constant        entry                    external dcl 6-136
create_label                    000000 constant        entry                    external dcl 6-140
create_list                     000000 constant        entry                    external dcl 6-147
create_storage                  000000 constant        entry                    external dcl 6-179
create_token                    000000 constant        entry                    external dcl 6-191
create_token$init_hash_table    000000 constant        entry                    external dcl 6-197
create_token$protected          000000 constant        entry                    external dcl 6-199
cross_reference_node                   internal static bit(9)                   initial dcl 23-5
dec_integer_type                       internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
dec_integer_type                       internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
decbin                          000000 constant        entry                    external dcl 6-206
declare                         000000 constant        entry                    external dcl 5-41
declare_constant                000000 constant        entry                    external dcl 6-211
declare_constant$bit            000000 constant        entry                    external dcl 6-219
declare_constant$char           000000 constant        entry                    external dcl 6-224
declare_descriptor              000000 constant        entry                    external dcl 6-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 6-249
declare_descriptor$param        000000 constant        entry                    external dcl 6-259
declare_integer                 000000 constant        entry                    external dcl 6-269
declare_picture                 000000 constant        entry                    external dcl 6-274
declare_picture_temp            000000 constant        entry                    external dcl 6-279
declare_statement                      internal static bit(9)                   initial dcl 18-3
declare_structure               000000 constant        entry                    external dcl 5-44
decode_node_id                  000000 constant        entry                    external dcl 6-300
decode_source_id                000000 constant        entry                    external dcl 6-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_area_size                      internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_node                           internal static bit(9)                   initial dcl 23-5
default_statement                      internal static bit(9)                   initial dcl 18-3
defined_reference               000000 constant        entry                    external dcl 5-47
delete_file                            internal static bit(9)                   initial dcl 19-8
delete_statement                       internal static bit(9)                   initial dcl 18-3
digit_                                 internal static fixed bin(3,0)           initial dcl 22-5
digit_to_bit                           internal static bit(9)                   initial dcl 19-8
display_statement                      internal static bit(9)                   initial dcl 18-3
div                                    internal static bit(9)                   initial dcl 19-8
do_fun                                 internal static bit(9)                   initial dcl 19-8
do_semantics                    000000 constant        entry                    external dcl 5-57
do_spec                                internal static bit(9)                   initial dcl 19-8
do_statement                           internal static bit(9)                   initial dcl 18-3
e_format                               internal static bit(9)                   initial dcl 19-8
else_clause                            internal static bit(9)                   initial dcl 18-3
empty_area                             internal static bit(9)                   initial dcl 19-8
enable_on                              internal static bit(9)                   initial dcl 19-8
end_statement                          internal static bit(9)                   initial dcl 18-3
entry_statement                        internal static bit(9)                   initial dcl 18-3
entry_var_type                         internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
entry_var_type                         internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
environmentptr_fun                     internal static bit(9)                   initial dcl 19-8
eq                                     internal static bit(9)                   initial dcl 25-3
equal                                  internal static bit(9)                   initial dcl 19-8
error                           000000 constant        entry                    external dcl 6-314
error$omit_text                 000000 constant        entry                    external dcl 6-319
error_                          000000 constant        entry                    external dcl 6-324
error_$finish                   000000 constant        entry                    external dcl 6-343
error_$initialize_error         000000 constant        entry                    external dcl 6-341
error_$no_text                  000000 constant        entry                    external dcl 6-334
ex_prologue                            internal static bit(9)                   initial dcl 19-8
exit_statement                         internal static bit(9)                   initial dcl 18-3
exp                                    internal static bit(9)                   initial dcl 19-8
exp_fun                                internal static bit(9)                   initial dcl 19-8
expand_assign                   000000 constant        entry                    external dcl 5-62
expand_by_name                  000000 constant        entry                    external dcl 5-71
expand_infix                    000000 constant        entry                    external dcl 5-76
expand_initial                  000000 constant        entry                    external dcl 5-84
expand_prefix                   000000 constant        entry                    external dcl 5-89
expand_primitive                000000 constant        entry                    external dcl 5-97
expon                                  internal static bit(9)                   initial dcl 25-3
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 3-125
f_format                               internal static bit(9)                   initial dcl 19-8
fill_refer                      000000 constant        entry                    external dcl 5-113
fixed_bin                              internal static bit(9)                   initial dcl 25-3
fixed_dec                              internal static bit(9)                   initial dcl 25-3
float_bin                              internal static bit(9)                   initial dcl 25-3
float_dec                              internal static bit(9)                   initial dcl 25-3
floor_fun                              internal static bit(9)                   initial dcl 19-8
format_statement                       internal static bit(9)                   initial dcl 18-3
format_value_node                      internal static bit(9)                   initial dcl 23-5
fortran_read                           internal static bit(9)                   initial dcl 19-8
fortran_write                          internal static bit(9)                   initial dcl 19-8
free_based                             internal static bit(9)                   initial dcl 19-8
free_ctl                               internal static bit(9)                   initial dcl 19-8
free_node                       000000 constant        entry                    external dcl 6-345
free_statement                         internal static bit(9)                   initial dcl 18-3
free_var                               internal static bit(9)                   initial dcl 19-8
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 3-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 3-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 3-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 3-96
ftn_file_manip                         internal static bit(9)                   initial dcl 19-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 19-8
function                        000000 constant        entry                    external dcl 5-125
ge                                     internal static bit(9)                   initial dcl 25-3
generic_selector                000000 constant        entry                    external dcl 5-134
get_array_size                  000000 constant        entry                    external dcl 6-348
get_data_trans                         internal static bit(9)                   initial dcl 19-8
get_edit_trans                         internal static bit(9)                   initial dcl 19-8
get_file                               internal static bit(9)                   initial dcl 19-8
get_list_trans                         internal static bit(9)                   initial dcl 19-8
get_size                        000000 constant        entry                    external dcl 6-352
get_statement                          internal static bit(9)                   initial dcl 18-3
get_string                             internal static bit(9)                   initial dcl 19-8
goto_statement                         internal static bit(9)                   initial dcl 18-3
greater_or_equal                       internal static bit(9)                   initial dcl 19-8
greater_than                           internal static bit(9)                   initial dcl 19-8
gt                                     internal static bit(9)                   initial dcl 25-3
half_                                  internal static fixed bin(3,0)           initial dcl 22-5
half_to_word                           internal static bit(9)                   initial dcl 19-8
i_bin_integer                          internal static bit(9)                   initial dcl 25-3
i_dec_integer                          internal static bit(9)                   initial dcl 25-3
i_fixed_bin                            internal static bit(9)                   initial dcl 25-3
i_fixed_dec                            internal static bit(9)                   initial dcl 25-3
i_float_bin                            internal static bit(9)                   initial dcl 25-3
i_float_dec                            internal static bit(9)                   initial dcl 25-3
identifier                             internal static bit(9)                   initial dcl 25-3
if_statement                           internal static bit(9)                   initial dcl 18-3
imag_fun                               internal static bit(9)                   initial dcl 19-8
index_after_fun                        internal static bit(9)                   initial dcl 19-8
index_before_fun                       internal static bit(9)                   initial dcl 19-8
index_fun                              internal static bit(9)                   initial dcl 19-8
index_rev_fun                          internal static bit(9)                   initial dcl 19-8
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125
integer_type                           internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
integer_type                           internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
io_data_list_semantics          000000 constant        entry                    external dcl 5-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 5-120
io_semantics                    000000 constant        entry                    external dcl 5-148
is_arith_constant                      internal static bit(9)                   initial dcl 25-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 25-47
is_constant                            internal static bit(9)                   initial dcl 25-47
is_decimal_constant                    internal static bit(9)                   initial dcl 25-47
is_delimiter                           internal static bit(9)                   initial dcl 25-47
is_float_constant                      internal static bit(9)                   initial dcl 25-47
is_identifier                          internal static bit(9)                   initial dcl 25-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 25-47
is_integral_constant                   internal static bit(9)                   initial dcl 25-47
is_isub                                internal static bit(9)                   initial dcl 25-47
isub                                   internal static bit(9)                   initial dcl 25-3
join                                   internal static bit(9)                   initial dcl 19-8
jump                                   internal static bit(9)                   initial dcl 19-8
jump_false                             internal static bit(9)                   initial dcl 19-8
jump_if_eq                             internal static bit(9)                   initial dcl 19-8
jump_if_ge                             internal static bit(9)                   initial dcl 19-8
jump_if_gt                             internal static bit(9)                   initial dcl 19-8
jump_if_le                             internal static bit(9)                   initial dcl 19-8
jump_if_lt                             internal static bit(9)                   initial dcl 19-8
jump_if_ne                             internal static bit(9)                   initial dcl 19-8
jump_true                              internal static bit(9)                   initial dcl 19-8
l_parn                                 internal static bit(9)                   initial dcl 19-8
label_array_element_node               internal static bit(9)                   initial dcl 23-5
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 3-125
label_node                             internal static bit(9)                   initial dcl 23-5
le                                     internal static bit(9)                   initial dcl 25-3
left_parn                              internal static bit(9)                   initial dcl 25-3
length_fun                             internal static bit(9)                   initial dcl 19-8
less_or_equal                          internal static bit(9)                   initial dcl 19-8
less_than                              internal static bit(9)                   initial dcl 19-8
line_format                            internal static bit(9)                   initial dcl 19-8
list_node                              internal static bit(9)                   initial dcl 23-5
local_label_var_type                   internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
local_label_var_type                   internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
locate_file                            internal static bit(9)                   initial dcl 19-8
locate_statement                       internal static bit(9)                   initial dcl 18-3
lock_file                              internal static bit(9)                   initial dcl 19-8
lock_fun                               internal static bit(9)                   initial dcl 19-8
lock_statement                         internal static bit(9)                   initial dcl 18-3
log10_fun                              internal static bit(9)                   initial dcl 19-8
log2_fun                               internal static bit(9)                   initial dcl 19-8
log_fun                                internal static bit(9)                   initial dcl 19-8
lookup                          000000 constant        entry                    external dcl 5-153
loop                                   internal static bit(9)                   initial dcl 19-8
lt                                     internal static bit(9)                   initial dcl 25-3
machine_state_node                     internal static bit(9)                   initial dcl 23-5
make_non_quick                  000000 constant        entry                    external dcl 5-162
match_arguments                 000000 constant        entry                    external dcl 5-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_area_size                          internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_bit_string                         internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_bit_string                         internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_block_number                       internal static fixed bin(17,0)          initial dcl 16-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_char_string                        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_fun                                internal static bit(9)                   initial dcl 19-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_index_register_value               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_index_register_value               internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_length_precision                   internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_length_precision                   internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 17-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_p_dec                              internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_p_dec                              internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 20-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 20-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_scale                              internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_scale                              internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
merge_attributes                000000 constant        entry                    external dcl 6-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
min_area_size                          internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
min_fun                                internal static bit(9)                   initial dcl 19-8
min_scale                              internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
min_scale                              internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
minus                                  internal static bit(9)                   initial dcl 25-3
mod2_                                  internal static fixed bin(3,0)           initial dcl 22-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 22-5
mod_bit                                internal static bit(9)                   initial dcl 19-8
mod_byte                               internal static bit(9)                   initial dcl 19-8
mod_fun                                internal static bit(9)                   initial dcl 19-8
mod_half                               internal static bit(9)                   initial dcl 19-8
mod_word                               internal static bit(9)                   initial dcl 19-8
mult                                   internal static bit(9)                   initial dcl 19-8
ne                                     internal static bit(9)                   initial dcl 25-3
negate                                 internal static bit(9)                   initial dcl 19-8
ngt                                    internal static bit(9)                   initial dcl 25-3
nlt                                    internal static bit(9)                   initial dcl 25-3
no_token                               internal static bit(9)                   initial dcl 25-3
nop                                    internal static bit(9)                   initial dcl 19-8
not                                    internal static bit(9)                   initial dcl 25-3
not_bits                               internal static bit(9)                   initial dcl 19-8
not_equal                              internal static bit(9)                   initial dcl 19-8
off_fun                                internal static bit(9)                   initial dcl 19-8
offset_adder                    000000 constant        entry                    external dcl 5-172
on_statement                           internal static bit(9)                   initial dcl 18-3
open_file                              internal static bit(9)                   initial dcl 19-8
open_statement                         internal static bit(9)                   initial dcl 18-3
operator_node                          internal static bit(9)                   initial dcl 23-5
operator_semantics              000000 constant        entry                    external dcl 5-184
optimizer                       000000 constant        entry                    external dcl 6-361
or                                     internal static bit(9)                   initial dcl 25-3
or_bits                                internal static bit(9)                   initial dcl 19-8
pack                                   internal static bit(9)                   initial dcl 19-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
page_format                            internal static bit(9)                   initial dcl 19-8
param_ptr                              internal static bit(9)                   initial dcl 19-8
parse_error                     000000 constant        entry                    external dcl 6-364
parse_error$no_text             000000 constant        entry                    external dcl 6-368
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 3-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 3-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 3-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 3-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 3-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 3-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 3-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 3-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 3-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 3-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 3-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 3-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 3-132
percent                                internal static bit(9)                   initial dcl 25-3
period                                 internal static bit(9)                   initial dcl 25-3
picture_format                         internal static bit(9)                   initial dcl 19-8
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 3-125
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 6-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 6-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 19-8
pl1_print$for_lex               000000 constant        entry                    external dcl 6-418
pl1_print$non_varying           000000 constant        entry                    external dcl 6-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 6-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 6-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 6-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 6-414
pl1_print$varying               000000 constant        entry                    external dcl 6-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 6-395
plus                                   internal static bit(9)                   initial dcl 25-3
pointer_type                           internal static bit(36)                  initial dcl 4-71
prefix_plus                            internal static bit(9)                   initial dcl 19-8
procedure_statement                    internal static bit(9)                   initial dcl 18-3
propagate_bit                   000000 constant        entry                    external dcl 5-192
ptr_fun                                internal static bit(9)                   initial dcl 19-8
put_control                            internal static bit(9)                   initial dcl 19-8
put_data_trans                         internal static bit(9)                   initial dcl 19-8
put_edit_trans                         internal static bit(9)                   initial dcl 19-8
put_field                              internal static bit(9)                   initial dcl 19-8
put_field_chk                          internal static bit(9)                   initial dcl 19-8
put_file                               internal static bit(9)                   initial dcl 19-8
put_list_trans                         internal static bit(9)                   initial dcl 19-8
put_statement                          internal static bit(9)                   initial dcl 18-3
put_string                             internal static bit(9)                   initial dcl 19-8
r_format                               internal static bit(9)                   initial dcl 19-8
r_parn                                 internal static bit(9)                   initial dcl 19-8
range_ck                               internal static bit(9)                   initial dcl 19-8
rank_fun                               internal static bit(9)                   initial dcl 19-8
read_file                              internal static bit(9)                   initial dcl 19-8
read_statement                         internal static bit(9)                   initial dcl 18-3
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_fun                               internal static bit(9)                   initial dcl 19-8
real_type                              internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
real_type                              internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
record_io                              internal static bit(9)                   initial dcl 19-8
refer                                  internal static bit(9)                   initial dcl 19-8
reference_node                         internal static bit(9)                   initial dcl 23-5
rel_fun                                internal static bit(9)                   initial dcl 19-8
repeat_fun                             internal static bit(9)                   initial dcl 19-8
reserve$clear                   000000 constant        entry                    external dcl 6-430
reserve$declare_lib             000000 constant        entry                    external dcl 6-434
reserve$read_lib                000000 constant        entry                    external dcl 6-439
return_bits                            internal static bit(9)                   initial dcl 19-8
return_statement                       internal static bit(9)                   initial dcl 18-3
return_string                          internal static bit(9)                   initial dcl 19-8
return_value                           internal static bit(9)                   initial dcl 19-8
return_words                           internal static bit(9)                   initial dcl 19-8
reverse_fun                            internal static bit(9)                   initial dcl 19-8
revert_on                              internal static bit(9)                   initial dcl 19-8
revert_statement                       internal static bit(9)                   initial dcl 18-3
rewrite_file                           internal static bit(9)                   initial dcl 19-8
rewrite_statement                      internal static bit(9)                   initial dcl 18-3
right_parn                             internal static bit(9)                   initial dcl 25-3
round_fun                              internal static bit(9)                   initial dcl 19-8
search_fun                             internal static bit(9)                   initial dcl 19-8
search_rev_fun                         internal static bit(9)                   initial dcl 19-8
segno_fun                              internal static bit(9)                   initial dcl 19-8
semantic_translator             000000 constant        entry                    external dcl 6-444
semantic_translator$abort       000000 constant        entry                    external dcl 6-446
semantic_translator$call_es     000000 constant        entry                    external dcl 5-196
semantic_translator$error       000000 constant        entry                    external dcl 6-450
semi_colon                             internal static bit(9)                   initial dcl 25-3
setbitno_fun                           internal static bit(9)                   initial dcl 19-8
setcharno_fun                          internal static bit(9)                   initial dcl 19-8
sf_par_node                            internal static bit(9)                   initial dcl 23-5
share_expression                000000 constant        entry                    external dcl 6-454
sign_fun                               internal static bit(9)                   initial dcl 19-8
signal_on                              internal static bit(9)                   initial dcl 19-8
signal_statement                       internal static bit(9)                   initial dcl 18-3
simplify_expression             000000 constant        entry                    external dcl 5-205
simplify_offset                 000000 constant        entry                    external dcl 5-212
sin_fun                                internal static bit(9)                   initial dcl 19-8
sind_fun                               internal static bit(9)                   initial dcl 19-8
skip_format                            internal static bit(9)                   initial dcl 19-8
slash                                  internal static bit(9)                   initial dcl 25-3
source_node                            internal static bit(9)                   initial dcl 23-5
sqrt_fun                               internal static bit(9)                   initial dcl 19-8
stack_ptr                              internal static bit(9)                   initial dcl 19-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 19-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 19-8
stacq_fun                              internal static bit(9)                   initial dcl 19-8
statement_node                         internal static bit(9)                   initial dcl 23-5
std_arg_list                           internal static bit(9)                   initial dcl 19-8
std_call                               internal static bit(9)                   initial dcl 19-8
std_entry                              internal static bit(9)                   initial dcl 19-8
std_return                             internal static bit(9)                   initial dcl 19-8
stop                                   internal static bit(9)                   initial dcl 19-8
stop_statement                         internal static bit(9)                   initial dcl 18-3
storage_block_type                     internal static bit(36)                  initial dcl 20-71 in procedure "declare_descriptor"
storage_block_type                     internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
stream_prep                            internal static bit(9)                   initial dcl 19-8
sub                                    internal static bit(9)                   initial dcl 19-8
subscripter                     000000 constant        entry                    external dcl 5-216
symbol_node                            internal static bit(9)                   initial dcl 23-5
system_on_unit                         internal static bit(9)                   initial dcl 18-3
tan_fun                                internal static bit(9)                   initial dcl 19-8
tand_fun                               internal static bit(9)                   initial dcl 19-8
temporary_node                         internal static bit(9)                   initial dcl 23-5
terminate_trans                        internal static bit(9)                   initial dcl 19-8
translate_fun                          internal static bit(9)                   initial dcl 19-8
trunc_fun                              internal static bit(9)                   initial dcl 19-8
unknown_statement                      internal static bit(9)                   initial dcl 18-3
unlock_file                            internal static bit(9)                   initial dcl 19-8
unlock_statement                       internal static bit(9)                   initial dcl 18-3
unpack                                 internal static bit(9)                   initial dcl 19-8
validate                        000000 constant        entry                    external dcl 5-225
vclock_fun                             internal static bit(9)                   initial dcl 19-8
verify_fun                             internal static bit(9)                   initial dcl 19-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 19-8
verify_rev_fun                         internal static bit(9)                   initial dcl 19-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 19-8
wait_statement                         internal static bit(9)                   initial dcl 18-3
word_to_mod2                           internal static bit(9)                   initial dcl 19-8
word_to_mod4                           internal static bit(9)                   initial dcl 19-8
word_to_mod8                           internal static bit(9)                   initial dcl 19-8
wordno_fun                             internal static bit(9)                   initial dcl 19-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_format                       internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_format                       internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_offset                       internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_offset                       internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 20-5 in procedure "declare_descriptor"
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
write_file                             internal static bit(9)                   initial dcl 19-8
write_statement                        internal static bit(9)                   initial dcl 18-3
x_format                               internal static bit(9)                   initial dcl 19-8
xor_bits                               internal static bit(9)                   initial dcl 19-8

NAMES DECLARED BY EXPLICIT CONTEXT.
assignf                         002756 constant        entry                    internal dcl 604 ref 381 385 390 528 529 572 573 598
assignm                         003272 constant        entry                    internal dcl 646 ref 597
builder                         001062 constant        entry                    internal dcl 263 ref 183 486
common                          002763 constant        label                    dcl 612 in procedure "assignf" ref 650
common                          000051 constant        label                    dcl 83 in procedure "declare_descriptor" set ref 215
                                                                                  225
copy                            001025 constant        entry                    internal dcl 246 ref 93 105 145
ctl                             000673 constant        entry                    external dcl 210
declare_descriptor              000036 constant        entry                    external dcl 26
do_hbound                       002430 constant        entry                    internal dcl 533 ref 438
do_lbound                       002224 constant        entry                    internal dcl 490 ref 436
do_mult                         002634 constant        entry                    internal dcl 577 ref 440
param                           000740 constant        entry                    external dcl 220
pl1_descriptor_type             003302 constant        entry                    internal dcl 1-8 ref 273
record_reference                002115 constant        label                    dcl 455 ref 445
set_mdims                       001221 constant        label                    dcl 300 ref 295
set_star                        000756 constant        entry                    internal dcl 229 ref 109 235

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      4106        4152    3663        4116
Length      5100    3663        44         712     223           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
declare_descriptor                  664 external procedure  is an external procedure.  
set_star                             74 internal procedure  calls itself recursively.  
copy                                    internal procedure  shares stack frame of external procedure declare_descriptor.  
builder                             230 internal procedure  calls itself recursively.  
do_lbound                               internal procedure  shares stack frame of internal procedure builder.  
do_hbound                               internal procedure  shares stack frame of internal procedure builder.  
do_mult                                 internal procedure  shares stack frame of internal procedure builder.  
assignf                                 internal procedure  shares stack frame of internal procedure builder.  
pl1_descriptor_type                     internal procedure  shares stack frame of internal procedure builder.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
builder                  000100 p                           builder
                         000102 q                           builder
                         000104 b                           builder
                         000106 sf                          builder
                         000110 i                           builder
                         000111 m                           builder
                         000112 mdims                       builder
                         000113 ndims                       builder
                         000114 nbounds                     builder
                         000115 type                        builder
                         000116 cdcl                        builder
                         000117 have_star                   builder
                         000130 lbound_constant             do_lbound
                         000140 hbound_constant             do_hbound
                         000156 p                           assignf
                         000160 q                           assignf
                         000162 stp                         assignf
                         000172 prec                        pl1_descriptor_type
                         000173 dtype                       pl1_descriptor_type
                         000174 type                        pl1_descriptor_type
declare_descriptor       000100 s                           declare_descriptor
                         000102 d                           declare_descriptor
                         000104 r                           declare_descriptor
                         000106 blk                         declare_descriptor
                         000110 q                           declare_descriptor
                         000112 st                          declare_descriptor
                         000114 first                       declare_descriptor
                         000116 ptr_saver                   declare_descriptor
                         000120 offset                      declare_descriptor
                         000121 size                        declare_descriptor
                         000122 scale                       declare_descriptor
                         000123 constant                    declare_descriptor
                         000124 actl                        declare_descriptor
                         000125 array_desc                  declare_descriptor
                         000126 cross_section               declare_descriptor
                         000127 before_get_size             declare_descriptor
                         000130 top_level                   declare_descriptor
                         000131 star_extents                declare_descriptor
                         000132 controlled                  declare_descriptor
                         000133 use_new                     declare_descriptor
                         000134 max_desc                    declare_descriptor
                         001142 p                           copy
set_star                 000100 p                           set_star
                         000102 d                           set_star

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ent_var        call_ext_out_desc   call_ext_out        call_int_this       call_int_other
return_mac          ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_operator               create_reference              create_statement
create_statement$prologue     create_symbol                 declare_constant$desc         declare_constant$integer
declare_pointer               declare_temporary             expression_semantics          refer_extent
token_to_binary

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$util_abort




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     26 000030        79 000043        80 000044        81 000045        83 000051        85 000055        87 000057
     88 000062        93 000066       100 000123       101 000124       105 000144       109 000154       112 000164
    113 000167       116 000177       117 000213       120 000233       122 000237       123 000240       125 000247
    126 000266       127 000273       131 000314       132 000316       134 000323       135 000325       136 000326
    137 000327       140 000331       142 000341       143 000343       145 000344       146 000350       148 000353
    150 000354       153 000362       154 000364       157 000377       159 000405       160 000410       162 000414
    165 000431       166 000446       167 000474       168 000514       171 000516       172 000521       173 000524
    179 000526       180 000530       181 000532       183 000534       185 000542       187 000544       188 000570
    189 000574       190 000577       191 000602       192 000603       193 000604       195 000605       198 000651
    199 000654       202 000656       204 000664       210 000671       212 000700       213 000702       214 000703
    215 000735       220 000736       222 000745       223 000746       224 000752       225 000754       229 000755
    232 000763       234 000767       235 000776       237 001005       238 001014       239 001021       241 001024
    246 001025       252 001027       254 001032       257 001055       263 001061       271 001067       273 001073
    275 001103       276 001106       278 001113       280 001114       283 001132       284 001144       285 001146
    290 001162       291 001163       292 001177       295 001210       298 001216       300 001221       304 001240
    306 001242       308 001256       310 001262       314 001264       318 001300       320 001303       321 001307
    323 001312       326 001321       328 001324       329 001325       330 001327       331 001334       332 001335
    333 001340       334 001341       337 001351       339 001353       340 001355       342 001364       345 001400
    346 001402       347 001425       348 001426       350 001431       353 001441       355 001443       356 001460
    357 001477       358 001503       360 001505       364 001513       365 001520       367 001521       368 001536
    369 001543       370 001567       372 001572       373 001575       375 001577       376 001601       377 001616
    378 001635       379 001641       380 001643       381 001644       382 001654       384 001655       385 001660
    387 001670       388 001671       390 001700       395 001726       397 001730       398 001735       409 001737
    411 001742       412 001746       413 001750       415 001751       417 001754       419 001765       421 001771
    423 001773       424 002001       425 002004       427 002022       430 002027       432 002051       436 002072
    437 002073       438 002075       439 002076       440 002100       442 002101       443 002103       444 002106
    445 002110       447 002112       449 002114       455 002115       457 002131       458 002141       461 002147
    464 002164       465 002165       472 002171       474 002173       475 002175       481 002176       483 002201
    485 002202       486 002210       487 002217       600 002223       490 002224       495 002225       496 002226
    501 002245       502 002247       504 002266       505 002267       507 002271       509 002274       511 002303
    513 002305       514 002310       515 002326       516 002333       517 002334       520 002340       522 002346
    525 002362       526 002400       527 002405       528 002406       529 002417       531 002427       533 002430
    538 002431       540 002432       545 002451       546 002453       548 002472       549 002473       551 002475
    553 002500       555 002507       557 002511       558 002514       559 002532       560 002537       561 002540
    564 002544       566 002552       569 002566       570 002604       571 002611       572 002612       573 002623
    575 002633       577 002634       580 002635       582 002640       583 002643       585 002647       586 002666
    588 002673       589 002674       591 002703       594 002707       595 002726       596 002733       597 002734
    598 002745       599 002755       604 002756       610 002760       612 002763       614 003000       615 003017
    616 003023       618 003037       621 003056       623 003061       626 003066       628 003072       630 003112
    632 003125       633 003156       634 003203       636 003204       637 003232       638 003235       642 003271
    646 003272       649 003274       650 003301    1    8 003302    1   33 003304    1   34 003310    1   36 003312
 1   38 003320    1   46 003341    1   47 003344    1   49 003351    1   50 003354    1   52 003362    1   53 003365
 1   56 003375    1   57 003400    1   59 003406    1   60 003411    1   67 003427    1   68 003432    1   70 003440
 1   71 003443    1   74 003453    1   75 003456    1   77 003464    1   78 003467    1   83 003500    1   84 003503
 1   89 003514    1   90 003517    1   94 003525    1   98 003533    1  102 003541    1  106 003547    1  110 003555
 1  114 003563    1  118 003571    1  120 003572


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
