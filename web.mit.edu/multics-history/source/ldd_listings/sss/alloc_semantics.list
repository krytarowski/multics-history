	COMPILATION LISTING OF SEGMENT alloc_semantics
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1152.26_Tue_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 alloc_semantics:	proc(cur_block,stmnt,tree);
       12 
       13 /*	Modified: 14 August 1978 by PCK to fix 1735
       14*	Modified:	15 August 1978 by RAB to fix 1733
       15*	Modified:	16 August 1978 by RAB to fix 1772, 1773, & 1774	*/
       16 /*	Modified: 15 Jan 1979 by DS to fix 1783 */
       17 
       18 dcl	(cur_block,stmnt,tree) ptr,
       19 	(a,adam,area,b,d,dst,l,locator,next,o,p,r,s,source,size,st) ptr,
       20 
       21 	(n,i,processed_bounds,own_num_bounds,number) fixed bin(15);
       22 
       23 dcl	(null,hbound,string) builtin;
       24 
       25 dcl	ref_targ_cnt fixed bin(15) init(0);
       26 
       27 dcl 	ref_targ(16) pointer;
       28 
       29 dcl	pl1_stat_$use_old_area external static bit(1) aligned;
       30 
       31 dcl	opcode bit(9) aligned;
       32 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
       33 
       34 
  8     1 dcl	1 array			based aligned,
  8     2 	2 node_type		bit(9) unaligned,
  8     3 	2 reserved		bit(34) unaligned,
  8     4 	2 number_of_dimensions	fixed(7) unaligned,
  8     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  8     6 	2 element_boundary		fixed(3) unaligned,
  8     7 	2 size_units		fixed(3) unaligned,
  8     8 	2 offset_units		fixed(3) unaligned,
  8     9 	2 interleaved		bit(1) unaligned,
  8    10 	2 c_element_size		fixed(24),
  8    11 	2 c_element_size_bits	fixed(24),
  8    12 	2 c_virtual_origin		fixed(24),
  8    13 	2 element_size		ptr unaligned,
  8    14 	2 element_size_bits		ptr unaligned,
  8    15 	2 virtual_origin		ptr unaligned,
  8    16 	2 symtab_virtual_origin	ptr unaligned,
  8    17 	2 symtab_element_size	ptr unaligned,
  8    18 	2 bounds			ptr unaligned,
  8    19 	2 element_descriptor	ptr unaligned;
  8    20 
  8    21 dcl	1 bound			based aligned,
  8    22 	2 node_type		bit(9),
  8    23 	2 c_lower			fixed(24),
  8    24 	2 c_upper			fixed(24),
  8    25 	2 c_multiplier		fixed(24),
  8    26 	2 c_desc_multiplier		fixed(24),
  8    27 	2 lower			ptr unaligned,
  8    28 	2 upper			ptr unaligned,
  8    29 	2 multiplier		ptr unaligned,
  8    30 	2 desc_multiplier		ptr unaligned,
  8    31 	2 symtab_lower		ptr unaligned,
  8    32 	2 symtab_upper		ptr unaligned,
  8    33 	2 symtab_multiplier		ptr unaligned,
  8    34 	2 next			ptr unaligned;
       35 
  9     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
  9     2 
  9     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
  9     4 
  9     5 dcl (	bit_		init(1),
  9     6 	digit_		init(2),
  9     7 	character_	init(3),
  9     8 	half_		init(4),
  9     9 	word_		init(5),
  9    10 	mod2_		init(6),
  9    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
  9    12 
  9    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
       36 
 10     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 10     2 
 10     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 10     4 
 10     5 
 10     6 dcl	1 list		based aligned,
 10     7 	2 node_type	bit(9) unaligned,
 10     8 	2 reserved	bit(12) unaligned,
 10     9 	2 number		fixed(14) unaligned,
 10    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 10    11 
 10    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 10    13 	                    init(16383);
 10    14 
 10    15 /* END INCLUDE FILE ... list.incl.pl1 */
       37 
 11     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 11     2 
 11     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 11     4 
 11     5 dcl (	block_node		initial("000000001"b),
 11     6 	statement_node		initial("000000010"b),
 11     7 	operator_node		initial("000000011"b),
 11     8 	reference_node		initial("000000100"b),
 11     9 	token_node		initial("000000101"b),
 11    10 	symbol_node		initial("000000110"b),
 11    11 	context_node		initial("000000111"b),
 11    12 	array_node		initial("000001000"b),
 11    13 	bound_node		initial("000001001"b),
 11    14 	format_value_node		initial("000001010"b),
 11    15 	list_node			initial("000001011"b),
 11    16 	default_node		initial("000001100"b),
 11    17 	machine_state_node		initial("000001101"b),
 11    18 	source_node		initial("000001110"b),
 11    19 	label_node		initial("000001111"b),
 11    20 	cross_reference_node	initial("000010000"b),
 11    21 	sf_par_node		initial("000010001"b),
 11    22 	temporary_node		initial("000010010"b),
 11    23 	label_array_element_node	initial("000010011"b),
 11    24 	by_name_agg_node		initial("000010100"b))
 11    25 				bit(9) internal static aligned options(constant);
 11    26 
 11    27 dcl	1 node			based aligned,
 11    28 	2 type			unal bit(9),
 11    29 	2 source_id		unal structure,
 11    30 	  3 file_number		bit(8),
 11    31 	  3 line_number		bit(14),
 11    32 	  3 statement_number	bit(5);
 11    33 
 11    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       38 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       39 
 13     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 13     2 
 13     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 13     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 13     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 13     6 /* Modified: 26 July 82 BIM wordno, segno */
 13     7 
 13     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 13     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 13    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 13    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 13    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 13    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 13    14 
 13    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 13    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 13    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 13    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 13    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 13    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 13    21 
 13    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 13    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 13    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 13    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 13    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 13    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 13    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 13    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 13    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 13    31 
 13    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 13    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 13    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 13    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 13    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 13    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 13    38 
 13    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 13    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 13    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 13    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 13    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 13    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 13    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 13    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 13    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 13    48 
 13    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 13    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 13    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 13    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 13    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 13    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 13    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 13    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 13    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 13    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 13    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 13    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 13    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 13    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 13    63 
 13    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 13    65*						   opnd(2) <- opnd(3) / 36		*/
 13    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 13    67*						   opnd(2) <- opnd(3) / 4		*/
 13    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 13    69*						   opnd(2) <- opnd(3) / 2		*/
 13    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 13    71 
 13    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 13    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 13    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 13    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 13    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 13    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 13    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 13    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 13    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 13    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 13    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 13    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 13    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 13    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 13    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 13    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 13    88 
 13    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 13    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 13    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 13    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 13    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 13    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 13    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 13    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 13    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 13    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 13    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 13   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 13   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 13   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 13   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 13   104 
 13   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 13   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 13   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 13   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 13   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 13   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 13   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 13   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 13   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 13   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 13   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 13   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 13   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 13   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 13   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 13   120 
 13   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 13   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 13   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 13   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 13   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 13   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 13   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 13   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 13   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 13   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 13   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 13   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 13   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 13   134 
 13   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 13   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 13   137 
 13   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 13   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 13   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 13   141*						   opnd(2) is the file name
 13   142*						   opnd(3) is the block	*/
 13   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 13   144*						   opnd(2) is the file name	*/
 13   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 13   146*						   opnd(2) is the file name */
 13   147 
 13   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 13   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 13   150*						   opnd(3) is old value, (4) is new value. */
 13   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 13   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 13   153 
 13   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 13   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 13   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 13   157*						   opnd(5) is the list */
 13   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 13   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 13   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 13   161 
 13   162 	r_parn		initial("011110001"b),	/* format op code			*/
 13   163 	l_parn		initial("011110010"b),
 13   164 	r_format		initial("011110011"b),
 13   165 	c_format		initial("011110100"b),
 13   166 	f_format		initial("011110101"b),
 13   167 	e_format		initial("011110110"b),
 13   168 	b_format		initial("011110111"b),
 13   169 	a_format		initial("011111000"b),
 13   170 	x_format		initial("011111001"b),
 13   171 	skip_format	initial("011111010"b),
 13   172 	column_format	initial("011111011"b),
 13   173 	page_format	initial("011111100"b),
 13   174 	line_format	initial("011111101"b),
 13   175 	picture_format	initial("011111110"b),
 13   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 13   177 
 13   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 13   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 13   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 13   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 13   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 13   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 13   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 13   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 13   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 13   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 13   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 13   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 13   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 13   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 13   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 13   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 13   194 
 13   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 13   196 /* They are processed by the semantic translator.						*/
 13   197 
 13   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 13   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 13   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 13   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 13   202 						/* opnd(3) is skip, opnd(4) is list	*/
 13   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 13   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 13   205 						/* opnd(3) is skip,opnd(4) is line	*/
 13   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 13   207 	open_file		initial("100011001"b),
 13   208 	close_file	initial("100011010"b),
 13   209 	read_file		initial("100011011"b),
 13   210 	write_file	initial("100011100"b),
 13   211 	locate_file	initial("100011101"b),
 13   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 13   213 						/* opnd(2) is control variable ref	*/
 13   214 						/* opnd(3) is specification operator	*/
 13   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 13   216 						/* repeat opnd(4) while opnd(5)	*/
 13   217 						/* opnd(6) is next specification	*/
 13   218 
 13   219 	rewrite_file	initial("100100000"b),
 13   220 	delete_file	initial("100100001"b),
 13   221 	unlock_file	initial("100100010"b),
 13   222 	lock_file		initial("100100011"b),
 13   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 13   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 13   225 	nop		initial("100100111"b),	/* no-op */
 13   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 13   227 
 13   228 /* These operators are produced by the semantic translator in processing the math
 13   229*   builtin functions and are used as input to the code generator			*/
 13   230 
 13   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 13   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 13   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 13   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 13   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 13   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 13   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 13   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 13   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 13   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 13   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 13   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 13   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 13   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 13   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 13   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 13   247 
 13   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 13   249 
 13   250 			bit(9) aligned internal static options(constant);
 13   251 
 13   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       40 
 14     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 14     2 
 14     3 dcl	1 reference		based aligned,
 14     4 	2 node_type		bit(9) unaligned,
 14     5 	2 array_ref		bit(1) unaligned,
 14     6 	2 varying_ref		bit(1) unaligned,
 14     7 	2 shared			bit(1) unaligned,
 14     8 	2 put_data_sw		bit(1) unaligned,
 14     9 	2 processed		bit(1) unaligned,
 14    10 	2 units			fixed(3) unaligned,
 14    11 	2 ref_count		fixed(17) unaligned,
 14    12 	2 c_offset		fixed(24),
 14    13 	2 c_length		fixed(24),
 14    14 	2 symbol			ptr unaligned,
 14    15 	2 qualifier		ptr unaligned,
 14    16 	2 offset			ptr unaligned,
 14    17 	2 length			ptr unaligned,
 14    18 	2 subscript_list		ptr unaligned,
 14    19 						/* these fields are used by the 645 code generator */
 14    20 	2 address			structure unaligned,
 14    21 	  3 base			bit(3),
 14    22 	  3 offset		bit(15),
 14    23 	  3 op			bit(9),
 14    24 	  3 no_address		bit(1),
 14    25 	  3 inhibit		bit(1),
 14    26 	  3 ext_base		bit(1),
 14    27 	  3 tag			bit(6),
 14    28 	2 info			structure unaligned,
 14    29 	  3 address_in		structure,
 14    30 	    4 b			dimension(0:7) bit(1),
 14    31 	    4 storage		bit(1),
 14    32 	  3 value_in		structure,
 14    33 	    4 a			bit(1),
 14    34 	    4 q			bit(1),
 14    35 	    4 aq			bit(1),
 14    36 	    4 string_aq		bit(1),
 14    37 	    4 complex_aq		bit(1),
 14    38 	    4 decimal_aq		bit(1),
 14    39 	    4 b			dimension(0:7) bit(1),
 14    40 	    4 storage		bit(1),
 14    41 	    4 indicators		bit(1),
 14    42 	    4 x			dimension(0:7) bit(1),
 14    43 	  3 other			structure,
 14    44 	    4 big_offset		bit(1),
 14    45 	    4 big_length		bit(1),
 14    46 	    4 modword_in_offset	bit(1),
 14    47 	2 data_type		fixed(5) unaligned,
 14    48 	2 bits			structure unaligned,
 14    49 	  3 padded_ref		bit(1),
 14    50 	  3 aligned_ref		bit(1),
 14    51 	  3 long_ref		bit(1),
 14    52 	  3 forward_ref		bit(1),
 14    53 	  3 ic_ref		bit(1),
 14    54 	  3 temp_ref		bit(1),
 14    55 	  3 defined_ref		bit(1),
 14    56 	  3 evaluated		bit(1),
 14    57 	  3 allocate		bit(1),
 14    58 	  3 allocated		bit(1),
 14    59 	  3 aliasable		bit(1),
 14    60 	  3 even			bit(1),
 14    61 	  3 perm_address		bit(1),
 14    62 	  3 aggregate		bit(1),
 14    63 	  3 hit_zero		bit(1),
 14    64 	  3 dont_save		bit(1),
 14    65 	  3 fo_in_qual		bit(1),
 14    66 	  3 hard_to_load		bit(1),
 14    67 	2 relocation		bit(12) unaligned,
 14    68 	2 more_bits		structure unaligned,
 14    69 	  3 substr		bit(1),
 14    70 	  3 padded_for_store_ref	bit(1),
 14    71 	  3 aligned_for_store_ref	bit(1),
 14    72 	  3 mbz			bit(15),
 14    73 	2 store_ins		bit(18) unaligned;
 14    74 
 14    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       41 
 15     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 15     2 
 15     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 15     4 
 15     5 dcl	context aligned bit(36),
 15     6 	this_context aligned bit(36);
 15     7 
 15     8 dcl	1 def_context		aligned based(addr(context)),
 15     9 	2 aggregate		unaligned bit(1),
 15    10 	2 arg_list		unaligned bit(1),
 15    11 	2 left_side		unaligned bit(1),
 15    12 	2 return			unaligned bit(1),
 15    13 	2 evaluate_offset		unaligned bit(1),
 15    14 	2 top			unaligned bit(1),
 15    15 	2 RHS_aggregate		unaligned bit(1),
 15    16 	2 return_from_empty		unaligned bit(1),
 15    17 	2 ignore_based		unaligned bit(1),
 15    18 	2 ext_param		unaligned bit(1),
 15    19 	2 cross_section		unaligned bit(1),
 15    20 	2 string_unspec		unaligned bit(1),
 15    21 	2 f_offset_to_be_added	unaligned bit(1),
 15    22 	2 suppress_cross_ref	unaligned bit(1),
 15    23 	2 by_name_assignment	unaligned bit(1),
 15    24 	2 by_name_lookup		unaligned bit(1),
 15    25 	2 pad			unaligned bit(20);
 15    26 
 15    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 15    28 
 15    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
       42 
 16     1 /* ***********************************************************
 16     2*   *                                                         *
 16     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 16     4*   *                                                         *
 16     5*   *********************************************************** */
 16     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 16     7 /* Internal interface of the PL/I compiler */
 16     8 
 16     9 dcl	1 statement		based aligned,
 16    10 	2 node_type		bit(9) unaligned,
 16    11 	2 source_id		structure unaligned,
 16    12 	  3 file_number		bit(8),
 16    13 	  3 line_number		bit(14),
 16    14 	  3 statement_number	bit(5),
 16    15 	2 next			ptr unaligned,
 16    16 	2 back			ptr unaligned,
 16    17 	2 root			ptr unaligned,
 16    18 	2 labels			ptr unaligned,
 16    19 	2 reference_list		ptr unaligned,
 16    20 	2 state_list		ptr unaligned,
 16    21 	2 reference_count		fixed(17) unaligned,
 16    22 	2 ref_count_copy		fixed(17) unaligned,
 16    23 	2 object			structure unaligned,
 16    24 	  3 start			fixed(17),
 16    25 	  3 finish		fixed(17),
 16    26 	2 source			structure unaligned,
 16    27 	  3 segment		fixed(11),
 16    28 	  3 start			fixed(23),
 16    29 	  3 length		fixed(11),
 16    30 	2 prefix			bit(12) unaligned,
 16    31 	2 optimized		bit(1) unaligned,
 16    32 	2 free_temps		bit(1) unaligned,
 16    33 	2 LHS_in_RHS		bit(1) unaligned,
 16    34 	2 statement_type		bit(9) unaligned,
 16    35 	2 bits			structure unaligned,
 16    36 	  3 processed		bit(1) unaligned,
 16    37 	  3 put_in_profile		bit(1) unaligned,
 16    38 	  3 generated		bit(1) unaligned,
 16    39 	  3 snap			bit(1) unaligned,
 16    40 	  3 system		bit(1) unaligned,
 16    41 	  3 irreducible		bit(1) unaligned,
 16    42 	  3 checked		bit(1) unaligned,
 16    43 	  3 save_temps		bit(1) unaligned,
 16    44 	  3 suppress_warnings	bit(1) unaligned,
 16    45 	  3 force_nonquick		bit(1) unaligned,
 16    46 	  3 expanded_by_name	bit(1) unaligned,
 16    47 	  3 begins_loop		bit(1) unaligned,
 16    48 	  3 pad			bit(24) unaligned;
 16    49 
 16    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       43 
 17     1 	/* statement types */
 17     2 
 17     3 dcl (	unknown_statement		initial("000000000"b),
 17     4 	allocate_statement		initial("000000001"b),
 17     5 	assignment_statement	initial("000000010"b),
 17     6 	begin_statement		initial("000000011"b),
 17     7 	call_statement		initial("000000100"b),
 17     8 	close_statement		initial("000000101"b),
 17     9 	declare_statement		initial("000000110"b),
 17    10 	lock_statement		initial("000000111"b),
 17    11 	delete_statement		initial("000001000"b),
 17    12 	display_statement		initial("000001001"b),
 17    13 	do_statement		initial("000001010"b),
 17    14 	else_clause		initial("000001011"b),
 17    15 	end_statement		initial("000001100"b),
 17    16 	entry_statement		initial("000001101"b),
 17    17 	exit_statement		initial("000001110"b),
 17    18 	format_statement		initial("000001111"b),
 17    19 	free_statement		initial("000010000"b),
 17    20 	get_statement		initial("000010001"b),
 17    21 	goto_statement		initial("000010010"b),
 17    22 	if_statement		initial("000010011"b),
 17    23 	locate_statement		initial("000010100"b),
 17    24 	null_statement		initial("000010101"b),
 17    25 	on_statement		initial("000010110"b),
 17    26 	open_statement		initial("000010111"b),
 17    27 	procedure_statement 	initial("000011000"b),
 17    28 	put_statement		initial("000011001"b),
 17    29 	read_statement		initial("000011010"b),
 17    30 	return_statement		initial("000011011"b),
 17    31 	revert_statement		initial("000011100"b),
 17    32 	rewrite_statement		initial("000011101"b),
 17    33 	signal_statement		initial("000011110"b),
 17    34 	stop_statement		initial("000011111"b),
 17    35 	system_on_unit		initial("000100000"b),
 17    36 	unlock_statement		initial("000100001"b),
 17    37 	wait_statement		initial("000100010"b),
 17    38 	write_statement		initial("000100011"b),
 17    39 	default_statement		initial("000100100"b),
 17    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
       44 
 18     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 18     2 
 18     3 dcl	1 symbol			based aligned,
 18     4 	2 node_type		bit(9) unal,
 18     5 	2 source_id		structure unal,
 18     6 	  3 file_number		bit(8),
 18     7 	  3 line_number		bit(14),
 18     8 	  3 statement_number	bit(5),
 18     9 	2 location		fixed(18) unal unsigned,
 18    10 	2 allocated		bit(1) unal,
 18    11 	2 dcl_type		bit(3) unal,
 18    12 	2 reserved		bit(6) unal,
 18    13 	2 pix			unal,
 18    14 	  3 pic_fixed		bit(1) unal,
 18    15 	  3 pic_float		bit(1) unal,
 18    16 	  3 pic_char		bit(1) unal,
 18    17 	  3 pic_scale		fixed(7) unal,
 18    18 	  3 pic_size		fixed(7) unal,
 18    19 	2 level			fixed(8) unal,
 18    20 	2 boundary		fixed(3) unal,
 18    21 	2 size_units		fixed(3) unal,
 18    22 	2 scale			fixed(7) unal,
 18    23 	2 runtime			bit(18) unal,
 18    24 	2 runtime_offset		bit(18) unal,
 18    25 	2 block_node		ptr unal,
 18    26 	2 token			ptr unal,
 18    27 	2 next			ptr unal,
 18    28 	2 multi_use		ptr unal,
 18    29 	2 cross_references		ptr unal,
 18    30 	2 initial			ptr unal,
 18    31 	2 array			ptr unal,
 18    32 	2 descriptor		ptr unal,
 18    33 	2 equivalence		ptr unal,
 18    34 	2 reference		ptr unal,
 18    35 	2 general			ptr unal,
 18    36 	2 father			ptr unal,
 18    37 	2 brother			ptr unal,
 18    38 	2 son			ptr unal,
 18    39 	2 word_size		ptr unal,
 18    40 	2 bit_size		ptr unal,
 18    41 	2 dcl_size		ptr unal,
 18    42 	2 symtab_size		ptr unal,
 18    43 	2 c_word_size		fixed(24),
 18    44 	2 c_bit_size		fixed(24),
 18    45 	2 c_dcl_size		fixed(24),
 18    46 
 18    47 	2 attributes		structure aligned,
 18    48 	  3 data_type		structure unal,
 18    49 	    4 structure		bit(1) ,
 18    50 	    4 fixed		bit(1),
 18    51 	    4 float		bit(1),
 18    52 	    4 bit			bit(1),
 18    53 	    4 char		bit(1),
 18    54 	    4 ptr			bit(1),
 18    55 	    4 offset		bit(1),
 18    56 	    4 area		bit(1),
 18    57 	    4 label		bit(1),
 18    58 	    4 entry		bit(1),
 18    59 	    4 file		bit(1),
 18    60 	    4 arg_descriptor	bit(1),
 18    61 	    4 storage_block		bit(1),
 18    62 	    4 explicit_packed	bit(1), /* options(packed) */
 18    63 	    4 condition		bit(1),
 18    64 	    4 format		bit(1),
 18    65 	    4 builtin		bit(1),
 18    66 	    4 generic		bit(1),
 18    67 	    4 picture		bit(1),
 18    68 
 18    69 	  3 misc_attributes		structure unal,
 18    70 	    4 dimensioned		bit(1),
 18    71 	    4 initialed		bit(1),
 18    72 	    4 aligned		bit(1),
 18    73 	    4 unaligned		bit(1),
 18    74 	    4 signed		bit(1),
 18    75 	    4 unsigned		bit(1),
 18    76 	    4 precision		bit(1),
 18    77 	    4 varying		bit(1),
 18    78 	    4 local		bit(1),
 18    79 	    4 decimal		bit(1),
 18    80 	    4 binary		bit(1),
 18    81 	    4 real		bit(1),
 18    82 	    4 complex		bit(1),
 18    83 	    4 variable		bit(1),
 18    84 	    4 reducible		bit(1),
 18    85 	    4 irreducible		bit(1),
 18    86 	    4 returns		bit(1),
 18    87 	    4 position		bit(1),
 18    88 	    4 internal		bit(1),
 18    89 	    4 external		bit(1),
 18    90 	    4 like		bit(1),
 18    91 	    4 member		bit(1),
 18    92 	    4 non_varying		bit(1),
 18    93 	    4 options		bit(1),
 18    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 18    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 18    96 
 18    97 	  3 storage_class		structure unal,
 18    98 	    4 auto		bit(1),
 18    99 	    4 based		bit(1),
 18   100 	    4 static		bit(1),
 18   101 	    4 controlled		bit(1),
 18   102 	    4 defined		bit(1),
 18   103 	    4 parameter		bit(1),
 18   104 	    4 param_desc		bit(1),
 18   105 	    4 constant		bit(1),
 18   106 	    4 temporary		bit(1),
 18   107 	    4 return_value		bit(1),
 18   108 
 18   109 	  3 file_attributes		structure unal,
 18   110 	    4 print		bit(1),
 18   111 	    4 input		bit(1),
 18   112 	    4 output		bit(1),
 18   113 	    4 update		bit(1),
 18   114 	    4 stream		bit(1),
 18   115 	    4 reserved_1		bit(1),
 18   116 	    4 record		bit(1),
 18   117 	    4 sequential		bit(1),
 18   118 	    4 direct		bit(1),
 18   119 	    4 interactive		bit(1),		/* env(interactive) */
 18   120 	    4 reserved_2		bit(1),
 18   121 	    4 reserved_3		bit(1),
 18   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 18   123 	    4 keyed		bit(1),
 18   124 	    4 reserved_4		bit(1),
 18   125 	    4 environment		bit(1),
 18   126 
 18   127 	  3 compiler_developed	structure unal,
 18   128 	    4 aliasable		bit(1),
 18   129 	    4 packed		bit(1),
 18   130 	    4 passed_as_arg		bit(1),
 18   131 	    4 allocate		bit(1),
 18   132 	    4 set			bit(1),
 18   133 	    4 exp_extents		bit(1),
 18   134 	    4 refer_extents		bit(1),
 18   135 	    4 star_extents		bit(1),
 18   136 	    4 isub		bit(1),
 18   137 	    4 put_in_symtab		bit(1),
 18   138 	    4 contiguous		bit(1),
 18   139 	    4 put_data		bit(1),
 18   140 	    4 overlayed		bit(1),
 18   141 	    4 error		bit(1),
 18   142 	    4 symtab_processed	bit(1),
 18   143 	    4 overlayed_by_builtin	bit(1),
 18   144 	    4 defaulted		bit(1),
 18   145 	    4 connected		bit(1);
 18   146 
 18   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       45 
 19     1 /* BEGIN INCLUDE FILE ... symbol_bits.incl.pl1 */
 19     2 
 19     3 dcl (	aliasable_bit	initial (72),
 19     4 	passed_as_arg_bit	initial (74),
 19     5 	set_bit		initial (76),
 19     6 	overlayed_by_builtin_bit initial (87)) fixed bin (15) internal static options (constant);
 19     7 
 19     8 /* END INCLUDE FILE ... symbol_bits.incl.pl1 */
       46 
 20     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 20     2 
 20     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 20     4 
 20     5 dcl (	max_p_flt_bin_1			initial(27),
 20     6 	max_p_flt_bin_2			initial(63),
 20     7 	max_p_fix_bin_1			initial(35),
 20     8 	max_p_fix_bin_2			initial(71),
 20     9 
 20    10 	max_p_dec				initial(59),
 20    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 20    12 
 20    13 	min_scale				initial(-128),
 20    14 	max_scale				initial(+127),
 20    15 	max_bit_string			initial(9437184),
 20    16 	max_char_string			initial(1048576),
 20    17 	max_area_size			initial(262144),
 20    18 	min_area_size			initial(28),
 20    19 
 20    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 20    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 20    22 	max_identifier_length		initial (256),
 20    23 	max_number_of_dimensions		initial (127),
 20    24 
 20    25 	max_length_precision		initial(24),
 20    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 20    27 
 20    28 	max_words_per_variable		initial (262144),
 20    29 
 20    30 	bits_per_word			initial(36),
 20    31 	bits_per_double			initial(72),
 20    32 	packed_digits_per_character		initial(2),
 20    33 	characters_per_half			initial(2),
 20    34 	characters_per_word			initial(4),
 20    35 	characters_per_double		initial(8),
 20    36 
 20    37 	bits_per_character			initial(9),
 20    38 	bits_per_half			initial(18),
 20    39 	bits_per_decimal_digit		initial(9),
 20    40 	bits_per_binary_exponent		initial(8),
 20    41 	bits_per_packed_ptr			initial(36),
 20    42 	words_per_packed_pointer		initial(1),
 20    43 
 20    44 	words_per_fix_bin_1			initial(1),
 20    45 	words_per_fix_bin_2			initial(2),
 20    46 	words_per_flt_bin_1			initial(1),
 20    47 	words_per_flt_bin_2			initial(2),
 20    48 	words_per_varying_string_header	initial(1),
 20    49 	words_per_offset			initial(1),
 20    50 	words_per_pointer			initial(2),
 20    51 	words_per_label_var			initial(4),
 20    52 	words_per_entry_var			initial(4),
 20    53 	words_per_file_var			initial(4),
 20    54 	words_per_format			initial(4),
 20    55 	words_per_condition_var		initial(6),
 20    56 
 20    57 	max_index_register_value		initial(262143),
 20    58 	max_signed_index_register_value	initial(131071),
 20    59 
 20    60 	max_signed_xreg_precision		initial(17),
 20    61 	max_uns_xreg_precision		initial(18),
 20    62 
 20    63 	default_area_size			initial(1024),
 20    64 	default_flt_bin_p			initial(27),
 20    65 	default_fix_bin_p			initial(17),
 20    66 	default_flt_dec_p			initial(10),
 20    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 20    68 
 20    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 20    70 
 20    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 20    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 20    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 20    74 	real_type			initial("001000000000000000000100000001100000"b),
 20    75 	complex_type		initial("001000000000000000000100000001010000"b),
 20    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 20    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 20    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 20    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 20    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 20    81 	bit_type			initial("000100000000000000000000000000000000"b),
 20    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 20    83 									options(constant);
 20    84 
 20    85 /* END INCLUDE FILE ... system.incl.pl1 */
       47 
       48 
       49 	source = tree->operand(1);
       50 
       51 	if source->node.type = label_node
       52 	then	call semantic_translator$abort(373,source);	/* alloc or free a label constant */
       53 
       54 	s = source->reference.symbol;
       55 
       56 	if s->node.type = label_node
       57 	then	call semantic_translator$abort(373,s);	/* alloc or free a label constant array */
       58 
       59 	if s->symbol.father^=null
       60 	then	call semantic_translator$abort(273,s);
       61 
       62 	area = tree->operand(2);
       63 	locator = source->reference.qualifier;
       64 
       65 	st = stmnt;
       66 	context = "0"b;
       67 
       68 	if tree->operator.op_code=allot_var
       69 	then	number = 5;	/* allot_var */
       70 	else	number = 151;	/* free_var */
       71 
       72 	if s->symbol.controlled
       73 	then do;
       74 		if area ^= null then call semantic_translator$abort(114,s);
       75 		r = s->symbol.descriptor;
       76 		d = r->reference.symbol;
       77 		if d->symbol.controlled
       78 		then if number = 5
       79 		     	then do;  /* We must allocate a controlled descriptor before we allocate the symbol */
       80 				dst = create_statement(allocate_statement,(st->statement.back),null,(st->statement.prefix));
       81 				dst->statement.root,
       82 				o = create_operator(allot_ctl,2);
       83 				o->operand(1) = r;
       84 				o->operand(2) = declare_constant$integer((d->symbol.c_word_size));
       85 				r = declare_descriptor$ctl(cur_block,st,s,null,"1"b);
       86 				o->operator.processed = "1"b;
       87 			     end;
       88 			else do;  /* We must free a controlled descriptor after we free the data */
       89 				st = create_statement(free_statement,st,null,(st->statement.prefix));
       90 				st->statement.root,
       91 				o = create_operator(free_ctl,1);
       92 				o->operand(1) = r;
       93 				o->operator.processed = "1"b;
       94 			     end;
       95 		else;
       96 		if number = 5
       97 		then do;
       98 			o = create_operator(allot_ctl,2);
       99 			call getsize;
      100 			o->operand(2) = size;
      101 		     end;
      102 		else o = create_operator(free_ctl,1);
      103 		o->operand(1) = source;
      104 		tree = o;
      105 		if number = 151
      106 		     then return;
      107 		     else go to set_next;
      108 	end;
      109 
      110 	if ^s->symbol.based
      111 	then	call semantic_translator$abort(115,s);
      112 
      113 	if number=151
      114 	then	goto process_area;
      115 
      116 	if locator->node.type=operator_node
      117 	then	if locator->operator.op_code=assign | locator->operator.op_code = ptr_fun
      118 		then do;
      119 			locator = locator->operand(2);
      120 			l = locator->reference.symbol;
      121 		end;
      122 		else call semantic_translator$abort(68,s);
      123 	else	l = locator->reference.symbol;
      124 
      125 	call propagate_bit(l,set_bit);
      126 
      127 	if l->symbol.offset
      128 	then	if area=null
      129 		then do;
      130 			area = copy_expression(l->symbol.general);
      131 
      132 			if area=null
      133 			then	call semantic_translator$abort(116,l);
      134 
      135 			area = expression_semantics((l->symbol.block_node),stmnt,area,"0"b);
      136 
      137 			goto assign_ptr;
      138 		end;
      139 		else do;
      140 			st = create_statement(assignment_statement,st,null,(st->statement.prefix));
      141 			st->statement.root  ,
      142 			o = create_operator(off_fun,3);
      143 			o->operand(3) = share_expression(area);
      144 
      145 			o->operand(1) = locator;
      146 
      147 			locator  ,
      148 			o->operand(2) = declare_pointer(cur_block);
      149 
      150 			st->statement.processed = "1"b;
      151 
      152 			goto create_addr;
      153 		end;
      154 
      155 	if ^l->symbol.ptr
      156 	then	call semantic_translator$abort(117,l);
      157 
      158 	if l->symbol.unaligned & pl1_stat_$use_old_area	/* the new area package needs no  ass. stat at all */
      159 	then do;
      160 assign_ptr:
      161 				/* allot_var */
      162 		st = create_statement(assignment_statement,st,null,(st->statement.prefix));
      163 		st->statement.root  ,
      164 		o = create_operator(assign,2);
      165 		o->operand(1) = locator;
      166 		locator  ,
      167 		o->operand(2) = declare_pointer(cur_block);
      168 	end;
      169 
      170 process_area:
      171 	if area^=null
      172 	then do;
      173 		if area->node.type^=reference_node
      174 		then	call semantic_translator$abort(491,null);
      175 
      176 		if ^area->reference.symbol->symbol.area
      177 		then	call semantic_translator$abort(118,area);
      178 	end;
      179 	else if pl1_stat_$use_old_area
      180 	     then do;
      181 		area = reserve$declare_lib(1);
      182 		area->reference.symbol->symbol.allocate = "1"b;
      183 
      184 		if number=5
      185 		then	number = 192;		/* alloc_$storage_ */
      186 		end;
      187 
      188 create_addr:
      189 	call getsize;	/* this subroutine sets the "size" ptr	*/
      190 
      191 	if pl1_stat_$use_old_area
      192 	then do;
      193 
      194 		p = create_operator(addr_fun,2);
      195 		p->operand(1) = declare_temporary(pointer_type,0,0,null);
      196 		p->operand(2) = area;
      197 		area = p;
      198 
      199 		p = create_list(3);
      200 	
      201 		p->list.element(2) = area;
      202 	
      203 		if number=5	/* allot_var */
      204 		|  number=192			/* alloc_$storage_ */
      205 		then do;
      206 			p->list.element(1) = size;
      207 			p->list.element(3) = locator;
      208 		end;
      209 		else do;
      210 			p->list.element(1) = locator;
      211 			p->list.element(3) = size;
      212 		end;
      213 	
      214 		o = create_operator(std_call,3);
      215 		o->operand(2) = reserve$declare_lib(number);
      216 		o->operand(3) = create_operator(std_arg_list,3);
      217 		o->operand(3)->operand(1) = declare_temporary(storage_block_type,8,0,null);
      218 		o->operand(3)->operand(2) = p;
      219 	
      220 	     end;
      221 
      222 	else do;
      223 		if number = 151
      224 		then do;
      225 			opcode = free_based;
      226 			p = source;	/* op1 of free_based operator is source ptr, i.e. based var */
      227 		     end;
      228 		else do;
      229 			opcode = allot_based;
      230 			p = locator;	/* op1 of allot_based is locator ptr */
      231 		     end;
      232 
      233 		o = create_operator(opcode,3);
      234 		o->operand(2) = size;
      235 		o->operand(3) = area;
      236 		o->operand(1) = p;
      237 
      238 	     end;
      239 
      240 
      241 	tree = o;
      242 
      243 	if number=151 then return;
      244 
      245 	goto set_next;
      246 
      247 init_only:entry(locexp,stmnt,tree);
      248 	dcl locexp ptr;
      249 
      250 	st=stmnt;
      251 	locator=locexp;
      252 	s=tree;
      253 
      254 set_next:
      255 	next = st->statement.next;
      256 
      257 	adam = s;
      258 
      259 	do while(s ^= null);
      260 		if s ^= adam
      261 		then do;
      262 			if s->symbol.refer_extents
      263 			then do;
      264 				call build_assignment(s->symbol.dcl_size);
      265 
      266 				if s->symbol.array^=null 
      267 				then do;
      268 					own_num_bounds=s->symbol.array->own_number_of_dimensions;
      269 					processed_bounds=0;
      270 
      271 					do b = s->symbol.array->array.bounds repeat b->bound.next
      272 					     while(processed_bounds < own_num_bounds);
      273 						call build_assignment(b->bound.lower);
      274 						call build_assignment(b->bound.upper);
      275 						processed_bounds=processed_bounds+1;
      276 					end;
      277 				end;
      278 			end;
      279 		end;
      280 
      281 		if s->symbol.initial^=null
      282 		|  s->symbol.area
      283 		then	call expand_initial(s,(next->statement.back),locator);
      284 
      285 		if s -> symbol.son ^= null
      286 		then	s = s -> symbol.son;
      287 		else do;
      288 			do while(s->symbol.brother=null & s ^= adam);
      289 				s = s->symbol.father;
      290 			end;
      291 
      292 			s = s->symbol.brother;
      293 		end;
      294 
      295 	end;
      296 
      297 getsize:	proc;
      298 
      299 dcl 	constant fixed bin;
      300 dcl	modified bit(1) aligned;
      301 
      302 	size = copy_expression(s->symbol.word_size);
      303 	if size=null
      304 	then	size = declare_constant$integer((s->symbol.c_word_size));
      305 	else do;
      306 		if number=151 & s->symbol.refer_extents
      307 		then	call refer_extent(size,locator);
      308 		size = expression_semantics((s->symbol.block_node),stmnt,size,context);
      309 		size = convert$to_integer(size,integer_type);
      310 		call simplify_expression(size,constant,modified);
      311 		if modified
      312 		then	size=declare_constant$integer((constant));
      313 	end;
      314 
      315 	p = size;
      316 	if p->node.type=operator_node
      317 	then 	p = p->operand(1);
      318 
      319 	if p->reference.symbol->symbol.c_dcl_size>max_p_fix_bin_1
      320 	then do;
      321 		r = create_operator(assign,2);
      322 		r->operand(1) = declare_temporary(integer_type,max_p_fix_bin_1,0,null);
      323 		r->operand(2) = size;
      324 		size = r;
      325 	end;
      326 end;
      327 
      328 build_assignment:	proc(p);
      329 
      330 dcl	p ptr unal,
      331 	(o,q,st) ptr;
      332 
      333 	q = p;
      334 
      335 	if q = null then goto exit;
      336 	if q->node.type^=operator_node then goto exit;
      337 	if q->operator.op_code^=refer then goto exit;
      338 	do i=1 to ref_targ_cnt;
      339 		if q->operator.operand(2)=ref_targ(i) 
      340 		then goto exit;
      341 		else 	if compare_expression((q->operator.operand(2)),ref_targ(i))
      342 			then goto exit;
      343 	end;
      344 
      345 	st = create_statement(assignment_statement,(next->statement.back),null,(stmnt->statement.prefix));
      346 
      347 	st->statement.generated = "1"b;
      348 	st->statement.root  ,
      349 	o = create_operator(assign,2);
      350 	o->operand(2) = copy_expression(q->operand(1));
      351 
      352 	if q->operand(2)->node.type=reference_node
      353 	then	o->operand(1) = copy_expression(q->operand(2));
      354 	else	o->operand(1) = create_reference((q->operand(2)));
      355 
      356 	o->operand(1)->reference.qualifier = share_expression(locator);
      357 
      358 	if ref_targ_cnt<hbound(ref_targ,1) 
      359 	then do;
      360 		ref_targ_cnt=ref_targ_cnt+1;
      361 		ref_targ(ref_targ_cnt)=q->operator.operand(2);
      362 	end;
      363 
      364 exit:
      365 	end build_assignment;
      366 
      367 	end alloc_semantics;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1152.2  alloc_semantics.pl1               >udd>sm>ds>w>ml>alloc_semantics.pl1
33           1    07/21/80  1646.3  semant.incl.pl1                   >ldd>incl>semant.incl.pl1
1-228        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
35           8    05/06/74  1841.6  array.incl.pl1                    >ldd>incl>array.incl.pl1
36           9    10/25/79  1745.8  boundary.incl.pl1                 >ldd>incl>boundary.incl.pl1
37          10    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
38          11    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
39          12    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
40          13    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
41          14    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
42          15    07/21/80  1646.3  semantic_bits.incl.pl1            >ldd>incl>semantic_bits.incl.pl1
43          16    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
44          17    05/03/76  1420.4  statement_types.incl.pl1          >ldd>incl>statement_types.incl.pl1
45          18    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
46          19    07/21/80  1646.3  symbol_bits.incl.pl1              >ldd>incl>symbol_bits.incl.pl1
47          20    12/07/83  1801.7  system.incl.pl1                   >ldd>incl>system.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
adam                            000100 automatic       pointer                  dcl 18 set ref 257* 260 288
addr_fun                        000010 constant        bit(9)                   initial dcl 13-8 set ref 194*
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 set ref
                                                                                  182*
allocate_statement              000007 constant        bit(9)                   initial dcl 17-3 set ref 80*
allot_based                            constant        bit(9)                   initial dcl 13-8 ref 229
allot_ctl                       000013 constant        bit(9)                   initial dcl 13-8 set ref 81* 98*
allot_var                              constant        bit(9)                   initial dcl 13-8 ref 68
area                            000102 automatic       pointer                  dcl 18 in procedure "alloc_semantics" set ref 62* 74
                                                                                  127 130* 132 135* 135* 143* 170 173 176 176* 181*
                                                                                  182 196 197* 201 235
area                     31(07)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 18-3 in procedure "alloc_semantics"
                                                                                  ref 176 281
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 18-3 in procedure "alloc_semantics"
                                                                                  ref 266 268 271
array                                  based           structure                level 1 dcl 8-1 in procedure "alloc_semantics"
assign                          000016 constant        bit(9)                   initial dcl 13-8 set ref 116 163* 321* 348*
assignment_statement            000006 constant        bit(9)                   initial dcl 17-3 set ref 140* 160* 345*
attributes               31            based           structure                level 2 dcl 18-3
b                               000104 automatic       pointer                  dcl 18 set ref 271* 273 274* 276*
back                      2            based           pointer                  level 2 packed packed unaligned dcl 16-9 ref 80 281
                                                                                  345
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 ref 110
bits                     13            based           structure                level 2 packed packed unaligned dcl 16-9
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 135 308
bound                                  based           structure                level 1 dcl 8-21
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 8-1 ref 271
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 288 292
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 18-3 ref 319
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 18-3 ref 84 303
compare_expression              000022 constant        entry                    external dcl 2-48 ref 341
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 18-3
constant                        000214 automatic       fixed bin(17,0)          dcl 299 set ref 310* 311
context                         000205 automatic       bit(36)                  dcl 15-5 set ref 66* 308*
controlled               32(12)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 ref 72 77
convert$to_integer              000024 constant        entry                    external dcl 2-66 ref 309
copy_expression                 000026 constant        entry                    external dcl 2-94 ref 130 302 350 352
create_list                     000030 constant        entry                    external dcl 2-147 ref 199
create_operator                 000032 constant        entry                    external dcl 2-152 ref 81 90 98 102 141 163 194 214
                                                                                  216 233 321 348
create_reference                000034 constant        entry                    external dcl 2-158 ref 354
create_statement                000036 constant        entry                    external dcl 2-163 ref 80 89 140 160 345
cur_block                              parameter       pointer                  dcl 18 set ref 11 85* 147* 166*
d                               000106 automatic       pointer                  dcl 18 set ref 76* 77 84
data_type                31            based           structure                level 3 packed packed unaligned dcl 18-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 18-3 set ref
                                                                                  264*
declare_constant$integer        000040 constant        entry                    external dcl 2-234 ref 84 303 311
declare_descriptor$ctl          000042 constant        entry                    external dcl 2-249 ref 85
declare_pointer                 000044 constant        entry                    external dcl 2-287 ref 147 166
declare_temporary               000046 constant        entry                    external dcl 2-292 ref 195 217 322
def_context                            based           structure                level 1 dcl 15-8
descriptor               13            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 75
dst                             000110 automatic       pointer                  dcl 18 set ref 80* 81
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 10-6 set
                                                                                  ref 201* 206* 207* 210* 211*
expand_initial                  000012 constant        entry                    external dcl 1-84 ref 281
expression_semantics            000014 constant        entry                    external dcl 1-105 ref 135 308
father                   17            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 59 289
free_based                             constant        bit(9)                   initial dcl 13-8 ref 225
free_ctl                        000012 constant        bit(9)                   initial dcl 13-8 set ref 90* 102*
free_statement                  000005 constant        bit(9)                   initial dcl 17-3 set ref 89*
general                  16            based           pointer                  level 2 packed packed unaligned dcl 18-3 set ref
                                                                                  130*
generated                13(02)        based           bit(1)                   level 3 packed packed unaligned dcl 16-9 set ref
                                                                                  347*
hbound                                                 builtin function         dcl 23 ref 358
i                               000136 automatic       fixed bin(15,0)          dcl 18 set ref 338* 339 341*
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 281
integer_type                    000002 constant        bit(36)                  initial dcl 20-71 set ref 309* 322*
l                               000112 automatic       pointer                  dcl 18 set ref 120* 123* 125* 127 130 132* 135 155
                                                                                  155* 158
label_node                             constant        bit(9)                   initial dcl 11-5 ref 51 56
list                                   based           structure                level 1 dcl 10-6
locator                         000114 automatic       pointer                  dcl 18 set ref 63* 116 116 116 119* 119 120 123 145
                                                                                  147* 165 166* 207 210 230 251* 281* 306* 356*
locexp                                 parameter       pointer                  dcl 248 ref 247 251
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 8-21 set ref
                                                                                  273*
max_p_fix_bin_1                 000003 constant        fixed bin(31,0)          initial dcl 20-5 set ref 319 322*
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 18-3
modified                        000215 automatic       bit(1)                   dcl 300 set ref 310* 311
next                            000116 automatic       pointer                  dcl 18 in procedure "alloc_semantics" set ref 254*
                                                                                  281 345
next                      1            based           pointer                  level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 16-9 in procedure "alloc_semantics"
                                                                                  ref 254
next                     14            based           pointer                  level 2 in structure "bound" packed packed unaligned
                                                                                  dcl 8-21 in procedure "alloc_semantics" ref 276
node                                   based           structure                level 1 dcl 11-27
null                                                   builtin function         dcl 23 ref 59 74 80 80 85 85 89 89 127 132 140 140
                                                                                  160 160 170 173 173 195 195 217 217 259 266 281
                                                                                  285 288 303 322 322 335 345 345
number                          000141 automatic       fixed bin(15,0)          dcl 18 set ref 68* 70* 77 96 105 113 184 184* 203
                                                                                  203 215* 223 243 306
o                               000120 automatic       pointer                  dcl 18 in procedure "alloc_semantics" set ref 81* 83
                                                                                  84 86 90* 92 93 98* 100 102* 103 104 141* 143 145
                                                                                  147 163* 165 166 214* 215 216 217 218 233* 234 235
                                                                                  236 241
o                               000224 automatic       pointer                  dcl 330 in procedure "build_assignment" set ref 348*
                                                                                  350 352 354 356
off_fun                         000011 constant        bit(9)                   initial dcl 13-8 set ref 141*
offset                   31(06)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 ref 127
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 12-6 ref 68 116
                                                                                  116 337
opcode                          000204 automatic       bit(9)                   dcl 31 set ref 225* 229* 233*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 set
                                                                                  ref 49 62 83* 84* 92* 100* 103* 119 143* 145* 147*
                                                                                  165* 166* 195* 196* 215* 216* 217* 217 218* 218
                                                                                  234* 235* 236* 316 322* 323* 339 341 350* 350* 352
                                                                                  352* 352* 354* 354 356 361
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 11-5 ref 116 316 336
own_num_bounds                  000140 automatic       fixed bin(15,0)          dcl 18 set ref 268* 271
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 ref 268
p                                      parameter       pointer                  packed unaligned dcl 330 in procedure
                                                                                  "build_assignment" ref 328 333
p                               000122 automatic       pointer                  dcl 18 in procedure "alloc_semantics" set ref 194*
                                                                                  195 196 197 199* 201 206 207 210 211 218 226* 230*
                                                                                  236 315* 316 316* 316 319
pl1_stat_$use_old_area          000010 external static bit(1)                   dcl 29 ref 158 179 191
pointer_type                    000001 constant        bit(36)                  initial dcl 20-71 set ref 195*
prefix                   12(12)        based           bit(12)                  level 2 packed packed unaligned dcl 16-9 ref 80 89
                                                                                  140 160 345
processed                 0(19)        based           bit(1)                   level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 12-6 in procedure "alloc_semantics"
                                                                                  set ref 86* 93*
processed                13            based           bit(1)                   level 3 in structure "statement" packed packed
                                                                                  unaligned dcl 16-9 in procedure "alloc_semantics"
                                                                                  set ref 150*
processed_bounds                000137 automatic       fixed bin(15,0)          dcl 18 set ref 269* 271 275* 275
propagate_bit                   000016 constant        entry                    external dcl 1-192 ref 125
ptr                      31(05)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 ref 155
ptr_fun                                constant        bit(9)                   initial dcl 13-8 ref 116
q                               000226 automatic       pointer                  dcl 330 set ref 333* 335 336 337 339 341 350 352 352
                                                                                  354 361
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref 63
                                                                                  356*
r                               000124 automatic       pointer                  dcl 18 set ref 75* 76 83 85* 92 321* 322 323 324
ref_targ                        000144 automatic       pointer                  array dcl 27 set ref 339 341* 358 361*
ref_targ_cnt                    000142 automatic       fixed bin(15,0)          initial dcl 25 set ref 25* 338 358 360* 360 361
refer                                  constant        bit(9)                   initial dcl 13-8 ref 337
refer_extent                    000050 constant        entry                    external dcl 2-426 ref 306
refer_extents            33(05)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 ref 262 306
reference                              based           structure                level 1 dcl 14-3
reference_node                         constant        bit(9)                   initial dcl 11-5 ref 173 352
reserve$declare_lib             000052 constant        entry                    external dcl 2-434 ref 181 215
root                      3            based           pointer                  level 2 packed packed unaligned dcl 16-9 set ref 81*
                                                                                  90* 141* 163* 348*
s                               000126 automatic       pointer                  dcl 18 set ref 54* 56 56* 59 59* 72 74* 75 85* 110
                                                                                  110* 122* 252* 257 259 260 262 264 266 268 271 281
                                                                                  281 281* 285 285* 285 288 288 289* 289 292* 292
                                                                                  302 303 306 308
semantic_translator$abort       000054 constant        entry                    external dcl 2-446 ref 51 56 59 74 110 122 132 155
                                                                                  173 176
set_bit                         000004 constant        fixed bin(15,0)          initial dcl 19-3 set ref 125*
share_expression                000056 constant        entry                    external dcl 2-454 ref 143 356
simplify_expression             000020 constant        entry                    external dcl 1-205 ref 310
size                            000132 automatic       pointer                  dcl 18 set ref 100 206 211 234 302* 303 303* 306*
                                                                                  308* 308* 309* 309* 310* 311* 315 323 324*
son                      21            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 285 285
source                          000130 automatic       pointer                  dcl 18 set ref 49* 51 51* 54 63 103 226
st                              000230 automatic       pointer                  dcl 330 in procedure "build_assignment" set ref 345*
                                                                                  347 348
st                              000134 automatic       pointer                  dcl 18 in procedure "alloc_semantics" set ref 65* 80
                                                                                  80 85* 89* 89* 89 90 140* 140* 140 141 150 160*
                                                                                  160* 160 163 250* 254
statement                              based           structure                level 1 dcl 16-9
std_arg_list                    000015 constant        bit(9)                   initial dcl 13-8 set ref 216*
std_call                        000014 constant        bit(9)                   initial dcl 13-8 set ref 214*
stmnt                                  parameter       pointer                  dcl 18 set ref 11 65 135* 247 250 308* 345
storage_block_type              000000 constant        bit(36)                  initial dcl 20-71 set ref 217*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 18-3
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 14-3 in procedure "alloc_semantics"
                                                                                  ref 54 76 120 123 176 182 319
symbol                                 based           structure                level 1 dcl 18-3 in procedure "alloc_semantics"
tree                                   parameter       pointer                  dcl 18 set ref 11 49 62 68 104* 241* 247 252
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 11-27 ref 51 56
                                                                                  116 173 316 336 352
unaligned                31(22)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 ref 158
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 8-21 set ref
                                                                                  274*
word_size                22            based           pointer                  level 2 packed packed unaligned dcl 18-3 set ref
                                                                                  302*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a                                      automatic       pointer                  dcl 18
a_format                               internal static bit(9)                   initial dcl 13-8
abs_fun                                internal static bit(9)                   initial dcl 13-8
acos_fun                               internal static bit(9)                   initial dcl 13-8
acosd_fun                              internal static bit(9)                   initial dcl 13-8
add                                    internal static bit(9)                   initial dcl 13-8
addbitno_fun                           internal static bit(9)                   initial dcl 13-8
addcharno_fun                          internal static bit(9)                   initial dcl 13-8
addr_fun_bits                          internal static bit(9)                   initial dcl 13-8
addrel_fun                             internal static bit(9)                   initial dcl 13-8
adjust_count                    000000 constant        entry                    external dcl 2-20
aliasable_bit                          internal static fixed bin(15,0)          initial dcl 19-3
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocation_fun                         internal static bit(9)                   initial dcl 13-8
allot_auto                             internal static bit(9)                   initial dcl 13-8
and_bits                               internal static bit(9)                   initial dcl 13-8
arg_desc_type                          internal static bit(36)                  initial dcl 20-71
array_node                             internal static bit(9)                   initial dcl 11-5
asin_fun                               internal static bit(9)                   initial dcl 13-8
asind_fun                              internal static bit(9)                   initial dcl 13-8
assign_by_name                         internal static bit(9)                   initial dcl 13-8
assign_round                           internal static bit(9)                   initial dcl 13-8
assign_size_ck                         internal static bit(9)                   initial dcl 13-8
assign_zero                            internal static bit(9)                   initial dcl 13-8
atan_fun                               internal static bit(9)                   initial dcl 13-8
atand_fun                              internal static bit(9)                   initial dcl 13-8
b_format                               internal static bit(9)                   initial dcl 13-8
baseno_fun                             internal static bit(9)                   initial dcl 13-8
baseptr_fun                            internal static bit(9)                   initial dcl 13-8
begin_statement                        internal static bit(9)                   initial dcl 17-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_                                   internal static fixed bin(3,0)           initial dcl 9-5
bit_pointer                            internal static bit(9)                   initial dcl 13-8
bit_to_char                            internal static bit(9)                   initial dcl 13-8
bit_to_word                            internal static bit(9)                   initial dcl 13-8
bit_type                               internal static bit(36)                  initial dcl 20-71
bitno_fun                              internal static bit(9)                   initial dcl 13-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 20-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 20-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 20-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 20-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 20-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 20-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 20-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 20-5
block_node                             internal static bit(9)                   initial dcl 11-5
bn_format                              internal static bit(9)                   initial dcl 13-8
bool_fun                               internal static bit(9)                   initial dcl 13-8
bound_ck                               internal static bit(9)                   initial dcl 13-8
bound_node                             internal static bit(9)                   initial dcl 11-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 20-71
by_name_agg_node                       internal static bit(9)                   initial dcl 11-5
byte_fun                               internal static bit(9)                   initial dcl 13-8
c_format                               internal static bit(9)                   initial dcl 13-8
call_statement                         internal static bit(9)                   initial dcl 17-3
cat_string                             internal static bit(9)                   initial dcl 13-8
ceil_fun                               internal static bit(9)                   initial dcl 13-8
char_to_word                           internal static bit(9)                   initial dcl 13-8
char_type                              internal static bit(36)                  initial dcl 20-71
character_                             internal static fixed bin(3,0)           initial dcl 9-5
characters_per_double                  internal static fixed bin(31,0)          initial dcl 20-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 20-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 20-5
charno_fun                             internal static bit(9)                   initial dcl 13-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 13-8
close_file                             internal static bit(9)                   initial dcl 13-8
close_statement                        internal static bit(9)                   initial dcl 17-3
codeptr_fun                            internal static bit(9)                   initial dcl 13-8
column_format                          internal static bit(9)                   initial dcl 13-8
compare_declaration             000000 constant        entry                    external dcl 1-31
complex_fun                            internal static bit(9)                   initial dcl 13-8
complex_type                           internal static bit(36)                  initial dcl 20-71
conjg_fun                              internal static bit(9)                   initial dcl 13-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 11-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 17-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 13-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 13-8
cos_fun                                internal static bit(9)                   initial dcl 13-8
cosd_fun                               internal static bit(9)                   initial dcl 13-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_symbol                   000000 constant        entry                    external dcl 2-184
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 11-5
dec_integer_type                       internal static bit(36)                  initial dcl 20-71
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_statement                      internal static bit(9)                   initial dcl 17-3
declare_structure               000000 constant        entry                    external dcl 1-44
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
def_this_context                       based           structure                level 1 dcl 15-27
default_area_size                      internal static fixed bin(31,0)          initial dcl 20-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 20-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 20-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 20-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 20-5
default_node                           internal static bit(9)                   initial dcl 11-5
default_statement                      internal static bit(9)                   initial dcl 17-3
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 13-8
delete_statement                       internal static bit(9)                   initial dcl 17-3
desc_size                              internal static bit(9)                   initial dcl 13-8
digit_                                 internal static fixed bin(3,0)           initial dcl 9-5
digit_to_bit                           internal static bit(9)                   initial dcl 13-8
display_statement                      internal static bit(9)                   initial dcl 17-3
div                                    internal static bit(9)                   initial dcl 13-8
do_fun                                 internal static bit(9)                   initial dcl 13-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 13-8
do_statement                           internal static bit(9)                   initial dcl 17-3
e_format                               internal static bit(9)                   initial dcl 13-8
else_clause                            internal static bit(9)                   initial dcl 17-3
empty_area                             internal static bit(9)                   initial dcl 13-8
enable_on                              internal static bit(9)                   initial dcl 13-8
end_statement                          internal static bit(9)                   initial dcl 17-3
entry_statement                        internal static bit(9)                   initial dcl 17-3
entry_var_type                         internal static bit(36)                  initial dcl 20-71
environmentptr_fun                     internal static bit(9)                   initial dcl 13-8
equal                                  internal static bit(9)                   initial dcl 13-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 13-8
exit_statement                         internal static bit(9)                   initial dcl 17-3
exp                                    internal static bit(9)                   initial dcl 13-8
exp_fun                                internal static bit(9)                   initial dcl 13-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
f_format                               internal static bit(9)                   initial dcl 13-8
fill_refer                      000000 constant        entry                    external dcl 1-113
floor_fun                              internal static bit(9)                   initial dcl 13-8
format_statement                       internal static bit(9)                   initial dcl 17-3
format_value_node                      internal static bit(9)                   initial dcl 11-5
fortran_read                           internal static bit(9)                   initial dcl 13-8
fortran_write                          internal static bit(9)                   initial dcl 13-8
free_node                       000000 constant        entry                    external dcl 2-345
free_var                               internal static bit(9)                   initial dcl 13-8
ftn_file_manip                         internal static bit(9)                   initial dcl 13-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 13-8
function                        000000 constant        entry                    external dcl 1-125
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 13-8
get_edit_trans                         internal static bit(9)                   initial dcl 13-8
get_file                               internal static bit(9)                   initial dcl 13-8
get_list_trans                         internal static bit(9)                   initial dcl 13-8
get_size                        000000 constant        entry                    external dcl 2-352
get_statement                          internal static bit(9)                   initial dcl 17-3
get_string                             internal static bit(9)                   initial dcl 13-8
goto_statement                         internal static bit(9)                   initial dcl 17-3
greater_or_equal                       internal static bit(9)                   initial dcl 13-8
greater_than                           internal static bit(9)                   initial dcl 13-8
half_                                  internal static fixed bin(3,0)           initial dcl 9-5
half_to_word                           internal static bit(9)                   initial dcl 13-8
if_statement                           internal static bit(9)                   initial dcl 17-3
imag_fun                               internal static bit(9)                   initial dcl 13-8
index_after_fun                        internal static bit(9)                   initial dcl 13-8
index_before_fun                       internal static bit(9)                   initial dcl 13-8
index_fun                              internal static bit(9)                   initial dcl 13-8
index_rev_fun                          internal static bit(9)                   initial dcl 13-8
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
join                                   internal static bit(9)                   initial dcl 13-8
jump                                   internal static bit(9)                   initial dcl 13-8
jump_false                             internal static bit(9)                   initial dcl 13-8
jump_if_eq                             internal static bit(9)                   initial dcl 13-8
jump_if_ge                             internal static bit(9)                   initial dcl 13-8
jump_if_gt                             internal static bit(9)                   initial dcl 13-8
jump_if_le                             internal static bit(9)                   initial dcl 13-8
jump_if_lt                             internal static bit(9)                   initial dcl 13-8
jump_if_ne                             internal static bit(9)                   initial dcl 13-8
jump_true                              internal static bit(9)                   initial dcl 13-8
l_parn                                 internal static bit(9)                   initial dcl 13-8
label_array_element_node               internal static bit(9)                   initial dcl 11-5
length_fun                             internal static bit(9)                   initial dcl 13-8
less_or_equal                          internal static bit(9)                   initial dcl 13-8
less_than                              internal static bit(9)                   initial dcl 13-8
line_format                            internal static bit(9)                   initial dcl 13-8
list_node                              internal static bit(9)                   initial dcl 11-5
local_label_var_type                   internal static bit(36)                  initial dcl 20-71
locate_file                            internal static bit(9)                   initial dcl 13-8
locate_statement                       internal static bit(9)                   initial dcl 17-3
lock_file                              internal static bit(9)                   initial dcl 13-8
lock_fun                               internal static bit(9)                   initial dcl 13-8
lock_statement                         internal static bit(9)                   initial dcl 17-3
log10_fun                              internal static bit(9)                   initial dcl 13-8
log2_fun                               internal static bit(9)                   initial dcl 13-8
log_fun                                internal static bit(9)                   initial dcl 13-8
lookup                          000000 constant        entry                    external dcl 1-153
loop                                   internal static bit(9)                   initial dcl 13-8
machine_state_node                     internal static bit(9)                   initial dcl 11-5
make_desc                              internal static bit(9)                   initial dcl 13-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 20-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 20-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 20-5
max_char_string                        internal static fixed bin(31,0)          initial dcl 20-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 20-5
max_fun                                internal static bit(9)                   initial dcl 13-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 20-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 20-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 20-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 10-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 20-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 20-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 20-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 20-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 20-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 20-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 20-5
max_scale                              internal static fixed bin(31,0)          initial dcl 20-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 20-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 20-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 20-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 20-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 20-5
min_fun                                internal static bit(9)                   initial dcl 13-8
min_scale                              internal static fixed bin(31,0)          initial dcl 20-5
mod2_                                  internal static fixed bin(3,0)           initial dcl 9-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 9-5
mod_bit                                internal static bit(9)                   initial dcl 13-8
mod_byte                               internal static bit(9)                   initial dcl 13-8
mod_fun                                internal static bit(9)                   initial dcl 13-8
mod_half                               internal static bit(9)                   initial dcl 13-8
mod_word                               internal static bit(9)                   initial dcl 13-8
mult                                   internal static bit(9)                   initial dcl 13-8
n                                      automatic       fixed bin(15,0)          dcl 18
negate                                 internal static bit(9)                   initial dcl 13-8
nop                                    internal static bit(9)                   initial dcl 13-8
not_bits                               internal static bit(9)                   initial dcl 13-8
not_equal                              internal static bit(9)                   initial dcl 13-8
null_statement                         internal static bit(9)                   initial dcl 17-3
offset_adder                    000000 constant        entry                    external dcl 1-172
on_statement                           internal static bit(9)                   initial dcl 17-3
open_file                              internal static bit(9)                   initial dcl 13-8
open_statement                         internal static bit(9)                   initial dcl 17-3
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
or_bits                                internal static bit(9)                   initial dcl 13-8
overlayed_by_builtin_bit               internal static fixed bin(15,0)          initial dcl 19-3
pack                                   internal static bit(9)                   initial dcl 13-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 20-5
page_format                            internal static bit(9)                   initial dcl 13-8
param_desc_ptr                         internal static bit(9)                   initial dcl 13-8
param_ptr                              internal static bit(9)                   initial dcl 13-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
passed_as_arg_bit                      internal static fixed bin(15,0)          initial dcl 19-3
picture_format                         internal static bit(9)                   initial dcl 13-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 13-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
prefix_plus                            internal static bit(9)                   initial dcl 13-8
procedure_statement                    internal static bit(9)                   initial dcl 17-3
put_control                            internal static bit(9)                   initial dcl 13-8
put_data_trans                         internal static bit(9)                   initial dcl 13-8
put_edit_trans                         internal static bit(9)                   initial dcl 13-8
put_field                              internal static bit(9)                   initial dcl 13-8
put_field_chk                          internal static bit(9)                   initial dcl 13-8
put_file                               internal static bit(9)                   initial dcl 13-8
put_list_trans                         internal static bit(9)                   initial dcl 13-8
put_statement                          internal static bit(9)                   initial dcl 17-3
put_string                             internal static bit(9)                   initial dcl 13-8
r_format                               internal static bit(9)                   initial dcl 13-8
r_parn                                 internal static bit(9)                   initial dcl 13-8
range_ck                               internal static bit(9)                   initial dcl 13-8
rank_fun                               internal static bit(9)                   initial dcl 13-8
read_file                              internal static bit(9)                   initial dcl 13-8
read_statement                         internal static bit(9)                   initial dcl 17-3
real_fun                               internal static bit(9)                   initial dcl 13-8
real_type                              internal static bit(36)                  initial dcl 20-71
record_io                              internal static bit(9)                   initial dcl 13-8
rel_fun                                internal static bit(9)                   initial dcl 13-8
repeat_fun                             internal static bit(9)                   initial dcl 13-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 13-8
return_statement                       internal static bit(9)                   initial dcl 17-3
return_string                          internal static bit(9)                   initial dcl 13-8
return_value                           internal static bit(9)                   initial dcl 13-8
return_words                           internal static bit(9)                   initial dcl 13-8
reverse_fun                            internal static bit(9)                   initial dcl 13-8
revert_on                              internal static bit(9)                   initial dcl 13-8
revert_statement                       internal static bit(9)                   initial dcl 17-3
rewrite_file                           internal static bit(9)                   initial dcl 13-8
rewrite_statement                      internal static bit(9)                   initial dcl 17-3
round_fun                              internal static bit(9)                   initial dcl 13-8
search_fun                             internal static bit(9)                   initial dcl 13-8
search_rev_fun                         internal static bit(9)                   initial dcl 13-8
segno_fun                              internal static bit(9)                   initial dcl 13-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
setbitno_fun                           internal static bit(9)                   initial dcl 13-8
setcharno_fun                          internal static bit(9)                   initial dcl 13-8
sf_par_node                            internal static bit(9)                   initial dcl 11-5
sign_fun                               internal static bit(9)                   initial dcl 13-8
signal_on                              internal static bit(9)                   initial dcl 13-8
signal_statement                       internal static bit(9)                   initial dcl 17-3
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 13-8
sind_fun                               internal static bit(9)                   initial dcl 13-8
skip_format                            internal static bit(9)                   initial dcl 13-8
source_node                            internal static bit(9)                   initial dcl 11-5
sqrt_fun                               internal static bit(9)                   initial dcl 13-8
stack_ptr                              internal static bit(9)                   initial dcl 13-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 13-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 13-8
stacq_fun                              internal static bit(9)                   initial dcl 13-8
statement_node                         internal static bit(9)                   initial dcl 11-5
std_entry                              internal static bit(9)                   initial dcl 13-8
std_return                             internal static bit(9)                   initial dcl 13-8
stop                                   internal static bit(9)                   initial dcl 13-8
stop_statement                         internal static bit(9)                   initial dcl 17-3
stream_prep                            internal static bit(9)                   initial dcl 13-8
string                                                 builtin function         dcl 23
sub                                    internal static bit(9)                   initial dcl 13-8
subscripter                     000000 constant        entry                    external dcl 1-216
symbol_node                            internal static bit(9)                   initial dcl 11-5
system_on_unit                         internal static bit(9)                   initial dcl 17-3
tan_fun                                internal static bit(9)                   initial dcl 13-8
tand_fun                               internal static bit(9)                   initial dcl 13-8
temporary_node                         internal static bit(9)                   initial dcl 11-5
terminate_trans                        internal static bit(9)                   initial dcl 13-8
this_context                           automatic       bit(36)                  dcl 15-5
token_node                             internal static bit(9)                   initial dcl 11-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 13-8
trunc_fun                              internal static bit(9)                   initial dcl 13-8
unknown_statement                      internal static bit(9)                   initial dcl 17-3
unlock_file                            internal static bit(9)                   initial dcl 13-8
unlock_statement                       internal static bit(9)                   initial dcl 17-3
unpack                                 internal static bit(9)                   initial dcl 13-8
validate                        000000 constant        entry                    external dcl 1-225
vclock_fun                             internal static bit(9)                   initial dcl 13-8
verify_fun                             internal static bit(9)                   initial dcl 13-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 13-8
verify_rev_fun                         internal static bit(9)                   initial dcl 13-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 13-8
wait_statement                         internal static bit(9)                   initial dcl 17-3
word_                                  internal static fixed bin(3,0)           initial dcl 9-5
word_to_mod2                           internal static bit(9)                   initial dcl 13-8
word_to_mod4                           internal static bit(9)                   initial dcl 13-8
word_to_mod8                           internal static bit(9)                   initial dcl 13-8
wordno_fun                             internal static bit(9)                   initial dcl 13-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 20-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 20-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 20-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 20-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 20-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 20-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 20-5
write_file                             internal static bit(9)                   initial dcl 13-8
write_statement                        internal static bit(9)                   initial dcl 17-3
x_format                               internal static bit(9)                   initial dcl 13-8
xor_bits                               internal static bit(9)                   initial dcl 13-8

NAMES DECLARED BY EXPLICIT CONTEXT.
alloc_semantics                 000040 constant        entry                    external dcl 11
assign_ptr                      001010 constant        label                    dcl 160 ref 137
build_assignment                002074 constant        entry                    internal dcl 328 ref 264 273 274
create_addr                     001174 constant        label                    dcl 188 ref 152
exit                            002352 constant        label                    dcl 364 ref 335 336 337 339 341
getsize                         001645 constant        entry                    internal dcl 297 ref 99 188
init_only                       001460 constant        entry                    external dcl 247
process_area                    001100 constant        label                    dcl 170 ref 113
set_next                        001500 constant        label                    dcl 254 ref 105 245

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2650        2730    2354        2660
Length      3536    2354        60         572     273           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
alloc_semantics                     276 external procedure  is an external procedure.  
getsize                                 internal procedure  shares stack frame of external procedure alloc_semantics.  
build_assignment                        internal procedure  shares stack frame of external procedure alloc_semantics.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
alloc_semantics          000100 adam                        alloc_semantics
                         000102 area                        alloc_semantics
                         000104 b                           alloc_semantics
                         000106 d                           alloc_semantics
                         000110 dst                         alloc_semantics
                         000112 l                           alloc_semantics
                         000114 locator                     alloc_semantics
                         000116 next                        alloc_semantics
                         000120 o                           alloc_semantics
                         000122 p                           alloc_semantics
                         000124 r                           alloc_semantics
                         000126 s                           alloc_semantics
                         000130 source                      alloc_semantics
                         000132 size                        alloc_semantics
                         000134 st                          alloc_semantics
                         000136 i                           alloc_semantics
                         000137 processed_bounds            alloc_semantics
                         000140 own_num_bounds              alloc_semantics
                         000141 number                      alloc_semantics
                         000142 ref_targ_cnt                alloc_semantics
                         000144 ref_targ                    alloc_semantics
                         000204 opcode                      alloc_semantics
                         000205 context                     alloc_semantics
                         000214 constant                    getsize
                         000215 modified                    getsize
                         000224 o                           build_assignment
                         000226 q                           build_assignment
                         000230 st                          build_assignment

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
compare_expression            convert$to_integer            copy_expression               create_list
create_operator               create_reference              create_statement              declare_constant$integer
declare_descriptor$ctl        declare_pointer               declare_temporary             expand_initial
expression_semantics          propagate_bit                 refer_extent                  reserve$declare_lib
semantic_translator$abort     share_expression              simplify_expression

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$use_old_area




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 000031        11 000034        49 000046        51 000053        54 000072        56 000075        59 000114
     62 000133        63 000140        65 000143        66 000146        68 000147        70 000157        72 000161
     74 000165        75 000204        76 000207        77 000211        80 000217        81 000250        83 000271
     84 000274        85 000313        86 000341        87 000343        89 000344        90 000372        92 000413
     93 000416        96 000420        98 000423        99 000440       100 000441       101 000444       102 000445
    103 000462       104 000465       105 000467       110 000473       113 000511       116 000514       119 000530
    120 000533       121 000535       122 000536       123 000552       125 000555       127 000566       130 000576
    132 000607       135 000626       137 000653       140 000654       141 000702       143 000723       145 000737
    147 000741       150 000757       152 000762       155 000763       158 001001       160 001010       163 001036
    165 001057       166 001062       170 001100       173 001104       176 001125       178 001145       179 001146
    181 001151       182 001163       184 001167       188 001174       191 001175       194 001200       195 001214
    196 001242       197 001244       199 001245       201 001260       203 001263       206 001270       207 001272
    208 001274       210 001275       211 001277       214 001301       215 001316       216 001332       217 001352
    218 001403       220 001407       223 001410       225 001413       226 001415       227 001417       229 001420
    230 001422       233 001424       234 001440       235 001443       236 001445       241 001447       243 001452
    245 001455       247 001456       250 001466       251 001472       252 001475       254 001500       257 001503
    259 001505       260 001512       262 001516       264 001522       266 001530       268 001534       269 001541
    271 001542       273 001547       274 001556       275 001565       276 001566       281 001572       285 001617
    288 001626       289 001636       290 001640       292 001641       295 001643       367 001644       297 001645
    302 001646       303 001660       306 001701       308 001721       309 001744       310 001757       311 001772
    315 002010       316 002012       319 002021       321 002026       322 002043       323 002070       324 002072
    326 002073       328 002074       333 002076       335 002104       336 002110       337 002114       338 002121
    339 002131       341 002140       343 002161       345 002163       347 002216       348 002221       350 002242
    352 002257       354 002304       356 002323       358 002341       360 002344       361 002345       364 002352


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
