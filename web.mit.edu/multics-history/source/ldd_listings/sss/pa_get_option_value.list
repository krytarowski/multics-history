	COMPILATION LISTING OF SEGMENT pa_get_option_value
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1539.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style2,ind3 */
        7 pa_get_option_value:
        8    proc (p_result_print_vector_array_ptr, p_area_ptr, p_found_option);
        9 
       10 /* DESCRIPTION:
       11*
       12*         This entry extracts the values of arguments of options as present in
       13*     a result print_vector_array produced by process_arguments_.
       14**/
       15 
       16 /* HISTORY:
       17*
       18*Written by Lindsey L. Spratt, 06/11/83.
       19*Modified:
       20*06/15/83 by Lindsey L. Spratt:  Added a new argument, p_found_option, to
       21*            record which of the requested options were found in the result
       22*            pva.
       23*06/30/83 by Lindsey L. Spratt:  Changed to use pa_dim_name_constants.incl.pl1.
       24*           Changed to look for the option name dimension in the print_vector
       25*            rather than assume it is the next to last dimension.
       26*07/07/83 by Lindsey L. Spratt:  Fixed to correctly handle varying character
       27*            return data.
       28*08/04/83 by S. Krupp to correctly handle varying character input data
       29*            (the option_name argument specifically).
       30**/
       31 
       32 /* START OF DECLARATIONS */
       33 /* Parameter */
       34 
       35       dcl	    p_result_print_vector_array_ptr
       36 			       ptr;		/*is a pointer to a result
       37*                                                print_vector_array produced by
       38*                                                process_arguments_.*/
       39       dcl	    p_area_ptr	       ptr;		/*is a pointer to the area in
       40*                                                which this entry is to
       41*                                                allocate its output
       42*                                                information (when
       43*                                                appropriate).*/
       44       dcl	    p_found_option	       bit (*) parameter;
       45 
       46 /* Automatic */
       47 
       48       dcl	    output_area_ptr	       ptr init (null);	/* Pointer on which output_area is based. */
       49       dcl	    system_area_ptr	       ptr init (null);
       50       dcl	    nargs		       fixed bin init (0);	/* Number of arguments with which this subroutine was called. */
       51       dcl	    arg_list_ptr	       ptr init (null);	/* Pointer to the argument list for this subroutine. */
       52       dcl	    arg_list_arg_count     fixed bin init (0);	/* Variable used by the arg_list structure. */
       53       dcl	    number_of_option_values_requested
       54 			       fixed bin init (0);
       55       dcl	    option_name_identifier fixed bin init (0);	/* This is the index into the dimension_table */
       56 						/* of the definition of the option_name dimension. */
       57       dcl	    vhbu_number_of_vectors fixed bin init (0);	/* The extent of the vector_has_been_used bit array. */
       58       dcl	    vector_has_been_used_ptr
       59 			       ptr init (null);	/* Points at the vector_has_been_used array. */
       60 
       61       dcl	    option_idx	       fixed bin init (0);	/* The loop counter for the OPTION_LOOP. */
       62       dcl	    option_name_arg_idx    fixed bin init (0);	/* The index into the argument list of the current */
       63 						/* (in the OPTION_LOOP) option's name. */
       64       dcl	    option_variable_arg_idx
       65 			       fixed bin init (0);	/* The index into the argument list of the */
       66 						/* current option's return value variable. */
       67 
       68       dcl	    type		       fixed bin init (0);	/* Set by calling decode_descriptor_. */
       69       dcl	    packed	       bit (1) aligned init ("0"b);
       70 						/* Set by calling decode_descriptor_. */
       71       dcl	    ndims		       fixed bin init (0);	/* Set by calling decode_descriptor_. */
       72       dcl	    size		       fixed bin init (0);	/* Set by calling decode_descriptor_. */
       73       dcl	    scale		       fixed bin init (0);	/* Set by calling decode_descriptor_. */
       74 
       75       dcl	    option_name_ptr	       ptr init (null);	/* Pointer on which option_name is based. Set from */
       76 						/* the argument_list. */
       77       dcl	    option_name_length     fixed bin init (0);	/* Length of the option_name from the argument_list. */
       78 
       79       dcl	    current_option_vector_idx
       80 			       fixed bin init (0);	/* Index into the print_vector_array of */
       81 						/* the print_vector from which the current */
       82 						/* option_value was extracted. */
       83       dcl	    option_value_ptr       ptr init (null);	/* Pointer on which the option_value is based. */
       84 
       85       dcl	    data_ptr	       ptr init (null);	/* Pointer to return variable in which the option_value is to */
       86 						/* be placed. */
       87 
       88       dcl	    char_data_length       fixed bin init (0);
       89       dcl	    vchar_data_length      fixed bin init (0);
       90 
       91       dcl	    option_value_link_ptr  ptr init (null);
       92       dcl	    root_option_value_link_ptr
       93 			       ptr init (null);
       94       dcl	    previous_option_value_link_ptr
       95 			       ptr init (null);
       96       dcl	    next_option_value_link_ptr
       97 			       ptr init (null);
       98 
       99       dcl	    value_idx	       fixed bin init (0);
      100 
      101 /* Based */
      102 
      103       dcl	    output_area	       area based (output_area_ptr);
      104 						/* Area in which option_value_list structures */
      105 						/* area allocated for the caller. */
      106       dcl	    system_area	       area based (system_area_ptr);
      107 						/* Area for scratch storage. */
      108       dcl	    vector_has_been_used   (vhbu_number_of_vectors) bit (1) aligned based (vector_has_been_used_ptr);
      109 						/* This array is used by FIND_OPTION_VALUE to avoid looking at */
      110 						/* any vector in the caller-provided print_vector_array */
      111 						/* more than once. */
      112       dcl	    option_name	       char (option_name_length) based (option_name_ptr);
      113       dcl	    option_value	       char (sys_info$max_seg_size * 4) varying based (option_value_ptr);
      114       dcl	    var_option_name_size   fixed bin(21) based(addwordno(option_name_ptr, -1));
      115 
      116       dcl	    aligned_char_data      based (data_ptr) aligned char (char_data_length);
      117       dcl	    unaligned_char_data    based (data_ptr) unaligned char (char_data_length);
      118 
      119       dcl	    aligned_vchar_data     based (data_ptr) aligned char (vchar_data_length) varying;
      120       dcl	    unaligned_vchar_data   based (data_ptr) unaligned char (vchar_data_length) varying;
      121 
      122       dcl	    aligned_flag_data      based (data_ptr) aligned bit (1);
      123       dcl	    unaligned_flag_data    based (data_ptr) unaligned bit (1);
      124 
      125       dcl	    aligned_integer_data   based (data_ptr) aligned fixed bin (35);
      126       dcl	    unaligned_integer_data based (data_ptr) unaligned fixed bin (35);
      127 
      128       dcl	    aligned_list_ptr_data  based (data_ptr) aligned ptr;
      129       dcl	    unaligned_list_ptr_data
      130 			       based (data_ptr) unaligned ptr;
      131 
      132       dcl	    1 option_value_link    based (option_value_link_ptr),
      133 	      2 next_ptr	       ptr init (null),
      134 	      2 value_ptr	       ptr init (null),
      135 	      2 vector_idx	       fixed bin init (0);
      136 
      137 /* Builtin */
      138 
      139       dcl	    (addr, divide, null, substr)
      140 			       builtin;
      141 
      142 /* Condition */
      143 
      144       dcl	    cleanup	       condition;
      145 
      146 /* Constant */
      147 
      148       dcl	    (
      149 	    MINIMUM_POSSIBLE_NUMBER_OF_ARGS
      150 			       init (5),
      151 	    NUMBER_OF_NONVALUE_ARGS
      152 			       init (3),
      153 	    NUMBER_OF_INITIAL_NONVALUE_ARGS
      154 			       init (3),
      155 	    NO_CURRENT_OPTION_VECTOR_IDX
      156 			       init (0)
      157 	    )		       fixed bin internal static options (constant);
      158 
      159       dcl	    MYNAME	       init ("pa_get_option_value") char (32) varying internal static options (constant);
      160 
      161 /* Entry */
      162 
      163       dcl	    requote_string_	       entry (char (*)) returns (char (*));
      164       dcl	    get_system_free_area_  entry () returns (ptr);
      165 
      166       dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
      167       dcl	    cu_$arg_list_ptr       entry (ptr);
      168 
      169       dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
      170 
      171       dcl	    sub_err_	       entry () options (variable);
      172 
      173 /* External */
      174 
      175       dcl	    sys_info$max_seg_size  fixed bin (35) ext static;
      176 
      177       dcl	    (
      178 	    error_table_$unimplemented_version,
      179 	    error_table_$too_few_args,
      180 	    error_table_$bad_arg,
      181 	    error_table_$noarg
      182 	    )		       fixed bin (35) ext;
      183 
      184 /* END OF DECLARATIONS */
      185 
      186       print_vector_array_ptr = p_result_print_vector_array_ptr;
      187       output_area_ptr = p_area_ptr;
      188       system_area_ptr = get_system_free_area_ ();
      189 
      190       call CHECK_VERSION (print_vector_array.version, PRINT_VECTOR_ARRAY_VERSION_2, "print_vector_array");
      191 
      192       on cleanup call FINISH;
      193 
      194       call cu_$arg_count (nargs, (0));
      195       arg_list_arg_count = nargs;
      196       call cu_$arg_list_ptr (arg_list_ptr);
      197 
      198 
      199       if nargs < MINIMUM_POSSIBLE_NUMBER_OF_ARGS
      200       then call sub_err_ (error_table_$too_few_args, MYNAME, ACTION_CANT_RESTART, null, 0);
      201       else if mod (nargs - NUMBER_OF_NONVALUE_ARGS, 2) ^= 0
      202       then call
      203 	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
      204 	    "^/The option names/value variable arguments must be paired.  
      205 This was not the case.");
      206 
      207       number_of_option_values_requested = divide (nargs - NUMBER_OF_NONVALUE_ARGS, 2, 17, 0);
      208 
      209       call GET_DIMENSION_IDENTIFIER (print_vector_array_ptr, (OPTION_NAME_DIM_NAME), option_name_identifier);
      210 
      211       vhbu_number_of_vectors = print_vector_array.number_of_vectors;
      212       alloc vector_has_been_used in (system_area);
      213       unspec (vector_has_been_used) = "0"b;
      214 
      215       if length (p_found_option) < number_of_option_values_requested
      216       then call
      217 	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
      218 	    "^/The caller-provided ""found_option"" string must have as many bits in it
      219 as the number of options for which values are requested.  However, there are
      220 only ^d bits in the ""found_option"" string and ^d options were requested.", length (p_found_option),
      221 	    number_of_option_values_requested);
      222 
      223       p_found_option = "0"b;
      224 
      225 OPTION_LOOP:
      226       do option_idx = 1 to number_of_option_values_requested;
      227          option_name_arg_idx = 2 * (option_idx - 1) + 1 + NUMBER_OF_INITIAL_NONVALUE_ARGS;
      228          option_variable_arg_idx = option_name_arg_idx + 1;
      229 
      230          call decode_descriptor_ (arg_list_ptr, option_name_arg_idx, type, packed, ndims, size, scale);
      231          if type ^= char_dtype & type ^= varying_char_dtype
      232          then call
      233 	       sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
      234 	       "^/Option name parameter number ^d (argument number ^d) does not have 
      235 a character string data type.", option_idx, option_name_arg_idx);
      236 
      237          option_name_ptr = arg_list_ptr -> arg_list.arg_ptrs (option_name_arg_idx);
      238          if type = varying_char_dtype
      239          then option_name_length = var_option_name_size;
      240          else option_name_length = size;
      241 
      242          current_option_vector_idx = NO_CURRENT_OPTION_VECTOR_IDX;
      243 
      244          call
      245 	  FIND_OPTION_VALUE (print_vector_array_ptr, option_name_identifier, (option_name), vector_has_been_used,
      246 	  current_option_vector_idx, option_value_ptr);
      247 
      248          if option_value_ptr ^= null
      249          then
      250 PROCESS_OPTION_VALUE:
      251 	  do;
      252 	     substr (p_found_option, option_idx, 1) = "1"b;
      253 	     call decode_descriptor_ (arg_list_ptr, option_variable_arg_idx, type, packed, ndims, size, scale);
      254 
      255 	     data_ptr = arg_list_ptr -> arg_list.arg_ptrs (option_variable_arg_idx);
      256 
      257 	     if type = char_dtype
      258 	     then
      259 CHAR_DATA:
      260 	        do;
      261 		 char_data_length = size;
      262 		 if packed
      263 		 then
      264 		    do;
      265 (stringsize):
      266 		       unaligned_char_data = option_value;
      267 		    end;
      268 		 else
      269 		    do;
      270 (stringsize):
      271 		       aligned_char_data = option_value;
      272 		    end;
      273 	        end CHAR_DATA;
      274 	     else if type = varying_char_dtype
      275 	     then
      276 VCHAR_DATA:
      277 	        do;
      278 		 data_ptr = addwordno (data_ptr, -1);	/* To adjust for peculiar handling of the varying data type in arg_list preparation. */
      279 		 vchar_data_length = size;
      280 		 if packed
      281 		 then
      282 		    do;
      283 (stringsize):
      284 		       unaligned_vchar_data = option_value;
      285 		    end;
      286 		 else
      287 		    do;
      288 (stringsize):
      289 		       aligned_vchar_data = option_value;
      290 		    end;
      291 	        end VCHAR_DATA;
      292 	     else if type = bit_dtype & size = 1
      293 	     then
      294 FLAG_DATA:
      295 	        do;
      296 		 if packed
      297 		 then unaligned_flag_data = CONVERT_TO_FLAG (option_value);
      298 		 else aligned_flag_data = CONVERT_TO_FLAG (option_value);
      299 	        end FLAG_DATA;
      300 	     else if type = real_fix_bin_1_dtype
      301 	     then
      302 INTEGER_DATA:
      303 	        do;
      304 		 if packed
      305 		 then unaligned_integer_data = CONVERT_TO_INTEGER (option_value);
      306 		 else aligned_integer_data = CONVERT_TO_INTEGER (option_value);
      307 	        end INTEGER_DATA;
      308 	     else if type = pointer_dtype
      309 	     then
      310 DATA_LIST:
      311 	        do;
      312 		 alloc option_value_link in (system_area);
      313 		 root_option_value_link_ptr = option_value_link_ptr;
      314 		 option_value_link.value_ptr = option_value_ptr;
      315 		 option_value_link.vector_idx = current_option_vector_idx;
      316 
      317 		 call
      318 		    FIND_OPTION_VALUE (print_vector_array_ptr, option_name_identifier, (option_name),
      319 		    vector_has_been_used, current_option_vector_idx, option_value_ptr);
      320 DATA_LIST_LOOP:
      321 		 do ovl_number_of_values = 1 by 1 while (option_value_ptr ^= null);
      322 		    previous_option_value_link_ptr = option_value_link_ptr;
      323 		    alloc option_value_link in (system_area);
      324 		    previous_option_value_link_ptr -> option_value_link.next_ptr = option_value_link_ptr;
      325 		    option_value_link.next_ptr = null;
      326 		    option_value_link.value_ptr = option_value_ptr;
      327 		    option_value_link.vector_idx = current_option_vector_idx;
      328 		    call
      329 		       FIND_OPTION_VALUE (print_vector_array_ptr, option_name_identifier, (option_name),
      330 		       vector_has_been_used, current_option_vector_idx, option_value_ptr);
      331 
      332 		 end DATA_LIST_LOOP;
      333 
      334 /* The refer extent variable, ovl_number_of_values, is set in the 
      335*DATA_LIST_LOOP. 
      336**/
      337 
      338 		 alloc option_value_list in (output_area);
      339 		 option_value_list.version = OPTION_VALUE_LIST_VERSION_1;
      340 		 option_value_link_ptr = root_option_value_link_ptr;
      341 		 do value_idx = 1 to option_value_list.number_of_values;
      342 		    next_option_value_link_ptr = option_value_link.next_ptr;
      343 		    option_value_list.value (value_idx).ptr = option_value_link.value_ptr;
      344 		    option_value_list.value (value_idx).vector_idx = option_value_link.vector_idx;
      345 
      346 		    option_value_link_ptr = next_option_value_link_ptr;
      347 
      348 		 end;
      349 
      350 		 if packed
      351 		 then unaligned_list_ptr_data = option_value_list_ptr;
      352 		 else aligned_list_ptr_data = option_value_list_ptr;
      353 
      354 	        end DATA_LIST;
      355 	     else call
      356 		   sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
      357 		   "^/Option variable parameter number ^d (argument number ^d) does not have 
      358 a valid data type.  It must be one of the following data types:
      359 character (varying or non-varying), bit (1), fixed bin (<36), or pointer.", option_idx, option_variable_arg_idx);
      360 	  end PROCESS_OPTION_VALUE;
      361       end OPTION_LOOP;
      362 
      363       call FINISH;
      364       return;
      365 
      366 CHECK_VERSION:
      367    proc (p_received_version, p_expected_version, p_structure_name);
      368       dcl	    p_received_version     fixed bin (35);
      369       dcl	    p_expected_version     fixed bin (35);
      370       dcl	    p_structure_name       char (*);
      371 
      372       if p_received_version ^= p_expected_version
      373       then call
      374 	    sub_err_ (error_table_$unimplemented_version, MYNAME, ACTION_CANT_RESTART, null, 0,
      375 	    "^/Expected version ^a of the ^a structure.
      376 Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
      377 
      378    end CHECK_VERSION;
      379 
      380 GET_DIMENSION_IDENTIFIER:
      381    proc (gdi_p_pva_ptr, gdi_p_dimension_name, gdi_p_dimension_identifier);
      382       dcl	    gdi_p_pva_ptr	       ptr parameter;
      383       dcl	    gdi_p_dimension_name   char (*) parameter;
      384       dcl	    gdi_p_dimension_identifier
      385 			       fixed bin parameter;
      386 
      387       dcl	    gdi_dim_idx	       fixed bin;
      388 
      389       do gdi_dim_idx = 1 to gdi_p_pva_ptr -> print_vector_array.number_of_dimensions
      390          while (gdi_p_pva_ptr -> print_vector_array.dimension_table (gdi_dim_idx).name ^= gdi_p_dimension_name);
      391       end;
      392       if gdi_dim_idx > gdi_p_pva_ptr -> print_vector_array.number_of_dimensions
      393       then call
      394 	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
      395 	    "^/The input result print_vector_array does not have a dimension named ^a.",
      396 	    requote_string_ (gdi_p_dimension_name));
      397       gdi_p_dimension_identifier = gdi_dim_idx;
      398    end GET_DIMENSION_IDENTIFIER;
      399 
      400 FIND_OPTION_VALUE:
      401    proc (fov_p_print_vector_array_ptr, fov_p_option_name_identifier, fov_p_option_name, fov_p_vector_has_been_used,
      402       fov_p_current_option_vector_idx, fov_p_option_value_ptr);
      403       dcl	    fov_p_print_vector_array_ptr
      404 			       ptr parameter;
      405       dcl	    fov_p_option_name_identifier
      406 			       fixed bin parameter;
      407       dcl	    fov_p_option_name      char (*) parameter;
      408       dcl	    fov_p_vector_has_been_used
      409 			       (*) bit (1) aligned parameter;
      410       dcl	    fov_p_current_option_vector_idx
      411 			       fixed bin parameter;
      412       dcl	    fov_p_option_value_ptr ptr parameter;
      413 
      414       dcl	    fov_print_vector_ptr   ptr;
      415       dcl	    fov_print_vector_idx   fixed bin (35);
      416       dcl	    (fov_name_dim_idx, fov_value_dim_idx)
      417 			       fixed bin init (0);
      418 
      419 
      420 FOV_PRINT_VECTOR_LOOP:
      421       do fov_print_vector_idx = fov_p_current_option_vector_idx + 1
      422          to fov_p_print_vector_array_ptr -> print_vector_array.number_of_vectors;
      423          if ^fov_p_vector_has_been_used (fov_print_vector_idx)
      424          then
      425 	  do;
      426 	     fov_print_vector_ptr =
      427 	        fov_p_print_vector_array_ptr -> print_vector_array.vector_slot (fov_print_vector_idx);
      428 
      429 	     do fov_name_dim_idx = 1 to fov_print_vector_ptr -> print_vector.number_of_dimensions
      430 	        while (fov_print_vector_ptr -> print_vector.dimension (fov_name_dim_idx).identifier
      431 	        ^= fov_p_option_name_identifier);
      432 	     end;
      433 	     if fov_name_dim_idx > fov_print_vector_ptr -> print_vector.number_of_dimensions
      434 	     then call
      435 		   sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
      436 		   "^/The option name dimension must be present in all of the
      437 result print_vectors.  This is not the case for print_vector ^d.", fov_print_vector_idx);
      438 
      439 	     if fov_p_option_name = fov_print_vector_ptr -> print_vector.dimension (fov_name_dim_idx).value
      440 	     then
      441 	        do;
      442 		 fov_p_current_option_vector_idx = fov_print_vector_idx;
      443 		 fov_value_dim_idx = fov_print_vector_ptr -> print_vector.number_of_dimensions;
      444 		 fov_p_option_value_ptr =
      445 		    addr (fov_print_vector_ptr -> print_vector.dimension (fov_value_dim_idx).value);
      446 		 fov_p_vector_has_been_used (fov_print_vector_idx) = "1"b;
      447 		 return;
      448 	        end;
      449 	  end;
      450       end FOV_PRINT_VECTOR_LOOP;
      451 
      452       fov_p_current_option_vector_idx = 0;
      453       fov_p_option_value_ptr = null;
      454 
      455 
      456    end FIND_OPTION_VALUE;
      457 
      458 CONVERT_TO_FLAG:
      459    proc (ctf_p_option_value) returns (bit (1) aligned);
      460       dcl	    ctf_p_option_value     char (*) varying parameter;
      461 
      462       if ctf_p_option_value = "true" | ctf_p_option_value = "t" | ctf_p_option_value = "on" | ctf_p_option_value = "yes"
      463          | ctf_p_option_value = "y" | ctf_p_option_value = "1"
      464       then return ("1"b);
      465       else if ctf_p_option_value = "false" | ctf_p_option_value = "f" | ctf_p_option_value = "off"
      466 	    | ctf_p_option_value = "no" | ctf_p_option_value = "n" | ctf_p_option_value = "0"
      467       then return ("0"b);
      468       else call
      469 	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
      470 	    "^/The option  ^a has a value which is not convertable to a flag.
      471 Its value is ^a.", requote_string_ ((option_name)), requote_string_ ((ctf_p_option_value)));
      472    end CONVERT_TO_FLAG;
      473 
      474 CONVERT_TO_INTEGER:
      475    proc (cti_p_option_value) returns (fixed bin (35));
      476       dcl	    cti_p_option_value     char (*) varying parameter;
      477 
      478       dcl	    cti_integer	       fixed bin (35);
      479       dcl	    cti_code	       fixed bin (35);
      480       dcl	    cv_dec_check_	       entry (char (*), fixed bin (35)) returns (fixed bin (35));
      481       dcl	    requote_string_	       entry (char (*)) returns (char (*));
      482 
      483       cti_integer = cv_dec_check_ ((cti_p_option_value), cti_code);
      484       if cti_code ^= 0
      485       then call
      486 	    sub_err_ (error_table_$bad_arg, MYNAME, ACTION_CANT_RESTART, null, 0,
      487 	    "^/The value for option ^a, ^a, couldn't be converted to an integer.
      488 The conversion failed on character ^d, ^a.", requote_string_ ((option_name)), requote_string_ ((cti_p_option_value)),
      489 	    cti_code, requote_string_ (substr (cti_p_option_value, cti_code, 1)));
      490       return (cti_integer);
      491    end CONVERT_TO_INTEGER;
      492 
      493 FINISH:
      494    proc ();
      495       if root_option_value_link_ptr ^= null
      496       then
      497          do;
      498 	  root_option_value_link_ptr = null;
      499 	  option_value_link_ptr = root_option_value_link_ptr;
      500 	  do while (option_value_link_ptr ^= null);
      501 	     next_option_value_link_ptr = option_value_link_ptr;
      502 	     free option_value_link in (system_area);
      503 	     option_value_link_ptr = next_option_value_link_ptr;
      504 	  end;
      505          end;
      506       if vector_has_been_used_ptr ^= null
      507       then free vector_has_been_used in (system_area);
      508    end FINISH;
      509 
  1     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  1     2 /* format: style3 */
  1     3 
  1     4 /* These constants are to be used for the flags argument of sub_err_ */
  1     5 /* They are just "string (condition_info_header.action_flags)" */
  1     6 
  1     7 declare	(
  1     8 	ACTION_CAN_RESTART	init (""b),
  1     9 	ACTION_CANT_RESTART init ("1"b),
  1    10 	ACTION_DEFAULT_RESTART
  1    11 			init ("01"b),
  1    12 	ACTION_QUIET_RESTART
  1    13 			init ("001"b),
  1    14 	ACTION_SUPPORT_SIGNAL
  1    15 			init ("0001"b)
  1    16 	)		bit (36) aligned internal static options (constant);
  1    17 
  1    18 /* End include file */
      510 
      511 
  2     1 /* ***********************************************************
  2     2*   *                                                         *
  2     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  2     4*   *                                                         *
  2     5*   *********************************************************** */
  2     6 /* BEGIN INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
  2     7 /* Written by Matthew C. Pierret, 01/21/82
  2     8*Modified:
  2     9**/
  2    10 
  2    11 /* format: style2,ind3 */
  2    12      dcl	   1 print_vector_array   based (print_vector_array_ptr),
  2    13 	     2 version	      fixed bin (35),
  2    14 	     2 number_of_dimensions
  2    15 			      fixed bin (17),
  2    16 	     2 maximum_dimension_name_length
  2    17 			      fixed bin (17),
  2    18 	     2 number_of_vectors  fixed bin (17),
  2    19 	     2 number_of_vector_slots
  2    20 			      fixed bin (17),
  2    21 	     2 dimension_table    (pva_number_of_dimensions refer (print_vector_array.number_of_dimensions)),
  2    22 	       3 name	      char (pva_maximum_dimension_name_length
  2    23 			      refer (print_vector_array.maximum_dimension_name_length)) varying,
  2    24 	       3 descriptor_ptr   ptr,
  2    25 	       3 cv_to_print      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  2    26 	       3 cv_to_typed      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  2    27 	       3 maximum_value_length
  2    28 			      fixed bin (17),
  2    29 	     2 vector_slot	      (pva_number_of_vector_slots refer (print_vector_array.number_of_vector_slots)) ptr;
  2    30 
  2    31      dcl	   1 print_vector	      based (print_vector_ptr),
  2    32 	     2 number_of_dimensions
  2    33 			      fixed bin (17),
  2    34 	     2 maximum_value_length
  2    35 			      fixed bin (35),
  2    36 	     2 dimension	      (pv_number_of_dimensions refer (print_vector.number_of_dimensions)),
  2    37 	       3 identifier	      fixed bin (17),
  2    38 	       3 value	      char (pv_maximum_value_length refer (print_vector.maximum_value_length)) varying;
  2    39 
  2    40      dcl	   pva_number_of_dimensions
  2    41 			      fixed bin;
  2    42      dcl	   pva_number_of_vector_slots
  2    43 			      fixed bin;
  2    44      dcl	   pva_maximum_dimension_name_length
  2    45 			      fixed bin;
  2    46      dcl	   pv_number_of_dimensions
  2    47 			      fixed bin;
  2    48      dcl	   pv_maximum_value_length
  2    49 			      fixed bin;
  2    50 
  2    51      dcl	   print_vector_array_ptr ptr;
  2    52      dcl	   print_vector_ptr	      ptr;
  2    53      dcl	   PRINT_VECTOR_ARRAY_VERSION_2
  2    54 			      fixed bin (35) init (2) internal static options (constant);
  2    55 
  2    56 /* END INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
      512 
      513 
  3     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  3     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  3     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  3     8*     Objects of this type are PASCAL string types.
  3     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  3    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  3    11*     Added the new C types.
  3    12*                                                   END HISTORY COMMENTS */
  3    13 
  3    14 /* This include file defines mnemonic names for the Multics
  3    15*   standard descriptor types, using both pl1 and cobol terminology.
  3    16*   PG 780613
  3    17*   JRD 790530
  3    18*   JRD 791016
  3    19*   MBW 810731
  3    20*   TGO 830614 Add hex types.
  3    21*   Modified June 83 JMAthane to add PASCAL data types
  3    22*   TGO 840120 Add float dec extended and generic, float binary generic
  3    23**/
  3    24 
  3    25      dcl	   (real_fix_bin_1_dtype  init (1),
  3    26 	   real_fix_bin_2_dtype   init (2),
  3    27 	   real_flt_bin_1_dtype   init (3),
  3    28 	   real_flt_bin_2_dtype   init (4),
  3    29 	   cplx_fix_bin_1_dtype   init (5),
  3    30 	   cplx_fix_bin_2_dtype   init (6),
  3    31 	   cplx_flt_bin_1_dtype   init (7),
  3    32 	   cplx_flt_bin_2_dtype   init (8),
  3    33 	   real_fix_dec_9bit_ls_dtype init (9),
  3    34 	   real_flt_dec_9bit_dtype init (10),
  3    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  3    36 	   cplx_flt_dec_9bit_dtype init (12),
  3    37 	   pointer_dtype	      init (13),
  3    38 	   offset_dtype	      init (14),
  3    39 	   label_dtype	      init (15),
  3    40 	   entry_dtype	      init (16),
  3    41 	   structure_dtype	      init (17),
  3    42 	   area_dtype	      init (18),
  3    43 	   bit_dtype	      init (19),
  3    44 	   varying_bit_dtype      init (20),
  3    45 	   char_dtype	      init (21),
  3    46 	   varying_char_dtype     init (22),
  3    47 	   file_dtype	      init (23),
  3    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  3    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  3    50 	   real_fix_bin_1_uns_dtype init (33),
  3    51 	   real_fix_bin_2_uns_dtype init (34),
  3    52 	   real_fix_dec_9bit_uns_dtype init (35),
  3    53 	   real_fix_dec_9bit_ts_dtype init (36),
  3    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  3    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  3    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  3    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  3    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  3    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  3    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  3    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  3    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  3    63 	   real_flt_hex_1_dtype   init (47),
  3    64 	   real_flt_hex_2_dtype   init (48),
  3    65 	   cplx_flt_hex_1_dtype   init (49),
  3    66 	   cplx_flt_hex_2_dtype   init (50),
  3    67 	   c_typeref_dtype        init (54),
  3    68 	   c_enum_dtype           init (55),
  3    69              c_enum_const_dtype     init (56),
  3    70 	   c_union_dtype          init (57),
  3    71 	   algol68_straight_dtype init (59),
  3    72 	   algol68_format_dtype   init (60),
  3    73 	   algol68_array_descriptor_dtype init (61),
  3    74 	   algol68_union_dtype    init (62),
  3    75 
  3    76 	   cobol_comp_6_dtype     init (1),
  3    77 	   cobol_comp_7_dtype     init (1),
  3    78 	   cobol_display_ls_dtype init (9),
  3    79 	   cobol_structure_dtype  init (17),
  3    80 	   cobol_char_string_dtype init (21),
  3    81 	   cobol_display_ls_overp_dtype init (29),
  3    82 	   cobol_display_ts_overp_dtype init (30),
  3    83 	   cobol_display_uns_dtype init (35),
  3    84 	   cobol_display_ts_dtype init (36),
  3    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  3    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  3    87 	   cobol_comp_5_uns_dtype init (40),
  3    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  3    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  3    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  3    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  3    92 	   cplx_flt_dec_generic_dtype init (84),
  3    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  3    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  3    95 
  3    96      dcl	   (ft_integer_dtype      init (1),
  3    97 	   ft_real_dtype	      init (3),
  3    98 	   ft_double_dtype	      init (4),
  3    99 	   ft_complex_dtype	      init (7),
  3   100 	   ft_complex_double_dtype init (8),
  3   101 	   ft_external_dtype      init (16),
  3   102 	   ft_logical_dtype	      init (19),
  3   103 	   ft_char_dtype	      init (21),
  3   104 	   ft_hex_real_dtype      init (47),
  3   105 	   ft_hex_double_dtype    init (48),
  3   106 	   ft_hex_complex_dtype   init (49),
  3   107 	   ft_hex_complex_double_dtype init (50)
  3   108 	   )		      fixed bin internal static options (constant);
  3   109 
  3   110      dcl	   (algol68_short_int_dtype init (1),
  3   111 	   algol68_int_dtype      init (1),
  3   112 	   algol68_long_int_dtype init (2),
  3   113 	   algol68_real_dtype     init (3),
  3   114 	   algol68_long_real_dtype init (4),
  3   115 	   algol68_compl_dtype    init (7),
  3   116 	   algol68_long_compl_dtype init (8),
  3   117 	   algol68_bits_dtype     init (19),
  3   118 	   algol68_bool_dtype     init (19),
  3   119 	   algol68_char_dtype     init (21),
  3   120 	   algol68_byte_dtype     init (21),
  3   121 	   algol68_struct_struct_char_dtype init (22),
  3   122 	   algol68_struct_struct_bool_dtype init (20)
  3   123 	   )		      fixed bin internal static options (constant);
  3   124 
  3   125      dcl	   (label_constant_runtime_dtype init (24),
  3   126 	   int_entry_runtime_dtype init (25),
  3   127 	   ext_entry_runtime_dtype init (26),
  3   128 	   ext_procedure_runtime_dtype init (27),
  3   129 	   picture_runtime_dtype  init (63)
  3   130 	   )		      fixed bin internal static options (constant);
  3   131 
  3   132      dcl	   (pascal_integer_dtype  init (1),
  3   133 	   pascal_real_dtype      init (4),
  3   134 	   pascal_label_dtype     init (24),
  3   135 	   pascal_internal_procedure_dtype init (25),
  3   136 	   pascal_exportable_procedure_dtype init (26),
  3   137 	   pascal_imported_procedure_dtype init (27),
  3   138 	   pascal_typed_pointer_type_dtype init (64),
  3   139 	   pascal_char_dtype      init (65),
  3   140 	   pascal_boolean_dtype   init (66),
  3   141 	   pascal_record_file_type_dtype init (67),
  3   142 	   pascal_record_type_dtype init (68),
  3   143 	   pascal_set_dtype	      init (69),
  3   144 	   pascal_enumerated_type_dtype init (70),
  3   145 	   pascal_enumerated_type_element_dtype init (71),
  3   146 	   pascal_enumerated_type_instance_dtype init (72),
  3   147 	   pascal_user_defined_type_dtype init (73),
  3   148 	   pascal_user_defined_type_instance_dtype init (74),
  3   149 	   pascal_text_file_dtype init (75),
  3   150 	   pascal_procedure_type_dtype init (76),
  3   151 	   pascal_variable_formal_parameter_dtype init (77),
  3   152 	   pascal_value_formal_parameter_dtype init (78),
  3   153 	   pascal_entry_formal_parameter_dtype init (79),
  3   154 	   pascal_parameter_procedure_dtype init (80),
  3   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  3   156 
  3   157 
  3   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      514 
      515 
  4     1 /* BEGIN INCLUDE FILE - pa_option_value_list.incl.pl1 */
  4     2 
  4     3 /* DESCRIPTION:
  4     4*
  4     5*          The option_value_list structure is constructed by the
  4     6*     pa_get_option_value subroutine.  It is used to return multiple values for
  4     7*     a single option.
  4     8**/
  4     9 
  4    10 /* HISTORY:
  4    11*
  4    12*Written by Lindsey Spratt, 06/12/83.
  4    13*Modified:
  4    14**/
  4    15 
  4    16 /* format: style2,ind3 */
  4    17      dcl	   1 option_value_list    based (option_value_list_ptr) aligned,
  4    18 	     2 version	      char (8),
  4    19 	     2 number_of_values   fixed bin (35),
  4    20 	     2 pad	      bit (36),
  4    21 	     2 value	      (ovl_number_of_values refer (option_value_list.number_of_values)),
  4    22 	       3 ptr	      ptr,
  4    23 	       3 vector_idx	      fixed bin (35),
  4    24 	       3 pad	      bit (36);
  4    25 
  4    26      dcl	   OPTION_VALUE_LIST_VERSION_1
  4    27 			      init ("optvl 01") char (8) internal static options (constant);
  4    28      dcl	   option_value_list_ptr  ptr init (null);
  4    29      dcl	   ovl_number_of_values   fixed bin (17) init (0);
  4    30 
  4    31 /* END INCLUDE FILE - pa_option_value_list.incl.pl1 */
      516 
      517 
  5     1 /* BEGIN INCLUDE FILE - pa_dim_name_constants.incl.pl1 */
  5     2 
  5     3 /* DESCRIPTION:
  5     4*     This include file contains constants which are the names of all  of the
  5     5*dimension found in the definition and result print_vector_arrays.
  5     6**/
  5     7 
  5     8 /* HISTORY:
  5     9*Written by Lindsey Spratt, 06/30/83.
  5    10*Modified:
  5    11*07/01/83 by Lindsey Spratt:  Added DEFINITION_ORDER_DIM_NAME.
  5    12*08/26/83 by S. Krupp:  Added all new dimensions.
  5    13**/
  5    14 
  5    15 /* format: style2,ind3 */
  5    16      dcl	   (
  5    17 	   COMMAND_NAME_DIM_NAME  init ("command name"),
  5    18 	   DEFAULT_LINEAR_FORM_DIM_NAME
  5    19 			      init ("default linear form"),
  5    20 	   OPTION_NAME_DIM_NAME   init ("option"),
  5    21 	   SYNONYM_DIM_NAME	      init ("synonym"),
  5    22 	   NEGATIVE_FORM_DIM_NAME init ("negative form"),
  5    23 	   EXCLUDED_OPTION_DIM_NAME
  5    24 			      init ("excluded option"),
  5    25 	   INITIAL_IMPLIED_OPTION_DIM_NAME
  5    26 			      init ("initial implied option"),
  5    27 	   NEXT_IMPLIED_OPTION_DIM_NAME
  5    28 			      init ("next implied option"),
  5    29 	   ARGUMENT_DIM_NAME      init ("argument"),
  5    30 	   INITIAL_ARGUMENT_DIM_NAME
  5    31 			      init ("initial argument"),
  5    32 	   NEXT_ARGUMENT_DIM_NAME init ("next argument"),
  5    33 	   DEFAULT_VALUE_DIM_NAME init ("default value"),
  5    34 	   NEGATIVE_VALUE_DIM_NAME
  5    35 			      init ("negative value"),
  5    36 	   ARGUMENT_VALIDATION_STRING_DIM_NAME
  5    37 			      init ("validation string"),
  5    38 	   EXPLANATION_DIM_NAME   init ("explanation"),
  5    39 	   ARGUMENT_PRESENCE_DIM_NAME
  5    40 			      init ("presence required"),
  5    41 	   INSTANCE_DIM_NAME      init ("instance"),
  5    42 	   ORDER_DIM_NAME	      init ("order"),
  5    43 	   DEFINITION_ORDER_DIM_NAME
  5    44 			      init ("definition order"),
  5    45              FORCE_LITERAL_DIM_NAME init ("force literal"),
  5    46 	   UNEXCLUDED_OPTION_DIM_NAME
  5    47                                     init ("unexcluded option"),
  5    48              VALIDATE_RESULT_DIM_NAME
  5    49                                     init ("validate result"),
  5    50              VALIDATE_RESULT_EXPLANATION_DIM_NAME
  5    51                                     init ("validate result explanation"),
  5    52              VALIDATE_EXPLANATION_DIM_NAME
  5    53                                     init ("validate explanation")
  5    54 	   )		      char (64) varying internal static options (constant);
  5    55 
  5    56 /* END INCLUDE FILE - pa_dim_name_constants.incl.pl1 */
      518 
      519 
  6     1 /* BEGIN INCLUDE FILE ... arg_list.incl.pl1
  6     2*
  6     3*   James R. Davis 10 May 79 */
  6     4 
  6     5 
  6     6      
  6     7 /****^  HISTORY COMMENTS:
  6     8*  1) change(86-05-15,DGHowe), approve(86-05-15,MCR7375),
  6     9*     audit(86-07-15,Schroth):
  6    10*     added command_name_arglist declaration to allow the storage of the
  6    11*     command name given to the command processor
  6    12*                                                   END HISTORY COMMENTS */
  6    13 
  6    14      dcl	   1 arg_list	      aligned based,
  6    15 	     2 header,
  6    16 	       3 arg_count	      fixed bin (17) unsigned unal,
  6    17 	       3 pad1	      bit (1) unal,
  6    18 	       3 call_type	      fixed bin (18) unsigned unal,
  6    19 	       3 desc_count	      fixed bin (17) unsigned unal,
  6    20 	       3 pad2	      bit (19) unal,
  6    21 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr,
  6    22 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr;
  6    23 
  6    24 
  6    25      dcl	   1 command_name_arglist	      aligned based,
  6    26 	     2 header,
  6    27 	       3 arg_count	      fixed bin (17) unsigned unal,
  6    28 	       3 pad1	      bit (1) unal,
  6    29 	       3 call_type	      fixed bin (18) unsigned unal,
  6    30 	       3 desc_count	      fixed bin (17) unsigned unal,
  6    31 	       3 mbz              bit(1) unal,
  6    32                  3 has_command_name bit(1) unal,
  6    33 	       3 pad2	      bit (17) unal,
  6    34 	     2 arg_ptrs	      (arg_list_arg_count refer (command_name_arglist.arg_count)) ptr,
  6    35 	     2 desc_ptrs	      (arg_list_arg_count refer (command_name_arglist.arg_count)) ptr,
  6    36 	     2 name,
  6    37                  3 command_name_ptr         pointer,
  6    38                  3 command_name_length      fixed bin (21);
  6    39 	
  6    40 
  6    41 
  6    42      dcl	   1 arg_list_with_envptr aligned based,	/* used with non-quick int and entry-var calls */
  6    43 	     2 header,
  6    44 	       3 arg_count	      fixed bin (17) unsigned unal,
  6    45 	       3 pad1	      bit (1) unal,
  6    46 	       3 call_type	      fixed bin (18) unsigned unal,
  6    47 	       3 desc_count	      fixed bin (17) unsigned unal,
  6    48 	       3 pad2	      bit (19) unal,
  6    49 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr,
  6    50 	     2 envptr	      ptr,
  6    51 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr;
  6    52 
  6    53 
  6    54      dcl	   (
  6    55 	   Quick_call_type	      init (0),
  6    56 	   Interseg_call_type     init (4),
  6    57 	   Envptr_supplied_call_type
  6    58 			      init (8)
  6    59 	   )		      fixed bin (18) unsigned unal int static options (constant);
  6    60 
  6    61 /* The user must declare arg_list_arg_count - if an adjustable automatic structure
  6    62*   is being "liked" then arg_list_arg_count may be a parameter, in order to allocate
  6    63*   an argument list of the proper size in the user's stack
  6    64*
  6    65**/
  6    66 /* END INCLUDE FILE ... arg_list.incl.pl1 */
      520 
      521    end pa_get_option_value;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1359.0  pa_get_option_value.pl1           >special_ldd>install>MR12.2-1184>pa_get_option_value.pl1
510          1    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
512          2    02/16/84  1452.5  vu_print_vector_array.incl.pl1    >ldd>include>vu_print_vector_array.incl.pl1
514          3    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
516          4    02/16/84  1452.4  pa_option_value_list.incl.pl1     >ldd>include>pa_option_value_list.incl.pl1
518          5    02/16/84  1452.4  pa_dim_name_constants.incl.pl1    >ldd>include>pa_dim_name_constants.incl.pl1
520          6    08/05/86  0856.8  arg_list.incl.pl1                 >ldd>include>arg_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000052 constant        bit(36)                  initial dcl 1-7 set ref 199* 201* 215* 231* 355*
                                                                                  372* 392* 433* 468* 484*
MINIMUM_POSSIBLE_NUMBER_OF_ARGS        constant        fixed bin(17,0)          initial dcl 148 ref 199
MYNAME                          000024 constant        varying char(32)         initial dcl 159 set ref 199* 201* 215* 231* 355*
                                                                                  372* 392* 433* 468* 484*
NO_CURRENT_OPTION_VECTOR_IDX           constant        fixed bin(17,0)          initial dcl 148 ref 242
NUMBER_OF_INITIAL_NONVALUE_ARGS        constant        fixed bin(17,0)          initial dcl 148 ref 227
NUMBER_OF_NONVALUE_ARGS                constant        fixed bin(17,0)          initial dcl 148 ref 201 207
OPTION_NAME_DIM_NAME            000000 constant        varying char(64)         initial dcl 5-16 ref 209
OPTION_VALUE_LIST_VERSION_1     000022 constant        char(8)                  initial packed unaligned dcl 4-26 ref 339
PRINT_VECTOR_ARRAY_VERSION_2    000071 constant        fixed bin(35,0)          initial dcl 2-53 set ref 190*
addr                                                   builtin function         dcl 139 ref 444
aligned_char_data                      based           char                     dcl 116 set ref 270*
aligned_flag_data                      based           bit(1)                   dcl 122 set ref 298*
aligned_integer_data                   based           fixed bin(35,0)          dcl 125 set ref 306*
aligned_list_ptr_data                  based           pointer                  dcl 128 set ref 352*
aligned_vchar_data                     based           varying char             dcl 119 set ref 288*
arg_list                               based           structure                level 1 dcl 6-14
arg_list_arg_count              000110 automatic       fixed bin(17,0)          initial dcl 52 set ref 52* 195*
arg_list_ptr                    000106 automatic       pointer                  initial dcl 51 set ref 51* 196* 230* 237 253* 255
arg_ptrs                  2            based           pointer                  array level 2 dcl 6-14 ref 237 255
bit_dtype                              constant        fixed bin(17,0)          initial dcl 3-25 ref 292
char_data_length                000136 automatic       fixed bin(17,0)          initial dcl 88 set ref 88* 261* 265 270
char_dtype                             constant        fixed bin(17,0)          initial dcl 3-25 ref 231 257
cleanup                         000152 stack reference condition                dcl 144 ref 192
ctf_p_option_value                     parameter       varying char             dcl 460 ref 458 462 462 462 462 462 462 465 465 465
                                                                                  465 465 465 468
cti_code                        000213 automatic       fixed bin(35,0)          dcl 479 set ref 483* 484 484* 484 484
cti_integer                     000212 automatic       fixed bin(35,0)          dcl 478 set ref 483* 490
cti_p_option_value                     parameter       varying char             dcl 476 ref 474 483 484 484 484
cu_$arg_count                   000014 constant        entry                    external dcl 166 ref 194
cu_$arg_list_ptr                000016 constant        entry                    external dcl 167 ref 196
current_option_vector_idx       000131 automatic       fixed bin(17,0)          initial dcl 79 set ref 79* 242* 244* 315 317* 327
                                                                                  328*
cv_dec_check_                   000034 constant        entry                    external dcl 480 ref 483
data_ptr                        000134 automatic       pointer                  initial dcl 85 set ref 85* 255* 265 270 278* 278 283
                                                                                  288 296 298 304 306 350 352
decode_descriptor_              000020 constant        entry                    external dcl 169 ref 230 253
dimension                 2            based           structure                array level 2 unaligned dcl 2-31
dimension_table           6            based           structure                array level 2 unaligned dcl 2-12
divide                                                 builtin function         dcl 139 ref 207
error_table_$bad_arg            000032 external static fixed bin(35,0)          dcl 177 set ref 201* 215* 231* 355* 392* 433* 468*
                                                                                  484*
error_table_$too_few_args       000030 external static fixed bin(35,0)          dcl 177 set ref 199*
error_table_$unimplemented_version
                                000026 external static fixed bin(35,0)          dcl 177 set ref 372*
fov_name_dim_idx                000103 automatic       fixed bin(17,0)          initial dcl 416 set ref 416* 429* 429* 433 439
fov_p_current_option_vector_idx        parameter       fixed bin(17,0)          dcl 410 set ref 400 420 442* 452*
fov_p_option_name                      parameter       char                     packed unaligned dcl 407 ref 400 439
fov_p_option_name_identifier           parameter       fixed bin(17,0)          dcl 405 ref 400 429
fov_p_option_value_ptr                 parameter       pointer                  dcl 412 set ref 400 444* 453*
fov_p_print_vector_array_ptr           parameter       pointer                  dcl 403 ref 400 420 426
fov_p_vector_has_been_used             parameter       bit(1)                   array dcl 408 set ref 400 423 446*
fov_print_vector_idx            000102 automatic       fixed bin(35,0)          dcl 415 set ref 420* 423 426 433* 442 446*
fov_print_vector_ptr            000100 automatic       pointer                  dcl 414 set ref 426* 429 429 433 439 443 444
fov_value_dim_idx               000104 automatic       fixed bin(17,0)          initial dcl 416 set ref 416* 443* 444
gdi_dim_idx                     000100 automatic       fixed bin(17,0)          dcl 387 set ref 389* 389* 392 397
gdi_p_dimension_identifier             parameter       fixed bin(17,0)          dcl 384 set ref 380 397*
gdi_p_dimension_name                   parameter       char                     packed unaligned dcl 383 set ref 380 389 392*
gdi_p_pva_ptr                          parameter       pointer                  dcl 382 ref 380 389 389 392
get_system_free_area_           000012 constant        entry                    external dcl 164 ref 188
identifier                2            based           fixed bin(17,0)          array level 3 dcl 2-31 ref 429
maximum_dimension_name_length
                          2            based           fixed bin(17,0)          level 2 dcl 2-12 ref 389 389 426
maximum_value_length      1            based           fixed bin(35,0)          level 2 dcl 2-31 ref 429 429 439 439 444 444
name                      6            based           varying char             array level 3 dcl 2-12 ref 389
nargs                           000104 automatic       fixed bin(17,0)          initial dcl 50 set ref 50* 194* 195 199 201 207
ndims                           000123 automatic       fixed bin(17,0)          initial dcl 71 set ref 71* 230* 253*
next_option_value_link_ptr      000146 automatic       pointer                  initial dcl 96 set ref 96* 342* 346 501* 503
next_ptr                               based           pointer                  initial level 2 dcl 132 set ref 312* 323* 324* 325*
                                                                                  342
null                                                   builtin function         dcl 139 ref 48 49 51 58 75 83 85 91 92 94 96 199 199
                                                                                  201 201 215 215 231 231 248 312 312 320 323 323
                                                                                  325 355 355 4-28 372 372 392 392 433 433 453 468
                                                                                  468 484 484 495 498 500 506
number_of_dimensions      1            based           fixed bin(17,0)          level 2 in structure "print_vector_array" dcl 2-12
                                                                                  in procedure "pa_get_option_value" ref 389 392 426
number_of_dimensions                   based           fixed bin(17,0)          level 2 in structure "print_vector" dcl 2-31
                                                                                  in procedure "pa_get_option_value" ref 429 433 443
number_of_option_values_requested
                                000111 automatic       fixed bin(17,0)          initial dcl 53 set ref 53* 207* 215 215* 225
number_of_values          2            based           fixed bin(35,0)          level 2 dcl 4-17 set ref 338* 341
number_of_vectors         3            based           fixed bin(17,0)          level 2 dcl 2-12 ref 211 420
option_idx                      000116 automatic       fixed bin(17,0)          initial dcl 61 set ref 61* 225* 227 231* 252 355*
option_name                            based           char                     packed unaligned dcl 112 ref 244 317 328 468 484
option_name_arg_idx             000117 automatic       fixed bin(17,0)          initial dcl 62 set ref 62* 227* 228 230* 231* 237
option_name_identifier          000112 automatic       fixed bin(17,0)          initial dcl 55 set ref 55* 209* 244* 317* 328*
option_name_length              000130 automatic       fixed bin(17,0)          initial dcl 77 set ref 77* 238* 240* 244 317 328 468
                                                                                  484
option_name_ptr                 000126 automatic       pointer                  initial dcl 75 set ref 75* 237* 238 244 317 328 468
                                                                                  484
option_value                           based           varying char             dcl 113 set ref 265 270 283 288 296* 298* 304* 306*
option_value_link                      based           structure                level 1 unaligned dcl 132 set ref 312 323 502
option_value_link_ptr           000140 automatic       pointer                  initial dcl 91 set ref 91* 312* 313 314 315 322 323*
                                                                                  324 325 326 327 340* 342 343 344 346* 499* 500 501
                                                                                  502 503*
option_value_list                      based           structure                level 1 dcl 4-17 set ref 338
option_value_list_ptr           000162 automatic       pointer                  initial dcl 4-28 set ref 338* 339 341 343 344 350
                                                                                  352 4-28*
option_value_ptr                000132 automatic       pointer                  initial dcl 83 set ref 83* 244* 248 265 270 283 288
                                                                                  296 298 304 306 314 317* 320 326 328*
option_variable_arg_idx         000120 automatic       fixed bin(17,0)          initial dcl 64 set ref 64* 228* 253* 255 355*
output_area                            based           area(1024)               dcl 103 ref 338
output_area_ptr                 000100 automatic       pointer                  initial dcl 48 set ref 48* 187* 338
ovl_number_of_values            000164 automatic       fixed bin(17,0)          initial dcl 4-29 set ref 320* 338 338 4-29*
p_area_ptr                             parameter       pointer                  dcl 39 ref 7 187
p_expected_version                     parameter       fixed bin(35,0)          dcl 369 set ref 366 372 372*
p_found_option                         parameter       bit                      packed unaligned dcl 44 set ref 7 215 215 215 223*
                                                                                  252*
p_received_version                     parameter       fixed bin(35,0)          dcl 368 set ref 366 372 372*
p_result_print_vector_array_ptr        parameter       pointer                  dcl 35 ref 7 186
p_structure_name                       parameter       char                     packed unaligned dcl 370 set ref 366 372*
packed                          000122 automatic       bit(1)                   initial dcl 69 set ref 69* 230* 253* 262 280 296 304
                                                                                  350
pointer_dtype                          constant        fixed bin(17,0)          initial dcl 3-25 ref 308
previous_option_value_link_ptr  000144 automatic       pointer                  initial dcl 94 set ref 94* 322* 324
print_vector                           based           structure                level 1 unaligned dcl 2-31
print_vector_array                     based           structure                level 1 unaligned dcl 2-12
print_vector_array_ptr          000160 automatic       pointer                  dcl 2-51 set ref 186* 190 209* 211 244* 317* 328*
ptr                       4            based           pointer                  array level 3 dcl 4-17 set ref 343*
real_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 300
requote_string_                 000036 constant        entry                    external dcl 481 in procedure "CONVERT_TO_INTEGER"
                                                                                  ref 484 484 484
requote_string_                 000010 constant        entry                    external dcl 163 in procedure "pa_get_option_value"
                                                                                  ref 392 468 468
root_option_value_link_ptr      000142 automatic       pointer                  initial dcl 92 set ref 92* 313* 340 495 498* 499
scale                           000125 automatic       fixed bin(17,0)          initial dcl 73 set ref 73* 230* 253*
size                            000124 automatic       fixed bin(17,0)          initial dcl 72 set ref 72* 230* 240 253* 261 279 292
sub_err_                        000022 constant        entry                    external dcl 171 ref 199 201 215 231 355 372 392 433
                                                                                  468 484
substr                                                 builtin function         dcl 139 set ref 252* 484 484
sys_info$max_seg_size           000024 external static fixed bin(35,0)          dcl 175 ref 296 298 304 306
system_area                            based           area(1024)               dcl 106 ref 212 312 323 502 506
system_area_ptr                 000102 automatic       pointer                  initial dcl 49 set ref 49* 188* 212 312 323 502 506
type                            000121 automatic       fixed bin(17,0)          initial dcl 68 set ref 68* 230* 231 231 238 253* 257
                                                                                  274 292 300 308
unaligned_char_data                    based           char                     packed unaligned dcl 117 set ref 265*
unaligned_flag_data                    based           bit(1)                   packed unaligned dcl 123 set ref 296*
unaligned_integer_data                 based           fixed bin(35,0)          packed unaligned dcl 126 set ref 304*
unaligned_list_ptr_data                based           pointer                  packed unaligned dcl 129 set ref 350*
unaligned_vchar_data                   based           varying char             dcl 120 set ref 283*
value                     4            based           structure                array level 2 in structure "option_value_list"
                                                                                  dcl 4-17 in procedure "pa_get_option_value"
value                     3            based           varying char             array level 3 in structure "print_vector" dcl 2-31
                                                                                  in procedure "pa_get_option_value" set ref 439 444
value_idx                       000150 automatic       fixed bin(17,0)          initial dcl 99 set ref 99* 341* 343 344*
value_ptr                 2            based           pointer                  initial level 2 dcl 132 set ref 312* 314* 323* 326*
                                                                                  343
var_option_name_size                   based           fixed bin(21,0)          dcl 114 ref 238
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 3-25 ref 231 238 274
vchar_data_length               000137 automatic       fixed bin(17,0)          initial dcl 89 set ref 89* 279* 283 288
vector_has_been_used                   based           bit(1)                   array dcl 108 set ref 212 213* 244* 317* 328* 506
vector_has_been_used_ptr        000114 automatic       pointer                  initial dcl 58 set ref 58* 212* 213 244 317 328 506
                                                                                  506
vector_idx                6            based           fixed bin(35,0)          array level 3 in structure "option_value_list"
                                                                                  dcl 4-17 in procedure "pa_get_option_value" set
                                                                                  ref 344*
vector_idx                4            based           fixed bin(17,0)          initial level 2 in structure "option_value_link"
                                                                                  dcl 132 in procedure "pa_get_option_value" set ref
                                                                                  312* 315* 323* 327* 344
vector_slot                            based           pointer                  array level 2 dcl 2-12 ref 426
version                                based           char(8)                  level 2 in structure "option_value_list" dcl 4-17
                                                                                  in procedure "pa_get_option_value" set ref 339*
version                                based           fixed bin(35,0)          level 2 in structure "print_vector_array" dcl 2-12
                                                                                  in procedure "pa_get_option_value" set ref 190*
vhbu_number_of_vectors          000113 automatic       fixed bin(17,0)          initial dcl 57 set ref 57* 211* 212 213 244 317 328
                                                                                  506

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 1-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 1-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 1-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 1-7
ARGUMENT_DIM_NAME                      internal static varying char(64)         initial dcl 5-16
ARGUMENT_PRESENCE_DIM_NAME             internal static varying char(64)         initial dcl 5-16
ARGUMENT_VALIDATION_STRING_DIM_NAME    internal static varying char(64)         initial dcl 5-16
COMMAND_NAME_DIM_NAME                  internal static varying char(64)         initial dcl 5-16
DEFAULT_LINEAR_FORM_DIM_NAME           internal static varying char(64)         initial dcl 5-16
DEFAULT_VALUE_DIM_NAME                 internal static varying char(64)         initial dcl 5-16
DEFINITION_ORDER_DIM_NAME              internal static varying char(64)         initial dcl 5-16
EXCLUDED_OPTION_DIM_NAME               internal static varying char(64)         initial dcl 5-16
EXPLANATION_DIM_NAME                   internal static varying char(64)         initial dcl 5-16
Envptr_supplied_call_type              internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 6-54
FORCE_LITERAL_DIM_NAME                 internal static varying char(64)         initial dcl 5-16
INITIAL_ARGUMENT_DIM_NAME              internal static varying char(64)         initial dcl 5-16
INITIAL_IMPLIED_OPTION_DIM_NAME        internal static varying char(64)         initial dcl 5-16
INSTANCE_DIM_NAME                      internal static varying char(64)         initial dcl 5-16
Interseg_call_type                     internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 6-54
NEGATIVE_FORM_DIM_NAME                 internal static varying char(64)         initial dcl 5-16
NEGATIVE_VALUE_DIM_NAME                internal static varying char(64)         initial dcl 5-16
NEXT_ARGUMENT_DIM_NAME                 internal static varying char(64)         initial dcl 5-16
NEXT_IMPLIED_OPTION_DIM_NAME           internal static varying char(64)         initial dcl 5-16
ORDER_DIM_NAME                         internal static varying char(64)         initial dcl 5-16
Quick_call_type                        internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 6-54
SYNONYM_DIM_NAME                       internal static varying char(64)         initial dcl 5-16
UNEXCLUDED_OPTION_DIM_NAME             internal static varying char(64)         initial dcl 5-16
VALIDATE_EXPLANATION_DIM_NAME          internal static varying char(64)         initial dcl 5-16
VALIDATE_RESULT_DIM_NAME               internal static varying char(64)         initial dcl 5-16
VALIDATE_RESULT_EXPLANATION_DIM_NAME   internal static varying char(64)         initial dcl 5-16
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 3-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 3-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 3-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 3-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 3-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 3-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 3-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 3-25
arg_list_with_envptr                   based           structure                level 1 dcl 6-42
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 3-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 3-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 3-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 3-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
command_name_arglist                   based           structure                level 1 dcl 6-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 3-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
entry_dtype                            internal static fixed bin(17,0)          initial dcl 3-25
error_table_$noarg                     external static fixed bin(35,0)          dcl 177
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 3-125
file_dtype                             internal static fixed bin(17,0)          initial dcl 3-25
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 3-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 3-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 3-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 3-96
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 3-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 3-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 3-25
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 3-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 3-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 3-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 3-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 3-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 3-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 3-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 3-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 3-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 3-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 3-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 3-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 3-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 3-125
print_vector_ptr                       automatic       pointer                  dcl 2-52
pv_maximum_value_length                automatic       fixed bin(17,0)          dcl 2-48
pv_number_of_dimensions                automatic       fixed bin(17,0)          dcl 2-46
pva_maximum_dimension_name_length      automatic       fixed bin(17,0)          dcl 2-44
pva_number_of_dimensions               automatic       fixed bin(17,0)          dcl 2-40
pva_number_of_vector_slots             automatic       fixed bin(17,0)          dcl 2-42
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 3-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
structure_dtype                        internal static fixed bin(17,0)          initial dcl 3-25
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 3-25

NAMES DECLARED BY EXPLICIT CONTEXT.
CHAR_DATA                       001455 constant        label                    dcl 257
CHECK_VERSION                   002246 constant        entry                    internal dcl 366 ref 190
CONVERT_TO_FLAG                 002776 constant        entry                    internal dcl 458 ref 296 298
CONVERT_TO_INTEGER              003246 constant        entry                    internal dcl 474 ref 304 306
DATA_LIST                       001706 constant        label                    dcl 308
DATA_LIST_LOOP                  001776 constant        label                    dcl 320
FIND_OPTION_VALUE               002524 constant        entry                    internal dcl 400 ref 244 317 328
FINISH                          003504 constant        entry                    internal dcl 493 ref 192 363
FLAG_DATA                       001542 constant        label                    dcl 292
FOV_PRINT_VECTOR_LOOP           002541 constant        label                    dcl 420
GET_DIMENSION_IDENTIFIER        002343 constant        entry                    internal dcl 380 ref 209
INTEGER_DATA                    001625 constant        label                    dcl 300
OPTION_LOOP                     001175 constant        label                    dcl 225
PROCESS_OPTION_VALUE            001414 constant        label                    dcl 248
VCHAR_DATA                      001500 constant        label                    dcl 274
pa_get_option_value             000545 constant        entry                    external dcl 7

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addwordno                                              builtin function         ref 238 278
length                                                 builtin function         ref 215 215 215
mod                                                    builtin function         ref 201
unspec                                                 builtin function         ref 213

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3774        4034    3557        4004
Length      4404    3557        40         333     214           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
pa_get_option_value                 546 external procedure  is an external procedure.  
on unit on line 192                  64 on unit               
CHECK_VERSION                           internal procedure  shares stack frame of external procedure pa_get_option_value.  
GET_DIMENSION_IDENTIFIER            134 internal procedure  is called during a stack extension.  
FIND_OPTION_VALUE                   138 internal procedure  is called during a stack extension.  
CONVERT_TO_FLAG                         internal procedure  shares stack frame of external procedure pa_get_option_value.  
CONVERT_TO_INTEGER                      internal procedure  shares stack frame of external procedure pa_get_option_value.  
FINISH                               64 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
FIND_OPTION_VALUE        000100 fov_print_vector_ptr        FIND_OPTION_VALUE
                         000102 fov_print_vector_idx        FIND_OPTION_VALUE
                         000103 fov_name_dim_idx            FIND_OPTION_VALUE
                         000104 fov_value_dim_idx           FIND_OPTION_VALUE
GET_DIMENSION_IDENTIFIER 000100 gdi_dim_idx                 GET_DIMENSION_IDENTIFIER
pa_get_option_value      000100 output_area_ptr             pa_get_option_value
                         000102 system_area_ptr             pa_get_option_value
                         000104 nargs                       pa_get_option_value
                         000106 arg_list_ptr                pa_get_option_value
                         000110 arg_list_arg_count          pa_get_option_value
                         000111 number_of_option_values_requested
                                                            pa_get_option_value
                         000112 option_name_identifier      pa_get_option_value
                         000113 vhbu_number_of_vectors      pa_get_option_value
                         000114 vector_has_been_used_ptr    pa_get_option_value
                         000116 option_idx                  pa_get_option_value
                         000117 option_name_arg_idx         pa_get_option_value
                         000120 option_variable_arg_idx     pa_get_option_value
                         000121 type                        pa_get_option_value
                         000122 packed                      pa_get_option_value
                         000123 ndims                       pa_get_option_value
                         000124 size                        pa_get_option_value
                         000125 scale                       pa_get_option_value
                         000126 option_name_ptr             pa_get_option_value
                         000130 option_name_length          pa_get_option_value
                         000131 current_option_vector_idx   pa_get_option_value
                         000132 option_value_ptr            pa_get_option_value
                         000134 data_ptr                    pa_get_option_value
                         000136 char_data_length            pa_get_option_value
                         000137 vchar_data_length           pa_get_option_value
                         000140 option_value_link_ptr       pa_get_option_value
                         000142 root_option_value_link_ptr  pa_get_option_value
                         000144 previous_option_value_link_ptr
                                                            pa_get_option_value
                         000146 next_option_value_link_ptr  pa_get_option_value
                         000150 value_idx                   pa_get_option_value
                         000160 print_vector_array_ptr      pa_get_option_value
                         000162 option_value_list_ptr       pa_get_option_value
                         000164 ovl_number_of_values        pa_get_option_value
                         000212 cti_integer                 CONVERT_TO_INTEGER
                         000213 cti_code                    CONVERT_TO_INTEGER

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        call_int_this_desc  call_int_this       call_int_other
return_mac          mdfx1               signal_op           enable_op           shorten_stack       ext_entry_desc
int_entry           int_entry_desc      signal_stringsize   op_alloc_           op_freen_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_count                 cu_$arg_list_ptr              cv_dec_check_                 decode_descriptor_
get_system_free_area_         requote_string_               requote_string_               sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$too_few_args     error_table_$unimplemented_version
sys_info$max_seg_size




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000541        48 000560        49 000562        50 000563        51 000564        52 000565        53 000566
     55 000567        57 000570        58 000571        61 000572        62 000573        64 000574        68 000575
     69 000576        71 000577        72 000600        73 000601        75 000602        77 000603        79 000604
     83 000605        85 000606        88 000607        89 000610        91 000611        92 000612        94 000613
     96 000614        99 000615    4   28 000616    4   29 000617       186 000620       187 000624       188 000627
    190 000635       192 000662       194 000704       195 000716       196 000720       199 000727       201 000767
    207 001036       209 001042       211 001071       212 001075       213 001102       215 001111       223 001167
    225 001175       227 001205       228 001211       230 001213       231 001236       237 001315       238 001322
    240 001332       242 001334       244 001336       248 001407       252 001414       253 001422       255 001445
    257 001452       261 001455       262 001457       265 001462       267 001467       270 001470       273 001475
    274 001476       278 001500       279 001502       280 001504       283 001507       285 001521       288 001522
    291 001534       292 001535       296 001542       298 001577       299 001621       300 001622       304 001625
    306 001661       307 001703       308 001704       312 001706       313 001717       314 001720       315 001722
    317 001724       320 001776       322 002006       323 002010       324 002021       325 002022       326 002023
    327 002025       328 002027       332 002101       338 002104       339 002115       340 002120       341 002122
    342 002131       343 002134       344 002140       346 002145       348 002146       350 002150       352 002162
    354 002164       355 002165       361 002237       363 002241       364 002245       366 002246       372 002257
    378 002341       380 002342       389 002356       391 002421       392 002423       397 002516       398 002522
    400 002523       416 002537       420 002541       423 002555       426 002571       429 002620       432 002644
    433 002646       439 002717       442 002741       443 002743       444 002745       446 002751       447 002763
    450 002764       452 002771       453 002773       456 002775       458 002776       462 003007       465 003052
    468 003112       472 003241       474 003246       483 003257       484 003311       490 003476       493 003503
    495 003511       498 003516       499 003520       500 003522       501 003527       502 003531       503 003533
    504 003537       506 003540       508 003546


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
