	COMPILATION LISTING OF SEGMENT !BBBJWBWzKwbcwL
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/12/86  1701.3 mst Wed
	    Options: table map

        1 /* ******************************************************
        2*   *                                                    *
        3*   * Copyright (c) 1986 by Massachusetts Institute of   *
        4*   * Technology and Honeywell Information Systems, Inc. *
        5*   *                                                    *
        6*   * Copyright (c) 1972 by Massachusetts Institute of   *
        7*   * Technology and Honeywell Information Systems, Inc. *
        8*   *                                                    *
        9*   ****************************************************** */
       10 
       11 
       12 
       13 /* HISTORY COMMENTS:
       14*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
       15*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
       16*     Added information concerning new pascal_string_type_dtype.
       17*                                                   END HISTORY COMMENTS */
       18 
       19 
       20 data_type_info_: proc;
       21 
       22 /* Calls create_data_segment_ to create the data segment data_type_info_
       23*   which gives attributes of all data types used in Multics.
       24*
       25*   James R. Davis 6 Apr 79
       26*   JRD 16 Oct 79 for new COBOL type 40
       27*   JRD 10 Nov 80 MCR 4503 (I forgot to zero the pad fields)
       28*   MBW 31 July 1981 to add algol68 data types
       29*   JMAthane June 83 to add new PASCAL types and "type" bit in info.
       30*   S. Herbst 01/23/84 Added types 47-50, 81-86, "hex" and "generic" bits.
       31*   JMAthane June 85. Added type 87 (pascal string type dtype)
       32**/
       33 
       34 	dcl     create_data_segment_	 entry (ptr, fixed bin (35));
       35 
       36 	dcl     1 dti_struc		 aligned,
       37 		2 version_number	 fixed bin,
       38 		2 info,				/* extra level because of cds restriction! */
       39 		  3 real_info	 (87) like data_type_info_$info,
       40 		2 ninebit_sign_chars char (2),
       41 		2 ninebit_digit_chars char (10),
       42 		2 ninebit_overpunched_sign_chars char (22),
       43 		2 max_decimal_precision fixed bin,
       44 		2 max_float_binary_precision fixed bin,
       45 		2 max_fixed_binary_precision fixed bin;
       46 
       47 	dcl     1 cdsa		 aligned automatic internal like cds_args;
       48 
       49 	dcl     (addr, hbound, null, size, string, unspec) builtin;
       50 	dcl     code		 fixed bin (35);
       51 	dcl     com_err_		 entry options (variable);
       52 	dcl     exclude		 (1) char (32) static internal options (constant) init ("highest");
       53 
       54 
       55 	call fillin;
       56 	call init_cds_struc;
       57 	call create_data_segment_ (addr (cdsa), code);
       58 	if code ^= 0 then call com_err_ (code, "make_dti");
       59 	return;
       60 
       61 fillin: proc;
       62 	dcl     (Y		 init ("1"b),
       63 	        N			 init ("0"b)) bit (1) aligned internal static options (constant);
       64 	dti_struc.version_number = 1;
       65 	dti_struc.ninebit_sign_chars = "+-";
       66 	dti_struc.ninebit_digit_chars = "0123456789";
       67 	dti_struc.ninebit_overpunched_sign_chars = "{}ABCDEFGHIJKLMNOPQR";
       68 
       69 	dti_struc.max_decimal_precision = 59;
       70 	dti_struc.max_float_binary_precision = 63;
       71 	dti_struc.max_fixed_binary_precision = 71;
       72 
       73 	dti_struc.info.real_info (*) = "0"b;
       74 
       75 	info (1).computational = Y;
       76 	info (1).arithmetic = Y;
       77 	info (1).fixed = Y;
       78 	info (1).complex = N;
       79 	info (1).decimal = N;
       80 	info (1).signed = Y;
       81 	info (1).trailing_sign = N;
       82 	info (1).packed_dec = N;
       83 	info (1).digit_aligned = N;
       84 	info (1).overpunched = N;
       85 	info (1).char_string = N;
       86 	info (1).bit_string = N;
       87 	info (1).varying = N;
       88 	info (1).type = N;
       89 	info (1).hex = N;
       90 	info (1).generic = N;
       91 
       92 	info (2).computational = Y;
       93 	info (2).arithmetic = Y;
       94 	info (2).fixed = Y;
       95 	info (2).complex = N;
       96 	info (2).decimal = N;
       97 	info (2).signed = Y;
       98 	info (2).trailing_sign = N;
       99 	info (2).packed_dec = N;
      100 	info (2).digit_aligned = N;
      101 	info (2).overpunched = N;
      102 	info (2).char_string = N;
      103 	info (2).bit_string = N;
      104 	info (2).varying = N;
      105 	info (2).type = N;
      106 	info (2).hex = N;
      107 	info (2).generic = N;
      108 
      109 	info (3).computational = Y;
      110 	info (3).arithmetic = Y;
      111 	info (3).fixed = N;
      112 	info (3).complex = N;
      113 	info (3).decimal = N;
      114 	info (3).signed = Y;
      115 	info (3).trailing_sign = N;
      116 	info (3).packed_dec = N;
      117 	info (3).digit_aligned = N;
      118 	info (3).overpunched = N;
      119 	info (3).char_string = N;
      120 	info (3).bit_string = N;
      121 	info (3).varying = N;
      122 	info (3).type = N;
      123 	info (3).hex = N;
      124 	info (3).generic = N;
      125 
      126 	info (4).computational = Y;
      127 	info (4).arithmetic = Y;
      128 	info (4).fixed = N;
      129 	info (4).complex = N;
      130 	info (4).decimal = N;
      131 	info (4).signed = Y;
      132 	info (4).trailing_sign = N;
      133 	info (4).packed_dec = N;
      134 	info (4).digit_aligned = N;
      135 	info (4).overpunched = N;
      136 	info (4).char_string = N;
      137 	info (4).bit_string = N;
      138 	info (4).varying = N;
      139 	info (4).type = N;
      140 	info (4).hex = N;
      141 	info (4).generic = N;
      142 
      143 	info (5).computational = Y;
      144 	info (5).arithmetic = Y;
      145 	info (5).fixed = Y;
      146 	info (5).complex = Y;
      147 	info (5).decimal = N;
      148 	info (5).signed = Y;
      149 	info (5).trailing_sign = N;
      150 	info (5).packed_dec = N;
      151 	info (5).digit_aligned = N;
      152 	info (5).overpunched = N;
      153 	info (5).char_string = N;
      154 	info (5).bit_string = N;
      155 	info (5).varying = N;
      156 	info (5).type = N;
      157 	info (5).hex = N;
      158 	info (5).generic = N;
      159 
      160 	info (6).computational = Y;
      161 	info (6).arithmetic = Y;
      162 	info (6).fixed = Y;
      163 	info (6).complex = Y;
      164 	info (6).decimal = N;
      165 	info (6).signed = Y;
      166 	info (6).trailing_sign = N;
      167 	info (6).packed_dec = N;
      168 	info (6).digit_aligned = N;
      169 	info (6).overpunched = N;
      170 	info (6).char_string = N;
      171 	info (6).bit_string = N;
      172 	info (6).varying = N;
      173 	info (6).type = N;
      174 	info (6).hex = N;
      175 	info (6).generic = N;
      176 
      177 	info (7).computational = Y;
      178 	info (7).arithmetic = Y;
      179 	info (7).fixed = N;
      180 	info (7).complex = Y;
      181 	info (7).decimal = N;
      182 	info (7).signed = Y;
      183 	info (7).trailing_sign = N;
      184 	info (7).packed_dec = N;
      185 	info (7).digit_aligned = N;
      186 	info (7).overpunched = N;
      187 	info (7).char_string = N;
      188 	info (7).bit_string = N;
      189 	info (7).varying = N;
      190 	info (7).type = N;
      191 	info (7).hex = N;
      192 	info (7).generic = N;
      193 
      194 	info (8).computational = Y;
      195 	info (8).arithmetic = Y;
      196 	info (8).fixed = N;
      197 	info (8).complex = Y;
      198 	info (8).decimal = N;
      199 	info (8).signed = Y;
      200 	info (8).trailing_sign = N;
      201 	info (8).packed_dec = N;
      202 	info (8).digit_aligned = N;
      203 	info (8).overpunched = N;
      204 	info (8).char_string = N;
      205 	info (8).bit_string = N;
      206 	info (8).varying = N;
      207 	info (8).type = N;
      208 	info (8).hex = N;
      209 	info (8).generic = N;
      210 
      211 	info (9).computational = Y;
      212 	info (9).arithmetic = Y;
      213 	info (9).fixed = Y;
      214 	info (9).complex = N;
      215 	info (9).decimal = Y;
      216 	info (9).signed = Y;
      217 	info (9).trailing_sign = N;
      218 	info (9).packed_dec = N;
      219 	info (9).digit_aligned = N;
      220 	info (9).overpunched = N;
      221 	info (9).char_string = N;
      222 	info (9).bit_string = N;
      223 	info (9).varying = N;
      224 	info (9).type = N;
      225 	info (9).hex = N;
      226 	info (9).generic = N;
      227 
      228 	info (10).computational = Y;
      229 	info (10).arithmetic = Y;
      230 	info (10).fixed = N;
      231 	info (10).complex = N;
      232 	info (10).decimal = Y;
      233 	info (10).signed = Y;
      234 	info (10).trailing_sign = N;
      235 	info (10).packed_dec = N;
      236 	info (10).digit_aligned = N;
      237 	info (10).overpunched = N;
      238 	info (10).char_string = N;
      239 	info (10).bit_string = N;
      240 	info (10).varying = N;
      241 	info (10).type = N;
      242 	info (10).hex = N;
      243 	info (10).generic = N;
      244 
      245 	info (11).computational = Y;
      246 	info (11).arithmetic = Y;
      247 	info (11).fixed = Y;
      248 	info (11).complex = Y;
      249 	info (11).decimal = Y;
      250 	info (11).signed = Y;
      251 	info (11).trailing_sign = N;
      252 	info (11).packed_dec = N;
      253 	info (11).digit_aligned = N;
      254 	info (11).overpunched = N;
      255 	info (11).char_string = N;
      256 	info (11).bit_string = N;
      257 	info (11).varying = N;
      258 	info (11).type = N;
      259 	info (11).hex = N;
      260 	info (11).generic = N;
      261 
      262 	info (12).computational = Y;
      263 	info (12).arithmetic = Y;
      264 	info (12).fixed = N;
      265 	info (12).complex = Y;
      266 	info (12).decimal = Y;
      267 	info (12).signed = Y;
      268 	info (12).trailing_sign = N;
      269 	info (12).packed_dec = N;
      270 	info (12).digit_aligned = N;
      271 	info (12).overpunched = N;
      272 	info (12).char_string = N;
      273 	info (12).bit_string = N;
      274 	info (12).varying = N;
      275 	info (12).type = N;
      276 	info (12).hex = N;
      277 	info (12).generic = N;
      278 
      279 	info (13).computational = N;
      280 	info (13).arithmetic = N;
      281 	info (13).fixed = N;
      282 	info (13).complex = N;
      283 	info (13).decimal = N;
      284 	info (13).signed = N;
      285 	info (13).trailing_sign = N;
      286 	info (13).packed_dec = N;
      287 	info (13).digit_aligned = N;
      288 	info (13).overpunched = N;
      289 	info (13).char_string = N;
      290 	info (13).bit_string = N;
      291 	info (13).varying = N;
      292 	info (13).type = N;
      293 	info (13).hex = N;
      294 	info (13).generic = N;
      295 
      296 	info (14).computational = N;
      297 	info (14).arithmetic = N;
      298 	info (14).fixed = N;
      299 	info (14).complex = N;
      300 	info (14).decimal = N;
      301 	info (14).signed = N;
      302 	info (14).trailing_sign = N;
      303 	info (14).packed_dec = N;
      304 	info (14).digit_aligned = N;
      305 	info (14).overpunched = N;
      306 	info (14).char_string = N;
      307 	info (14).bit_string = N;
      308 	info (14).varying = N;
      309 	info (14).type = N;
      310 	info (14).hex = N;
      311 	info (14).generic = N;
      312 
      313 	info (15).computational = N;
      314 	info (15).arithmetic = N;
      315 	info (15).fixed = N;
      316 	info (15).complex = N;
      317 	info (15).decimal = N;
      318 	info (15).signed = N;
      319 	info (15).trailing_sign = N;
      320 	info (15).packed_dec = N;
      321 	info (15).digit_aligned = N;
      322 	info (15).overpunched = N;
      323 	info (15).char_string = N;
      324 	info (15).bit_string = N;
      325 	info (15).varying = N;
      326 	info (15).type = N;
      327 	info (15).hex = N;
      328 	info (15).generic = N;
      329 
      330 	info (16).computational = N;
      331 	info (16).arithmetic = N;
      332 	info (16).fixed = N;
      333 	info (16).complex = N;
      334 	info (16).decimal = N;
      335 	info (16).signed = N;
      336 	info (16).trailing_sign = N;
      337 	info (16).packed_dec = N;
      338 	info (16).digit_aligned = N;
      339 	info (16).overpunched = N;
      340 	info (16).char_string = N;
      341 	info (16).bit_string = N;
      342 	info (16).varying = N;
      343 	info (16).type = N;
      344 	info (16).hex = N;
      345 	info (16).generic = N;
      346 
      347 	info (17).computational = N;
      348 	info (17).arithmetic = N;
      349 	info (17).fixed = N;
      350 	info (17).complex = N;
      351 	info (17).decimal = N;
      352 	info (17).signed = N;
      353 	info (17).trailing_sign = N;
      354 	info (17).packed_dec = N;
      355 	info (17).digit_aligned = N;
      356 	info (17).overpunched = N;
      357 	info (17).char_string = N;
      358 	info (17).bit_string = N;
      359 	info (17).varying = N;
      360 	info (17).type = N;
      361 	info (17).hex = N;
      362 	info (17).generic = N;
      363 
      364 	info (18).computational = N;
      365 	info (18).arithmetic = N;
      366 	info (18).fixed = N;
      367 	info (18).complex = N;
      368 	info (18).decimal = N;
      369 	info (18).signed = N;
      370 	info (18).trailing_sign = N;
      371 	info (18).packed_dec = N;
      372 	info (18).digit_aligned = N;
      373 	info (18).overpunched = N;
      374 	info (18).char_string = N;
      375 	info (18).bit_string = N;
      376 	info (18).varying = N;
      377 	info (18).type = N;
      378 	info (18).hex = N;
      379 	info (18).generic = N;
      380 
      381 	info (19).computational = Y;
      382 	info (19).arithmetic = N;
      383 	info (19).fixed = N;
      384 	info (19).complex = N;
      385 	info (19).decimal = N;
      386 	info (19).signed = N;
      387 	info (19).trailing_sign = N;
      388 	info (19).packed_dec = N;
      389 	info (19).digit_aligned = N;
      390 	info (19).overpunched = N;
      391 	info (19).char_string = N;
      392 	info (19).bit_string = Y;
      393 	info (19).varying = N;
      394 	info (19).type = N;
      395 	info (19).hex = N;
      396 	info (19).generic = N;
      397 
      398 	info (20).computational = Y;
      399 	info (20).arithmetic = N;
      400 	info (20).fixed = N;
      401 	info (20).complex = N;
      402 	info (20).decimal = N;
      403 	info (20).signed = N;
      404 	info (20).trailing_sign = N;
      405 	info (20).packed_dec = N;
      406 	info (20).digit_aligned = N;
      407 	info (20).overpunched = N;
      408 	info (20).char_string = N;
      409 	info (20).bit_string = Y;
      410 	info (20).varying = Y;
      411 	info (20).type = N;
      412 	info (20).hex = N;
      413 	info (20).generic = N;
      414 
      415 	info (21).computational = Y;
      416 	info (21).arithmetic = N;
      417 	info (21).fixed = N;
      418 	info (21).complex = N;
      419 	info (21).decimal = N;
      420 	info (21).signed = N;
      421 	info (21).trailing_sign = N;
      422 	info (21).packed_dec = N;
      423 	info (21).digit_aligned = N;
      424 	info (21).overpunched = N;
      425 	info (21).char_string = Y;
      426 	info (21).bit_string = N;
      427 	info (21).varying = N;
      428 	info (21).type = N;
      429 	info (21).hex = N;
      430 	info (21).generic = N;
      431 
      432 	info (22).computational = Y;
      433 	info (22).arithmetic = N;
      434 	info (22).fixed = N;
      435 	info (22).complex = N;
      436 	info (22).decimal = N;
      437 	info (22).signed = N;
      438 	info (22).trailing_sign = N;
      439 	info (22).packed_dec = N;
      440 	info (22).digit_aligned = N;
      441 	info (22).overpunched = N;
      442 	info (22).char_string = Y;
      443 	info (22).bit_string = N;
      444 	info (22).varying = Y;
      445 	info (22).type = N;
      446 	info (22).hex = N;
      447 	info (22).generic = N;
      448 
      449 	info (23).computational = N;
      450 	info (23).arithmetic = N;
      451 	info (23).fixed = N;
      452 	info (23).complex = N;
      453 	info (23).decimal = N;
      454 	info (23).signed = N;
      455 	info (23).trailing_sign = N;
      456 	info (23).packed_dec = N;
      457 	info (23).digit_aligned = N;
      458 	info (23).overpunched = N;
      459 	info (23).char_string = N;
      460 	info (23).bit_string = N;
      461 	info (23).varying = N;
      462 	info (23).type = N;
      463 	info (23).hex = N;
      464 	info (23).generic = N;
      465 
      466 	info (24).computational = N;			/* not used */
      467 	info (24).arithmetic = N;
      468 	info (24).fixed = N;
      469 	info (24).complex = N;
      470 	info (24).decimal = N;
      471 	info (24).signed = N;
      472 	info (24).trailing_sign = N;
      473 	info (24).packed_dec = N;
      474 	info (24).digit_aligned = N;
      475 	info (24).overpunched = N;
      476 	info (24).char_string = N;
      477 	info (24).bit_string = N;
      478 	info (24).varying = N;
      479 	info (24).type = N;
      480 	info (24).hex = N;
      481 	info (24).generic = N;
      482 
      483 	info (25).computational = N;			/* not used */
      484 	info (25).arithmetic = N;
      485 	info (25).fixed = N;
      486 	info (25).complex = N;
      487 	info (25).decimal = N;
      488 	info (25).signed = N;
      489 	info (25).trailing_sign = N;
      490 	info (25).packed_dec = N;
      491 	info (25).digit_aligned = N;
      492 	info (25).overpunched = N;
      493 	info (25).char_string = N;
      494 	info (25).bit_string = N;
      495 	info (25).varying = N;
      496 	info (25).type = N;
      497 	info (25).hex = N;
      498 	info (25).generic = N;
      499 
      500 	info (26).computational = N;			/* not used */
      501 	info (26).arithmetic = N;
      502 	info (26).fixed = N;
      503 	info (26).complex = N;
      504 	info (26).decimal = N;
      505 	info (26).signed = N;
      506 	info (26).trailing_sign = N;
      507 	info (26).packed_dec = N;
      508 	info (26).digit_aligned = N;
      509 	info (26).overpunched = N;
      510 	info (26).char_string = N;
      511 	info (26).bit_string = N;
      512 	info (26).varying = N;
      513 	info (26).type = N;
      514 	info (26).hex = N;
      515 	info (26).generic = N;
      516 
      517 	info (27).computational = N;			/* not used */
      518 	info (27).arithmetic = N;
      519 	info (27).fixed = N;
      520 	info (27).complex = N;
      521 	info (27).decimal = N;
      522 	info (27).signed = N;
      523 	info (27).trailing_sign = N;
      524 	info (27).packed_dec = N;
      525 	info (27).digit_aligned = N;
      526 	info (27).overpunched = N;
      527 	info (27).char_string = N;
      528 	info (27).bit_string = N;
      529 	info (27).varying = N;
      530 	info (27).type = N;
      531 	info (27).hex = N;
      532 	info (27).generic = N;
      533 
      534 	info (28).computational = N;			/* not used */
      535 	info (28).arithmetic = N;
      536 	info (28).fixed = N;
      537 	info (28).complex = N;
      538 	info (28).decimal = N;
      539 	info (28).signed = N;
      540 	info (28).trailing_sign = N;
      541 	info (28).packed_dec = N;
      542 	info (28).digit_aligned = N;
      543 	info (28).overpunched = N;
      544 	info (28).char_string = N;
      545 	info (28).bit_string = N;
      546 	info (28).varying = N;
      547 	info (28).type = N;
      548 	info (28).hex = N;
      549 	info (28).generic = N;
      550 
      551 	info (29).computational = Y;
      552 	info (29).arithmetic = Y;
      553 	info (29).fixed = Y;
      554 	info (29).complex = N;
      555 	info (29).decimal = Y;
      556 	info (29).signed = Y;
      557 	info (29).trailing_sign = N;
      558 	info (29).packed_dec = N;
      559 	info (29).digit_aligned = N;
      560 	info (29).overpunched = Y;
      561 	info (29).char_string = N;
      562 	info (29).bit_string = N;
      563 	info (29).varying = N;
      564 	info (29).type = N;
      565 	info (29).hex = N;
      566 	info (29).generic = N;
      567 
      568 	info (30).computational = Y;
      569 	info (30).arithmetic = Y;
      570 	info (30).fixed = Y;
      571 	info (30).complex = N;
      572 	info (30).decimal = Y;
      573 	info (30).signed = Y;
      574 	info (30).trailing_sign = Y;
      575 	info (30).packed_dec = N;
      576 	info (30).digit_aligned = N;
      577 	info (30).overpunched = Y;
      578 	info (30).char_string = N;
      579 	info (30).bit_string = N;
      580 	info (30).varying = N;
      581 	info (30).type = N;
      582 	info (30).hex = N;
      583 	info (30).generic = N;
      584 
      585 	info (31).computational = N;			/* not used */
      586 	info (31).arithmetic = N;
      587 	info (31).fixed = N;
      588 	info (31).complex = N;
      589 	info (31).decimal = N;
      590 	info (31).signed = N;
      591 	info (31).trailing_sign = N;
      592 	info (31).packed_dec = N;
      593 	info (31).digit_aligned = N;
      594 	info (31).overpunched = N;
      595 	info (31).char_string = N;
      596 	info (31).bit_string = N;
      597 	info (31).varying = N;
      598 	info (31).type = N;
      599 	info (31).hex = N;	
      600 	info (31).generic = N;
      601 
      602 	info (32).computational = N;			/* not used */
      603 	info (32).arithmetic = N;
      604 	info (32).fixed = N;
      605 	info (32).complex = N;
      606 	info (32).decimal = N;
      607 	info (32).signed = N;
      608 	info (32).trailing_sign = N;
      609 	info (32).packed_dec = N;
      610 	info (32).digit_aligned = N;
      611 	info (32).overpunched = N;
      612 	info (32).char_string = N;
      613 	info (32).bit_string = N;
      614 	info (32).varying = N;
      615 	info (32).type = N;
      616 	info (32).hex = N;
      617 	info (32).generic = N;
      618 
      619 	info (33).computational = Y;
      620 	info (33).arithmetic = Y;
      621 	info (33).fixed = Y;
      622 	info (33).complex = N;
      623 	info (33).decimal = N;
      624 	info (33).signed = N;
      625 	info (33).trailing_sign = N;
      626 	info (33).packed_dec = N;
      627 	info (33).digit_aligned = N;
      628 	info (33).overpunched = N;
      629 	info (33).char_string = N;
      630 	info (33).bit_string = N;
      631 	info (33).varying = N;
      632 	info (33).type = N;
      633 	info (33).hex = N;
      634 	info (33).generic = N;
      635 
      636 	info (34).computational = Y;
      637 	info (34).arithmetic = Y;
      638 	info (34).fixed = Y;
      639 	info (34).complex = N;
      640 	info (34).decimal = N;
      641 	info (34).signed = N;
      642 	info (34).trailing_sign = N;
      643 	info (34).packed_dec = N;
      644 	info (34).digit_aligned = N;
      645 	info (34).overpunched = N;
      646 	info (34).char_string = N;
      647 	info (34).bit_string = N;
      648 	info (34).varying = N;
      649 	info (34).type = N;
      650 	info (34).hex = N;
      651 	info (34).generic = N;
      652 
      653 	info (35).computational = Y;
      654 	info (35).arithmetic = Y;
      655 	info (35).fixed = Y;
      656 	info (35).complex = N;
      657 	info (35).decimal = Y;
      658 	info (35).signed = N;
      659 	info (35).trailing_sign = N;
      660 	info (35).packed_dec = N;
      661 	info (35).digit_aligned = N;
      662 	info (35).overpunched = N;
      663 	info (35).char_string = N;
      664 	info (35).bit_string = N;
      665 	info (35).varying = N;
      666 	info (35).type = N;
      667 	info (35).hex = N;
      668 	info (35).generic = N;
      669 
      670 	info (36).computational = Y;
      671 	info (36).arithmetic = Y;
      672 	info (36).fixed = Y;
      673 	info (36).complex = N;
      674 	info (36).decimal = Y;
      675 	info (36).signed = Y;
      676 	info (36).trailing_sign = Y;
      677 	info (36).packed_dec = N;
      678 	info (36).digit_aligned = N;
      679 	info (36).overpunched = N;
      680 	info (36).char_string = N;
      681 	info (36).bit_string = N;
      682 	info (36).varying = N;
      683 	info (36).type = N;
      684 	info (36).hex = N;
      685 	info (36).generic = N;
      686 
      687 	info (37).computational = N;			/* not used */
      688 	info (37).arithmetic = N;
      689 	info (37).fixed = N;
      690 	info (37).complex = N;
      691 	info (37).decimal = N;
      692 	info (37).signed = N;
      693 	info (37).trailing_sign = N;
      694 	info (37).packed_dec = N;
      695 	info (37).digit_aligned = N;
      696 	info (37).overpunched = N;
      697 	info (37).char_string = N;
      698 	info (37).bit_string = N;
      699 	info (37).varying = N;
      700 	info (37).type = N;
      701 	info (37).hex = N;
      702 	info (37).generic = N;
      703 
      704 	info (38).computational = Y;
      705 	info (38).arithmetic = Y;
      706 	info (38).fixed = Y;
      707 	info (38).complex = N;
      708 	info (38).decimal = Y;
      709 	info (38).signed = N;
      710 	info (38).trailing_sign = N;
      711 	info (38).packed_dec = Y;
      712 	info (38).digit_aligned = Y;
      713 	info (38).overpunched = N;
      714 	info (38).char_string = N;
      715 	info (38).bit_string = N;
      716 	info (38).varying = N;
      717 	info (38).type = N;
      718 	info (38).hex = N;
      719 	info (38).generic = N;
      720 
      721 	info (39).computational = Y;
      722 	info (39).arithmetic = Y;
      723 	info (39).fixed = Y;
      724 	info (39).complex = N;
      725 	info (39).decimal = Y;
      726 	info (39).signed = Y;
      727 	info (39).trailing_sign = Y;
      728 	info (39).packed_dec = Y;
      729 	info (39).digit_aligned = N;
      730 	info (39).overpunched = N;
      731 	info (39).char_string = N;
      732 	info (39).bit_string = N;
      733 	info (39).varying = N;
      734 	info (39).type = N;
      735 	info (39).hex = N;
      736 	info (39).generic = N;
      737 
      738 	info (40).computational = Y;			/* comp-5 unsigned byte aligned */
      739 	info (40).arithmetic = Y;
      740 	info (40).fixed = Y;
      741 	info (40).complex = N;
      742 	info (40).decimal = Y;
      743 	info (40).signed = N;
      744 	info (40).trailing_sign = N;
      745 	info (40).packed_dec = Y;
      746 	info (40).digit_aligned = N;
      747 	info (40).overpunched = N;
      748 	info (40).char_string = N;
      749 	info (40).bit_string = N;
      750 	info (40).varying = N;
      751 	info (40).type = N;
      752 	info (40).hex = N;
      753 	info (40).generic = N;
      754 
      755 	info (41).computational = Y;
      756 	info (41).arithmetic = Y;
      757 	info (41).fixed = Y;
      758 	info (41).complex = N;
      759 	info (41).decimal = Y;
      760 	info (41).signed = Y;
      761 	info (41).trailing_sign = N;
      762 	info (41).packed_dec = Y;
      763 	info (41).digit_aligned = Y;
      764 	info (41).overpunched = N;
      765 	info (41).char_string = N;
      766 	info (41).bit_string = N;
      767 	info (41).varying = N;
      768 	info (41).type = N;
      769 	info (41).hex = N;
      770 	info (41).generic = N;
      771 
      772 	info (42).computational = Y;
      773 	info (42).arithmetic = Y;
      774 	info (42).fixed = N;
      775 	info (42).complex = N;
      776 	info (42).decimal = Y;
      777 	info (42).signed = Y;
      778 	info (42).trailing_sign = N;
      779 	info (42).packed_dec = Y;
      780 	info (42).digit_aligned = Y;
      781 	info (42).overpunched = N;
      782 	info (42).char_string = N;
      783 	info (42).bit_string = N;
      784 	info (42).varying = N;
      785 	info (42).type = N;
      786 	info (42).hex = N;
      787 	info (42).generic = N;
      788 
      789 	info (43).computational = Y;
      790 	info (43).arithmetic = Y;
      791 	info (43).fixed = Y;
      792 	info (43).complex = N;
      793 	info (43).decimal = Y;
      794 	info (43).signed = Y;
      795 	info (43).trailing_sign = N;
      796 	info (43).packed_dec = Y;
      797 	info (43).digit_aligned = N;
      798 	info (43).overpunched = N;
      799 	info (43).char_string = N;
      800 	info (43).bit_string = N;
      801 	info (43).varying = N;
      802 	info (43).type = N;
      803 	info (43).hex = N;
      804 	info (43).generic = N;
      805 
      806 	info (44).computational = Y;
      807 	info (44).arithmetic = Y;
      808 	info (44).fixed = N;
      809 	info (44).complex = N;
      810 	info (44).decimal = Y;
      811 	info (44).signed = Y;
      812 	info (44).trailing_sign = N;
      813 	info (44).packed_dec = Y;
      814 	info (44).digit_aligned = N;
      815 	info (44).overpunched = N;
      816 	info (44).char_string = N;
      817 	info (44).bit_string = N;
      818 	info (44).varying = N;
      819 	info (44).type = N;
      820 	info (44).hex = N;
      821 	info (44).generic = N;
      822 
      823 	info (45).computational = Y;
      824 	info (45).arithmetic = Y;
      825 	info (45).fixed = Y;
      826 	info (45).complex = Y;
      827 	info (45).decimal = Y;
      828 	info (45).signed = Y;
      829 	info (45).trailing_sign = N;
      830 	info (45).packed_dec = Y;
      831 	info (45).digit_aligned = N;
      832 	info (45).overpunched = N;
      833 	info (45).char_string = N;
      834 	info (45).bit_string = N;
      835 	info (45).varying = N;
      836 	info (45).type = N;
      837 	info (45).hex = N;
      838 	info (45).generic = N;
      839 
      840 	info (46).computational = Y;
      841 	info (46).arithmetic = Y;
      842 	info (46).fixed = N;
      843 	info (46).complex = Y;
      844 	info (46).decimal = Y;
      845 	info (46).signed = Y;
      846 	info (46).trailing_sign = N;
      847 	info (46).packed_dec = Y;
      848 	info (46).digit_aligned = N;
      849 	info (46).overpunched = N;
      850 	info (46).char_string = N;
      851 	info (46).bit_string = N;
      852 	info (46).varying = N;
      853 	info (46).type = N;
      854 	info (46).hex = N;
      855 	info (46).generic = N;
      856 
      857 	info (47).computational = Y;			/* real_flt_hex_1_dtype */
      858 	info (47).arithmetic = Y;
      859 	info (47).fixed = N;
      860 	info (47).complex = N;
      861 	info (47).decimal = N;
      862 	info (47).signed = Y;
      863 	info (47).trailing_sign = N;
      864 	info (47).packed_dec = N;
      865 	info (47).digit_aligned = N;
      866 	info (47).overpunched = N;
      867 	info (47).char_string = N;
      868 	info (47).bit_string = N;
      869 	info (47).varying = N;
      870 	info (47).type = N;
      871 	info (47).hex = Y;
      872 	info (47).generic = N;
      873 
      874 	info (48).computational = Y;			/* real_flt_hex_2_dtype */
      875 	info (48).arithmetic = Y;
      876 	info (48).fixed = N;
      877 	info (48).complex = N;
      878 	info (48).decimal = N;
      879 	info (48).signed = Y;
      880 	info (48).trailing_sign = N;
      881 	info (48).packed_dec = N;
      882 	info (48).digit_aligned = N;
      883 	info (48).overpunched = N;
      884 	info (48).char_string = N;
      885 	info (48).bit_string = N;
      886 	info (48).varying = N;
      887 	info (48).type = N;
      888 	info (48).hex = Y;
      889 	info (48).generic = N;
      890 
      891 	info (49).computational = Y;			/* cplx_flt_hex_1_dtype */
      892 	info (49).arithmetic = Y;
      893 	info (49).fixed = N;
      894 	info (49).complex = Y;
      895 	info (49).decimal = N;
      896 	info (49).signed = Y;
      897 	info (49).trailing_sign = N;
      898 	info (49).packed_dec = N;
      899 	info (49).digit_aligned = N;
      900 	info (49).overpunched = N;
      901 	info (49).char_string = N;
      902 	info (49).bit_string = N;
      903 	info (49).varying = N;
      904 	info (49).type = N;
      905 	info (49).hex = Y;
      906 	info (49).generic = N;
      907 
      908 	info (50).computational = Y;			/* cplx_flt_hex_2_dtype */
      909 	info (50).arithmetic = Y;
      910 	info (50).fixed = N;
      911 	info (50).complex = Y;
      912 	info (50).decimal = N;
      913 	info (50).signed = Y;
      914 	info (50).trailing_sign = N;
      915 	info (50).packed_dec = N;
      916 	info (50).digit_aligned = N;
      917 	info (50).overpunched = N;
      918 	info (50).char_string = N;
      919 	info (50).bit_string = N;
      920 	info (50).varying = N;
      921 	info (50).type = N;
      922 	info (50).hex = Y;
      923 	info (50).generic = N;
      924 
      925 	info (51).computational = N;			/* not used */
      926 	info (51).arithmetic = N;
      927 	info (51).fixed = N;
      928 	info (51).complex = N;
      929 	info (51).decimal = N;
      930 	info (51).signed = N;
      931 	info (51).trailing_sign = N;
      932 	info (51).packed_dec = N;
      933 	info (51).digit_aligned = N;
      934 	info (51).overpunched = N;
      935 	info (51).char_string = N;
      936 	info (51).bit_string = N;
      937 	info (51).varying = N;
      938 	info (51).type = N;
      939 	info (51).hex = N;
      940 	info (51).generic = N;
      941 
      942 	info (52).computational = N;			/* not used */
      943 	info (52).arithmetic = N;
      944 	info (52).fixed = N;
      945 	info (52).complex = N;
      946 	info (52).decimal = N;
      947 	info (52).signed = N;
      948 	info (52).trailing_sign = N;
      949 	info (52).packed_dec = N;
      950 	info (52).digit_aligned = N;
      951 	info (52).overpunched = N;
      952 	info (52).char_string = N;
      953 	info (52).bit_string = N;
      954 	info (52).varying = N;
      955 	info (52).type = N;
      956 	info (52).hex = N;
      957 	info (52).generic = N;
      958 
      959 	info (53).computational = N;			/* not used */
      960 	info (53).arithmetic = N;
      961 	info (53).fixed = N;
      962 	info (53).complex = N;
      963 	info (53).decimal = N;
      964 	info (53).signed = N;
      965 	info (53).trailing_sign = N;
      966 	info (53).packed_dec = N;
      967 	info (53).digit_aligned = N;
      968 	info (53).overpunched = N;
      969 	info (53).char_string = N;
      970 	info (53).bit_string = N;
      971 	info (53).varying = N;
      972 	info (53).type = N;
      973 	info (53).hex = N;
      974 	info (53).generic = N;
      975 
      976 	info (54).computational = N;			/* not used */
      977 	info (54).arithmetic = N;
      978 	info (54).fixed = N;
      979 	info (54).complex = N;
      980 	info (54).decimal = N;
      981 	info (54).signed = N;
      982 	info (54).trailing_sign = N;
      983 	info (54).packed_dec = N;
      984 	info (54).digit_aligned = N;
      985 	info (54).overpunched = N;
      986 	info (54).char_string = N;
      987 	info (54).bit_string = N;
      988 	info (54).varying = N;
      989 	info (54).type = N;
      990 	info (54).hex = N;
      991 	info (54).generic = N;
      992 
      993 	info (55).computational = N;			/* not used */
      994 	info (55).arithmetic = N;
      995 	info (55).fixed = N;
      996 	info (55).complex = N;
      997 	info (55).decimal = N;
      998 	info (55).signed = N;
      999 	info (55).trailing_sign = N;
     1000 	info (55).packed_dec = N;
     1001 	info (55).digit_aligned = N;
     1002 	info (55).overpunched = N;
     1003 	info (55).char_string = N;
     1004 	info (55).bit_string = N;
     1005 	info (55).varying = N;
     1006 	info (55).type = N;
     1007 	info (55).hex = N;
     1008 	info (55).generic = N;
     1009 
     1010 	info (56).computational = N;			/* not used */
     1011 	info (56).arithmetic = N;
     1012 	info (56).fixed = N;
     1013 	info (56).complex = N;
     1014 	info (56).decimal = N;
     1015 	info (56).signed = N;
     1016 	info (56).trailing_sign = N;
     1017 	info (56).packed_dec = N;
     1018 	info (56).digit_aligned = N;
     1019 	info (56).overpunched = N;
     1020 	info (56).char_string = N;
     1021 	info (56).bit_string = N;
     1022 	info (56).varying = N;
     1023 	info (56).type = N;
     1024 	info (56).hex = N;
     1025 	info (56).generic = N;
     1026 
     1027 	info (57).computational = N;			/* not used */
     1028 	info (57).arithmetic = N;
     1029 	info (57).fixed = N;
     1030 	info (57).complex = N;
     1031 	info (57).decimal = N;
     1032 	info (57).signed = N;
     1033 	info (57).trailing_sign = N;
     1034 	info (57).packed_dec = N;
     1035 	info (57).digit_aligned = N;
     1036 	info (57).overpunched = N;
     1037 	info (57).char_string = N;
     1038 	info (57).bit_string = N;
     1039 	info (57).varying = N;
     1040 	info (57).type = N;
     1041 	info (57).hex = N;
     1042 	info (57).generic = N;
     1043 
     1044 	info (58).computational = N;			/* not used */
     1045 	info (58).arithmetic = N;
     1046 	info (58).fixed = N;
     1047 	info (58).complex = N;
     1048 	info (58).decimal = N;
     1049 	info (58).signed = N;
     1050 	info (58).trailing_sign = N;
     1051 	info (58).packed_dec = N;
     1052 	info (58).digit_aligned = N;
     1053 	info (58).overpunched = N;
     1054 	info (58).char_string = N;
     1055 	info (58).bit_string = N;
     1056 	info (58).varying = N;
     1057 	info (58).type = N;
     1058 	info (58).hex = N;
     1059 	info (58).generic = N;
     1060 
     1061 	info (59).computational = N;			/* algol68 straight */
     1062 	info (59).arithmetic = N;
     1063 	info (59).fixed = N;
     1064 	info (59).complex = N;
     1065 	info (59).decimal = N;
     1066 	info (59).signed = N;
     1067 	info (59).trailing_sign = N;
     1068 	info (59).packed_dec = N;
     1069 	info (59).digit_aligned = N;
     1070 	info (59).overpunched = N;
     1071 	info (59).char_string = N;
     1072 	info (59).bit_string = N;
     1073 	info (59).varying = N;
     1074 	info (59).type = N;
     1075 	info (59).hex = N;
     1076 	info (59).generic = N;
     1077 
     1078 	info (60).computational = N;			/* algol68 format */
     1079 	info (60).arithmetic = N;
     1080 	info (60).fixed = N;
     1081 	info (60).complex = N;
     1082 	info (60).decimal = N;
     1083 	info (60).signed = N;
     1084 	info (60).trailing_sign = N;
     1085 	info (60).packed_dec = N;
     1086 	info (60).digit_aligned = N;
     1087 	info (60).overpunched = N;
     1088 	info (60).char_string = N;
     1089 	info (60).bit_string = N;
     1090 	info (60).varying = N;
     1091 	info (60).type = N;
     1092 	info (60).hex = N;
     1093 	info (60).generic = N;
     1094 
     1095 	info (61).computational = N;			/* algol68 array descriptor */
     1096 	info (61).arithmetic = N;
     1097 	info (61).fixed = N;
     1098 	info (61).complex = N;
     1099 	info (61).decimal = N;
     1100 	info (61).signed = N;
     1101 	info (61).trailing_sign = N;
     1102 	info (61).packed_dec = N;
     1103 	info (61).digit_aligned = N;
     1104 	info (61).overpunched = N;
     1105 	info (61).char_string = N;
     1106 	info (61).bit_string = N;
     1107 	info (61).varying = N;
     1108 	info (61).type = N;
     1109 	info (61).hex = N;
     1110 	info (61).generic = N;
     1111 
     1112 	info (62).computational = N;			/* algol68 union */
     1113 	info (62).arithmetic = N;
     1114 	info (62).fixed = N;
     1115 	info (62).complex = N;
     1116 	info (62).decimal = N;
     1117 	info (62).signed = N;
     1118 	info (62).trailing_sign = N;
     1119 	info (62).packed_dec = N;
     1120 	info (62).digit_aligned = N;
     1121 	info (62).overpunched = N;
     1122 	info (62).char_string = N;
     1123 	info (62).bit_string = N;
     1124 	info (62).varying = N;
     1125 	info (62).type = N;
     1126 	info (62).hex = N;
     1127 	info (62).generic = N;
     1128 
     1129 	info (63).computational = Y;			/* picture */
     1130 	info (63).arithmetic = N;
     1131 	info (63).fixed = N;
     1132 	info (63).complex = N;
     1133 	info (63).decimal = N;
     1134 	info (63).signed = N;
     1135 	info (63).trailing_sign = N;
     1136 	info (63).packed_dec = N;
     1137 	info (63).digit_aligned = N;
     1138 	info (63).overpunched = N;
     1139 	info (63).char_string = N;
     1140 	info (63).bit_string = N;
     1141 	info (63).varying = N;
     1142 	info (63).type = N;
     1143 	info (63).hex = N;
     1144 	info (63).generic = N;
     1145 
     1146 	info (64).computational = N;			/* pascal_typed_pointer_type_dtype */
     1147 	info (64).arithmetic = N;
     1148 	info (64).fixed = N;
     1149 	info (64).complex = N;
     1150 	info (64).decimal = N;
     1151 	info (64).signed = N;
     1152 	info (64).trailing_sign = N;
     1153 	info (64).packed_dec = N;
     1154 	info (64).digit_aligned = N;
     1155 	info (64).overpunched = N;
     1156 	info (64).char_string = N;
     1157 	info (64).bit_string = N;
     1158 	info (64).varying = N;
     1159 	info (64).type = Y;
     1160 	info (64).hex = N;
     1161 	info (64).generic = N;
     1162 
     1163 	info (65).computational = N;			/* pascal_char_dtype */
     1164 	info (65).arithmetic = N;
     1165 	info (65).fixed = N;
     1166 	info (65).complex = N;
     1167 	info (65).decimal = N;
     1168 	info (65).signed = N;
     1169 	info (65).trailing_sign = N;
     1170 	info (65).packed_dec = N;
     1171 	info (65).digit_aligned = N;
     1172 	info (65).overpunched = N;
     1173 	info (65).char_string = N;
     1174 	info (65).bit_string = N;
     1175 	info (65).varying = N;
     1176 	info (65).type = N;
     1177 	info (65).hex = N;
     1178 	info (65).generic = N;
     1179 
     1180 	info (66).computational = N;			/*pascal_boolean_dtype*/
     1181 	info (66).arithmetic = N;
     1182 	info (66).fixed = N;
     1183 	info (66).complex = N;
     1184 	info (66).decimal = N;
     1185 	info (66).signed = N;
     1186 	info (66).trailing_sign = N;
     1187 	info (66).packed_dec = N;
     1188 	info (66).digit_aligned = N;
     1189 	info (66).overpunched = N;
     1190 	info (66).char_string = N;
     1191 	info (66).bit_string = N;
     1192 	info (66).varying = N;
     1193 	info (66).type = N;
     1194 	info (66).hex = N;
     1195 	info (66).generic = N;
     1196 
     1197 	info (67).computational = N;			/* pascal_record_file_type_dtype*/
     1198 	info (67).arithmetic = N;
     1199 	info (67).fixed = N;
     1200 	info (67).complex = N;
     1201 	info (67).decimal = N;
     1202 	info (67).signed = N;
     1203 	info (67).trailing_sign = N;
     1204 	info (67).packed_dec = N;
     1205 	info (67).digit_aligned = N;
     1206 	info (67).overpunched = N;
     1207 	info (67).char_string = N;
     1208 	info (67).bit_string = N;
     1209 	info (67).varying = N;
     1210 	info (67).type = Y;
     1211 	info (67).hex = N;
     1212 	info (67).generic = N;
     1213 
     1214 	info (68).computational = N;			/*pascal_record_type_dtype*/
     1215 	info (68).arithmetic = N;
     1216 	info (68).fixed = N;
     1217 	info (68).complex = N;
     1218 	info (68).decimal = N;
     1219 	info (68).signed = N;
     1220 	info (68).trailing_sign = N;
     1221 	info (68).packed_dec = N;
     1222 	info (68).digit_aligned = N;
     1223 	info (68).overpunched = N;
     1224 	info (68).char_string = N;
     1225 	info (68).bit_string = N;
     1226 	info (68).varying = N;
     1227 	info (68).type = Y;
     1228 	info (68).hex = N;
     1229 	info (68).generic = N;
     1230 
     1231 	info (69).computational = N;			/*pascal_set_type_dtype*/
     1232 	info (69).arithmetic = N;
     1233 	info (69).fixed = N;
     1234 	info (69).complex = N;
     1235 	info (69).decimal = N;
     1236 	info (69).signed = N;
     1237 	info (69).trailing_sign = N;
     1238 	info (69).packed_dec = N;
     1239 	info (69).digit_aligned = N;
     1240 	info (69).overpunched = N;
     1241 	info (69).char_string = N;
     1242 	info (69).bit_string = N;
     1243 	info (69).varying = N;
     1244 	info (69).type = Y;
     1245 	info (69).hex = N;
     1246 	info (69).generic = N;
     1247 
     1248 	info (70).computational = N;			/*pascal_enumerated_type_dtype*/
     1249 	info (70).arithmetic = N;
     1250 	info (70).fixed = N;
     1251 	info (70).complex = N;
     1252 	info (70).decimal = N;
     1253 	info (70).signed = N;
     1254 	info (70).trailing_sign = N;
     1255 	info (70).packed_dec = N;
     1256 	info (70).digit_aligned = N;
     1257 	info (70).overpunched = N;
     1258 	info (70).char_string = N;
     1259 	info (70).bit_string = N;
     1260 	info (70).varying = N;
     1261 	info (70).type = Y;
     1262 	info (70).hex = N;
     1263 	info (70).generic = N;
     1264 
     1265 	info (71).computational = N;			/*pascal_enumerated_type_element_dtype*/
     1266 	info (71).arithmetic = N;
     1267 	info (71).fixed = N;
     1268 	info (71).complex = N;
     1269 	info (71).decimal = N;
     1270 	info (71).signed = N;
     1271 	info (71).trailing_sign = N;
     1272 	info (71).packed_dec = N;
     1273 	info (71).digit_aligned = N;
     1274 	info (71).overpunched = N;
     1275 	info (71).char_string = N;
     1276 	info (71).bit_string = N;
     1277 	info (71).varying = N;
     1278 	info (71).type = N;
     1279 	info (71).hex = N;
     1280 	info (71).generic = N;
     1281 
     1282 	info (72).computational = N;			/*pascal_enumerated_type_instance_dtype*/
     1283 	info (72).arithmetic = N;
     1284 	info (72).fixed = N;
     1285 	info (72).complex = N;
     1286 	info (72).decimal = N;
     1287 	info (72).signed = N;
     1288 	info (72).trailing_sign = N;
     1289 	info (72).packed_dec = N;
     1290 	info (72).digit_aligned = N;
     1291 	info (72).overpunched = N;
     1292 	info (72).char_string = N;
     1293 	info (72).bit_string = N;
     1294 	info (72).varying = N;
     1295 	info (72).type = N;
     1296 	info (72).hex = N;
     1297 	info (72).generic = N;
     1298 
     1299 	info (73).computational = N;			/*pascal_user_defined_type_dtype */
     1300 	info (73).arithmetic = N;
     1301 	info (73).fixed = N;
     1302 	info (73).complex = N;
     1303 	info (73).decimal = N;
     1304 	info (73).signed = N;
     1305 	info (73).trailing_sign = N;
     1306 	info (73).packed_dec = N;
     1307 	info (73).digit_aligned = N;
     1308 	info (73).overpunched = N;
     1309 	info (73).char_string = N;
     1310 	info (73).bit_string = N;
     1311 	info (73).varying = N;
     1312 	info (73).type = Y;
     1313 	info (73).hex = N;
     1314 	info (73).generic = N;
     1315 
     1316 	info (74).computational = N;			/* pascal_user_defined_type_instance_dtype */
     1317 	info (74).arithmetic = N;
     1318 	info (74).fixed = N;
     1319 	info (74).complex = N;
     1320 	info (74).decimal = N;
     1321 	info (74).signed = N;
     1322 	info (74).trailing_sign = N;
     1323 	info (74).packed_dec = N;
     1324 	info (74).digit_aligned = N;
     1325 	info (74).overpunched = N;
     1326 	info (74).char_string = N;
     1327 	info (74).bit_string = N;
     1328 	info (74).varying = N;
     1329 	info (74).type = N;
     1330 	info (74).hex = N;
     1331 	info (74).generic = N;
     1332 
     1333 	info (75).computational = N;			/* pascal_text_file_dtype*/
     1334 	info (75).arithmetic = N;
     1335 	info (75).fixed = N;
     1336 	info (75).complex = N;
     1337 	info (75).decimal = N;
     1338 	info (75).signed = N;
     1339 	info (75).trailing_sign = N;
     1340 	info (75).packed_dec = N;
     1341 	info (75).digit_aligned = N;
     1342 	info (75).overpunched = N;
     1343 	info (75).char_string = N;
     1344 	info (75).bit_string = N;
     1345 	info (75).varying = N;
     1346 	info (75).type = N;
     1347 	info (75).hex = N;
     1348 	info (75).generic = N;
     1349 
     1350 	info (76).computational = N;			/* pascal_procedure_type_dtype */
     1351 	info (76).arithmetic = N;
     1352 	info (76).fixed = N;
     1353 	info (76).complex = N;
     1354 	info (76).decimal = N;
     1355 	info (76).signed = N;
     1356 	info (76).trailing_sign = N;
     1357 	info (76).packed_dec = N;
     1358 	info (76).digit_aligned = N;
     1359 	info (76).overpunched = N;
     1360 	info (76).char_string = N;
     1361 	info (76).bit_string = N;
     1362 	info (76).varying = N;
     1363 	info (76).type = Y;
     1364 	info (76).hex = N;
     1365 	info (76).generic = N;
     1366 
     1367 	info (77).computational = N;			/* pascal_var_formal_parm_dtype*/
     1368 	info (77).arithmetic = N;
     1369 	info (77).fixed = N;
     1370 	info (77).complex = N;
     1371 	info (77).decimal = N;
     1372 	info (77).signed = N;
     1373 	info (77).trailing_sign = N;
     1374 	info (77).packed_dec = N;
     1375 	info (77).digit_aligned = N;
     1376 	info (77).overpunched = N;
     1377 	info (77).char_string = N;
     1378 	info (77).bit_string = N;
     1379 	info (77).varying = N;
     1380 	info (77).type = N;
     1381 	info (77).hex = N;
     1382 	info (77).generic  = N;
     1383 
     1384 	info (78).computational = N;			/* pascal_value_formal_parm_dtype*/
     1385 	info (78).arithmetic = N;
     1386 	info (78).fixed = N;
     1387 	info (78).complex = N;
     1388 	info (78).decimal = N;
     1389 	info (78).signed = N;
     1390 	info (78).trailing_sign = N;
     1391 	info (78).packed_dec = N;
     1392 	info (78).digit_aligned = N;
     1393 	info (78).overpunched = N;
     1394 	info (78).char_string = N;
     1395 	info (78).bit_string = N;
     1396 	info (78).varying = N;
     1397 	info (78).type = N;
     1398 	info (78).hex = N;
     1399 	info (78).generic = N;
     1400 
     1401 	info (79).computational = N;			/* pascal_parameter_procedure_dtype*/
     1402 	info (79).arithmetic = N;
     1403 	info (79).fixed = N;
     1404 	info (79).complex = N;
     1405 	info (79).decimal = N;
     1406 	info (79).signed = N;
     1407 	info (79).trailing_sign = N;
     1408 	info (79).packed_dec = N;
     1409 	info (79).digit_aligned = N;
     1410 	info (79).overpunched = N;
     1411 	info (79).char_string = N;
     1412 	info (79).bit_string = N;
     1413 	info (79).varying = N;
     1414 	info (79).type = N;
     1415 	info (79).hex = N;
     1416 	info (79).generic = N;
     1417 
     1418 	info (80).computational = N;			/* pascal_entry_formal_parm_dtype*/
     1419 	info (80).arithmetic = N;
     1420 	info (80).fixed = N;
     1421 	info (80).complex = N;
     1422 	info (80).decimal = N;
     1423 	info (80).signed = N;
     1424 	info (80).trailing_sign = N;
     1425 	info (80).packed_dec = N;
     1426 	info (80).digit_aligned = N;
     1427 	info (80).overpunched = N;
     1428 	info (80).char_string = N;
     1429 	info (80).bit_string = N;
     1430 	info (80).varying = N;
     1431 	info (80).type = N;
     1432 	info (80).hex = N;
     1433 	info (80).generic = N;
     1434 
     1435 	info (81).computational = Y;			/* real_flt_dec_extended_dtype */
     1436 	info (81).arithmetic = Y;
     1437 	info (81).fixed = N;
     1438 	info (81).complex = N;
     1439 	info (81).decimal = Y;
     1440 	info (81).signed = Y;
     1441 	info (81).trailing_sign = N;
     1442 	info (81).packed_dec = N;
     1443 	info (81).digit_aligned = N;
     1444 	info (81).overpunched = N;
     1445 	info (81).char_string = N;
     1446 	info (81).bit_string = N;
     1447 	info (81).varying = N;
     1448 	info (81).type = N;
     1449 	info (81).hex = N;
     1450 	info (81).generic = N;
     1451 
     1452 	info (82).computational = Y;			/* cplx_flt_dec_extended_dtype */
     1453 	info (82).arithmetic = Y;
     1454 	info (82).fixed = N;
     1455 	info (82).complex = Y;
     1456 	info (82).decimal = Y;
     1457 	info (82).signed = Y;
     1458 	info (82).trailing_sign = N;
     1459 	info (82).packed_dec = N;
     1460 	info (82).digit_aligned = N;
     1461 	info (82).overpunched = N;
     1462 	info (82).char_string = N;
     1463 	info (82).bit_string = N;
     1464 	info (82).varying = N;
     1465 	info (82).type = N;
     1466 	info (82).hex = N;
     1467 	info (82).generic = N;
     1468 
     1469 	info (83).computational = Y;			/* real_flt_dec_generic_dtype */
     1470 	info (83).arithmetic = Y;
     1471 	info (83).fixed = N;
     1472 	info (83).complex = N;
     1473 	info (83).decimal = Y;
     1474 	info (83).signed = Y;
     1475 	info (83).trailing_sign = N;
     1476 	info (83).packed_dec = N;
     1477 	info (83).digit_aligned = N;
     1478 	info (83).overpunched = N;
     1479 	info (83).char_string = N;
     1480 	info (83).bit_string = N;
     1481 	info (83).varying = N;
     1482 	info (83).type = N;
     1483 	info (83).hex = N;
     1484 	info (83).generic = Y;
     1485 
     1486 	info (84).computational = Y;			/* cplx_flt_dec_generic_dtype */
     1487 	info (84).arithmetic = Y;
     1488 	info (84).fixed = N;
     1489 	info (84).complex = Y;
     1490 	info (84).decimal = Y;
     1491 	info (84).signed = N;
     1492 	info (84).trailing_sign = N;
     1493 	info (84).packed_dec = N;
     1494 	info (84).digit_aligned = N;
     1495 	info (84).overpunched = N;
     1496 	info (84).char_string = N;
     1497 	info (84).bit_string = N;
     1498 	info (84).varying = N;
     1499 	info (84).type = N;
     1500 	info (84).hex = N;
     1501 	info (84).generic = Y;
     1502 
     1503 	info (85).computational = Y;			/* real_flt_bin_generic_dtype */
     1504 	info (85).arithmetic = Y;
     1505 	info (85).fixed = N;
     1506 	info (85).complex = N;
     1507 	info (85).decimal = N;
     1508 	info (85).signed = Y;
     1509 	info (85).trailing_sign = N;
     1510 	info (85).packed_dec = N;
     1511 	info (85).digit_aligned = N;
     1512 	info (85).overpunched = N;
     1513 	info (85).char_string = N;
     1514 	info (85).bit_string = N;
     1515 	info (85).varying = N;
     1516 	info (85).type = N;
     1517 	info (85).hex = N;
     1518 	info (85).generic = Y;
     1519 
     1520 	info (86).computational = Y;			/* cplx_flt_bin_generic_dtype */
     1521 	info (86).arithmetic = Y;
     1522 	info (86).fixed = N;
     1523 	info (86).complex = Y;
     1524 	info (86).decimal = N;
     1525 	info (86).signed = Y;
     1526 	info (86).trailing_sign = N;
     1527 	info (86).packed_dec = N;
     1528 	info (86).digit_aligned = N;
     1529 	info (86).overpunched = N;
     1530 	info (86).char_string = N;
     1531 	info (86).bit_string = N;
     1532 	info (86).varying = N;
     1533 	info (86).type = N;
     1534 	info (86).hex = N;
     1535 	info (86).generic = Y;
     1536 
     1537 	info (87).computational = N;			/* pascal_string_type_dtype */
     1538 	info (87).arithmetic = N;
     1539 	info (87).fixed = N;
     1540 	info (87).complex = N;
     1541 	info (87).decimal = N;
     1542 	info (87).signed = N;
     1543 	info (87).trailing_sign = N;
     1544 	info (87).packed_dec = N;
     1545 	info (87).digit_aligned = N;
     1546 	info (87).overpunched = N;
     1547 	info (87).char_string = N;
     1548 	info (87).bit_string = N;
     1549 	info (87).varying = N;
     1550 	info (87).type = Y;
     1551 	info (87).hex = N;
     1552 	info (87).generic = N;
     1553 
     1554      end fillin;
     1555 
     1556 
     1557 init_cds_struc: proc;
     1558 
     1559 
     1560 	unspec (cdsa) = "0"b;
     1561 	cdsa.seg_name = "data_type_info_";
     1562 	cdsa.sections (1).p = addr (dti_struc);
     1563 	cdsa.sections (1).len = size (dti_struc);
     1564 	cdsa.sections (1).struct_name = "dti_struc";
     1565 
     1566 	cdsa.sections (2).p = null;
     1567 	cdsa.sections (2).len = 0;
     1568 	cdsa.sections (2).struct_name = "";
     1569 
     1570 	cdsa.num_exclude_names = hbound (exclude, 1);
     1571 	cdsa.exclude_array_ptr = addr (exclude);
     1572 
     1573 	string (cdsa.switches) = "0"b;
     1574 	cdsa.switches.defs_in_link = "0"b;
     1575 	cdsa.switches.separate_static = "0"b;
     1576 	cdsa.switches.have_text = "1"b;
     1577 	cdsa.switches.have_static = "0"b;
     1578 
     1579      end;
     1580 
  1     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  1     2 
  1     3 dcl 1 cds_args based aligned,
  1     4     2 sections (2),
  1     5       3 p ptr,					/* pointer to data for text/static section */
  1     6       3 len fixed bin (18),				/* size of text/static section */
  1     7       3 struct_name char (32),			/* name of declared structure for this section */
  1     8     2 seg_name char (32),				/* name to create segment by */
  1     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  1    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  1    11     2 switches,					/* control switches */
  1    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  1    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  1    14       3 have_text bit (1) unal,			/* ON if text section given */
  1    15       3 have_static bit (1) unal,			/* ON if static section given */
  1    16       3 pad bit (32) unal;
  1    17 
  1    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  1    19 
  1    20 /* END INCLUDE FILE cds_args.incl.pl1 */
     1581 
  2     1 /* BEGIN INCLUDE FILE ... data_type_info_.incl.pl1
  2     2*
  2     3*   attributes of each Multics data type.  You may not rely on the dimension never exceeding 64
  2     4*   James R. Davis 6 Apr 79
  2     5*   Modified JMAthane June 83 to add "type" bit field 
  2     6*   Upped bound from 64 to 80 10/18/83 S. Herbst
  2     7*   Added "hex" and "generic" bits 01/23/84 S. Herbst
  2     8*   Upped bound from 80 to 86 01/81/84 R. Gray
  2     9*   Upper bound from 86 to 87 JMAthane (for Pascal strings type dtype)
  2    10**/
  2    11 
  2    12      
  2    13 /****^  HISTORY COMMENTS:
  2    14*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  2    15*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  2    16*     The data_type_info array now has 87 entries instead of 86 due to
  2    17*     introduction of pascal_string_type_dtype.
  2    18*                                                   END HISTORY COMMENTS */
  2    19 
  2    20 dcl	   data_type_info_$version_number fixed bin external static;
  2    21      dcl	   data_type_info_this_version fixed bin internal static options (constant) init (1);
  2    22 
  2    23      dcl	   1 data_type_info_$info (87) aligned external static,
  2    24 	     2 computational      bit (1) unal,
  2    25 	     2 arithmetic	      bit (1) unal,
  2    26 	     2 arithmetic_attributes unal,		/* only valid if arithmetic */
  2    27 	       3 fixed	      bit (1) unal,		/* PL/I type */
  2    28 	       3 complex	      bit (1) unal,		/* PL/I mode */
  2    29 	       3 decimal	      bit (1) unal,		/* PL/I base */
  2    30 	       3 signed	      bit (1) unal,
  2    31 	       3 trailing_sign    bit (1) unal,		/* only valid if signed */
  2    32 	       3 decimal_attributes unal,		/* only valid if decimal */
  2    33 	         4 packed_dec     bit (1) unal,		/* 4 bits per digit or 9 */
  2    34 	         4 digit_aligned  bit (1) unal,		/* valid for packed_dec only */
  2    35 	         4 overpunched    bit (1) unal,
  2    36 	     2 char_string	      bit (1) unal,		/* valid for non-arithmetic */
  2    37 	     2 bit_string	      bit (1) unal,		/* valid for non-arithmetic */
  2    38 	     2 varying	      bit (1) unal,		/* for bit or char only */
  2    39 	     2 type	      bit (1) unal,		/* this symbol is a type */
  2    40 	     2 hex	      bit (1) unal,		/* a hexadecimal type (eg., hex floating point) */
  2    41 	     2 generic	      bit (1) unal,		/* eg., real_flt_dec_generic_dtype */
  2    42 	     2 pad	      bit (20) unal;
  2    43 
  2    44      dcl	   data_type_info_$ninebit_sign_chars char (2) external static;
  2    45      dcl	   data_type_info_$ninebit_digit_chars char (10) external static;
  2    46      dcl	   data_type_info_$ninebit_overpunched_sign_chars char (22) external static;
  2    47 
  2    48      dcl	   data_type_info_$max_decimal_precision fixed bin external static;
  2    49      dcl	   data_type_info_$max_float_binary_precision fixed bin external static;
  2    50      dcl	   data_type_info_$max_fixed_binary_precision fixed bin external static;
  2    51 
  2    52 
  2    53 /* END INCLUDE FILE ... data_type_info_.incl.pl1 */
     1582 
     1583      end;						/* program */
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/12/86  1607.9  !BBBJWBWzKwbcwL.pl1               >spec>install>1212>data_type_info_.cds
1581         1    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
1582         2    11/12/86  1333.4  data_type_info_.incl.pl1          >spec>install>1212>data_type_info_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
N                               005642 constant        bit(1)                   initial dcl 62 ref (more) 307 308 309 310 311 313
                                                                                  314 315 316 317 318 319 320 321 322 323 324 325
                                                                                  326 327 328 330 331 332 333 334 335 336 337 338
                                                                                  339 340 341 342 343 344 345 347 348 349 350 351
                                                                                  352 353 354 355 356 357 358 359 360 361 362 364
                                                                                  365 366 367 368 369 370 371 372 373 374 375 376
                                                                                  377 378 379 382 383 384 385 386 387 388 389 390
                                                                                  391 393 394 395 396 399 400 401 402 403 404 405
                                                                                  406 407 408 411 412 413 416 417 418 419 420 421
                                                                                  422 423 424 426 427 428 429 430 433 434 435 436
                                                                                  437 438 439 440 441 443 445 446 447 449 450 451
                                                                                  452 453 454 455 456 457 458 459 460 461 462 463
                                                                                  464 466 467 468 469 470 471 472 473 474 475 476
                                                                                  477 478 479 480 481 483 484 485 486 487 488 489
                                                                                  490 491 492 493 494 495 496 497 498 500 501 502
                                                                                  503 504 505 506 507 508 509 510 511 512 513 514
                                                                                  515 517 518 519 520 521 522 523 524 525 526 527
                                                                                  528 529 530 531 532 534 535 536 537 538 539 540
                                                                                  541 542 543 544 545 546 547 548 549 554 557 558
                                                                                  559 561 562 563 564 565 566 571 575 576 578 579
                                                                                  580 581 582 583 585 586 587 588 589 590 591 592
                                                                                  593 594 595 596 597 598 599 600 602 603 604 605
                                                                                  606 607 608 609 610 611 612 613 614 615 616 617
                                                                                  622 623 624 625 626 627 628 629 630 631 632 633
                                                                                  634 639 640 641 642 643 644 645 646 647 648 649
                                                                                  650 651 656 658 659 660 661 662 663 664 665 666
                                                                                  667 668 673 677 678 679 680 681 682 683 684 685
                                                                                  687 688 689 690 691 692 693 694 695 696 697 698
                                                                                  699 700 701 702 707 709 710 713 714 715 716 717
                                                                                  718 719 724 729 730 731 732 733 734 735 736 741
                                                                                  743 744 746 747 748 749 750 751 752 753 758 761
                                                                                  764 765 766 767 768 769 770 774 775 778 781 782
                                                                                  783 784 785 786 787 792 795 797 798 799 800 801
                                                                                  802 803 804 808 809 812 814 815 816 817 818 819
                                                                                  820 821 829 831 832 833 834 835 836 837 838 842
                                                                                  846 848 849 850 851 852 853 854 855 859 860 861
                                                                                  863 864 865 866 867 868 869 870 872 876 877 878
                                                                                  880 881 882 883 884 885 886 887 889 893 895 897
                                                                                  898 899 900 901 902 903 904 906 910 912 914 915
                                                                                  916 917 918 919 920 921 923 925 926 927 928 929
                                                                                  930 931 932 933 934 935 936 937 938 939 940 942
                                                                                  943 944 945 946 947 948 949 950 951 952 953 954
                                                                                  955 956 957 959 960 961 962 963 964 965 966 967
                                                                                  968 969 970 971 972 973 974 976 977 978 979 980
                                                                                  981 982 983 984 985 986 987 988 989 990 991 993
                                                                                  994 995 996 997 998 999 1000 1001 1002 1003 1004
                                                                                  1005 1006 1007 1008 1010 1011 1012 1013 1014 1015
                                                                                  1016 1017 1018 1019 1020 1021 1022 1023 1024 1025
                                                                                  1027 1028 1029 1030 1031 1032 1033 1034 1035 1036
                                                                                  1037 1038 1039 1040 1041 1042 1044 1045 1046 1047
                                                                                  1048 1049 1050 1051 1052 1053 1054 1055 1056 1057
                                                                                  1058 1059 1061 1062 1063 1064 1065 1066 1067 1068
                                                                                  1069 1070 1071 1072 1073 1074 1075 1076 1078 1079
                                                                                  1080 1081 1082 1083 1084 1085 1086 1087 1088 1089
                                                                                  1090 1091 1092 1093 1095 1096 1097 1098 1099 1100
                                                                                  1101 1102 1103 1104 1105 1106 1107 1108 1109 1110
                                                                                  1112 1113 1114 1115 1116 1117 1118 1119 1120 1121
                                                                                  1122 1123 1124 1125 1126 1127 1130 1131 1132 1133
                                                                                  1134 1135 1136 1137 1138 1139 1140 1141 1142 1143
                                                                                  1144 1146 1147 1148 1149 1150 1151 1152 1153 1154
                                                                                  1155 1156 1157 1158 1160 1161 1163 1164 1165 1166
                                                                                  1167 1168 1169 1170 1171 1172 1173 1174 1175 1176
                                                                                  1177 1178 1180 1181 1182 1183 1184 1185 1186 1187
                                                                                  1188 1189 1190 1191 1192 1193 1194 1195 1197 1198
                                                                                  1199 1200 1201 1202 1203 1204 1205 1206 1207 1208
                                                                                  1209 1211 1212 1214 1215 1216 1217 1218 1219 1220
                                                                                  1221 1222 1223 1224 1225 1226 1228 1229 1231 1232
                                                                                  1233 1234 1235 1236 1237 1238 1239 1240 1241 1242
                                                                                  1243 1245 1246 1248 1249 1250 1251 1252 1253 1254
                                                                                  1255 1256 1257 1258 1259 1260 1262 1263 1265 1266
                                                                                  1267 1268 1269 1270 1271 1272 1273 1274 1275 1276
                                                                                  1277 1278 1279 1280 1282 1283 1284 1285 1286 1287
                                                                                  1288 1289 1290 1291 1292 1293 1294 1295 1296 1297
                                                                                  1299 1300 1301 1302 1303 1304 1305 1306 1307 1308
                                                                                  1309 1310 1311 1313 1314 1316 1317 1318 1319 1320
                                                                                  1321 1322 1323 1324 1325 1326 1327 1328 1329 1330
                                                                                  1331 1333 1334 1335 1336 1337 1338 1339 1340 1341
                                                                                  1342 1343 1344 1345 1346 1347 1348 1350 1351 1352
                                                                                  1353 1354 1355 1356 1357 1358 1359 1360 1361 1362
                                                                                  1364 1365 1367 1368 1369 1370 1371 1372 1373 1374
                                                                                  1375 1376 1377 1378 1379 1380 1381 1382 1384 1385
                                                                                  1386 1387 1388 1389 1390 1391 1392 1393 1394 1395
                                                                                  1396 1397 1398 1399 1401 1402 1403 1404 1405 1406
                                                                                  1407 1408 1409 1410 1411 1412 1413 1414 1415 1416
                                                                                  1418 1419 1420 1421 1422 1423 1424 1425 1426 1427
                                                                                  1428 1429 1430 1431 1432 1433 1437 1438 1441 1442
                                                                                  1443 1444 1445 1446 1447 1448 1449 1450 1454 1458
                                                                                  1459 1460 1461 1462 1463 1464 1465 1466 1467 1471
                                                                                  1472 1475 1476 1477 1478 1479 1480 1481 1482 1483
                                                                                  1488 1491 1492 1493 1494 1495 1496 1497 1498 1499
                                                                                  1500 1505 1506 1507 1509 1510 1511 1512 1513 1514
                                                                                  1515 1516 1517 1522 1524 1526 1527 1528 1529 1530
                                                                                  1531 1532 1533 1534 1537 1538 1539 1540 1541 1542
                                                                                  1543 1544 1545 1546 1547 1548 1549 1551 1552
Y                               005643 constant        bit(1)                   initial dcl 62 ref 75 76 77 80 92 93 94 97 109 110
                                                                                  114 126 127 131 143 144 145 146 148 160 161 162
                                                                                  163 165 177 178 180 182 194 195 197 199 211 212
                                                                                  213 215 216 228 229 232 233 245 246 247 248 249
                                                                                  250 262 263 265 266 267 381 392 398 409 410 415
                                                                                  425 432 442 444 551 552 553 555 556 560 568 569
                                                                                  570 572 573 574 577 619 620 621 636 637 638 653
                                                                                  654 655 657 670 671 672 674 675 676 704 705 706
                                                                                  708 711 712 721 722 723 725 726 727 728 738 739
                                                                                  740 742 745 755 756 757 759 760 762 763 772 773
                                                                                  776 777 779 780 789 790 791 793 794 796 806 807
                                                                                  810 811 813 823 824 825 826 827 828 830 840 841
                                                                                  843 844 845 847 857 858 862 871 874 875 879 888
                                                                                  891 892 894 896 905 908 909 911 913 922 1129 1159
                                                                                  1210 1227 1244 1261 1312 1363 1435 1436 1439 1440
                                                                                  1452 1453 1455 1456 1457 1469 1470 1473 1474 1484
                                                                                  1486 1487 1489 1490 1501 1503 1504 1508 1518 1520
                                                                                  1521 1523 1525 1535 1550
addr                                                   builtin function         dcl 49 ref 57 57 1562 1571
arithmetic                1(01) 000100 automatic       bit(1)                   array level 4 packed unaligned dcl 36 set ref 76*
                                                                                  93* 110* 127* 144* 161* 178* 195* 212* 229* 246*
                                                                                  263* 280* 297* 314* 331* 348* 365* 382* 399* 416*
                                                                                  433* 450* 467* 484* 501* 518* 535* 552* 569* 586*
                                                                                  603* 620* 637* 654* 671* 688* 705* 722* 739* 756*
                                                                                  773* 790* 807* 824* 841* 858* 875* 892* 909* 926*
                                                                                  943* 960* 977* 994* 1011* 1028* 1045* 1062* 1079*
                                                                                  1096* 1113* 1130* 1147* 1164* 1181* 1198* 1215*
                                                                                  1232* 1249* 1266* 1283* 1300* 1317* 1334* 1351*
                                                                                  1368* 1385* 1402* 1419* 1436* 1453* 1470* 1487*
                                                                                  1504* 1521* 1538*
arithmetic_attributes
                          1(02) 000100 automatic       structure                array level 4 packed unaligned dcl 36
bit_string                1(11) 000100 automatic       bit(1)                   array level 4 packed unaligned dcl 36 set ref 86*
                                                                                  103* 120* 137* 154* 171* 188* 205* 222* 239* 256*
                                                                                  273* 290* 307* 324* 341* 358* 375* 392* 409* 426*
                                                                                  443* 460* 477* 494* 511* 528* 545* 562* 579* 596*
                                                                                  613* 630* 647* 664* 681* 698* 715* 732* 749* 766*
                                                                                  783* 800* 817* 834* 851* 868* 885* 902* 919* 936*
                                                                                  953* 970* 987* 1004* 1021* 1038* 1055* 1072* 1089*
                                                                                  1106* 1123* 1140* 1157* 1174* 1191* 1208* 1225*
                                                                                  1242* 1259* 1276* 1293* 1310* 1327* 1344* 1361*
                                                                                  1378* 1395* 1412* 1429* 1446* 1463* 1480* 1497*
                                                                                  1514* 1531* 1548*
cds_args                               based           structure                level 1 dcl 1-3
cdsa                            000246 automatic       structure                level 1 dcl 47 set ref 57 57 1560*
char_string               1(10) 000100 automatic       bit(1)                   array level 4 packed unaligned dcl 36 set ref 85*
                                                                                  102* 119* 136* 153* 170* 187* 204* 221* 238* 255*
                                                                                  272* 289* 306* 323* 340* 357* 374* 391* 408* 425*
                                                                                  442* 459* 476* 493* 510* 527* 544* 561* 578* 595*
                                                                                  612* 629* 646* 663* 680* 697* 714* 731* 748* 765*
                                                                                  782* 799* 816* 833* 850* 867* 884* 901* 918* 935*
                                                                                  952* 969* 986* 1003* 1020* 1037* 1054* 1071* 1088*
                                                                                  1105* 1122* 1139* 1156* 1173* 1190* 1207* 1224*
                                                                                  1241* 1258* 1275* 1292* 1309* 1326* 1343* 1360*
                                                                                  1377* 1394* 1411* 1428* 1445* 1462* 1479* 1496*
                                                                                  1513* 1530* 1547*
code                            000313 automatic       fixed bin(35,0)          dcl 50 set ref 57* 58 58*
com_err_                        000014 constant        entry                    external dcl 51 ref 58
complex                   1(03) 000100 automatic       bit(1)                   array level 5 packed unaligned dcl 36 set ref 78*
                                                                                  95* 112* 129* 146* 163* 180* 197* 214* 231* 248*
                                                                                  265* 282* 299* 316* 333* 350* 367* 384* 401* 418*
                                                                                  435* 452* 469* 486* 503* 520* 537* 554* 571* 588*
                                                                                  605* 622* 639* 656* 673* 690* 707* 724* 741* 758*
                                                                                  775* 792* 809* 826* 843* 860* 877* 894* 911* 928*
                                                                                  945* 962* 979* 996* 1013* 1030* 1047* 1064* 1081*
                                                                                  1098* 1115* 1132* 1149* 1166* 1183* 1200* 1217*
                                                                                  1234* 1251* 1268* 1285* 1302* 1319* 1336* 1353*
                                                                                  1370* 1387* 1404* 1421* 1438* 1455* 1472* 1489*
                                                                                  1506* 1523* 1540*
computational             1     000100 automatic       bit(1)                   array level 4 packed unaligned dcl 36 set ref 75*
                                                                                  92* 109* 126* 143* 160* 177* 194* 211* 228* 245*
                                                                                  262* 279* 296* 313* 330* 347* 364* 381* 398* 415*
                                                                                  432* 449* 466* 483* 500* 517* 534* 551* 568* 585*
                                                                                  602* 619* 636* 653* 670* 687* 704* 721* 738* 755*
                                                                                  772* 789* 806* 823* 840* 857* 874* 891* 908* 925*
                                                                                  942* 959* 976* 993* 1010* 1027* 1044* 1061* 1078*
                                                                                  1095* 1112* 1129* 1146* 1163* 1180* 1197* 1214*
                                                                                  1231* 1248* 1265* 1282* 1299* 1316* 1333* 1350*
                                                                                  1367* 1384* 1401* 1418* 1435* 1452* 1469* 1486*
                                                                                  1503* 1520* 1537*
create_data_segment_            000012 constant        entry                    external dcl 34 ref 57
data_type_info_$info            000020 external static structure                array level 1 dcl 2-23
decimal                   1(04) 000100 automatic       bit(1)                   array level 5 packed unaligned dcl 36 set ref 79*
                                                                                  96* 113* 130* 147* 164* 181* 198* 215* 232* 249*
                                                                                  266* 283* 300* 317* 334* 351* 368* 385* 402* 419*
                                                                                  436* 453* 470* 487* 504* 521* 538* 555* 572* 589*
                                                                                  606* 623* 640* 657* 674* 691* 708* 725* 742* 759*
                                                                                  776* 793* 810* 827* 844* 861* 878* 895* 912* 929*
                                                                                  946* 963* 980* 997* 1014* 1031* 1048* 1065* 1082*
                                                                                  1099* 1116* 1133* 1150* 1167* 1184* 1201* 1218*
                                                                                  1235* 1252* 1269* 1286* 1303* 1320* 1337* 1354*
                                                                                  1371* 1388* 1405* 1422* 1439* 1456* 1473* 1490*
                                                                                  1507* 1524* 1541*
decimal_attributes        1(07) 000100 automatic       structure                array level 5 packed unaligned dcl 36
defs_in_link             44     000246 automatic       bit(1)                   level 3 packed unaligned dcl 47 set ref 1574*
digit_aligned             1(08) 000100 automatic       bit(1)                   array level 6 packed unaligned dcl 36 set ref 83*
                                                                                  100* 117* 134* 151* 168* 185* 202* 219* 236* 253*
                                                                                  270* 287* 304* 321* 338* 355* 372* 389* 406* 423*
                                                                                  440* 457* 474* 491* 508* 525* 542* 559* 576* 593*
                                                                                  610* 627* 644* 661* 678* 695* 712* 729* 746* 763*
                                                                                  780* 797* 814* 831* 848* 865* 882* 899* 916* 933*
                                                                                  950* 967* 984* 1001* 1018* 1035* 1052* 1069* 1086*
                                                                                  1103* 1120* 1137* 1154* 1171* 1188* 1205* 1222*
                                                                                  1239* 1256* 1273* 1290* 1307* 1324* 1341* 1358*
                                                                                  1375* 1392* 1409* 1426* 1443* 1460* 1477* 1494*
                                                                                  1511* 1528* 1545*
dti_struc                       000100 automatic       structure                level 1 dcl 36 set ref 1562 1563
exclude                         000000 constant        char(32)                 initial array unaligned dcl 52 set ref 1570 1571
exclude_array_ptr        42     000246 automatic       pointer                  level 2 dcl 47 set ref 1571*
fixed                     1(02) 000100 automatic       bit(1)                   array level 5 packed unaligned dcl 36 set ref 77*
                                                                                  94* 111* 128* 145* 162* 179* 196* 213* 230* 247*
                                                                                  264* 281* 298* 315* 332* 349* 366* 383* 400* 417*
                                                                                  434* 451* 468* 485* 502* 519* 536* 553* 570* 587*
                                                                                  604* 621* 638* 655* 672* 689* 706* 723* 740* 757*
                                                                                  774* 791* 808* 825* 842* 859* 876* 893* 910* 927*
                                                                                  944* 961* 978* 995* 1012* 1029* 1046* 1063* 1080*
                                                                                  1097* 1114* 1131* 1148* 1165* 1182* 1199* 1216*
                                                                                  1233* 1250* 1267* 1284* 1301* 1318* 1335* 1352*
                                                                                  1369* 1386* 1403* 1420* 1437* 1454* 1471* 1488*
                                                                                  1505* 1522* 1539*
generic                   1(15) 000100 automatic       bit(1)                   array level 4 packed unaligned dcl 36 set ref 90*
                                                                                  107* 124* 141* 158* 175* 192* 209* 226* 243* 260*
                                                                                  277* 294* 311* 328* 345* 362* 379* 396* 413* 430*
                                                                                  447* 464* 481* 498* 515* 532* 549* 566* 583* 600*
                                                                                  617* 634* 651* 668* 685* 702* 719* 736* 753* 770*
                                                                                  787* 804* 821* 838* 855* 872* 889* 906* 923* 940*
                                                                                  957* 974* 991* 1008* 1025* 1042* 1059* 1076* 1093*
                                                                                  1110* 1127* 1144* 1161* 1178* 1195* 1212* 1229*
                                                                                  1246* 1263* 1280* 1297* 1314* 1331* 1348* 1365*
                                                                                  1382* 1399* 1416* 1433* 1450* 1467* 1484* 1501*
                                                                                  1518* 1535* 1552*
have_static              44(03) 000246 automatic       bit(1)                   level 3 packed unaligned dcl 47 set ref 1577*
have_text                44(02) 000246 automatic       bit(1)                   level 3 packed unaligned dcl 47 set ref 1576*
hbound                                                 builtin function         dcl 49 ref 1570
hex                       1(14) 000100 automatic       bit(1)                   array level 4 packed unaligned dcl 36 set ref 89*
                                                                                  106* 123* 140* 157* 174* 191* 208* 225* 242* 259*
                                                                                  276* 293* 310* 327* 344* 361* 378* 395* 412* 429*
                                                                                  446* 463* 480* 497* 514* 531* 548* 565* 582* 599*
                                                                                  616* 633* 650* 667* 684* 701* 718* 735* 752* 769*
                                                                                  786* 803* 820* 837* 854* 871* 888* 905* 922* 939*
                                                                                  956* 973* 990* 1007* 1024* 1041* 1058* 1075* 1092*
                                                                                  1109* 1126* 1143* 1160* 1177* 1194* 1211* 1228*
                                                                                  1245* 1262* 1279* 1296* 1313* 1330* 1347* 1364*
                                                                                  1381* 1398* 1415* 1432* 1449* 1466* 1483* 1500*
                                                                                  1517* 1534* 1551*
info                      1     000100 automatic       structure                level 2 dcl 36
len                       2     000246 automatic       fixed bin(18,0)          array level 3 dcl 47 set ref 1563* 1567*
max_decimal_precision
                        142     000100 automatic       fixed bin(17,0)          level 2 dcl 36 set ref 69*
max_fixed_binary_precision
                        144     000100 automatic       fixed bin(17,0)          level 2 dcl 36 set ref 71*
max_float_binary_precision
                        143     000100 automatic       fixed bin(17,0)          level 2 dcl 36 set ref 70*
ninebit_digit_chars     131     000100 automatic       char(10)                 level 2 dcl 36 set ref 66*
ninebit_overpunched_sign_chars
                        134     000100 automatic       char(22)                 level 2 dcl 36 set ref 67*
ninebit_sign_chars      130     000100 automatic       char(2)                  level 2 dcl 36 set ref 65*
null                                                   builtin function         dcl 49 ref 1566
num_exclude_names        40     000246 automatic       fixed bin(17,0)          level 2 dcl 47 set ref 1570*
overpunched               1(09) 000100 automatic       bit(1)                   array level 6 packed unaligned dcl 36 set ref 84*
                                                                                  101* 118* 135* 152* 169* 186* 203* 220* 237* 254*
                                                                                  271* 288* 305* 322* 339* 356* 373* 390* 407* 424*
                                                                                  441* 458* 475* 492* 509* 526* 543* 560* 577* 594*
                                                                                  611* 628* 645* 662* 679* 696* 713* 730* 747* 764*
                                                                                  781* 798* 815* 832* 849* 866* 883* 900* 917* 934*
                                                                                  951* 968* 985* 1002* 1019* 1036* 1053* 1070* 1087*
                                                                                  1104* 1121* 1138* 1155* 1172* 1189* 1206* 1223*
                                                                                  1240* 1257* 1274* 1291* 1308* 1325* 1342* 1359*
                                                                                  1376* 1393* 1410* 1427* 1444* 1461* 1478* 1495*
                                                                                  1512* 1529* 1546*
p                               000246 automatic       pointer                  array level 3 dcl 47 set ref 1562* 1566*
packed_dec                1(07) 000100 automatic       bit(1)                   array level 6 packed unaligned dcl 36 set ref 82*
                                                                                  99* 116* 133* 150* 167* 184* 201* 218* 235* 252*
                                                                                  269* 286* 303* 320* 337* 354* 371* 388* 405* 422*
                                                                                  439* 456* 473* 490* 507* 524* 541* 558* 575* 592*
                                                                                  609* 626* 643* 660* 677* 694* 711* 728* 745* 762*
                                                                                  779* 796* 813* 830* 847* 864* 881* 898* 915* 932*
                                                                                  949* 966* 983* 1000* 1017* 1034* 1051* 1068* 1085*
                                                                                  1102* 1119* 1136* 1153* 1170* 1187* 1204* 1221*
                                                                                  1238* 1255* 1272* 1289* 1306* 1323* 1340* 1357*
                                                                                  1374* 1391* 1408* 1425* 1442* 1459* 1476* 1493*
                                                                                  1510* 1527* 1544*
real_info                 1     000100 automatic       structure                array level 3 dcl 36 set ref 73*
sections                        000246 automatic       structure                array level 2 dcl 47
seg_name                 30     000246 automatic       char(32)                 level 2 dcl 47 set ref 1561*
separate_static          44(01) 000246 automatic       bit(1)                   level 3 packed unaligned dcl 47 set ref 1575*
signed                    1(05) 000100 automatic       bit(1)                   array level 5 packed unaligned dcl 36 set ref 80*
                                                                                  97* 114* 131* 148* 165* 182* 199* 216* 233* 250*
                                                                                  267* 284* 301* 318* 335* 352* 369* 386* 403* 420*
                                                                                  437* 454* 471* 488* 505* 522* 539* 556* 573* 590*
                                                                                  607* 624* 641* 658* 675* 692* 709* 726* 743* 760*
                                                                                  777* 794* 811* 828* 845* 862* 879* 896* 913* 930*
                                                                                  947* 964* 981* 998* 1015* 1032* 1049* 1066* 1083*
                                                                                  1100* 1117* 1134* 1151* 1168* 1185* 1202* 1219*
                                                                                  1236* 1253* 1270* 1287* 1304* 1321* 1338* 1355*
                                                                                  1372* 1389* 1406* 1423* 1440* 1457* 1474* 1491*
                                                                                  1508* 1525* 1542*
size                                                   builtin function         dcl 49 ref 1563
string                                                 builtin function         dcl 49 set ref 1573*
struct_name               3     000246 automatic       char(32)                 array level 3 dcl 47 set ref 1564* 1568*
switches                 44     000246 automatic       structure                level 2 dcl 47 set ref 1573*
trailing_sign             1(06) 000100 automatic       bit(1)                   array level 5 packed unaligned dcl 36 set ref 81*
                                                                                  98* 115* 132* 149* 166* 183* 200* 217* 234* 251*
                                                                                  268* 285* 302* 319* 336* 353* 370* 387* 404* 421*
                                                                                  438* 455* 472* 489* 506* 523* 540* 557* 574* 591*
                                                                                  608* 625* 642* 659* 676* 693* 710* 727* 744* 761*
                                                                                  778* 795* 812* 829* 846* 863* 880* 897* 914* 931*
                                                                                  948* 965* 982* 999* 1016* 1033* 1050* 1067* 1084*
                                                                                  1101* 1118* 1135* 1152* 1169* 1186* 1203* 1220*
                                                                                  1237* 1254* 1271* 1288* 1305* 1322* 1339* 1356*
                                                                                  1373* 1390* 1407* 1424* 1441* 1458* 1475* 1492*
                                                                                  1509* 1526* 1543*
type                      1(13) 000100 automatic       bit(1)                   array level 4 packed unaligned dcl 36 set ref 88*
                                                                                  105* 122* 139* 156* 173* 190* 207* 224* 241* 258*
                                                                                  275* 292* 309* 326* 343* 360* 377* 394* 411* 428*
                                                                                  445* 462* 479* 496* 513* 530* 547* 564* 581* 598*
                                                                                  615* 632* 649* 666* 683* 700* 717* 734* 751* 768*
                                                                                  785* 802* 819* 836* 853* 870* 887* 904* 921* 938*
                                                                                  955* 972* 989* 1006* 1023* 1040* 1057* 1074* 1091*
                                                                                  1108* 1125* 1142* 1159* 1176* 1193* 1210* 1227*
                                                                                  1244* 1261* 1278* 1295* 1312* 1329* 1346* 1363*
                                                                                  1380* 1397* 1414* 1431* 1448* 1465* 1482* 1499*
                                                                                  1516* 1533* 1550*
unspec                                                 builtin function         dcl 49 set ref 1560*
varying                   1(12) 000100 automatic       bit(1)                   array level 4 packed unaligned dcl 36 set ref 87*
                                                                                  104* 121* 138* 155* 172* 189* 206* 223* 240* 257*
                                                                                  274* 291* 308* 325* 342* 359* 376* 393* 410* 427*
                                                                                  444* 461* 478* 495* 512* 529* 546* 563* 580* 597*
                                                                                  614* 631* 648* 665* 682* 699* 716* 733* 750* 767*
                                                                                  784* 801* 818* 835* 852* 869* 886* 903* 920* 937*
                                                                                  954* 971* 988* 1005* 1022* 1039* 1056* 1073* 1090*
                                                                                  1107* 1124* 1141* 1158* 1175* 1192* 1209* 1226*
                                                                                  1243* 1260* 1277* 1294* 1311* 1328* 1345* 1362*
                                                                                  1379* 1396* 1413* 1430* 1447* 1464* 1481* 1498*
                                                                                  1515* 1532* 1549*
version_number                  000100 automatic       fixed bin(17,0)          level 2 dcl 36 set ref 64*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
data_type_info_$max_decimal_precision
                                000030 external static fixed bin(17,0)          dcl 2-48
data_type_info_$max_fixed_binary_precision
                                000034 external static fixed bin(17,0)          dcl 2-50
data_type_info_$max_float_binary_precision
                                000032 external static fixed bin(17,0)          dcl 2-49
data_type_info_$ninebit_digit_chars
                                000024 external static char(10)                 unaligned dcl 2-45
data_type_info_$ninebit_overpunched_sign_chars
                                000026 external static char(22)                 unaligned dcl 2-46
data_type_info_$ninebit_sign_chars
                                000022 external static char(2)                  unaligned dcl 2-44
data_type_info_$version_number  000016 external static fixed bin(17,0)          dcl 2-20
data_type_info_this_version            constant        fixed bin(17,0)          initial dcl 2-21
exclude_names                          based           char(32)                 array unaligned dcl 1-18

NAMES DECLARED BY EXPLICIT CONTEXT.
data_type_info_                 000036 constant        entry                    external dcl 20
fillin                          000102 constant        entry                    internal dcl 61 ref 55
init_cds_struc                  005560 constant        entry                    internal dcl 1557 ref 56

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      6024        6062    5644        6034
Length     16346    5644        36       10250     157           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
data_type_info_                     236 external procedure  is an external procedure.  
fillin                                  internal procedure  shares stack frame of external procedure data_type_info_.  
init_cds_struc                          internal procedure  shares stack frame of external procedure data_type_info_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
data_type_info_          000100 dti_struc                   data_type_info_
                         000246 cdsa                        data_type_info_
                         000313 code                        data_type_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
data_type_info_$info          data_type_info_$max_decimal_precision
data_type_info_$max_fixed_binary_precision                  data_type_info_$max_float_binary_precision
data_type_info_$ninebit_digit_chars                         data_type_info_$ninebit_overpunched_sign_chars
data_type_info_$ninebit_sign_chars                          data_type_info_$version_number




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     20 000035        55 000043        56 000044        57 000045        58 000060        59 000101        61 000102
     64 000103        65 000105        66 000107        67 000115        69 000120        70 000122        71 000124
     73 000126        75 000217        76 000221        77 000223        78 000225        79 000227        80 000231
     81 000233        82 000235        83 000237        84 000241        85 000243        86 000245        87 000247
     88 000251        89 000253        90 000255        92 000257        93 000261        94 000263        95 000265
     96 000267        97 000271        98 000273        99 000275       100 000277       101 000301       102 000303
    103 000305       104 000307       105 000311       106 000313       107 000315       109 000317       110 000321
    111 000323       112 000325       113 000327       114 000331       115 000333       116 000335       117 000337
    118 000341       119 000343       120 000345       121 000347       122 000351       123 000353       124 000355
    126 000357       127 000361       128 000363       129 000365       130 000367       131 000371       132 000373
    133 000375       134 000377       135 000401       136 000403       137 000405       138 000407       139 000411
    140 000413       141 000415       143 000417       144 000421       145 000423       146 000425       147 000427
    148 000431       149 000433       150 000435       151 000437       152 000441       153 000443       154 000445
    155 000447       156 000451       157 000453       158 000455       160 000457       161 000461       162 000463
    163 000465       164 000467       165 000471       166 000473       167 000475       168 000477       169 000501
    170 000503       171 000505       172 000507       173 000511       174 000513       175 000515       177 000517
    178 000521       179 000523       180 000525       181 000527       182 000531       183 000533       184 000535
    185 000537       186 000541       187 000543       188 000545       189 000547       190 000551       191 000553
    192 000555       194 000557       195 000561       196 000563       197 000565       198 000567       199 000571
    200 000573       201 000575       202 000577       203 000601       204 000603       205 000605       206 000607
    207 000611       208 000613       209 000615       211 000617       212 000621       213 000623       214 000625
    215 000627       216 000631       217 000633       218 000635       219 000637       220 000641       221 000643
    222 000645       223 000647       224 000651       225 000653       226 000655       228 000657       229 000661
    230 000663       231 000665       232 000667       233 000671       234 000673       235 000675       236 000677
    237 000701       238 000703       239 000705       240 000707       241 000711       242 000713       243 000715
    245 000717       246 000721       247 000723       248 000725       249 000727       250 000731       251 000733
    252 000735       253 000737       254 000741       255 000743       256 000745       257 000747       258 000751
    259 000753       260 000755       262 000757       263 000761       264 000763       265 000765       266 000767
    267 000771       268 000773       269 000775       270 000777       271 001001       272 001003       273 001005
    274 001007       275 001011       276 001013       277 001015       279 001017       280 001021       281 001023
    282 001025       283 001027       284 001031       285 001033       286 001035       287 001037       288 001041
    289 001043       290 001045       291 001047       292 001051       293 001053       294 001055       296 001057
    297 001061       298 001063       299 001065       300 001067       301 001071       302 001073       303 001075
    304 001077       305 001101       306 001103       307 001105       308 001107       309 001111       310 001113
    311 001115       313 001117       314 001121       315 001123       316 001125       317 001127       318 001131
    319 001133       320 001135       321 001137       322 001141       323 001143       324 001145       325 001147
    326 001151       327 001153       328 001155       330 001157       331 001161       332 001163       333 001165
    334 001167       335 001171       336 001173       337 001175       338 001177       339 001201       340 001203
    341 001205       342 001207       343 001211       344 001213       345 001215       347 001217       348 001221
    349 001223       350 001225       351 001227       352 001231       353 001233       354 001235       355 001237
    356 001241       357 001243       358 001245       359 001247       360 001251       361 001253       362 001255
    364 001257       365 001261       366 001263       367 001265       368 001267       369 001271       370 001273
    371 001275       372 001277       373 001301       374 001303       375 001305       376 001307       377 001311
    378 001313       379 001315       381 001317       382 001321       383 001323       384 001325       385 001327
    386 001331       387 001333       388 001335       389 001337       390 001341       391 001343       392 001345
    393 001347       394 001351       395 001353       396 001355       398 001357       399 001361       400 001363
    401 001365       402 001367       403 001371       404 001373       405 001375       406 001377       407 001401
    408 001403       409 001405       410 001407       411 001411       412 001413       413 001415       415 001417
    416 001421       417 001423       418 001425       419 001427       420 001431       421 001433       422 001435
    423 001437       424 001441       425 001443       426 001445       427 001447       428 001451       429 001453
    430 001455       432 001457       433 001461       434 001463       435 001465       436 001467       437 001471
    438 001473       439 001475       440 001477       441 001501       442 001503       443 001505       444 001507
    445 001511       446 001513       447 001515       449 001517       450 001521       451 001523       452 001525
    453 001527       454 001531       455 001533       456 001535       457 001537       458 001541       459 001543
    460 001545       461 001547       462 001551       463 001553       464 001555       466 001557       467 001561
    468 001563       469 001565       470 001567       471 001571       472 001573       473 001575       474 001577
    475 001601       476 001603       477 001605       478 001607       479 001611       480 001613       481 001615
    483 001617       484 001621       485 001623       486 001625       487 001627       488 001631       489 001633
    490 001635       491 001637       492 001641       493 001643       494 001645       495 001647       496 001651
    497 001653       498 001655       500 001657       501 001661       502 001663       503 001665       504 001667
    505 001671       506 001673       507 001675       508 001677       509 001701       510 001703       511 001705
    512 001707       513 001711       514 001713       515 001715       517 001717       518 001721       519 001723
    520 001725       521 001727       522 001731       523 001733       524 001735       525 001737       526 001741
    527 001743       528 001745       529 001747       530 001751       531 001753       532 001755       534 001757
    535 001761       536 001763       537 001765       538 001767       539 001771       540 001773       541 001775
    542 001777       543 002001       544 002003       545 002005       546 002007       547 002011       548 002013
    549 002015       551 002017       552 002021       553 002023       554 002025       555 002027       556 002031
    557 002033       558 002035       559 002037       560 002041       561 002043       562 002045       563 002047
    564 002051       565 002053       566 002055       568 002057       569 002061       570 002063       571 002065
    572 002067       573 002071       574 002073       575 002075       576 002077       577 002101       578 002103
    579 002105       580 002107       581 002111       582 002113       583 002115       585 002117       586 002121
    587 002123       588 002125       589 002127       590 002131       591 002133       592 002135       593 002137
    594 002141       595 002143       596 002145       597 002147       598 002151       599 002153       600 002155
    602 002157       603 002161       604 002163       605 002165       606 002167       607 002171       608 002173
    609 002175       610 002177       611 002201       612 002203       613 002205       614 002207       615 002211
    616 002213       617 002215       619 002217       620 002221       621 002223       622 002225       623 002227
    624 002231       625 002233       626 002235       627 002237       628 002241       629 002243       630 002245
    631 002247       632 002251       633 002253       634 002255       636 002257       637 002261       638 002263
    639 002265       640 002267       641 002271       642 002273       643 002275       644 002277       645 002301
    646 002303       647 002305       648 002307       649 002311       650 002313       651 002315       653 002317
    654 002321       655 002323       656 002325       657 002327       658 002331       659 002333       660 002335
    661 002337       662 002341       663 002343       664 002345       665 002347       666 002351       667 002353
    668 002355       670 002357       671 002361       672 002363       673 002365       674 002367       675 002371
    676 002373       677 002375       678 002377       679 002401       680 002403       681 002405       682 002407
    683 002411       684 002413       685 002415       687 002417       688 002421       689 002423       690 002425
    691 002427       692 002431       693 002433       694 002435       695 002437       696 002441       697 002443
    698 002445       699 002447       700 002451       701 002453       702 002455       704 002457       705 002461
    706 002463       707 002465       708 002467       709 002471       710 002473       711 002475       712 002477
    713 002501       714 002503       715 002505       716 002507       717 002511       718 002513       719 002515
    721 002517       722 002521       723 002523       724 002525       725 002527       726 002531       727 002533
    728 002535       729 002537       730 002541       731 002543       732 002545       733 002547       734 002551
    735 002553       736 002555       738 002557       739 002561       740 002563       741 002565       742 002567
    743 002571       744 002573       745 002575       746 002577       747 002601       748 002603       749 002605
    750 002607       751 002611       752 002613       753 002615       755 002617       756 002621       757 002623
    758 002625       759 002627       760 002631       761 002633       762 002635       763 002637       764 002641
    765 002643       766 002645       767 002647       768 002651       769 002653       770 002655       772 002657
    773 002661       774 002663       775 002665       776 002667       777 002671       778 002673       779 002675
    780 002677       781 002701       782 002703       783 002705       784 002707       785 002711       786 002713
    787 002715       789 002717       790 002721       791 002723       792 002725       793 002727       794 002731
    795 002733       796 002735       797 002737       798 002741       799 002743       800 002745       801 002747
    802 002751       803 002753       804 002755       806 002757       807 002761       808 002763       809 002765
    810 002767       811 002771       812 002773       813 002775       814 002777       815 003001       816 003003
    817 003005       818 003007       819 003011       820 003013       821 003015       823 003017       824 003021
    825 003023       826 003025       827 003027       828 003031       829 003033       830 003035       831 003037
    832 003041       833 003043       834 003045       835 003047       836 003051       837 003053       838 003055
    840 003057       841 003061       842 003063       843 003065       844 003067       845 003071       846 003073
    847 003075       848 003077       849 003101       850 003103       851 003105       852 003107       853 003111
    854 003113       855 003115       857 003117       858 003121       859 003123       860 003125       861 003127
    862 003131       863 003133       864 003135       865 003137       866 003141       867 003143       868 003145
    869 003147       870 003151       871 003153       872 003155       874 003157       875 003161       876 003163
    877 003165       878 003167       879 003171       880 003173       881 003175       882 003177       883 003201
    884 003203       885 003205       886 003207       887 003211       888 003213       889 003215       891 003217
    892 003221       893 003223       894 003225       895 003227       896 003231       897 003233       898 003235
    899 003237       900 003241       901 003243       902 003245       903 003247       904 003251       905 003253
    906 003255       908 003257       909 003261       910 003263       911 003265       912 003267       913 003271
    914 003273       915 003275       916 003277       917 003301       918 003303       919 003305       920 003307
    921 003311       922 003313       923 003315       925 003317       926 003321       927 003323       928 003325
    929 003327       930 003331       931 003333       932 003335       933 003337       934 003341       935 003343
    936 003345       937 003347       938 003351       939 003353       940 003355       942 003357       943 003361
    944 003363       945 003365       946 003367       947 003371       948 003373       949 003375       950 003377
    951 003401       952 003403       953 003405       954 003407       955 003411       956 003413       957 003415
    959 003417       960 003421       961 003423       962 003425       963 003427       964 003431       965 003433
    966 003435       967 003437       968 003441       969 003443       970 003445       971 003447       972 003451
    973 003453       974 003455       976 003457       977 003461       978 003463       979 003465       980 003467
    981 003471       982 003473       983 003475       984 003477       985 003501       986 003503       987 003505
    988 003507       989 003511       990 003513       991 003515       993 003517       994 003521       995 003523
    996 003525       997 003527       998 003531       999 003533      1000 003535      1001 003537      1002 003541
   1003 003543      1004 003545      1005 003547      1006 003551      1007 003553      1008 003555      1010 003557
   1011 003561      1012 003563      1013 003565      1014 003567      1015 003571      1016 003573      1017 003575
   1018 003577      1019 003601      1020 003603      1021 003605      1022 003607      1023 003611      1024 003613
   1025 003615      1027 003617      1028 003621      1029 003623      1030 003625      1031 003627      1032 003631
   1033 003633      1034 003635      1035 003637      1036 003641      1037 003643      1038 003645      1039 003647
   1040 003651      1041 003653      1042 003655      1044 003657      1045 003661      1046 003663      1047 003665
   1048 003667      1049 003671      1050 003673      1051 003675      1052 003677      1053 003701      1054 003703
   1055 003705      1056 003707      1057 003711      1058 003713      1059 003715      1061 003717      1062 003721
   1063 003723      1064 003725      1065 003727      1066 003731      1067 003733      1068 003735      1069 003737
   1070 003741      1071 003743      1072 003745      1073 003747      1074 003751      1075 003753      1076 003755
   1078 003757      1079 003761      1080 003763      1081 003765      1082 003767      1083 003771      1084 003773
   1085 003775      1086 003777      1087 004001      1088 004003      1089 004005      1090 004007      1091 004011
   1092 004013      1093 004015      1095 004017      1096 004021      1097 004023      1098 004025      1099 004027
   1100 004031      1101 004033      1102 004035      1103 004037      1104 004041      1105 004043      1106 004045
   1107 004047      1108 004051      1109 004053      1110 004055      1112 004057      1113 004061      1114 004063
   1115 004065      1116 004067      1117 004071      1118 004073      1119 004075      1120 004077      1121 004101
   1122 004103      1123 004105      1124 004107      1125 004111      1126 004113      1127 004115      1129 004117
   1130 004121      1131 004123      1132 004125      1133 004127      1134 004131      1135 004133      1136 004135
   1137 004137      1138 004141      1139 004143      1140 004145      1141 004147      1142 004151      1143 004153
   1144 004155      1146 004157      1147 004161      1148 004163      1149 004165      1150 004167      1151 004171
   1152 004173      1153 004175      1154 004177      1155 004201      1156 004203      1157 004205      1158 004207
   1159 004211      1160 004213      1161 004215      1163 004217      1164 004221      1165 004223      1166 004225
   1167 004227      1168 004231      1169 004233      1170 004235      1171 004237      1172 004241      1173 004243
   1174 004245      1175 004247      1176 004251      1177 004253      1178 004255      1180 004257      1181 004261
   1182 004263      1183 004265      1184 004267      1185 004271      1186 004273      1187 004275      1188 004277
   1189 004301      1190 004303      1191 004305      1192 004307      1193 004311      1194 004313      1195 004315
   1197 004317      1198 004321      1199 004323      1200 004325      1201 004327      1202 004331      1203 004333
   1204 004335      1205 004337      1206 004341      1207 004343      1208 004345      1209 004347      1210 004351
   1211 004353      1212 004355      1214 004357      1215 004361      1216 004363      1217 004365      1218 004367
   1219 004371      1220 004373      1221 004375      1222 004377      1223 004401      1224 004403      1225 004405
   1226 004407      1227 004411      1228 004413      1229 004415      1231 004417      1232 004421      1233 004423
   1234 004425      1235 004427      1236 004431      1237 004433      1238 004435      1239 004437      1240 004441
   1241 004443      1242 004445      1243 004447      1244 004451      1245 004453      1246 004455      1248 004457
   1249 004461      1250 004463      1251 004465      1252 004467      1253 004471      1254 004473      1255 004475
   1256 004477      1257 004501      1258 004503      1259 004505      1260 004507      1261 004511      1262 004513
   1263 004515      1265 004517      1266 004521      1267 004523      1268 004525      1269 004527      1270 004531
   1271 004533      1272 004535      1273 004537      1274 004541      1275 004543      1276 004545      1277 004547
   1278 004551      1279 004553      1280 004555      1282 004557      1283 004561      1284 004563      1285 004565
   1286 004567      1287 004571      1288 004573      1289 004575      1290 004577      1291 004601      1292 004603
   1293 004605      1294 004607      1295 004611      1296 004613      1297 004615      1299 004617      1300 004621
   1301 004623      1302 004625      1303 004627      1304 004631      1305 004633      1306 004635      1307 004637
   1308 004641      1309 004643      1310 004645      1311 004647      1312 004651      1313 004653      1314 004655
   1316 004657      1317 004661      1318 004663      1319 004665      1320 004667      1321 004671      1322 004673
   1323 004675      1324 004677      1325 004701      1326 004703      1327 004705      1328 004707      1329 004711
   1330 004713      1331 004715      1333 004717      1334 004721      1335 004723      1336 004725      1337 004727
   1338 004731      1339 004733      1340 004735      1341 004737      1342 004741      1343 004743      1344 004745
   1345 004747      1346 004751      1347 004753      1348 004755      1350 004757      1351 004761      1352 004763
   1353 004765      1354 004767      1355 004771      1356 004773      1357 004775      1358 004777      1359 005001
   1360 005003      1361 005005      1362 005007      1363 005011      1364 005013      1365 005015      1367 005017
   1368 005021      1369 005023      1370 005025      1371 005027      1372 005031      1373 005033      1374 005035
   1375 005037      1376 005041      1377 005043      1378 005045      1379 005047      1380 005051      1381 005053
   1382 005055      1384 005057      1385 005061      1386 005063      1387 005065      1388 005067      1389 005071
   1390 005073      1391 005075      1392 005077      1393 005101      1394 005103      1395 005105      1396 005107
   1397 005111      1398 005113      1399 005115      1401 005117      1402 005121      1403 005123      1404 005125
   1405 005127      1406 005131      1407 005133      1408 005135      1409 005137      1410 005141      1411 005143
   1412 005145      1413 005147      1414 005151      1415 005153      1416 005155      1418 005157      1419 005161
   1420 005163      1421 005165      1422 005167      1423 005171      1424 005173      1425 005175      1426 005177
   1427 005201      1428 005203      1429 005205      1430 005207      1431 005211      1432 005213      1433 005215
   1435 005217      1436 005221      1437 005223      1438 005225      1439 005227      1440 005231      1441 005233
   1442 005235      1443 005237      1444 005241      1445 005243      1446 005245      1447 005247      1448 005251
   1449 005253      1450 005255      1452 005257      1453 005261      1454 005263      1455 005265      1456 005267
   1457 005271      1458 005273      1459 005275      1460 005277      1461 005301      1462 005303      1463 005305
   1464 005307      1465 005311      1466 005313      1467 005315      1469 005317      1470 005321      1471 005323
   1472 005325      1473 005327      1474 005331      1475 005333      1476 005335      1477 005337      1478 005341
   1479 005343      1480 005345      1481 005347      1482 005351      1483 005353      1484 005355      1486 005357
   1487 005361      1488 005363      1489 005365      1490 005367      1491 005371      1492 005373      1493 005375
   1494 005377      1495 005401      1496 005403      1497 005405      1498 005407      1499 005411      1500 005413
   1501 005415      1503 005417      1504 005421      1505 005423      1506 005425      1507 005427      1508 005431
   1509 005433      1510 005435      1511 005437      1512 005441      1513 005443      1514 005445      1515 005447
   1516 005451      1517 005453      1518 005455      1520 005457      1521 005461      1522 005463      1523 005465
   1524 005467      1525 005471      1526 005473      1527 005475      1528 005477      1529 005501      1530 005503
   1531 005505      1532 005507      1533 005511      1534 005513      1535 005515      1537 005517      1538 005521
   1539 005523      1540 005525      1541 005527      1542 005531      1543 005533      1544 005535      1545 005537
   1546 005541      1547 005543      1548 005545      1549 005547      1550 005551      1551 005553      1552 005555
   1554 005557      1557 005560      1560 005561      1561 005564      1562 005567      1563 005571      1564 005573
   1566 005576      1567 005600      1568 005601      1570 005604      1571 005606      1573 005610      1574 005611
   1575 005613      1576 005615      1577 005617      1579 005621


Object Segment >spec>install>1212>data_type_info_
Created on 11/12/86  1701.6 mst Wed
by Martinson.SysMaint.a
using create_data_segment_, Version II of Wednesday, November 05, 1986

        Object    Text    Defs    Link    Symb  Static
Start        0       0     146     274     304     304
Length     505     146     126      10     165       0


10 Definitions:


segname:    data_type_info_

text|1          info
text|142        max_decimal_precision
text|144        max_fixed_binary_precision
text|143        max_float_binary_precision
text|131        ninebit_digit_chars
text|134        ninebit_overpunched_sign_chars
text|130        ninebit_sign_chars
symb|0          symbol_table
text|0          version_number


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
