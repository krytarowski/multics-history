	COMPILATION LISTING OF SEGMENT cg_error
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1624.3 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 cg_error:	proc(code,value) ;
       17 
       18 dcl	(code,value) fixed bin;
       19 
       20 dcl	p ptr,
       21 	n fixed bin,
       22 	cg_stat$cur_statement ptr ext static,
       23 	v12 char(12) varying,
       24 	bindec$vs entry(fixed bin,char(12) varying),
       25 	error entry(fixed bin,ptr,ptr);
       26 
  1     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  1     2 
  1     3 /* format: style3 */
  1     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  1     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  1     6 
  1     7 dcl	pl1_stat_$tree_area_ptr
  1     8 			ptr ext static,
  1     9 	pl1_stat_$xeq_tree_area_ptr
  1    10 			ptr ext static;
  1    11 
  1    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       27 
  2     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
  2     2 
  2     3 dcl	1 token			based aligned,
  2     4 	2 node_type		bit(9) unaligned,
  2     5 	2 type			bit(9) unaligned,
  2     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
  2     7 	2 declaration		ptr unaligned,
  2     8 	2 next			ptr unaligned,
  2     9 	2 size			fixed(9),
  2    10 	2 string			char(n refer(token.size));
  2    11 
  2    12 /* END INCLUDE FILE ... token.incl.pl1 */
       28 
  3     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  3     2 
  3     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  3     4 
  3     5 dcl (	block_node		initial("000000001"b),
  3     6 	statement_node		initial("000000010"b),
  3     7 	operator_node		initial("000000011"b),
  3     8 	reference_node		initial("000000100"b),
  3     9 	token_node		initial("000000101"b),
  3    10 	symbol_node		initial("000000110"b),
  3    11 	context_node		initial("000000111"b),
  3    12 	array_node		initial("000001000"b),
  3    13 	bound_node		initial("000001001"b),
  3    14 	format_value_node		initial("000001010"b),
  3    15 	list_node			initial("000001011"b),
  3    16 	default_node		initial("000001100"b),
  3    17 	machine_state_node		initial("000001101"b),
  3    18 	source_node		initial("000001110"b),
  3    19 	label_node		initial("000001111"b),
  3    20 	cross_reference_node	initial("000010000"b),
  3    21 	sf_par_node		initial("000010001"b),
  3    22 	temporary_node		initial("000010010"b),
  3    23 	label_array_element_node	initial("000010011"b),
  3    24 	by_name_agg_node		initial("000010100"b))
  3    25 				bit(9) internal static aligned options(constant);
  3    26 
  3    27 dcl	1 node			based aligned,
  3    28 	2 type			unal bit(9),
  3    29 	2 source_id		unal structure,
  3    30 	  3 file_number		bit(8),
  3    31 	  3 line_number		bit(14),
  3    32 	  3 statement_number	bit(5);
  3    33 
  3    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       29 
       30 
       31 	call bindec$vs(value,v12);
       32 	n = length(v12);
       33 
       34 	allocate token in(tree_area) set(p);
       35 	p -> node.type = token_node;
       36 	p -> token.string = v12;
       37 	call error(code,cg_stat$cur_statement,p);
       38 
       39 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1007.9  cg_error.pl1                      >spec>on>pl128d>cg_error.pl1
27           1    07/21/80  1546.3  pl1_tree_areas.incl.pl1           >ldd>include>pl1_tree_areas.incl.pl1
28           2    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
29           3    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
bindec$vs                       000012 constant        entry                    external dcl 20 ref 31
cg_stat$cur_statement           000010 external static pointer                  dcl 20 set ref 37*
code                                   parameter       fixed bin(17,0)          dcl 18 set ref 16 37*
error                           000014 constant        entry                    external dcl 20 ref 37
n                               000102 automatic       fixed bin(17,0)          dcl 20 set ref 32* 34 34
node                                   based           structure                level 1 dcl 3-27
p                               000100 automatic       pointer                  dcl 20 set ref 34* 35 36 37*
pl1_stat_$tree_area_ptr         000016 external static pointer                  dcl 1-7 ref 34
size                      3            based           fixed bin(9,0)           level 2 dcl 2-3 set ref 34* 36
string                    4            based           char                     level 2 dcl 2-3 set ref 36*
token                                  based           structure                level 1 dcl 2-3 set ref 34
token_node                             constant        bit(9)                   initial dcl 3-5 ref 35
tree_area                              based           area(1024)               dcl 1-4 ref 34
type                                   based           bit(9)                   level 2 packed unaligned dcl 3-27 set ref 35*
v12                             000103 automatic       varying char(12)         dcl 20 set ref 31* 32 36
value                                  parameter       fixed bin(17,0)          dcl 18 set ref 16 31*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 3-5
block_node                             internal static bit(9)                   initial dcl 3-5
bound_node                             internal static bit(9)                   initial dcl 3-5
by_name_agg_node                       internal static bit(9)                   initial dcl 3-5
context_node                           internal static bit(9)                   initial dcl 3-5
cross_reference_node                   internal static bit(9)                   initial dcl 3-5
default_node                           internal static bit(9)                   initial dcl 3-5
format_value_node                      internal static bit(9)                   initial dcl 3-5
label_array_element_node               internal static bit(9)                   initial dcl 3-5
label_node                             internal static bit(9)                   initial dcl 3-5
list_node                              internal static bit(9)                   initial dcl 3-5
machine_state_node                     internal static bit(9)                   initial dcl 3-5
operator_node                          internal static bit(9)                   initial dcl 3-5
pl1_stat_$xeq_tree_area_ptr            external static pointer                  dcl 1-7
reference_node                         internal static bit(9)                   initial dcl 3-5
sf_par_node                            internal static bit(9)                   initial dcl 3-5
source_node                            internal static bit(9)                   initial dcl 3-5
statement_node                         internal static bit(9)                   initial dcl 3-5
symbol_node                            internal static bit(9)                   initial dcl 3-5
temporary_node                         internal static bit(9)                   initial dcl 3-5
xeq_tree_area                          based           area(1024)               dcl 1-5

NAME DECLARED BY EXPLICIT CONTEXT.
cg_error                        000005 constant        entry                    external dcl 16

NAME DECLARED BY CONTEXT OR IMPLICATION.
length                                                 builtin function         ref 32

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       146         166      64         156
Length       374      64        20         172      62           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cg_error                             86 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cg_error                 000100 p                           cg_error
                         000102 n                           cg_error
                         000103 v12                         cg_error

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry           alloc_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
bindec$vs                     error

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cg_stat$cur_statement         pl1_stat_$tree_area_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000001        31 000012        32 000023        34 000025        35 000041        36 000043        37 000047
     39 000063


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
