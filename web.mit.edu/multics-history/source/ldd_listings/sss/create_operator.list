	COMPILATION LISTING OF SEGMENT create_operator
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1604.3 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 create_operator:
       17 	proc(type,n) returns(ptr) ;
       18 
       19 /*	this procedure allocates and initializes an operator node. */
       20 /*	Modified on:	10 August 1970 by P. Green for Version II */
       21 
       22 /*	Modified on:	April 1977 by RHS for new allocation methods */
       23 
       24 dcl	type bit(9) aligned,
       25 	(i,n,nodetype) fixed bin(15),
       26 	p ptr;
       27 
       28 dcl	pl1_stat_$free_ptr(18) ptr ext static;
       29 
       30 dcl	null builtin;
       31 dcl	pl1_stat_$node_uses(32) fixed bin ext;
       32 
  1     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  1     2 
  1     3 /* format: style3 */
  1     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  1     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  1     6 
  1     7 dcl	pl1_stat_$tree_area_ptr
  1     8 			ptr ext static,
  1     9 	pl1_stat_$xeq_tree_area_ptr
  1    10 			ptr ext static;
  1    11 
  1    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       33 
  2     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  2     2 
  2     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  2     4 
  2     5 /* format: style3 */
  2     6 dcl	1 operator	based aligned,
  2     7 	  2 node_type	bit (9) unaligned,
  2     8 	  2 op_code	bit (9) unaligned,
  2     9 	  2 shared	bit (1) unaligned,
  2    10 	  2 processed	bit (1) unaligned,
  2    11 	  2 optimized	bit (1) unaligned,
  2    12 	  2 number	fixed (14) unaligned,
  2    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  2    14 
  2    15 dcl	max_number_of_operands
  2    16 			fixed bin (15) int static options (constant) initial (32767);
  2    17 
  2    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       34 
  3     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  3     2 
  3     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  3     4 
  3     5 dcl (	block_node		initial("000000001"b),
  3     6 	statement_node		initial("000000010"b),
  3     7 	operator_node		initial("000000011"b),
  3     8 	reference_node		initial("000000100"b),
  3     9 	token_node		initial("000000101"b),
  3    10 	symbol_node		initial("000000110"b),
  3    11 	context_node		initial("000000111"b),
  3    12 	array_node		initial("000001000"b),
  3    13 	bound_node		initial("000001001"b),
  3    14 	format_value_node		initial("000001010"b),
  3    15 	list_node			initial("000001011"b),
  3    16 	default_node		initial("000001100"b),
  3    17 	machine_state_node		initial("000001101"b),
  3    18 	source_node		initial("000001110"b),
  3    19 	label_node		initial("000001111"b),
  3    20 	cross_reference_node	initial("000010000"b),
  3    21 	sf_par_node		initial("000010001"b),
  3    22 	temporary_node		initial("000010010"b),
  3    23 	label_array_element_node	initial("000010011"b),
  3    24 	by_name_agg_node		initial("000010100"b))
  3    25 				bit(9) internal static aligned options(constant);
  3    26 
  3    27 dcl	1 node			based aligned,
  3    28 	2 type			unal bit(9),
  3    29 	2 source_id		unal structure,
  3    30 	  3 file_number		bit(8),
  3    31 	  3 line_number		bit(14),
  3    32 	  3 statement_number	bit(5);
  3    33 
  3    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       35 
       36 
       37 	if n=2
       38 	then	nodetype = fixed(list_node,15,0);
       39 	else	nodetype = fixed(operator_node,15,0);
       40 
       41 	if (n=2 | n=3) & pl1_stat_$free_ptr(nodetype)^=null
       42 	then do;
       43 		p = pl1_stat_$free_ptr(nodetype);
       44 		pl1_stat_$free_ptr(nodetype) = p->operator.operand(1);
       45 	end;
       46 	else do;
       47 	     pl1_stat_$node_uses(3) = pl1_stat_$node_uses(3) + 1;
       48 	     allocate operator in(xeq_tree_area) set(p);
       49 	     end;
       50 
       51 	p->operator.node_type = operator_node;
       52 	p->operator.number=n;
       53 	p->operator.op_code=type;
       54 	p->operator.shared,
       55 	p->operator.processed,
       56 	p->operator.optimized = "0"b;
       57 	do i=1 to n;
       58 		p->operator.operand(i)=null;
       59 	end;
       60 	return(p);
       61 	end create_operator;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1007.2  create_operator.pl1               >spec>on>pl128d>create_operator.pl1
33           1    07/21/80  1546.3  pl1_tree_areas.incl.pl1           >ldd>include>pl1_tree_areas.incl.pl1
34           2    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
35           3    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
i                               000100 automatic       fixed bin(15,0)          dcl 24 set ref 57* 58*
list_node                              constant        bit(9)                   initial dcl 3-5 ref 37
n                                      parameter       fixed bin(15,0)          dcl 24 ref 16 37 41 41 48 48 52 57
node_type                              based           bit(9)                   level 2 packed unaligned dcl 2-6 set ref 51*
nodetype                        000101 automatic       fixed bin(15,0)          dcl 24 set ref 37* 39* 41 43 44
null                                                   builtin function         dcl 30 ref 41 58
number                    0(21)        based           fixed bin(14,0)          level 2 packed unaligned dcl 2-6 set ref 48* 52*
op_code                   0(09)        based           bit(9)                   level 2 packed unaligned dcl 2-6 set ref 53*
operand                   1            based           pointer                  array level 2 packed unaligned dcl 2-6 set ref 44
                                                                                  58*
operator                               based           structure                level 1 dcl 2-6 set ref 48
operator_node                          constant        bit(9)                   initial dcl 3-5 ref 39 51
optimized                 0(20)        based           bit(1)                   level 2 packed unaligned dcl 2-6 set ref 54*
p                               000102 automatic       pointer                  dcl 24 set ref 43* 44 48* 51 52 53 54 54 54 58 60
pl1_stat_$free_ptr              000010 external static pointer                  array dcl 28 set ref 41 43 44*
pl1_stat_$node_uses             000012 external static fixed bin(17,0)          array dcl 31 set ref 47* 47
pl1_stat_$xeq_tree_area_ptr     000014 external static pointer                  dcl 1-7 ref 48
processed                 0(19)        based           bit(1)                   level 2 packed unaligned dcl 2-6 set ref 54*
shared                    0(18)        based           bit(1)                   level 2 packed unaligned dcl 2-6 set ref 54*
type                                   parameter       bit(9)                   dcl 24 ref 16 53
xeq_tree_area                          based           area(1024)               dcl 1-5 ref 48

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 3-5
block_node                             internal static bit(9)                   initial dcl 3-5
bound_node                             internal static bit(9)                   initial dcl 3-5
by_name_agg_node                       internal static bit(9)                   initial dcl 3-5
context_node                           internal static bit(9)                   initial dcl 3-5
cross_reference_node                   internal static bit(9)                   initial dcl 3-5
default_node                           internal static bit(9)                   initial dcl 3-5
format_value_node                      internal static bit(9)                   initial dcl 3-5
label_array_element_node               internal static bit(9)                   initial dcl 3-5
label_node                             internal static bit(9)                   initial dcl 3-5
machine_state_node                     internal static bit(9)                   initial dcl 3-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 2-15
node                                   based           structure                level 1 dcl 3-27
pl1_stat_$tree_area_ptr                external static pointer                  dcl 1-7
reference_node                         internal static bit(9)                   initial dcl 3-5
sf_par_node                            internal static bit(9)                   initial dcl 3-5
source_node                            internal static bit(9)                   initial dcl 3-5
statement_node                         internal static bit(9)                   initial dcl 3-5
symbol_node                            internal static bit(9)                   initial dcl 3-5
temporary_node                         internal static bit(9)                   initial dcl 3-5
token_node                             internal static bit(9)                   initial dcl 3-5
tree_area                              based           area(1024)               dcl 1-4

NAME DECLARED BY EXPLICIT CONTEXT.
create_operator                 000012 constant        entry                    external dcl 16

NAME DECLARED BY CONTEXT OR IMPLICATION.
fixed                                                  builtin function         ref 37 39

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       216         234     142         226
Length       450     142        16         200      54           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
create_operator                      70 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
create_operator          000100 i                           create_operator
                         000101 nodetype                    create_operator
                         000102 p                           create_operator

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry           alloc_based

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$free_ptr            pl1_stat_$node_uses           pl1_stat_$xeq_tree_area_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000006        37 000017        39 000027        41 000032        43 000047        44 000051        45 000053
     47 000054        48 000056        51 000074        52 000077        53 000103        54 000107        57 000115
     58 000125        59 000130        60 000132


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
