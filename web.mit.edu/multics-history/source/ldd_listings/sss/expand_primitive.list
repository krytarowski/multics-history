	COMPILATION LISTING OF SEGMENT expand_primitive
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1357.4 mst Mon
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*        *                                                         *
        5*        * Copyright (c) 1972 by Massachusetts Institute of        *
        6*        * Technology and Honeywell Information Systems, Inc.      *
        7*        *                                                         *
        8*        *********************************************************** */
        9 
       10 
       11 
       12 
       13 /****^  HISTORY COMMENTS:
       14*  1) change(86-07-15,Ginter), approve(86-07-15,MCR7287), audit(86-07-16,Mabey),
       15*     install(86-07-28,MR12.0-1105):
       16*     Bug fixes for the MR12.0 release of the compiler.
       17*                                                   END HISTORY COMMENTS */
       18 
       19 
       20 /*	Modified:	781219 by RAB to fix 1806 (star_extent exprs get ERROR 316)	*/
       21 /*	Modified: 17 Mar 1980 by PCK to implement by name assignment */
       22 /*		Also fixes 1878				 */
       23 /*	Modified: 2 April 1980 by PCK to increase implementation limit
       24*		of the number of substructures that may immediately
       25*		be contained in a structure from a minimum of 256 to
       26*		a minimum of 32767 */
       27 /*	Modified: 7 June 1985 by MM to fix 2109 (by name assignments that
       28*		generate temporaries aren't handled correctly.) */
       29 
       30 /* format: style3 */
       31 expand_primitive:
       32      proc (blk, stmnt, input_tree, context) returns (ptr);
       33 
       34 dcl	(blk, stmnt, tree, input_tree, one, subs, loops, last, qual, p, a, b, s, symbols_block, bna)
       35 			ptr;
       36 dcl	(i, given, ndims, n, stars_given)
       37 			fixed bin (15);
       38 dcl	pds		bit (1) aligned;
       39 dcl	pl1_stat_$eis_mode	bit (1) aligned ext static;
       40 dcl	pl1_stat_$by_name_parts_tree
       41 			ptr aligned ext static;
       42 
       43 dcl	null		builtin;
       44 
       45 	if input_tree -> node.type = operator_node
       46 	then return (input_tree);
       47 
       48 /* generates a LOOP/JOIN tree processed by subscripter and by expression_semantics */
       49 
       50 	last, loops = null;
       51 	this_context = "0"b;
       52 	one = declare_constant$integer (1);
       53 	stars_given, n = 0;
       54 
       55 	if def_context.by_name_assignment
       56 	then bna = pl1_stat_$by_name_parts_tree;
       57 	else bna = null;
       58 
       59 	s = input_tree -> reference.symbol;
       60 
       61 	if s -> symbol.block_node = null
       62 	then symbols_block = blk;
       63 	else symbols_block = s -> symbol.block_node;
       64 
       65 	if s -> symbol.reference = input_tree | input_tree -> reference.array_ref
       66 	then do;
       67 		tree = create_reference ((input_tree -> reference.symbol));
       68 		tree -> reference = input_tree -> reference;
       69 	     end;
       70 	else tree = input_tree;
       71 
       72 /*  handling the case of unsubscripted array reference */
       73 
       74 	if s -> node.type = label_node
       75 	then do;
       76 		b = create_bound ();
       77 		b -> bound.c_lower = s -> label.low_bound;
       78 		b -> bound.c_upper = s -> label.high_bound;
       79 		b -> bound.c_multiplier = 1;
       80 		subs = create_list (1);
       81 		subs -> list.element (1) = create_token ("*", asterisk);
       82 		given = 1;
       83 	     end;
       84 	else do;
       85 		qual = tree -> reference.qualifier;
       86 
       87 		subs = tree -> reference.offset;
       88 
       89 		if subs = null
       90 		then given = 0;
       91 		else if subs -> node.type ^= list_node
       92 		then do;
       93 			given = 0;		/*   simplify-offset may have already split the
       94*					     offset into offset and c_offset with disastrous
       95*					     results, therefore, undo the work   */
       96 			pds = tree -> reference.put_data_sw;
       97 			tree -> reference = tree -> reference.symbol -> symbol.reference -> reference;
       98 			tree -> reference.put_data_sw = pds;
       99 			tree -> reference.shared = "0"b;
      100 			tree -> reference.ref_count = 1;
      101 			subs = null;
      102 		     end;
      103 		else do;
      104 			subs = copy_expression ((subs));
      105 						/* preserve original subs */
      106 			given = subs -> list.number;
      107 		     end;
      108 
      109 		a = s -> symbol.array;
      110 
      111 		if a ^= null
      112 		then ndims = a -> array.number_of_dimensions;
      113 		else ndims = 0;
      114 
      115 /*   the case of an unsubscripted structure or a scalar   */
      116 		if given = 0 & ndims = 0
      117 		then return (expander (tree, bna));
      118 
      119 		if ndims ^= given & given ^= 0
      120 		then call semantic_translator$abort (81, s);
      121 
      122 		b = a -> array.bounds;
      123 		tree -> reference.offset = copy_expression (s -> symbol.reference -> reference.offset);
      124 		if tree -> reference.length ^= null
      125 		then tree -> reference.length = copy_expression (tree -> reference.length);
      126 	     end;
      127 
      128 /*   This reference is (or will be) a fully subscripted array reference.  
      129*Implied asterisks will be added.  */
      130 
      131 	if given = 0
      132 	then do;
      133 		n, given = ndims;
      134 		subs = create_list (ndims);
      135 
      136 		subs -> list.element (*) = create_token ("*", asterisk);
      137 	     end;
      138 	else do i = 1 to given;			/* count the asterisks */
      139 		p = subs -> list.element (i);
      140 
      141 		if p -> node.type = token_node
      142 		then if p -> token.type = asterisk
      143 		     then n = n + 1;
      144 	     end;
      145 
      146 	stars_given = n;
      147 
      148 	do i = 1 to given;
      149 	     p = subs -> list.element (i);
      150 
      151 	     if p -> node.type = token_node
      152 	     then if p -> token.type = asterisk
      153 		then do;
      154 			p = make_loop (n, b, s);
      155 			n = n - 1;
      156 			p -> operand (1) = loops;
      157 			loops = p;
      158 			if last = null
      159 			then last = p;
      160 
      161 			if b -> bound.c_lower ^= 1
      162 			then do;
      163 				if b -> bound.lower = null
      164 				then b -> bound.lower = declare_constant$integer ((b -> bound.c_lower));
      165 				subs -> list.element (i) =
      166 				     addf ((p -> operand (2)), subf (copy_expression (b -> bound.lower), one));
      167 			     end;
      168 			else subs -> list.element (i) = p -> operand (2);
      169 		     end;
      170 
      171 	     b = b -> bound.next;
      172 	end;
      173 
      174 	tree -> reference.array_ref = "0"b;
      175 
      176 	if s -> node.type = label_node
      177 	then do;
      178 		p = subscripter (blk, stmnt, tree, subs, s);
      179 		p -> reference.offset = expression_semantics (blk, stmnt, (p -> reference.offset), "0"b);
      180 		call simplify_offset (p, context);
      181 	     end;
      182 	else if s -> symbol.structure
      183 	then p = expander (tree, bna);
      184 	else p = process_subscripted_reference (tree, subs);
      185 
      186 	if last = null
      187 	then return (p);
      188 
      189 	last -> operand (1) = p;
      190 
      191 	return (loops);
      192 
      193 /* builds ALL loops for THIS level except as noted for the major structure */
      194 
      195 expander:
      196      proc (tree, bna) returns (ptr);
      197 
      198 /* parameters */
      199 
      200 dcl	tree		ptr;			/* reference to be expanded into loop/join operators */
      201 dcl	bna		ptr;			/* by name parts tree--for expanding structure refs
      202*			in by name assignments	*/
      203 
      204 /* automatic */
      205 
      206 dcl	(s, a, q, qt, b, p, bnm, join_operator)
      207 			ptr;
      208 dcl	(k, i, n, m, our_last_index)
      209 			fixed bin (15);
      210 dcl	first_time	bit (1) aligned;
      211 dcl	number_of_members	fixed bin (35);
      212 
      213 	first_time = "1"b;
      214 	s = tree -> reference.symbol;
      215 	a = s -> symbol.array;
      216 
      217 	if a ^= null
      218 	then do;
      219 		n = a -> array.number_of_dimensions;
      220 		m = n + 1 - a -> array.own_number_of_dimensions;
      221 		our_last_index = n - given + stars_given;
      222 	     end;
      223 
      224 /* If this is a structure call yourself for each son and collect the results.  */
      225 
      226 	if s -> symbol.structure
      227 	then do;
      228 
      229 		k = 0;
      230 		bnm = null;
      231 
      232 /* Expand all members of the structure if this is ordinary
      233*		   (not by name assignment) aggregate expansion, otherwise
      234*		   use the by name parts tree to select members that
      235*		   have names that match other structures in the by name
      236*		   assignment. */
      237 
      238 		if ^def_context.by_name_assignment
      239 		then do;
      240 			number_of_members = 0;
      241 			do q = s -> symbol.son repeat q -> symbol.brother while (q ^= null);
      242 			     number_of_members = number_of_members + 1;
      243 			end;
      244 
      245 			if number_of_members > max_number_of_operands
      246 			then call semantic_translator$abort (383, s);
      247 
      248 			join_operator = create_operator (join, (number_of_members));
      249 			do q = s -> symbol.son repeat q -> symbol.brother while (q ^= null);
      250 			     call expand_son (q, bnm);
      251 			end;
      252 		     end;
      253 		else do;
      254 			number_of_members = 0;
      255 			do bnm = bna -> by_name_agg.son repeat bnm -> by_name_agg.right_brother while (bnm ^= null);
      256 			     number_of_members = number_of_members + 1;
      257 			end;
      258 
      259 			if number_of_members > max_number_of_operands
      260 			then call semantic_translator$abort (383, s);
      261 
      262 			join_operator = create_operator (join, (number_of_members));
      263 			do bnm = bna -> by_name_agg.son repeat bnm -> by_name_agg.right_brother while (bnm ^= null);
      264 			     do q = s -> symbol.son repeat q -> symbol.brother
      265 				while (q -> symbol.token ^= bnm -> by_name_agg.token);
      266 			     end;
      267 			     call expand_son (q, bnm);
      268 			end;
      269 		     end;
      270 
      271 /* If this is not an array reference, return the join operator.  */
      272 
      273 		if ^tree -> reference.array_ref
      274 		then return (join_operator);
      275 
      276 		q = join_operator;
      277 		goto make_my_loops;
      278 	     end;
      279 
      280 
      281 	if ^tree -> reference.array_ref
      282 	then do;
      283 		if ^tree -> reference.processed
      284 		then do;
      285 			tree -> reference.qualifier = qual;
      286 
      287 			tree = expression_semantics (blk, stmnt, tree, this_context);
      288 		     end;
      289 
      290 		return (tree);
      291 	     end;
      292 
      293 
      294 /* create a set of subscripts adjusted to compensate for the fact that the loop will run from
      295*   1 to n rather than from lb to hb.	*/
      296 
      297 	b = a -> array.bounds;
      298 	q = create_list ((a -> array.number_of_dimensions));
      299 
      300 	do i = 1 to n - given;
      301 	     p = declare_index (our_last_index + 1 - i);
      302 	     if b -> bound.c_lower ^= 1
      303 	     then do;
      304 		     if b -> bound.lower = null
      305 		     then b -> bound.lower = declare_constant$integer ((b -> bound.c_lower));
      306 		     q -> list.element (i) = addf (p, subf (copy_expression (b -> bound.lower), one));
      307 		end;
      308 	     else q -> list.element (i) = p;
      309 
      310 	     b = b -> bound.next;
      311 	end;
      312 
      313 	k = 0;
      314 
      315 	do i = n - given + 1 to n;
      316 	     k = k + 1;
      317 	     q -> list.element (i) = copy_expression (subs -> list.element (k));
      318 	end;
      319 
      320 	q = process_subscripted_reference (tree, q);
      321 
      322 
      323 
      324 /* make a loop operator for each dimension at THIS level; i.e., excluding inherited dimensions.  */
      325 
      326 make_my_loops:
      327 	b = a -> array.bounds;
      328 
      329 	k = 0;
      330 
      331 	if n ^= given
      332 	then do i = m to n;
      333 		p = make_loop (our_last_index - k, b, s);
      334 		p -> operand (1) = q;
      335 		q = p;
      336 		b = b -> bound.next;
      337 		k = k + 1;
      338 	     end;
      339 
      340 /* return the top loop operator.  */
      341 
      342 	return (q);
      343 
      344 /* Expands a son of a structure into loop and join operators */
      345 
      346 expand_son:
      347      procedure (q, bnm);
      348 
      349 /* parameters */
      350 
      351 dcl	q		ptr;			/* A son of the structure being expanded by expander */
      352 dcl	bnm		ptr;			/* The corresponding point in the by_name_parts_tree or null */
      353 
      354 	k = k + 1;
      355 
      356 	qt = create_reference (q);
      357 	qt -> reference = q -> symbol.reference -> reference;
      358 	qt -> reference.shared = "0"b;
      359 	qt -> reference.ref_count = 1;
      360 	qt -> reference.length = copy_expression (qt -> reference.length);
      361 	qt -> reference.offset = copy_expression (qt -> reference.offset);
      362 
      363 	if ^first_time
      364 	then qt -> reference.qualifier = share_expression (qual);
      365 	else do;
      366 		first_time = "0"b;
      367 		qt -> reference.qualifier = qual;
      368 
      369 /* force temp, if any, to be unshared so
      370*		   simplify_offset will not try to alter qualifier */
      371 
      372 		if qual ^= null
      373 		then if qual -> node.type = operator_node
      374 		     then if qual -> operand (1) -> reference.shared
      375 			then do;
      376 				qual -> operand (1) = copy_expression (qual -> operand (1));
      377 				qual -> operand (1) -> reference.shared = "0"b;
      378 				qual -> operand (1) -> reference.ref_count = 1;
      379 			     end;
      380 	     end;
      381 
      382 	qt -> reference.put_data_sw = tree -> reference.put_data_sw;
      383 
      384 	if tree -> reference.array_ref
      385 	then qt -> reference.array_ref = "1"b;
      386 	else if qt -> reference.symbol -> symbol.array ^= null
      387 	then if qt -> reference.symbol -> symbol.array -> array.own_number_of_dimensions ^= 0
      388 	     then qt -> reference.array_ref = "1"b;
      389 	     else qt -> reference.array_ref = "0"b;
      390 	else qt -> reference.array_ref = "0"b;
      391 
      392 	if ^qt -> reference.array_ref & subs ^= null
      393 	then qt = process_subscripted_reference (qt, copy_expression ((subs)));
      394 
      395 	join_operator -> operator.operand (k) = expander (qt, bnm);
      396 
      397 	return;
      398 
      399      end /* expand_son */;
      400 
      401      end /* expander */;
      402 
      403 process_subscripted_reference:
      404      proc (tree, subs) returns (ptr);
      405 
      406 dcl	(tree, subs, p, s)	ptr;
      407 
      408 dcl	constant		fixed bin,
      409 	modified		bit (1) aligned;
      410 
      411 dcl	pl1_stat_$locator	(128) ptr ext static,
      412 	pl1_stat_$index	fixed bin (15) ext static;
      413 
      414 	s = tree -> reference.symbol;
      415 
      416 	if qual ^= null
      417 	then do;
      418 		pl1_stat_$index = pl1_stat_$index + 1;
      419 		if pl1_stat_$index > hbound (pl1_stat_$locator, 1)
      420 		then do;
      421 			call semantic_translator$abort (70, s);
      422 			return (null);
      423 		     end;
      424 		pl1_stat_$locator (pl1_stat_$index) = tree;
      425 	     end;
      426 
      427 	if s -> symbol.defined
      428 	then p = defined_reference (blk, stmnt, tree, subs, s, this_context);
      429 	else p = subscripter (blk, stmnt, tree, (subs), s);
      430 
      431 	p -> reference.array_ref = "0"b;
      432 
      433 	if s -> symbol.defined
      434 	then ;
      435 	else p -> reference.qualifier = qual;
      436 
      437 	if p -> reference.offset ^= null
      438 	then do;
      439 		if ^pl1_stat_$eis_mode
      440 		then call bit_ptr ((p -> reference.offset), qual);
      441 		p -> reference.offset =
      442 		     expression_semantics (symbols_block, stmnt, (p -> reference.offset), this_context);
      443 
      444 		p -> reference.offset = convert$to_integer ((p -> reference.offset), integer_type);
      445 
      446 		call simplify_expression ((p -> reference.offset), constant, modified);
      447 
      448 		if modified
      449 		then do;
      450 			p -> reference.offset = null;
      451 			p -> reference.c_offset = constant;
      452 		     end;
      453 	     end;
      454 
      455 	if p -> reference.length ^= null
      456 	then do;
      457 		p -> reference.length =
      458 		     expression_semantics (symbols_block, stmnt, (p -> reference.length), this_context);
      459 		p -> reference.length = convert$to_integer ((p -> reference.length), integer_type);
      460 	     end;
      461 
      462 	call simplify_offset (p, context);
      463 
      464 	if qual ^= null
      465 	then pl1_stat_$index = pl1_stat_$index - 1;
      466 
      467 	p -> reference.processed = "1"b;		/* otherwise expression_semantics might destroy offset, modword... */
      468 
      469 	return (p);
      470 
      471      end process_subscripted_reference;
      472 
      473 /* subroutine to create a loop operator */
      474 
      475 make_loop:
      476      proc (i, b, s) returns (ptr);
      477 
      478 dcl	i		fixed bin (15);
      479 dcl	constant_field	fixed bin;
      480 dcl	(p, q, b, s, lower, upper)
      481 			ptr;
      482 dcl	(constant, modified)
      483 			bit (1) aligned;
      484 
      485 	if b -> bound.lower = null
      486 	then lower, b -> bound.lower = declare_constant$integer ((b -> bound.c_lower));
      487 	else lower = copy_expression (b -> bound.lower);
      488 
      489 	if b -> bound.upper = null
      490 	then upper, b -> bound.upper = declare_constant$integer ((b -> bound.c_upper));
      491 	else upper = copy_expression (b -> bound.upper);
      492 
      493 	p = create_operator (loop, 5);
      494 	p -> operand (2) = declare_index ((i));
      495 	p -> operand (3) = one;
      496 
      497 	if lower -> node.type = reference_node & upper -> node.type = reference_node
      498 	then if lower -> reference.symbol -> node.type = symbol_node
      499 		& upper -> reference.symbol -> node.type = symbol_node
      500 	     then if lower -> reference.symbol -> symbol.constant & upper -> reference.symbol -> symbol.constant
      501 		then constant = "1"b;
      502 		else constant = "0"b;
      503 	     else constant = "0"b;
      504 	else constant = "0"b;
      505 
      506 	if b -> bound.c_lower = 1
      507 	then p -> operand (4) = upper;
      508 	else if constant
      509 	then p -> operand (4) = declare_constant$integer (b -> bound.c_upper - b -> bound.c_lower + 1);
      510 	else p -> operand (4) = subf (upper, subf (lower, one));
      511 
      512 	q = p -> operand (4);
      513 	call refer_extent (q, qual);
      514 
      515 	p -> operand (4) = expression_semantics (symbols_block, stmnt, q, this_context);
      516 	p -> operand (4) = convert$to_integer ((p -> operand (4)), integer_type);
      517 
      518 	call simplify_expression ((p -> operand (4)), constant_field, modified);
      519 
      520 	if modified
      521 	then p -> operand (4) = declare_constant$integer ((constant_field));
      522 
      523 	return (p);
      524 
      525      end make_loop;
      526 
      527 /* subroutine to declare an index variable.  */
      528 
      529 declare_index:
      530      proc (i) returns (ptr);
      531 
      532 dcl	i		fixed bin (7);
      533 dcl	(t, d)		ptr;
      534 
      535 	t = create_token ("s." || bindec$vs ((i)), identifier);
      536 
      537 	do d = t -> token.declaration repeat d -> symbol.multi_use while (d ^= null);
      538 	     if d -> symbol.block_node = blk
      539 	     then return (d -> symbol.reference);
      540 	end;
      541 
      542 	d = create_symbol (blk, t, by_compiler);
      543 	d -> symbol.fixed, d -> symbol.binary, d -> symbol.real, d -> symbol.auto, d -> symbol.allocate = "1"b;
      544 
      545 	call declare (d);
      546 
      547 	return (d -> symbol.reference);
      548 
      549      end declare_index;
      550 
      551 /* subroutine to create expressions. */
      552 
      553 addf:
      554      proc (a, b) returns (ptr);
      555 
      556 dcl	(a, b, c)		ptr;
      557 dcl	opcode		bit (9) aligned;
      558 
      559 	opcode = add;
      560 
      561 	go to common;
      562 
      563 subf:
      564      entry (a, b) returns (ptr);
      565 
      566 	opcode = sub;
      567 common:
      568 	c = create_operator (opcode, 3);
      569 	c -> operand (2) = a;
      570 	c -> operand (3) = b;
      571 
      572 	return (c);
      573 
      574      end addf;
      575 
      576 bit_ptr:
      577      proc (exp, q);
      578 
      579 dcl	(exp, q)		ptr;
      580 dcl	i		fixed bin (15);
      581 
      582 	if exp = null
      583 	then return;
      584 	if exp -> node.type ^= operator_node
      585 	then return;
      586 
      587 	if exp -> op_code = bit_pointer
      588 	then do;
      589 		exp -> operand (1) = declare_temporary (integer_type, default_fix_bin_p, 0, null);
      590 		exp -> operand (2) = share_expression (q);
      591 		exp -> operator.processed = "1"b;
      592 	     end;
      593 	else do i = 2 to exp -> operator.number;
      594 		call bit_ptr ((exp -> operand (i)), q);
      595 	     end;
      596 
      597      end bit_ptr;
      598 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      599 
  8     1 dcl	1 array			based aligned,
  8     2 	2 node_type		bit(9) unaligned,
  8     3 	2 reserved		bit(34) unaligned,
  8     4 	2 number_of_dimensions	fixed(7) unaligned,
  8     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  8     6 	2 element_boundary		fixed(3) unaligned,
  8     7 	2 size_units		fixed(3) unaligned,
  8     8 	2 offset_units		fixed(3) unaligned,
  8     9 	2 interleaved		bit(1) unaligned,
  8    10 	2 c_element_size		fixed(24),
  8    11 	2 c_element_size_bits	fixed(24),
  8    12 	2 c_virtual_origin		fixed(24),
  8    13 	2 element_size		ptr unaligned,
  8    14 	2 element_size_bits		ptr unaligned,
  8    15 	2 virtual_origin		ptr unaligned,
  8    16 	2 symtab_virtual_origin	ptr unaligned,
  8    17 	2 symtab_element_size	ptr unaligned,
  8    18 	2 bounds			ptr unaligned,
  8    19 	2 element_descriptor	ptr unaligned;
  8    20 
  8    21 dcl	1 bound			based aligned,
  8    22 	2 node_type		bit(9),
  8    23 	2 c_lower			fixed(24),
  8    24 	2 c_upper			fixed(24),
  8    25 	2 c_multiplier		fixed(24),
  8    26 	2 c_desc_multiplier		fixed(24),
  8    27 	2 lower			ptr unaligned,
  8    28 	2 upper			ptr unaligned,
  8    29 	2 multiplier		ptr unaligned,
  8    30 	2 desc_multiplier		ptr unaligned,
  8    31 	2 symtab_lower		ptr unaligned,
  8    32 	2 symtab_upper		ptr unaligned,
  8    33 	2 symtab_multiplier		ptr unaligned,
  8    34 	2 next			ptr unaligned;
      600 
  9     1 /* BEGIN INCLUDE FILE .. by_name_agg.incl.pl1 */
  9     2 
  9     3 dcl	1 by_name_agg	based aligned,
  9     4 	2 node_type	bit(9) unal,
  9     5 	2 pad		bit(26) unal,
  9     6 	2 ok_to_free	bit(1) unal,
  9     7 	2 token		ptr unal,
  9     8 	2 father		ptr unal,
  9     9 	2 left_brother	ptr unal,
  9    10 	2 right_brother	ptr unal,
  9    11 	2 son		ptr unal,
  9    12 	2 next		ptr unal;
  9    13 
  9    14 /* END INCLUDE FILE ... by_name_agg.incl.pl1 */
      601 
 10     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 10     2 
 10     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 10     4 
 10     5 dcl  (	by_declare	initial("001"b),
 10     6 	by_explicit_context initial("010"b),
 10     7 	by_context	initial("011"b),
 10     8 	by_implication	initial("100"b),
 10     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 10    10 
 10    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      602 
 11     1 dcl	1 label			based aligned,
 11     2 	2 node_type		bit(9) unaligned,
 11     3 	2 source_id		structure unaligned,
 11     4 	  3 file_number		bit(8),
 11     5 	  3 line_number		bit(14),
 11     6 	  3 statement_number	bit(5),
 11     7 	2 location		fixed(17) unaligned,
 11     8 	2 allocated		bit(1) unaligned,
 11     9 	2 dcl_type		bit(3) unaligned,
 11    10 	2 reserved		bit(29) unaligned,
 11    11 	2 array			bit(1) unaligned,
 11    12 	2 used_as_format		bit(1) unaligned,
 11    13 	2 used_in_goto		bit(1) unaligned,
 11    14 	2 symbol_table		bit(18) unaligned,
 11    15 	2 low_bound		fixed(17) unaligned,
 11    16 	2 high_bound		fixed(17) unaligned,
 11    17 	2 block_node		ptr unaligned,
 11    18 	2 token			ptr unaligned,
 11    19 	2 next			ptr unaligned,
 11    20 	2 multi_use		ptr unaligned,
 11    21 	2 cross_reference		ptr unaligned,
 11    22 	2 statement		ptr unaligned;
      603 
 12     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 12     2 
 12     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 12     4 
 12     5 
 12     6 dcl	1 list		based aligned,
 12     7 	2 node_type	bit(9) unaligned,
 12     8 	2 reserved	bit(12) unaligned,
 12     9 	2 number		fixed(14) unaligned,
 12    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 12    11 
 12    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 12    13 	                    init(16383);
 12    14 
 12    15 /* END INCLUDE FILE ... list.incl.pl1 */
      604 
 13     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 13     2 
 13     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 13     4 
 13     5 dcl (	block_node		initial("000000001"b),
 13     6 	statement_node		initial("000000010"b),
 13     7 	operator_node		initial("000000011"b),
 13     8 	reference_node		initial("000000100"b),
 13     9 	token_node		initial("000000101"b),
 13    10 	symbol_node		initial("000000110"b),
 13    11 	context_node		initial("000000111"b),
 13    12 	array_node		initial("000001000"b),
 13    13 	bound_node		initial("000001001"b),
 13    14 	format_value_node		initial("000001010"b),
 13    15 	list_node			initial("000001011"b),
 13    16 	default_node		initial("000001100"b),
 13    17 	machine_state_node		initial("000001101"b),
 13    18 	source_node		initial("000001110"b),
 13    19 	label_node		initial("000001111"b),
 13    20 	cross_reference_node	initial("000010000"b),
 13    21 	sf_par_node		initial("000010001"b),
 13    22 	temporary_node		initial("000010010"b),
 13    23 	label_array_element_node	initial("000010011"b),
 13    24 	by_name_agg_node		initial("000010100"b))
 13    25 				bit(9) internal static aligned options(constant);
 13    26 
 13    27 dcl	1 node			based aligned,
 13    28 	2 type			unal bit(9),
 13    29 	2 source_id		unal structure,
 13    30 	  3 file_number		bit(8),
 13    31 	  3 line_number		bit(14),
 13    32 	  3 statement_number	bit(5);
 13    33 
 13    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      605 
 14     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 14     2 
 14     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 14     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 14     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 14     6 /* Modified: 26 July 82 BIM wordno, segno */
 14     7 
 14     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 14     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 14    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 14    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 14    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 14    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 14    14 
 14    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 14    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 14    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 14    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 14    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 14    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 14    21 
 14    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 14    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 14    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 14    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 14    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 14    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 14    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 14    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 14    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 14    31 
 14    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 14    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 14    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 14    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 14    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 14    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 14    38 
 14    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 14    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 14    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 14    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 14    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 14    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 14    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 14    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 14    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 14    48 
 14    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 14    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 14    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 14    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 14    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 14    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 14    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 14    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 14    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 14    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 14    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 14    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 14    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 14    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 14    63 
 14    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 14    65*						   opnd(2) <- opnd(3) / 36		*/
 14    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 14    67*						   opnd(2) <- opnd(3) / 4		*/
 14    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 14    69*						   opnd(2) <- opnd(3) / 2		*/
 14    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 14    71 
 14    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 14    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 14    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 14    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 14    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 14    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 14    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 14    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 14    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 14    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 14    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 14    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 14    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 14    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 14    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 14    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 14    88 
 14    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 14    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 14    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 14    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 14    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 14    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 14    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 14    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 14    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 14    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 14    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 14   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 14   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 14   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 14   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 14   104 
 14   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 14   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 14   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 14   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 14   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 14   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 14   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 14   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 14   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 14   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 14   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 14   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 14   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 14   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 14   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 14   120 
 14   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 14   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 14   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 14   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 14   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 14   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 14   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 14   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 14   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 14   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 14   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 14   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 14   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 14   134 
 14   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 14   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 14   137 
 14   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 14   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 14   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 14   141*						   opnd(2) is the file name
 14   142*						   opnd(3) is the block	*/
 14   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 14   144*						   opnd(2) is the file name	*/
 14   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 14   146*						   opnd(2) is the file name */
 14   147 
 14   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 14   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 14   150*						   opnd(3) is old value, (4) is new value. */
 14   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 14   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 14   153 
 14   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 14   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 14   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 14   157*						   opnd(5) is the list */
 14   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 14   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 14   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 14   161 
 14   162 	r_parn		initial("011110001"b),	/* format op code			*/
 14   163 	l_parn		initial("011110010"b),
 14   164 	r_format		initial("011110011"b),
 14   165 	c_format		initial("011110100"b),
 14   166 	f_format		initial("011110101"b),
 14   167 	e_format		initial("011110110"b),
 14   168 	b_format		initial("011110111"b),
 14   169 	a_format		initial("011111000"b),
 14   170 	x_format		initial("011111001"b),
 14   171 	skip_format	initial("011111010"b),
 14   172 	column_format	initial("011111011"b),
 14   173 	page_format	initial("011111100"b),
 14   174 	line_format	initial("011111101"b),
 14   175 	picture_format	initial("011111110"b),
 14   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 14   177 
 14   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 14   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 14   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 14   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 14   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 14   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 14   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 14   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 14   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 14   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 14   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 14   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 14   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 14   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 14   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 14   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 14   194 
 14   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 14   196 /* They are processed by the semantic translator.						*/
 14   197 
 14   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 14   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 14   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 14   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 14   202 						/* opnd(3) is skip, opnd(4) is list	*/
 14   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 14   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 14   205 						/* opnd(3) is skip,opnd(4) is line	*/
 14   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 14   207 	open_file		initial("100011001"b),
 14   208 	close_file	initial("100011010"b),
 14   209 	read_file		initial("100011011"b),
 14   210 	write_file	initial("100011100"b),
 14   211 	locate_file	initial("100011101"b),
 14   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 14   213 						/* opnd(2) is control variable ref	*/
 14   214 						/* opnd(3) is specification operator	*/
 14   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 14   216 						/* repeat opnd(4) while opnd(5)	*/
 14   217 						/* opnd(6) is next specification	*/
 14   218 
 14   219 	rewrite_file	initial("100100000"b),
 14   220 	delete_file	initial("100100001"b),
 14   221 	unlock_file	initial("100100010"b),
 14   222 	lock_file		initial("100100011"b),
 14   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 14   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 14   225 	nop		initial("100100111"b),	/* no-op */
 14   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 14   227 
 14   228 /* These operators are produced by the semantic translator in processing the math
 14   229*   builtin functions and are used as input to the code generator			*/
 14   230 
 14   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 14   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 14   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 14   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 14   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 14   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 14   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 14   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 14   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 14   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 14   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 14   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 14   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 14   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 14   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 14   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 14   247 
 14   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 14   249 
 14   250 			bit(9) aligned internal static options(constant);
 14   251 
 14   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      606 
 15     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 15     2 
 15     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 15     4 
 15     5 /* format: style3 */
 15     6 dcl	1 operator	based aligned,
 15     7 	  2 node_type	bit (9) unaligned,
 15     8 	  2 op_code	bit (9) unaligned,
 15     9 	  2 shared	bit (1) unaligned,
 15    10 	  2 processed	bit (1) unaligned,
 15    11 	  2 optimized	bit (1) unaligned,
 15    12 	  2 number	fixed (14) unaligned,
 15    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 15    14 
 15    15 dcl	max_number_of_operands
 15    16 			fixed bin (15) int static options (constant) initial (32767);
 15    17 
 15    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      607 
 16     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 16     2 
 16     3 dcl	1 reference		based aligned,
 16     4 	2 node_type		bit(9) unaligned,
 16     5 	2 array_ref		bit(1) unaligned,
 16     6 	2 varying_ref		bit(1) unaligned,
 16     7 	2 shared			bit(1) unaligned,
 16     8 	2 put_data_sw		bit(1) unaligned,
 16     9 	2 processed		bit(1) unaligned,
 16    10 	2 units			fixed(3) unaligned,
 16    11 	2 ref_count		fixed(17) unaligned,
 16    12 	2 c_offset		fixed(24),
 16    13 	2 c_length		fixed(24),
 16    14 	2 symbol			ptr unaligned,
 16    15 	2 qualifier		ptr unaligned,
 16    16 	2 offset			ptr unaligned,
 16    17 	2 length			ptr unaligned,
 16    18 	2 subscript_list		ptr unaligned,
 16    19 						/* these fields are used by the 645 code generator */
 16    20 	2 address			structure unaligned,
 16    21 	  3 base			bit(3),
 16    22 	  3 offset		bit(15),
 16    23 	  3 op			bit(9),
 16    24 	  3 no_address		bit(1),
 16    25 	  3 inhibit		bit(1),
 16    26 	  3 ext_base		bit(1),
 16    27 	  3 tag			bit(6),
 16    28 	2 info			structure unaligned,
 16    29 	  3 address_in		structure,
 16    30 	    4 b			dimension(0:7) bit(1),
 16    31 	    4 storage		bit(1),
 16    32 	  3 value_in		structure,
 16    33 	    4 a			bit(1),
 16    34 	    4 q			bit(1),
 16    35 	    4 aq			bit(1),
 16    36 	    4 string_aq		bit(1),
 16    37 	    4 complex_aq		bit(1),
 16    38 	    4 decimal_aq		bit(1),
 16    39 	    4 b			dimension(0:7) bit(1),
 16    40 	    4 storage		bit(1),
 16    41 	    4 indicators		bit(1),
 16    42 	    4 x			dimension(0:7) bit(1),
 16    43 	  3 other			structure,
 16    44 	    4 big_offset		bit(1),
 16    45 	    4 big_length		bit(1),
 16    46 	    4 modword_in_offset	bit(1),
 16    47 	2 data_type		fixed(5) unaligned,
 16    48 	2 bits			structure unaligned,
 16    49 	  3 padded_ref		bit(1),
 16    50 	  3 aligned_ref		bit(1),
 16    51 	  3 long_ref		bit(1),
 16    52 	  3 forward_ref		bit(1),
 16    53 	  3 ic_ref		bit(1),
 16    54 	  3 temp_ref		bit(1),
 16    55 	  3 defined_ref		bit(1),
 16    56 	  3 evaluated		bit(1),
 16    57 	  3 allocate		bit(1),
 16    58 	  3 allocated		bit(1),
 16    59 	  3 aliasable		bit(1),
 16    60 	  3 even			bit(1),
 16    61 	  3 perm_address		bit(1),
 16    62 	  3 aggregate		bit(1),
 16    63 	  3 hit_zero		bit(1),
 16    64 	  3 dont_save		bit(1),
 16    65 	  3 fo_in_qual		bit(1),
 16    66 	  3 hard_to_load		bit(1),
 16    67 	2 relocation		bit(12) unaligned,
 16    68 	2 more_bits		structure unaligned,
 16    69 	  3 substr		bit(1),
 16    70 	  3 padded_for_store_ref	bit(1),
 16    71 	  3 aligned_for_store_ref	bit(1),
 16    72 	  3 mbz			bit(15),
 16    73 	2 store_ins		bit(18) unaligned;
 16    74 
 16    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      608 
 17     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 17     2 
 17     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 17     4 
 17     5 dcl	context aligned bit(36),
 17     6 	this_context aligned bit(36);
 17     7 
 17     8 dcl	1 def_context		aligned based(addr(context)),
 17     9 	2 aggregate		unaligned bit(1),
 17    10 	2 arg_list		unaligned bit(1),
 17    11 	2 left_side		unaligned bit(1),
 17    12 	2 return			unaligned bit(1),
 17    13 	2 evaluate_offset		unaligned bit(1),
 17    14 	2 top			unaligned bit(1),
 17    15 	2 RHS_aggregate		unaligned bit(1),
 17    16 	2 return_from_empty		unaligned bit(1),
 17    17 	2 ignore_based		unaligned bit(1),
 17    18 	2 ext_param		unaligned bit(1),
 17    19 	2 cross_section		unaligned bit(1),
 17    20 	2 string_unspec		unaligned bit(1),
 17    21 	2 f_offset_to_be_added	unaligned bit(1),
 17    22 	2 suppress_cross_ref	unaligned bit(1),
 17    23 	2 by_name_assignment	unaligned bit(1),
 17    24 	2 by_name_lookup		unaligned bit(1),
 17    25 	2 pad			unaligned bit(20);
 17    26 
 17    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 17    28 
 17    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
      609 
 18     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 18     2 
 18     3 dcl	1 symbol			based aligned,
 18     4 	2 node_type		bit(9) unal,
 18     5 	2 source_id		structure unal,
 18     6 	  3 file_number		bit(8),
 18     7 	  3 line_number		bit(14),
 18     8 	  3 statement_number	bit(5),
 18     9 	2 location		fixed(18) unal unsigned,
 18    10 	2 allocated		bit(1) unal,
 18    11 	2 dcl_type		bit(3) unal,
 18    12 	2 reserved		bit(6) unal,
 18    13 	2 pix			unal,
 18    14 	  3 pic_fixed		bit(1) unal,
 18    15 	  3 pic_float		bit(1) unal,
 18    16 	  3 pic_char		bit(1) unal,
 18    17 	  3 pic_scale		fixed(7) unal,
 18    18 	  3 pic_size		fixed(7) unal,
 18    19 	2 level			fixed(8) unal,
 18    20 	2 boundary		fixed(3) unal,
 18    21 	2 size_units		fixed(3) unal,
 18    22 	2 scale			fixed(7) unal,
 18    23 	2 runtime			bit(18) unal,
 18    24 	2 runtime_offset		bit(18) unal,
 18    25 	2 block_node		ptr unal,
 18    26 	2 token			ptr unal,
 18    27 	2 next			ptr unal,
 18    28 	2 multi_use		ptr unal,
 18    29 	2 cross_references		ptr unal,
 18    30 	2 initial			ptr unal,
 18    31 	2 array			ptr unal,
 18    32 	2 descriptor		ptr unal,
 18    33 	2 equivalence		ptr unal,
 18    34 	2 reference		ptr unal,
 18    35 	2 general			ptr unal,
 18    36 	2 father			ptr unal,
 18    37 	2 brother			ptr unal,
 18    38 	2 son			ptr unal,
 18    39 	2 word_size		ptr unal,
 18    40 	2 bit_size		ptr unal,
 18    41 	2 dcl_size		ptr unal,
 18    42 	2 symtab_size		ptr unal,
 18    43 	2 c_word_size		fixed(24),
 18    44 	2 c_bit_size		fixed(24),
 18    45 	2 c_dcl_size		fixed(24),
 18    46 
 18    47 	2 attributes		structure aligned,
 18    48 	  3 data_type		structure unal,
 18    49 	    4 structure		bit(1) ,
 18    50 	    4 fixed		bit(1),
 18    51 	    4 float		bit(1),
 18    52 	    4 bit			bit(1),
 18    53 	    4 char		bit(1),
 18    54 	    4 ptr			bit(1),
 18    55 	    4 offset		bit(1),
 18    56 	    4 area		bit(1),
 18    57 	    4 label		bit(1),
 18    58 	    4 entry		bit(1),
 18    59 	    4 file		bit(1),
 18    60 	    4 arg_descriptor	bit(1),
 18    61 	    4 storage_block		bit(1),
 18    62 	    4 explicit_packed	bit(1), /* options(packed) */
 18    63 	    4 condition		bit(1),
 18    64 	    4 format		bit(1),
 18    65 	    4 builtin		bit(1),
 18    66 	    4 generic		bit(1),
 18    67 	    4 picture		bit(1),
 18    68 
 18    69 	  3 misc_attributes		structure unal,
 18    70 	    4 dimensioned		bit(1),
 18    71 	    4 initialed		bit(1),
 18    72 	    4 aligned		bit(1),
 18    73 	    4 unaligned		bit(1),
 18    74 	    4 signed		bit(1),
 18    75 	    4 unsigned		bit(1),
 18    76 	    4 precision		bit(1),
 18    77 	    4 varying		bit(1),
 18    78 	    4 local		bit(1),
 18    79 	    4 decimal		bit(1),
 18    80 	    4 binary		bit(1),
 18    81 	    4 real		bit(1),
 18    82 	    4 complex		bit(1),
 18    83 	    4 variable		bit(1),
 18    84 	    4 reducible		bit(1),
 18    85 	    4 irreducible		bit(1),
 18    86 	    4 returns		bit(1),
 18    87 	    4 position		bit(1),
 18    88 	    4 internal		bit(1),
 18    89 	    4 external		bit(1),
 18    90 	    4 like		bit(1),
 18    91 	    4 member		bit(1),
 18    92 	    4 non_varying		bit(1),
 18    93 	    4 options		bit(1),
 18    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 18    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 18    96 
 18    97 	  3 storage_class		structure unal,
 18    98 	    4 auto		bit(1),
 18    99 	    4 based		bit(1),
 18   100 	    4 static		bit(1),
 18   101 	    4 controlled		bit(1),
 18   102 	    4 defined		bit(1),
 18   103 	    4 parameter		bit(1),
 18   104 	    4 param_desc		bit(1),
 18   105 	    4 constant		bit(1),
 18   106 	    4 temporary		bit(1),
 18   107 	    4 return_value		bit(1),
 18   108 
 18   109 	  3 file_attributes		structure unal,
 18   110 	    4 print		bit(1),
 18   111 	    4 input		bit(1),
 18   112 	    4 output		bit(1),
 18   113 	    4 update		bit(1),
 18   114 	    4 stream		bit(1),
 18   115 	    4 reserved_1		bit(1),
 18   116 	    4 record		bit(1),
 18   117 	    4 sequential		bit(1),
 18   118 	    4 direct		bit(1),
 18   119 	    4 interactive		bit(1),		/* env(interactive) */
 18   120 	    4 reserved_2		bit(1),
 18   121 	    4 reserved_3		bit(1),
 18   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 18   123 	    4 keyed		bit(1),
 18   124 	    4 reserved_4		bit(1),
 18   125 	    4 environment		bit(1),
 18   126 
 18   127 	  3 compiler_developed	structure unal,
 18   128 	    4 aliasable		bit(1),
 18   129 	    4 packed		bit(1),
 18   130 	    4 passed_as_arg		bit(1),
 18   131 	    4 allocate		bit(1),
 18   132 	    4 set			bit(1),
 18   133 	    4 exp_extents		bit(1),
 18   134 	    4 refer_extents		bit(1),
 18   135 	    4 star_extents		bit(1),
 18   136 	    4 isub		bit(1),
 18   137 	    4 put_in_symtab		bit(1),
 18   138 	    4 contiguous		bit(1),
 18   139 	    4 put_data		bit(1),
 18   140 	    4 overlayed		bit(1),
 18   141 	    4 error		bit(1),
 18   142 	    4 symtab_processed	bit(1),
 18   143 	    4 overlayed_by_builtin	bit(1),
 18   144 	    4 defaulted		bit(1),
 18   145 	    4 connected		bit(1);
 18   146 
 18   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      610 
 19     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 19     2 
 19     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 19     4 
 19     5 dcl (	max_p_flt_bin_1			initial(27),
 19     6 	max_p_flt_bin_2			initial(63),
 19     7 	max_p_fix_bin_1			initial(35),
 19     8 	max_p_fix_bin_2			initial(71),
 19     9 
 19    10 	max_p_dec				initial(59),
 19    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 19    12 
 19    13 	min_scale				initial(-128),
 19    14 	max_scale				initial(+127),
 19    15 	max_bit_string			initial(9437184),
 19    16 	max_char_string			initial(1048576),
 19    17 	max_area_size			initial(262144),
 19    18 	min_area_size			initial(28),
 19    19 
 19    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 19    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 19    22 	max_identifier_length		initial (256),
 19    23 	max_number_of_dimensions		initial (127),
 19    24 
 19    25 	max_length_precision		initial(24),
 19    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 19    27 
 19    28 	max_words_per_variable		initial (262144),
 19    29 
 19    30 	bits_per_word			initial(36),
 19    31 	bits_per_double			initial(72),
 19    32 	packed_digits_per_character		initial(2),
 19    33 	characters_per_half			initial(2),
 19    34 	characters_per_word			initial(4),
 19    35 	characters_per_double		initial(8),
 19    36 
 19    37 	bits_per_character			initial(9),
 19    38 	bits_per_half			initial(18),
 19    39 	bits_per_decimal_digit		initial(9),
 19    40 	bits_per_binary_exponent		initial(8),
 19    41 	bits_per_packed_ptr			initial(36),
 19    42 	words_per_packed_pointer		initial(1),
 19    43 
 19    44 	words_per_fix_bin_1			initial(1),
 19    45 	words_per_fix_bin_2			initial(2),
 19    46 	words_per_flt_bin_1			initial(1),
 19    47 	words_per_flt_bin_2			initial(2),
 19    48 	words_per_varying_string_header	initial(1),
 19    49 	words_per_offset			initial(1),
 19    50 	words_per_pointer			initial(2),
 19    51 	words_per_label_var			initial(4),
 19    52 	words_per_entry_var			initial(4),
 19    53 	words_per_file_var			initial(4),
 19    54 	words_per_format			initial(4),
 19    55 	words_per_condition_var		initial(6),
 19    56 
 19    57 	max_index_register_value		initial(262143),
 19    58 	max_signed_index_register_value	initial(131071),
 19    59 
 19    60 	max_signed_xreg_precision		initial(17),
 19    61 	max_uns_xreg_precision		initial(18),
 19    62 
 19    63 	default_area_size			initial(1024),
 19    64 	default_flt_bin_p			initial(27),
 19    65 	default_fix_bin_p			initial(17),
 19    66 	default_flt_dec_p			initial(10),
 19    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 19    68 
 19    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 19    70 
 19    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 19    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 19    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 19    74 	real_type			initial("001000000000000000000100000001100000"b),
 19    75 	complex_type		initial("001000000000000000000100000001010000"b),
 19    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 19    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 19    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 19    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 19    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 19    81 	bit_type			initial("000100000000000000000000000000000000"b),
 19    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 19    83 									options(constant);
 19    84 
 19    85 /* END INCLUDE FILE ... system.incl.pl1 */
      611 
 20     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 20     2 
 20     3 dcl	1 token			based aligned,
 20     4 	2 node_type		bit(9) unaligned,
 20     5 	2 type			bit(9) unaligned,
 20     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 20     7 	2 declaration		ptr unaligned,
 20     8 	2 next			ptr unaligned,
 20     9 	2 size			fixed(9),
 20    10 	2 string			char(n refer(token.size));
 20    11 
 20    12 /* END INCLUDE FILE ... token.incl.pl1 */
      612 
 21     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 21     2 
 21     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 21     4 	identifier	initial("100000000"b),
 21     5 	isub		initial("010000000"b),
 21     6 	plus		initial("001000001"b),
 21     7 	minus		initial("001000010"b),
 21     8 	asterisk		initial("001000011"b),
 21     9 	slash		initial("001000100"b),
 21    10 	expon		initial("001000101"b),
 21    11 	not		initial("001000110"b),
 21    12 	and		initial("001000111"b),
 21    13 	or		initial("001001000"b),
 21    14 	cat		initial("001001001"b),
 21    15 	eq		initial("001001010"b),
 21    16 	ne		initial("001001011"b),
 21    17 	lt		initial("001001100"b),
 21    18 	gt		initial("001001101"b),
 21    19 	le		initial("001001110"b),
 21    20 	ge		initial("001001111"b),
 21    21 	ngt		initial("001010000"b),
 21    22 	nlt		initial("001010001"b),
 21    23 	assignment	initial("001010010"b),
 21    24 	colon		initial("001010011"b),
 21    25 	semi_colon	initial("001010100"b),
 21    26 	comma		initial("001010101"b),
 21    27 	period		initial("001010110"b),
 21    28 	arrow		initial("001010111"b),
 21    29 	left_parn		initial("001011000"b),
 21    30 	right_parn	initial("001011001"b),
 21    31 	percent		initial("001011100"b),
 21    32 	bit_string	initial("000100001"b),
 21    33 	char_string	initial("000100010"b),
 21    34 	bin_integer	initial("000110001"b),
 21    35 	dec_integer	initial("000110011"b),
 21    36 	fixed_bin		initial("000110000"b),
 21    37 	fixed_dec		initial("000110010"b),
 21    38 	float_bin		initial("000110100"b),
 21    39 	float_dec		initial("000110110"b),
 21    40 	i_bin_integer	initial("000111001"b),
 21    41 	i_dec_integer	initial("000111011"b),
 21    42 	i_fixed_bin	initial("000111000"b),
 21    43 	i_fixed_dec	initial("000111010"b),
 21    44 	i_float_bin	initial("000111100"b),
 21    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 21    46 
 21    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 21    48 	is_isub			initial ("010000000"b),
 21    49 	is_delimiter		initial ("001000000"b),
 21    50 	is_constant		initial ("000100000"b),
 21    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 21    52 	is_arithmetic_constant	initial ("000110000"b),
 21    53 	is_imaginary_constant	initial ("000111000"b),
 21    54 	is_float_constant		initial ("000110100"b),
 21    55 	is_decimal_constant		initial ("000110010"b),
 21    56 	is_integral_constant 	initial ("000110001"b)
 21    57 	) bit(9) internal static aligned options(constant);
 21    58 
 21    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      613 
      614 
      615      end expand_primitive;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.5  expand_primitive.pl1              >spec>install>MR12.3-1066>expand_primitive.pl1
599          1    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
2-307        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
600          8    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
601          9    07/21/80  1546.3  by_name_agg.incl.pl1              >ldd>include>by_name_agg.incl.pl1
602         10    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
603         11    05/06/74  1742.1  label.incl.pl1                    >ldd>include>label.incl.pl1
604         12    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
605         13    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
606         14    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
607         15    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
608         16    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
609         17    07/21/80  1546.3  semantic_bits.incl.pl1            >ldd>include>semantic_bits.incl.pl1
610         18    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
611         19    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
612         20    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
613         21    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                               000116 automatic       pointer                  dcl 34 in procedure "expand_primitive" set ref 109*
                                                                                  111 111 122
a                               000102 automatic       pointer                  dcl 206 in procedure "expander" set ref 215* 217 219
                                                                                  220 297 298 326
a                                      parameter       pointer                  dcl 556 in procedure "addf" ref 553 563 569
add                                    constant        bit(9)                   initial dcl 14-8 ref 559
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 set ref
                                                                                  543*
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 18-3 in procedure "expand_primitive"
                                                                                  ref 109 215 386 386
array                                  based           structure                level 1 dcl 8-1 in procedure "expand_primitive"
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 16-3 set ref 65
                                                                                  174* 273 281 384 384* 386* 389* 390* 392 431*
asterisk                        000000 constant        bit(9)                   initial dcl 21-3 set ref 81* 136* 141 151
attributes               31            based           structure                level 2 dcl 18-3
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 set ref
                                                                                  543*
b                                      parameter       pointer                  dcl 556 in procedure "addf" ref 553 563 570
b                               000110 automatic       pointer                  dcl 206 in procedure "expander" set ref 297* 302 304
                                                                                  304 304 306 306 306 306 310* 310 326* 333* 336*
                                                                                  336
b                                      parameter       pointer                  dcl 480 in procedure "make_loop" ref 475 485 485 485
                                                                                  487 489 489 489 491 506 508 508
b                               000120 automatic       pointer                  dcl 34 in procedure "expand_primitive" set ref 76*
                                                                                  77 78 79 122* 154* 161 163 163 163 165 165 165 165
                                                                                  171* 171
binary                   31(29)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 set ref
                                                                                  543*
bindec$vs                       000030 constant        entry                    external dcl 2-28 ref 535
bit_pointer                            constant        bit(9)                   initial dcl 14-8 ref 587
blk                                    parameter       pointer                  dcl 34 set ref 31 61 178* 179* 287* 427* 429* 538
                                                                                  542*
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 61 63
                                                                                  538
bna                                    parameter       pointer                  dcl 201 in procedure "expander" ref 195 255 263
bna                             000126 automatic       pointer                  dcl 34 in procedure "expand_primitive" set ref 55*
                                                                                  57* 116* 182*
bnm                             000114 automatic       pointer                  dcl 206 in procedure "expander" set ref 230* 250*
                                                                                  255* 255* 257 263* 263* 264 267* 268
bnm                                    parameter       pointer                  dcl 352 in procedure "expand_son" set ref 346 395*
bound                                  based           structure                level 1 dcl 8-21
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 8-1 ref 122 297
                                                                                  326
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 243 251
                                                                                  266
by_compiler                     000005 constant        bit(3)                   initial dcl 10-5 set ref 542*
by_name_agg                            based           structure                level 1 dcl 9-3
by_name_assignment        0(14)        based           bit(1)                   level 2 packed packed unaligned dcl 17-8 ref 55 238
c                               000100 automatic       pointer                  dcl 556 set ref 567* 569 570 572
c_lower                   1            based           fixed bin(24,0)          level 2 dcl 8-21 set ref 77* 161 163 302 304 485 506
                                                                                  508
c_multiplier              3            based           fixed bin(24,0)          level 2 dcl 8-21 set ref 79*
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 16-3 set ref 451*
c_upper                   2            based           fixed bin(24,0)          level 2 dcl 8-21 set ref 78* 489 508
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 18-3
constant                 32(16)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 18-3 in procedure "expand_primitive"
                                                                                  ref 497 497
constant                        000112 automatic       bit(1)                   dcl 482 in procedure "make_loop" set ref 497* 502*
                                                                                  503* 504* 508
constant                        000104 automatic       fixed bin(17,0)          dcl 408 in procedure "process_subscripted_reference"
                                                                                  set ref 446* 451
constant_field                  000100 automatic       fixed bin(17,0)          dcl 479 set ref 518* 520
context                                parameter       bit(36)                  dcl 17-5 set ref 31 55 180* 238 462*
convert$to_integer              000032 constant        entry                    external dcl 2-66 ref 444 459 516
copy_expression                 000034 constant        entry                    external dcl 2-94 ref 104 123 124 165 165 165 165
                                                                                  306 306 306 306 317 360 361 376 392 392 487 491
create_bound                    000036 constant        entry                    external dcl 2-118 ref 76
create_list                     000040 constant        entry                    external dcl 2-147 ref 80 134 298
create_operator                 000042 constant        entry                    external dcl 2-152 ref 248 262 493 567
create_reference                000044 constant        entry                    external dcl 2-158 ref 67 356
create_symbol                   000046 constant        entry                    external dcl 2-184 ref 542
create_token                    000050 constant        entry                    external dcl 2-191 ref 81 136 535
d                               000102 automatic       pointer                  dcl 533 set ref 537* 537* 538 538* 540 542* 543 543
                                                                                  543 543 543 545* 547
data_type                31            based           structure                level 3 packed packed unaligned dcl 18-3
declaration               1            based           pointer                  level 2 packed packed unaligned dcl 20-3 ref 537
declare                         000014 constant        entry                    external dcl 1-41 ref 545
declare_constant$integer        000052 constant        entry                    external dcl 2-234 ref 52 163 304 485 489 508 520
declare_temporary               000054 constant        entry                    external dcl 2-292 ref 589
def_context                            based           structure                level 1 dcl 17-8
default_fix_bin_p               000002 constant        fixed bin(31,0)          initial dcl 19-5 set ref 589*
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 ref 427 433
defined_reference               000016 constant        entry                    external dcl 1-47 ref 427
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 set
                                                                                  ref 81* 136* 139 149 165* 168* 306* 308* 317* 317*
exp                                    parameter       pointer                  dcl 579 ref 576 582 584 587 589 590 591 593 594
expression_semantics            000020 constant        entry                    external dcl 1-105 ref 179 287 441 457 515
first_time                      000125 automatic       bit(1)                   dcl 210 set ref 213* 363 366*
fixed                    31(01)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 set ref
                                                                                  543*
given                           000131 automatic       fixed bin(15,0)          dcl 36 set ref 82* 89* 93* 106* 116 119 119 131 133*
                                                                                  138 148 221 300 315 331
high_bound                3(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 11-1 ref 78
i                                      parameter       fixed bin(7,0)           dcl 532 in procedure "declare_index" ref 529 535
i                               000130 automatic       fixed bin(15,0)          dcl 36 in procedure "expand_primitive" set ref 138*
                                                                                  139* 148* 149 165 168*
i                               000100 automatic       fixed bin(15,0)          dcl 580 in procedure "bit_ptr" set ref 593* 594*
i                               000121 automatic       fixed bin(15,0)          dcl 208 in procedure "expander" set ref 300* 301 306
                                                                                  308* 315* 317* 331*
i                                      parameter       fixed bin(15,0)          dcl 478 in procedure "make_loop" ref 475 494
identifier                      000011 constant        bit(9)                   initial dcl 21-3 set ref 535*
input_tree                             parameter       pointer                  dcl 34 ref 31 45 45 59 65 65 67 68 70
integer_type                    000001 constant        bit(36)                  initial dcl 19-71 set ref 444* 459* 516* 589*
join                            000003 constant        bit(9)                   initial dcl 14-8 set ref 248* 262*
join_operator                   000116 automatic       pointer                  dcl 206 set ref 248* 262* 273 276 395
k                               000120 automatic       fixed bin(15,0)          dcl 208 set ref 229* 313* 316* 316 317 329* 333 337*
                                                                                  337 354* 354 395
label                                  based           structure                level 1 dcl 11-1
label_node                             constant        bit(9)                   initial dcl 13-5 ref 74 176
last                            000110 automatic       pointer                  dcl 34 set ref 50* 158 158* 186 189
length                    6            based           pointer                  level 2 packed packed unaligned dcl 16-3 set ref 124
                                                                                  124* 124* 360* 360* 455 457* 457 459* 459
list                                   based           structure                level 1 dcl 12-6
list_node                              constant        bit(9)                   initial dcl 13-5 ref 91
loop                            000004 constant        bit(9)                   initial dcl 14-8 set ref 493*
loops                           000106 automatic       pointer                  dcl 34 set ref 50* 156 157* 191
low_bound                 3            based           fixed bin(17,0)          level 2 packed packed unaligned dcl 11-1 ref 77
lower                           000106 automatic       pointer                  dcl 480 in procedure "make_loop" set ref 485* 487*
                                                                                  497 497 497 510* 510*
lower                     5            based           pointer                  level 2 in structure "bound" packed packed unaligned
                                                                                  dcl 8-21 in procedure "expand_primitive" set ref
                                                                                  163 163* 165* 165* 165* 165* 304 304* 306* 306*
                                                                                  306* 306* 485 485* 487*
m                               000123 automatic       fixed bin(15,0)          dcl 208 set ref 220* 331
max_number_of_operands                 constant        fixed bin(15,0)          initial dcl 15-15 ref 245 259
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 18-3
modified                        000113 automatic       bit(1)                   dcl 482 in procedure "make_loop" set ref 518* 520
modified                        000105 automatic       bit(1)                   dcl 408 in procedure "process_subscripted_reference"
                                                                                  set ref 446* 448
multi_use                 7            based           pointer                  level 2 packed packed unaligned dcl 18-3 ref 540
n                               000122 automatic       fixed bin(15,0)          dcl 208 in procedure "expander" set ref 219* 220 221
                                                                                  300 315 315 331 331
n                               000133 automatic       fixed bin(15,0)          dcl 36 in procedure "expand_primitive" set ref 53*
                                                                                  133* 141* 141 146 154* 155* 155
ndims                           000132 automatic       fixed bin(15,0)          dcl 36 set ref 111* 113* 116 119 133 134*
next                     14            based           pointer                  level 2 packed packed unaligned dcl 8-21 ref 171 310
                                                                                  336
node                                   based           structure                level 1 dcl 13-27
null                                                   builtin function         dcl 43 ref 50 57 61 89 101 111 124 158 163 186 217
                                                                                  230 241 249 255 263 304 372 386 392 416 422 437
                                                                                  450 455 464 485 489 537 582 589 589
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 15-6 in procedure "expand_primitive"
                                                                                  ref 593
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "list" packed packed unaligned
                                                                                  dcl 12-6 in procedure "expand_primitive" ref 106
                                                                                  136
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 ref 111 219
                                                                                  298
number_of_members               000126 automatic       fixed bin(35,0)          dcl 211 set ref 240* 242* 242 245 248 254* 256* 256
                                                                                  259 262
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 16-3 set ref 87
                                                                                  123* 123* 179* 179 361* 361* 437 439 441* 441 444*
                                                                                  444 446 450*
one                             000102 automatic       pointer                  dcl 34 set ref 52* 165* 165* 306* 306* 495 510* 510*
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 15-6 ref 587
opcode                          000102 automatic       bit(9)                   dcl 557 set ref 559* 566* 567*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 15-6 set
                                                                                  ref 156* 165 168 189* 334* 372 376* 376* 377 378
                                                                                  395* 494* 495* 506* 508* 510* 512 515* 516* 516
                                                                                  518 520* 569* 570* 589* 590* 594
operator                               based           structure                level 1 dcl 15-6
operator_node                          constant        bit(9)                   initial dcl 13-5 ref 45 372 584
our_last_index                  000124 automatic       fixed bin(15,0)          dcl 208 set ref 221* 301 333
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 ref 220 386
p                               000100 automatic       pointer                  dcl 406 in procedure "process_subscripted_reference"
                                                                                  set ref 427* 429* 431 435 437 439 441 441 444 444
                                                                                  446 450 451 455 457 457 459 459 462* 467 469
p                               000114 automatic       pointer                  dcl 34 in procedure "expand_primitive" set ref 139*
                                                                                  141 141 149* 151 151 154* 156 157 158 165 168 178*
                                                                                  179 179 180* 182* 184* 186 189
p                               000112 automatic       pointer                  dcl 206 in procedure "expander" set ref 301* 306*
                                                                                  308 333* 334 335
p                               000102 automatic       pointer                  dcl 480 in procedure "make_loop" set ref 493* 494
                                                                                  495 506 508 510 512 515 516 516 518 520 523
pds                             000135 automatic       bit(1)                   dcl 38 set ref 96* 98
pl1_stat_$by_name_parts_tree    000012 external static pointer                  dcl 40 ref 55
pl1_stat_$eis_mode              000010 external static bit(1)                   dcl 39 ref 439
pl1_stat_$index                 000066 external static fixed bin(15,0)          dcl 411 set ref 418* 418 419 424 464* 464
pl1_stat_$locator               000064 external static pointer                  array dcl 411 set ref 419 424*
processed                 0(13)        based           bit(1)                   level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 16-3 in procedure "expand_primitive"
                                                                                  set ref 283 467*
processed                 0(19)        based           bit(1)                   level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 15-6 in procedure "expand_primitive"
                                                                                  set ref 591*
put_data_sw               0(12)        based           bit(1)                   level 2 packed packed unaligned dcl 16-3 set ref 96
                                                                                  98* 382* 382
q                               000104 automatic       pointer                  dcl 480 in procedure "make_loop" set ref 512* 513*
                                                                                  515*
q                                      parameter       pointer                  dcl 579 in procedure "bit_ptr" set ref 576 590* 594*
q                               000104 automatic       pointer                  dcl 206 in procedure "expander" set ref 241* 241*
                                                                                  243 249* 249* 250* 251 264* 264* 266 267* 276*
                                                                                  298* 306 308 317 320* 320* 334 335* 342
q                                      parameter       pointer                  dcl 351 in procedure "expand_son" set ref 346 356*
                                                                                  357
qt                              000106 automatic       pointer                  dcl 206 set ref 356* 357 358 359 360 360 361 361 363
                                                                                  367 382 384 386 386 386 389 390 392 392* 392* 395*
qual                            000112 automatic       pointer                  dcl 34 set ref 85* 285 363* 367 372 372 372 376 376
                                                                                  377 378 416 435 439* 464 513*
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 16-3 set ref 85
                                                                                  285* 363* 367* 435*
real                     31(30)        based           bit(1)                   level 4 packed packed unaligned dcl 18-3 set ref
                                                                                  543*
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 16-3 set ref
                                                                                  100* 359* 378*
refer_extent                    000056 constant        entry                    external dcl 2-426 ref 513
reference                              based           structure                level 1 dcl 16-3 in procedure "expand_primitive" set
                                                                                  ref 68* 68 97* 97 357* 357
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 18-3 in procedure "expand_primitive"
                                                                                  ref 65 97 123 357 538 547
reference_node                         constant        bit(9)                   initial dcl 13-5 ref 497 497
right_brother             4            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 257 268
s                               000100 automatic       pointer                  dcl 206 in procedure "expander" set ref 214* 215 226
                                                                                  241 245* 249 259* 264 333*
s                                      parameter       pointer                  dcl 480 in procedure "make_loop" ref 475
s                               000122 automatic       pointer                  dcl 34 in procedure "expand_primitive" set ref 59*
                                                                                  61 63 65 74 77 78 109 119* 123 154* 176 178* 182
s                               000102 automatic       pointer                  dcl 406 in procedure "process_subscripted_reference"
                                                                                  set ref 414* 421* 427 427* 429* 433
semantic_translator$abort       000060 constant        entry                    external dcl 2-446 ref 119 245 259 421
share_expression                000062 constant        entry                    external dcl 2-454 ref 363 590
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 16-3 set ref 99*
                                                                                  358* 372 377*
simplify_expression             000022 constant        entry                    external dcl 1-205 ref 446 518
simplify_offset                 000024 constant        entry                    external dcl 1-212 ref 180 462
son                      21            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 18-3 in procedure "expand_primitive"
                                                                                  ref 241 249 264
son                       5            based           pointer                  level 2 in structure "by_name_agg" packed packed
                                                                                  unaligned dcl 9-3 in procedure "expand_primitive"
                                                                                  ref 255 263
stars_given                     000134 automatic       fixed bin(15,0)          dcl 36 set ref 53* 146* 221
stmnt                                  parameter       pointer                  dcl 34 set ref 31 178* 179* 287* 427* 429* 441* 457*
                                                                                  515*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 18-3
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 18-3 ref 182 226
sub                                    constant        bit(9)                   initial dcl 14-8 ref 566
subs                                   parameter       pointer                  dcl 406 in procedure "process_subscripted_reference"
                                                                                  set ref 403 427* 429
subs                            000104 automatic       pointer                  dcl 34 in procedure "expand_primitive" set ref 80*
                                                                                  81 87* 89 91 101* 104* 104 106 134* 136 139 149
                                                                                  165 168 178* 184* 317 392 392 392
subscripter                     000026 constant        entry                    external dcl 1-216 ref 178 429
symbol                                 based           structure                level 1 dcl 18-3 in procedure "expand_primitive"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 16-3 in procedure "expand_primitive"
                                                                                  set ref 59 67 97 214 386 386 414 497 497 497 497
symbol_node                            constant        bit(9)                   initial dcl 13-5 ref 497 497
symbols_block                   000124 automatic       pointer                  dcl 34 set ref 61* 63* 441* 457* 515*
t                               000100 automatic       pointer                  dcl 533 set ref 535* 537 542*
this_context                    000136 automatic       bit(36)                  dcl 17-5 set ref 51* 287* 427* 441* 457* 515*
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 18-3 in procedure "expand_primitive"
                                                                                  ref 264
token                     1            based           pointer                  level 2 in structure "by_name_agg" packed packed
                                                                                  unaligned dcl 9-3 in procedure "expand_primitive"
                                                                                  ref 264
token                                  based           structure                level 1 dcl 20-3 in procedure "expand_primitive"
token_node                             constant        bit(9)                   initial dcl 13-5 ref 141 151
tree                                   parameter       pointer                  dcl 406 in procedure "process_subscripted_reference"
                                                                                  set ref 403 414 424 427* 429*
tree                            000100 automatic       pointer                  dcl 34 in procedure "expand_primitive" set ref 67*
                                                                                  68 70* 85 87 96 97 97 98 99 100 116* 123 124 124
                                                                                  124 174 178* 182* 184*
tree                                   parameter       pointer                  dcl 200 in procedure "expander" set ref 195 214 273
                                                                                  281 283 285 287* 287* 290 320* 382 384
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 20-3 in procedure "expand_primitive" ref 141
                                                                                  151
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 13-27 in procedure "expand_primitive" ref 45
                                                                                  74 91 141 151 176 372 497 497 497 497 584
upper                           000110 automatic       pointer                  dcl 480 in procedure "make_loop" set ref 489* 491*
                                                                                  497 497 497 506 510*
upper                     6            based           pointer                  level 2 in structure "bound" packed packed unaligned
                                                                                  dcl 8-21 in procedure "expand_primitive" set ref
                                                                                  489 489* 491*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 14-8
abs_fun                                internal static bit(9)                   initial dcl 14-8
acos_fun                               internal static bit(9)                   initial dcl 14-8
acosd_fun                              internal static bit(9)                   initial dcl 14-8
addbitno_fun                           internal static bit(9)                   initial dcl 14-8
addcharno_fun                          internal static bit(9)                   initial dcl 14-8
addr_fun                               internal static bit(9)                   initial dcl 14-8
addr_fun_bits                          internal static bit(9)                   initial dcl 14-8
addrel_fun                             internal static bit(9)                   initial dcl 14-8
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocation_fun                         internal static bit(9)                   initial dcl 14-8
allot_auto                             internal static bit(9)                   initial dcl 14-8
allot_based                            internal static bit(9)                   initial dcl 14-8
allot_ctl                              internal static bit(9)                   initial dcl 14-8
allot_var                              internal static bit(9)                   initial dcl 14-8
and                                    internal static bit(9)                   initial dcl 21-3
and_bits                               internal static bit(9)                   initial dcl 14-8
arg_desc_type                          internal static bit(36)                  initial dcl 19-71
array_node                             internal static bit(9)                   initial dcl 13-5
arrow                                  internal static bit(9)                   initial dcl 21-3
asin_fun                               internal static bit(9)                   initial dcl 14-8
asind_fun                              internal static bit(9)                   initial dcl 14-8
assign                                 internal static bit(9)                   initial dcl 14-8
assign_by_name                         internal static bit(9)                   initial dcl 14-8
assign_round                           internal static bit(9)                   initial dcl 14-8
assign_size_ck                         internal static bit(9)                   initial dcl 14-8
assign_zero                            internal static bit(9)                   initial dcl 14-8
assignment                             internal static bit(9)                   initial dcl 21-3
atan_fun                               internal static bit(9)                   initial dcl 14-8
atand_fun                              internal static bit(9)                   initial dcl 14-8
b_format                               internal static bit(9)                   initial dcl 14-8
baseno_fun                             internal static bit(9)                   initial dcl 14-8
baseptr_fun                            internal static bit(9)                   initial dcl 14-8
bin_integer                            internal static bit(9)                   initial dcl 21-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
binoct                          000000 constant        entry                    external dcl 2-33
bit_string                             internal static bit(9)                   initial dcl 21-3
bit_to_char                            internal static bit(9)                   initial dcl 14-8
bit_to_word                            internal static bit(9)                   initial dcl 14-8
bit_type                               internal static bit(36)                  initial dcl 19-71
bitno_fun                              internal static bit(9)                   initial dcl 14-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 19-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 19-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 19-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 19-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 19-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 19-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 19-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 19-5
block_node                             internal static bit(9)                   initial dcl 13-5
bn_format                              internal static bit(9)                   initial dcl 14-8
bool_fun                               internal static bit(9)                   initial dcl 14-8
bound_ck                               internal static bit(9)                   initial dcl 14-8
bound_node                             internal static bit(9)                   initial dcl 13-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 19-71
by_context                             internal static bit(3)                   initial dcl 10-5
by_declare                             internal static bit(3)                   initial dcl 10-5
by_explicit_context                    internal static bit(3)                   initial dcl 10-5
by_implication                         internal static bit(3)                   initial dcl 10-5
by_name_agg_node                       internal static bit(9)                   initial dcl 13-5
byte_fun                               internal static bit(9)                   initial dcl 14-8
c_format                               internal static bit(9)                   initial dcl 14-8
cat                                    internal static bit(9)                   initial dcl 21-3
cat_string                             internal static bit(9)                   initial dcl 14-8
ceil_fun                               internal static bit(9)                   initial dcl 14-8
char_string                            internal static bit(9)                   initial dcl 21-3
char_to_word                           internal static bit(9)                   initial dcl 14-8
char_type                              internal static bit(36)                  initial dcl 19-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 19-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 19-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 19-5
charno_fun                             internal static bit(9)                   initial dcl 14-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 14-8
close_file                             internal static bit(9)                   initial dcl 14-8
codeptr_fun                            internal static bit(9)                   initial dcl 14-8
colon                                  internal static bit(9)                   initial dcl 21-3
column_format                          internal static bit(9)                   initial dcl 14-8
comma                                  internal static bit(9)                   initial dcl 21-3
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 14-8
complex_type                           internal static bit(36)                  initial dcl 19-71
conjg_fun                              internal static bit(9)                   initial dcl 14-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 13-5
context_processor               000000 constant        entry                    external dcl 1-38
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 14-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 14-8
cos_fun                                internal static bit(9)                   initial dcl 14-8
cosd_fun                               internal static bit(9)                   initial dcl 14-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_statement                000000 constant        entry                    external dcl 2-163
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 13-5
dec_integer                            internal static bit(9)                   initial dcl 21-3
dec_integer_type                       internal static bit(36)                  initial dcl 19-71
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_structure               000000 constant        entry                    external dcl 1-44
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
def_this_context                       based           structure                level 1 dcl 17-27
default_area_size                      internal static fixed bin(31,0)          initial dcl 19-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 19-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 19-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 19-5
default_node                           internal static bit(9)                   initial dcl 13-5
delete_file                            internal static bit(9)                   initial dcl 14-8
desc_size                              internal static bit(9)                   initial dcl 14-8
digit_to_bit                           internal static bit(9)                   initial dcl 14-8
div                                    internal static bit(9)                   initial dcl 14-8
do_fun                                 internal static bit(9)                   initial dcl 14-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 14-8
e_format                               internal static bit(9)                   initial dcl 14-8
empty_area                             internal static bit(9)                   initial dcl 14-8
enable_on                              internal static bit(9)                   initial dcl 14-8
entry_var_type                         internal static bit(36)                  initial dcl 19-71
environmentptr_fun                     internal static bit(9)                   initial dcl 14-8
eq                                     internal static bit(9)                   initial dcl 21-3
equal                                  internal static bit(9)                   initial dcl 14-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 14-8
exp                                    internal static bit(9)                   initial dcl 14-8
exp_fun                                internal static bit(9)                   initial dcl 14-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expon                                  internal static bit(9)                   initial dcl 21-3
f_format                               internal static bit(9)                   initial dcl 14-8
fill_refer                      000000 constant        entry                    external dcl 1-113
fixed_bin                              internal static bit(9)                   initial dcl 21-3
fixed_dec                              internal static bit(9)                   initial dcl 21-3
float_bin                              internal static bit(9)                   initial dcl 21-3
float_dec                              internal static bit(9)                   initial dcl 21-3
floor_fun                              internal static bit(9)                   initial dcl 14-8
format_value_node                      internal static bit(9)                   initial dcl 13-5
fortran_read                           internal static bit(9)                   initial dcl 14-8
fortran_write                          internal static bit(9)                   initial dcl 14-8
free_based                             internal static bit(9)                   initial dcl 14-8
free_ctl                               internal static bit(9)                   initial dcl 14-8
free_node                       000000 constant        entry                    external dcl 2-345
free_var                               internal static bit(9)                   initial dcl 14-8
ftn_file_manip                         internal static bit(9)                   initial dcl 14-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 14-8
function                        000000 constant        entry                    external dcl 1-125
ge                                     internal static bit(9)                   initial dcl 21-3
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 14-8
get_edit_trans                         internal static bit(9)                   initial dcl 14-8
get_file                               internal static bit(9)                   initial dcl 14-8
get_list_trans                         internal static bit(9)                   initial dcl 14-8
get_size                        000000 constant        entry                    external dcl 2-352
get_string                             internal static bit(9)                   initial dcl 14-8
greater_or_equal                       internal static bit(9)                   initial dcl 14-8
greater_than                           internal static bit(9)                   initial dcl 14-8
gt                                     internal static bit(9)                   initial dcl 21-3
half_to_word                           internal static bit(9)                   initial dcl 14-8
i_bin_integer                          internal static bit(9)                   initial dcl 21-3
i_dec_integer                          internal static bit(9)                   initial dcl 21-3
i_fixed_bin                            internal static bit(9)                   initial dcl 21-3
i_fixed_dec                            internal static bit(9)                   initial dcl 21-3
i_float_bin                            internal static bit(9)                   initial dcl 21-3
i_float_dec                            internal static bit(9)                   initial dcl 21-3
imag_fun                               internal static bit(9)                   initial dcl 14-8
index_after_fun                        internal static bit(9)                   initial dcl 14-8
index_before_fun                       internal static bit(9)                   initial dcl 14-8
index_fun                              internal static bit(9)                   initial dcl 14-8
index_rev_fun                          internal static bit(9)                   initial dcl 14-8
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
is_arith_constant                      internal static bit(9)                   initial dcl 21-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 21-47
is_constant                            internal static bit(9)                   initial dcl 21-47
is_decimal_constant                    internal static bit(9)                   initial dcl 21-47
is_delimiter                           internal static bit(9)                   initial dcl 21-47
is_float_constant                      internal static bit(9)                   initial dcl 21-47
is_identifier                          internal static bit(9)                   initial dcl 21-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 21-47
is_integral_constant                   internal static bit(9)                   initial dcl 21-47
is_isub                                internal static bit(9)                   initial dcl 21-47
isub                                   internal static bit(9)                   initial dcl 21-3
jump                                   internal static bit(9)                   initial dcl 14-8
jump_false                             internal static bit(9)                   initial dcl 14-8
jump_if_eq                             internal static bit(9)                   initial dcl 14-8
jump_if_ge                             internal static bit(9)                   initial dcl 14-8
jump_if_gt                             internal static bit(9)                   initial dcl 14-8
jump_if_le                             internal static bit(9)                   initial dcl 14-8
jump_if_lt                             internal static bit(9)                   initial dcl 14-8
jump_if_ne                             internal static bit(9)                   initial dcl 14-8
jump_true                              internal static bit(9)                   initial dcl 14-8
l_parn                                 internal static bit(9)                   initial dcl 14-8
label_array_element_node               internal static bit(9)                   initial dcl 13-5
le                                     internal static bit(9)                   initial dcl 21-3
left_parn                              internal static bit(9)                   initial dcl 21-3
length_fun                             internal static bit(9)                   initial dcl 14-8
less_or_equal                          internal static bit(9)                   initial dcl 14-8
less_than                              internal static bit(9)                   initial dcl 14-8
line_format                            internal static bit(9)                   initial dcl 14-8
local_label_var_type                   internal static bit(36)                  initial dcl 19-71
locate_file                            internal static bit(9)                   initial dcl 14-8
lock_file                              internal static bit(9)                   initial dcl 14-8
lock_fun                               internal static bit(9)                   initial dcl 14-8
log10_fun                              internal static bit(9)                   initial dcl 14-8
log2_fun                               internal static bit(9)                   initial dcl 14-8
log_fun                                internal static bit(9)                   initial dcl 14-8
lookup                          000000 constant        entry                    external dcl 1-153
lt                                     internal static bit(9)                   initial dcl 21-3
machine_state_node                     internal static bit(9)                   initial dcl 13-5
make_desc                              internal static bit(9)                   initial dcl 14-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 19-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 19-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 19-5
max_char_string                        internal static fixed bin(31,0)          initial dcl 19-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 19-5
max_fun                                internal static bit(9)                   initial dcl 14-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 19-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 19-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 19-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 12-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 19-5
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 19-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 19-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 19-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 19-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 19-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 19-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 19-5
max_scale                              internal static fixed bin(31,0)          initial dcl 19-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 19-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 19-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 19-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 19-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 19-5
min_fun                                internal static bit(9)                   initial dcl 14-8
min_scale                              internal static fixed bin(31,0)          initial dcl 19-5
minus                                  internal static bit(9)                   initial dcl 21-3
mod_bit                                internal static bit(9)                   initial dcl 14-8
mod_byte                               internal static bit(9)                   initial dcl 14-8
mod_fun                                internal static bit(9)                   initial dcl 14-8
mod_half                               internal static bit(9)                   initial dcl 14-8
mod_word                               internal static bit(9)                   initial dcl 14-8
mult                                   internal static bit(9)                   initial dcl 14-8
ne                                     internal static bit(9)                   initial dcl 21-3
negate                                 internal static bit(9)                   initial dcl 14-8
ngt                                    internal static bit(9)                   initial dcl 21-3
nlt                                    internal static bit(9)                   initial dcl 21-3
no_token                               internal static bit(9)                   initial dcl 21-3
nop                                    internal static bit(9)                   initial dcl 14-8
not                                    internal static bit(9)                   initial dcl 21-3
not_bits                               internal static bit(9)                   initial dcl 14-8
not_equal                              internal static bit(9)                   initial dcl 14-8
off_fun                                internal static bit(9)                   initial dcl 14-8
offset_adder                    000000 constant        entry                    external dcl 1-172
open_file                              internal static bit(9)                   initial dcl 14-8
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 21-3
or_bits                                internal static bit(9)                   initial dcl 14-8
pack                                   internal static bit(9)                   initial dcl 14-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 19-5
page_format                            internal static bit(9)                   initial dcl 14-8
param_desc_ptr                         internal static bit(9)                   initial dcl 14-8
param_ptr                              internal static bit(9)                   initial dcl 14-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 21-3
period                                 internal static bit(9)                   initial dcl 21-3
picture_format                         internal static bit(9)                   initial dcl 14-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 14-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 21-3
pointer_type                           internal static bit(36)                  initial dcl 19-71
prefix_plus                            internal static bit(9)                   initial dcl 14-8
propagate_bit                   000000 constant        entry                    external dcl 1-192
ptr_fun                                internal static bit(9)                   initial dcl 14-8
put_control                            internal static bit(9)                   initial dcl 14-8
put_data_trans                         internal static bit(9)                   initial dcl 14-8
put_edit_trans                         internal static bit(9)                   initial dcl 14-8
put_field                              internal static bit(9)                   initial dcl 14-8
put_field_chk                          internal static bit(9)                   initial dcl 14-8
put_file                               internal static bit(9)                   initial dcl 14-8
put_list_trans                         internal static bit(9)                   initial dcl 14-8
put_string                             internal static bit(9)                   initial dcl 14-8
r_format                               internal static bit(9)                   initial dcl 14-8
r_parn                                 internal static bit(9)                   initial dcl 14-8
range_ck                               internal static bit(9)                   initial dcl 14-8
rank_fun                               internal static bit(9)                   initial dcl 14-8
read_file                              internal static bit(9)                   initial dcl 14-8
real_fun                               internal static bit(9)                   initial dcl 14-8
real_type                              internal static bit(36)                  initial dcl 19-71
record_io                              internal static bit(9)                   initial dcl 14-8
refer                                  internal static bit(9)                   initial dcl 14-8
rel_fun                                internal static bit(9)                   initial dcl 14-8
repeat_fun                             internal static bit(9)                   initial dcl 14-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 14-8
return_string                          internal static bit(9)                   initial dcl 14-8
return_value                           internal static bit(9)                   initial dcl 14-8
return_words                           internal static bit(9)                   initial dcl 14-8
reverse_fun                            internal static bit(9)                   initial dcl 14-8
revert_on                              internal static bit(9)                   initial dcl 14-8
rewrite_file                           internal static bit(9)                   initial dcl 14-8
right_parn                             internal static bit(9)                   initial dcl 21-3
round_fun                              internal static bit(9)                   initial dcl 14-8
search_fun                             internal static bit(9)                   initial dcl 14-8
search_rev_fun                         internal static bit(9)                   initial dcl 14-8
segno_fun                              internal static bit(9)                   initial dcl 14-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
semi_colon                             internal static bit(9)                   initial dcl 21-3
setbitno_fun                           internal static bit(9)                   initial dcl 14-8
setcharno_fun                          internal static bit(9)                   initial dcl 14-8
sf_par_node                            internal static bit(9)                   initial dcl 13-5
sign_fun                               internal static bit(9)                   initial dcl 14-8
signal_on                              internal static bit(9)                   initial dcl 14-8
sin_fun                                internal static bit(9)                   initial dcl 14-8
sind_fun                               internal static bit(9)                   initial dcl 14-8
skip_format                            internal static bit(9)                   initial dcl 14-8
slash                                  internal static bit(9)                   initial dcl 21-3
source_node                            internal static bit(9)                   initial dcl 13-5
sqrt_fun                               internal static bit(9)                   initial dcl 14-8
stack_ptr                              internal static bit(9)                   initial dcl 14-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 14-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 14-8
stacq_fun                              internal static bit(9)                   initial dcl 14-8
statement_node                         internal static bit(9)                   initial dcl 13-5
std_arg_list                           internal static bit(9)                   initial dcl 14-8
std_call                               internal static bit(9)                   initial dcl 14-8
std_entry                              internal static bit(9)                   initial dcl 14-8
std_return                             internal static bit(9)                   initial dcl 14-8
stop                                   internal static bit(9)                   initial dcl 14-8
storage_block_type                     internal static bit(36)                  initial dcl 19-71
stream_prep                            internal static bit(9)                   initial dcl 14-8
tan_fun                                internal static bit(9)                   initial dcl 14-8
tand_fun                               internal static bit(9)                   initial dcl 14-8
temporary_node                         internal static bit(9)                   initial dcl 13-5
terminate_trans                        internal static bit(9)                   initial dcl 14-8
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 14-8
trunc_fun                              internal static bit(9)                   initial dcl 14-8
unlock_file                            internal static bit(9)                   initial dcl 14-8
unpack                                 internal static bit(9)                   initial dcl 14-8
validate                        000000 constant        entry                    external dcl 1-225
vclock_fun                             internal static bit(9)                   initial dcl 14-8
verify_fun                             internal static bit(9)                   initial dcl 14-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 14-8
verify_rev_fun                         internal static bit(9)                   initial dcl 14-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 14-8
word_to_mod2                           internal static bit(9)                   initial dcl 14-8
word_to_mod4                           internal static bit(9)                   initial dcl 14-8
word_to_mod8                           internal static bit(9)                   initial dcl 14-8
wordno_fun                             internal static bit(9)                   initial dcl 14-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 19-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 19-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 19-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 19-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 19-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 19-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 19-5
write_file                             internal static bit(9)                   initial dcl 14-8
x_format                               internal static bit(9)                   initial dcl 14-8
xor_bits                               internal static bit(9)                   initial dcl 14-8

NAMES DECLARED BY EXPLICIT CONTEXT.
addf                            003357 constant        entry                    internal dcl 553 ref 165 306
bit_ptr                         003427 constant        entry                    internal dcl 576 ref 439 594
common                          003377 constant        label                    dcl 567 ref 561
declare_index                   003204 constant        entry                    internal dcl 529 ref 301 494
expand_primitive                000033 constant        entry                    external dcl 31
expand_son                      001723 constant        entry                    internal dcl 346 ref 250 267
expander                        001101 constant        entry                    internal dcl 195 ref 116 182 395
make_loop                       002562 constant        entry                    internal dcl 475 ref 154 333
make_my_loops                   001647 constant        label                    dcl 326 ref 277
process_subscripted_reference   002204 constant        entry                    internal dcl 403 ref 184 320 392
subf                            003370 constant        entry                    internal dcl 563 ref 165 165 306 306 510 510 510

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 55 238
hbound                                                 builtin function         ref 419

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      4152        4242    3566        4162
Length      5132    3566        70         653     363           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
expand_primitive                    138 external procedure  is an external procedure.  
expander                            158 internal procedure  calls itself recursively.  
expand_son                              internal procedure  shares stack frame of internal procedure expander.  
process_subscripted_reference       104 internal procedure  is called by several nonquick procedures.  
make_loop                           130 internal procedure  is called by several nonquick procedures.  
declare_index                        96 internal procedure  is called by several nonquick procedures.  
addf                                 76 internal procedure  is called by several nonquick procedures.  
bit_ptr                             100 internal procedure  calls itself recursively.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
addf                     000100 c                           addf
                         000102 opcode                      addf
bit_ptr                  000100 i                           bit_ptr
declare_index            000100 t                           declare_index
                         000102 d                           declare_index
expand_primitive         000100 tree                        expand_primitive
                         000102 one                         expand_primitive
                         000104 subs                        expand_primitive
                         000106 loops                       expand_primitive
                         000110 last                        expand_primitive
                         000112 qual                        expand_primitive
                         000114 p                           expand_primitive
                         000116 a                           expand_primitive
                         000120 b                           expand_primitive
                         000122 s                           expand_primitive
                         000124 symbols_block               expand_primitive
                         000126 bna                         expand_primitive
                         000130 i                           expand_primitive
                         000131 given                       expand_primitive
                         000132 ndims                       expand_primitive
                         000133 n                           expand_primitive
                         000134 stars_given                 expand_primitive
                         000135 pds                         expand_primitive
                         000136 this_context                expand_primitive
expander                 000100 s                           expander
                         000102 a                           expander
                         000104 q                           expander
                         000106 qt                          expander
                         000110 b                           expander
                         000112 p                           expander
                         000114 bnm                         expander
                         000116 join_operator               expander
                         000120 k                           expander
                         000121 i                           expander
                         000122 n                           expander
                         000123 m                           expander
                         000124 our_last_index              expander
                         000125 first_time                  expander
                         000126 number_of_members           expander
make_loop                000100 constant_field              make_loop
                         000102 p                           make_loop
                         000104 q                           make_loop
                         000106 lower                       make_loop
                         000110 upper                       make_loop
                         000112 constant                    make_loop
                         000113 modified                    make_loop
process_subscripted_reference
                         000100 p                           process_subscripted_reference
                         000102 s                           process_subscripted_reference
                         000104 constant                    process_subscripted_reference
                         000105 modified                    process_subscripted_reference

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     unpk_to_pk          call_ext_out_desc   call_ext_out        call_int_this       call_int_other
return_mac          shorten_stack       ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
bindec$vs                     convert$to_integer            copy_expression               create_bound
create_list                   create_operator               create_reference              create_symbol
create_token                  declare                       declare_constant$integer      declare_temporary
defined_reference             expression_semantics          refer_extent                  semantic_translator$abort
share_expression              simplify_expression           simplify_offset               subscripter

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$by_name_parts_tree  pl1_stat_$eis_mode            pl1_stat_$index               pl1_stat_$locator




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     31 000026        45 000040        50 000051        51 000054        52 000055        53 000067        55 000071
     57 000102        59 000104        61 000110        63 000117        65 000121        67 000130        68 000143
     69 000152        70 000153        74 000154        76 000160        77 000167        78 000174        79 000200
     80 000202        81 000215        82 000243        83 000245        85 000246        87 000251        89 000254
     91 000262        93 000266        96 000267        97 000273        98 000302        99 000306       100 000310
    101 000312       102 000314       104 000315       106 000327       109 000333       111 000336       113 000347
    116 000350       119 000372       122 000412       123 000415       124 000433       131 000452       133 000454
    134 000457       136 000470       137 000531       138 000532       139 000541       141 000543       144 000555
    146 000557       148 000561       149 000571       151 000573       154 000604       155 000620       156 000622
    157 000625       158 000626       161 000633       163 000637       165 000660       167 000724       168 000725
    171 000730       172 000733       174 000735       176 000737       178 000743       179 000765       180 001015
    181 001027       182 001030       184 001047       186 001061       189 001071       191 001074       195 001100
    213 001106       214 001110       215 001115       217 001117       219 001123       220 001127       221 001137
    226 001144       229 001150       230 001151       238 001153       240 001160       241 001161       242 001170
    243 001174       245 001200       248 001216       249 001233       250 001242       251 001244       252 001250
    254 001251       255 001252       256 001262       257 001266       259 001272       262 001310       263 001325
    264 001336       266 001347       267 001352       268 001354       273 001360       276 001370       277 001372
    281 001373       283 001376       285 001401       287 001404       290 001424       297 001431       298 001433
    300 001447       301 001461       302 001476       304 001502       306 001523       307 001567       308 001570
    310 001573       311 001576       313 001600       315 001601       316 001613       317 001614       318 001632
    320 001634       326 001647       329 001652       331 001653       333 001665       334 001705       335 001710
    336 001711       337 001714       338 001715       342 001717       346 001723       354 001725       356 001726
    357 001737       358 001747       359 001751       360 001753       361 001767       363 002003       366 002023
    367 002024       372 002027       376 002044       377 002061       378 002064       382 002066       384 002074
    386 002102       389 002120       390 002123       392 002125       395 002163       397 002202       403 002203
    414 002211       416 002216       418 002223       419 002224       421 002227       422 002241       424 002245
    427 002250       429 002300       431 002324       433 002326       435 002333       437 002337       439 002343
    441 002362       444 002411       446 002431       448 002446       450 002451       451 002454       455 002456
    457 002462       459 002510       462 002530       464 002543       467 002553       469 002555       475 002561
    485 002567       487 002616       489 002626       491 002656       493 002667       494 002704       495 002723
    497 002726       502 002765       503 002767       504 002771       506 002772       508 003004       510 003027
    512 003061       513 003063       515 003075       516 003121       518 003141       520 003156       523 003177
    529 003203       535 003211       537 003262       538 003272       540 003305       542 003310       543 003327
    545 003342       547 003351       553 003356       559 003364       561 003366       563 003367       566 003375
    567 003377       569 003414       570 003421       572 003424       576 003426       582 003434       584 003441
    587 003446       589 003453       590 003501       591 003517       592 003521       593 003522       594 003533
    595 003550       597 003552


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
