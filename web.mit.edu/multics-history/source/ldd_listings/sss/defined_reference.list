	COMPILATION LISTING OF SEGMENT defined_reference
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1359.8 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 defined_reference: proc(blk,stmnt,input_tree,subs,s,context) returns(ptr);
       12 
       13 /* Modified 780713 by PG for unsigned */
       14 /* Modified 790419 by PCK to implement 4-bit decimal */
       15 
       16 dcl	(blk,stmnt,tree,subs,new_subs,p,s,br,bs,a,input_tree,off,father_s) ptr;
       17 dcl	(t,k,n,i,nsubs,ndims,nsubs_minus_ndims) fixed bin(15);
       18 dcl	(father_dims,listdims(128)) fixed bin(15);
       19 dcl	(co,coff) fixed bin(31);
       20 dcl	cunits fixed bin(3);
       21 
       22 dcl	op_table(4) bit(9) aligned initial(mod_bit,""b,mod_byte,mod_half);
       23 dcl	dims_processed bit(1) aligned;
       24 
       25 dcl	pl1_stat_$eis_mode bit(1) aligned ext static,
       26 	pl1_stat_$check_ansi bit(1) aligned ext static,
       27 
       28 	pl1_stat_$root external static ptr;
       29 
       30 dcl	(addr,null,fixed,string,substr) builtin;
       31 
       32 	this_context = "0"b;
       33 	t,k,n = 0;
       34 		/* t is used by string_overlay: it says bit/char
       35*		   k is the number of asterisks observed by isubs_or_stars
       36*		   n is the number of the last isub or asterisk
       37*		        observed by isubs_or_stars
       38*		*/
       39 
       40 	tree = copy_expression((input_tree));
       41 	br = copy_expression(s->symbol.equivalence);
       42 
       43 	father_s=s;
       44 	do while(father_s->symbol.member);
       45 	father_s=father_s->symbol.father;
       46 	end;
       47 
       48 	if father_s->symbol.dimensioned then father_dims=father_s->symbol.array->array.number_of_dimensions;
       49 	else father_dims=0;
       50 
       51 
       52 
       53 
       54 	if ^lookup((s->symbol.block_node),stmnt,br,bs,this_context)
       55 	then	if br->node.type = token_node
       56 		then do;
       57 			call semantic_translator$error(77,br);
       58 			bs = create_symbol((pl1_stat_$root->block.son),br,by_implication);
       59 			call declare(bs);
       60 			bs->symbol.allocate = "1"b;
       61 		end;
       62 		else	call print(175);
       63 	else	if br->node.type=reference_node	/* lookup replaces the symbol field */
       64 		then do;
       65 			br->reference.symbol = bs->symbol.token;
       66 			br->reference.length = copy_expression(s->symbol.equivalence->reference.length);
       67 			br->reference.offset = copy_expression(s->symbol.equivalence->reference.offset);
       68 			br->reference.qualifier = copy_expression(s->symbol.equivalence->reference.qualifier);
       69 		end;
       70 
       71 	if bs->node.type ^= symbol_node then call print(176);
       72 	if pl1_stat_$check_ansi
       73 	then	if bs->symbol.based
       74 		then	call semantic_translator$error(173,s);
       75 	if bs->symbol.defined | bs->symbol.constant then call print(176);
       76 
       77 	/* the following line is present so that defined variables can
       78*	    be processed by the code generator program which generates the
       79*	     run-time symbol table */
       80 
       81 	s -> symbol.reference -> reference.qualifier = bs -> symbol.reference;
       82 	call propagate_bit(bs,aliasable_bit);
       83 	if def_context.left_side then call propagate_bit(bs,set_bit);
       84 
       85 	a = s->symbol.array;
       86 	if a ^= null
       87 	then ndims = a->array.number_of_dimensions;
       88 	else ndims = 0;
       89 
       90 	dims_processed = "0"b;
       91 	if subs ^= null
       92 	then 	do;
       93 		nsubs = subs->list.number;
       94 		if s->symbol.dimensioned
       95 		then 	do;
       96 			tree->reference.array_ref = "0"b;
       97 			if nsubs < ndims then call print(81);
       98 			if nsubs > ndims & ^s->symbol.entry then call print(82);
       99 			if ^isubs_or_stars()
      100 			then 	do;
      101 				tree = subscripter(blk,stmnt,tree,subs,s);
      102 				dims_processed = "1"b;
      103 				end;
      104 			end;
      105 		else if isubs_or_stars() then call print(183);
      106 		end;
      107 	else	do;
      108 		nsubs = 0;
      109 		if isubs_or_stars() & ^s->symbol.dimensioned then call print(183);
      110 		end;
      111 
      112 
      113 /* add the offsets of the defined reference to those of the base */
      114 
      115 	if father_s->symbol.position
      116 	then do;
      117 
      118 		if n>0 then call print(177);	/* isubs_or_stars AND position */
      119 		if ^(string_overlay(father_s)&string_overlay(bs)) then call print(178);
      120 		father_s->symbol.overlayed, s->symbol.overlayed = "1"b;
      121 		p = father_s -> symbol.initial;		/* the position value */
      122 		if p -> node.type = token_node
      123 		then if p -> token.type & is_arith_constant
      124 		     then do;
      125 			co = token_to_binary(p) - 1;
      126 			p = null;
      127 			goto l1;
      128 			end;
      129 
      130 		co = 0;
      131 		p = copy_expression((p));
      132 
      133 		this_context = "0"b;
      134 		a = create_operator(sub,3);
      135 		a->operand(2) = p;
      136 		a->operand(3) = declare_constant$integer(1);
      137 		p = a;
      138 		p = expression_semantics((s->symbol.block_node),stmnt,p,this_context);
      139 		if def_this_context.aggregate then call print(185);
      140 		p = convert(p,integer_type);
      141 l1:
      142 		off = tree->reference.offset;
      143 		coff = tree->reference.c_offset;
      144 		cunits = tree->reference.units;
      145 
      146 		call offset_adder(off,coff,cunits,(tree->reference.modword_in_offset),p,co,(t),"0"b,tree->reference.fo_in_qual);
      147 
      148 		tree->reference.offset = off;
      149 		tree->reference.c_offset = coff;
      150 		tree->reference.units = cunits;
      151 		tree->reference.modword_in_offset = "0"b;
      152 	end;
      153 
      154 	else	do;
      155 		if match(father_s,bs) then goto build_ref;
      156 		if n>0 then call print(179);	/* isubs_or stars AND non-matching */
      157 		if string_overlay(father_s) & string_overlay(bs)
      158 		     then father_s->symbol.overlayed, s->symbol.overlayed = "1"b;
      159 		     else call print(179);
      160 	end;
      161 
      162 /* build the return reference */
      163 
      164 build_ref:
      165 	if pl1_stat_$check_ansi
      166 	then	if s->symbol.varying
      167 		then	call semantic_translator$error(174,s);
      168 
      169 	this_context = "0"b;
      170 	def_this_context.evaluate_offset = "1"b;
      171 	def_this_context.f_offset_to_be_added = "1"b;
      172 	br = expression_semantics((s->symbol.block_node),stmnt,br,this_context);
      173 	if bs->symbol.reference=br then br=copy_expression((br));
      174 	if br->reference.units ^= 0 
      175 	then do;
      176 		off = tree->reference.offset;
      177 		coff = tree->reference.c_offset;
      178 		cunits = tree->reference.units;
      179 
      180 		call offset_adder(off,coff,cunits,(tree->reference.modword_in_offset),
      181 			        (br->reference.offset),(br->reference.c_offset),(br->reference.units),(br->reference.modword_in_offset),
      182 			        tree->reference.fo_in_qual);
      183 
      184 		tree->reference.offset = off;
      185 		tree->reference.c_offset = coff;
      186 		tree->reference.units = cunits;
      187 		tree->reference.modword_in_offset = "0"b;
      188 	end;
      189 
      190 	tree->reference.qualifier = br;
      191 	tree->reference.fo_in_qual = br->reference.fo_in_qual;
      192 	tree->reference.defined_ref = "1"b;
      193 	tree->reference.shared,br->reference.shared = "0"b;
      194 	tree->reference.ref_count,br->reference.ref_count = 1;
      195 
      196 	if ^dims_processed
      197 	then	do;
      198 		if nsubs > ndims
      199 		then	do;
      200 			nsubs_minus_ndims=nsubs-ndims;
      201 			new_subs = create_list(nsubs_minus_ndims);
      202 			do i = 1 to nsubs_minus_ndims;
      203 				new_subs->element(i) =subs->element(i);
      204 			end;
      205 			subs=new_subs;
      206 			end;
      207 		else	subs=null;
      208 		end;
      209 
      210 	br->reference.offset = null;
      211 	br->reference.units,br->reference.c_offset = 0;
      212 	br->reference.modword_in_offset = "0"b;
      213 
      214 	/* since br represents an address, prevent it from being commoned by the optimizer */
      215 
      216 	br->reference.inhibit = "1"b;
      217 
      218 	if	^pl1_stat_$eis_mode
      219 	then if	tree->reference.offset ^= null
      220 	then if	tree->reference.units < word_
      221 	then do;
      222 		p = tree->reference.offset;
      223 		if p->node.type=operator_node
      224 		then	if p->operator.op_code=mod_bit
      225 			|  p->operator.op_code=mod_byte
      226 			|  p->operator.op_code=mod_half
      227 			then	goto ret;
      228 
      229 		p = create_operator(op_table(tree->reference.units),3);
      230 		p->operand(3) = tree->reference.offset;
      231 		tree->reference.offset = p;
      232 	end;
      233 
      234 ret:
      235 	return(tree);
      236 
      237 /* subroutine to match the defined item's father against its base to determine the
      238*   suitability for isub or simple defining.  */
      239 
      240 match: proc(a,b) returns(bit(1) aligned);
      241 
      242 dcl	(a,b,p,q) ptr;
      243 
      244 	/* expanded 4-18-73 PAB for number of member dimensions */
      245 	/* the extents should perhaps be checked at compile-and-or-run-time */
      246 
      247 	dcl (pp,qq) ptr;
      248 
      249 
      250 	if string(a->symbol.data_type)^=string(b->symbol.data_type)
      251 	then	goto fail;
      252 
      253 	if a->symbol.aligned ^= b->symbol.aligned
      254 	then	goto fail;
      255 
      256 	if a -> symbol.unsigned ^= b -> symbol.unsigned
      257 	then	go to fail;
      258 
      259 	if a->symbol.c_dcl_size ^= b->symbol.c_dcl_size
      260 	then do;
      261 		if a->symbol.array=null
      262 		then	goto fail;
      263 
      264 		if a->symbol.array->array.c_element_size^=b->symbol.c_dcl_size
      265 		then	goto fail;
      266 	end;
      267 
      268 	if a->symbol.scale ^= b->symbol.scale
      269 	then	goto fail;
      270 
      271 	if a->symbol.structure
      272 	then do;
      273 		p = a->symbol.son;
      274 		q = b->symbol.son;
      275 
      276 		do while(p^=null);
      277 			if q = null then go to fail;
      278 	
      279 			pp=p->symbol.array;
      280 			qq=q->symbol.array;
      281 			if (pp^=null | qq^=null )
      282 			then do;
      283 				if qq=null
      284 				then	goto fail;
      285 
      286 				if pp=null
      287 				then	if ^p->symbol.structure
      288 					then	if qq->array.own_number_of_dimensions^=0
      289 						then	goto fail;
      290 						else	;
      291 					else	;
      292 				else	if pp->array.own_number_of_dimensions
      293 					^= qq->array.own_number_of_dimensions
      294 					then	goto fail;
      295 			end;
      296 	
      297 			if ^match(p,q) then go to fail;
      298 			p = p->symbol.brother;
      299 			q = q->symbol.brother;
      300 		end;
      301 
      302 		if q ^= null then go to fail;
      303 	end;
      304 
      305 	return("1"b);
      306 
      307 fail:
      308 	return("0"b);
      309 	end match;
      310 
      311 /*  */
  1     1 /* subroutine to determine if a declaration can be string overlayed.  */
  1     2 
  1     3 string_overlay: proc(s) returns(bit(1) aligned);
  1     4 
  1     5 dcl	(s,p) ptr;
  1     6 
  1     7 	if ^s->symbol.packed then go to fail;
  1     8 	if s->symbol.structure
  1     9 		then do;
  1    10 			p = s->symbol.son;
  1    11 			do while(p^=null);
  1    12 			if ^string_overlay(p) then go to fail;
  1    13 			p = p->symbol.brother;
  1    14 			end;
  1    15 			return("1"b);
  1    16 		     end;
  1    17 	if ^(s->symbol.bit|s->symbol.char|s->symbol.picture)
  1    18 		then go to fail;
  1    19 	if t = 0 then if s->symbol.bit then t = bit_;
  1    20 				 else t = character_;
  1    21 		else if s->symbol.bit
  1    22 			then if t = character_ then go to fail;
  1    23 				    else;
  1    24 			else if t = bit_ then go to fail;
  1    25 	return("1"b);
  1    26 
  1    27 fail:
  1    28 	return("0"b);
  1    29 	end string_overlay;
      312 
      313 
      314 /* subroutine to find or find and replace all Isubs or asterisks with subscripts from the defined reference */
      315 
      316 isubs_or_stars: proc returns(bit(1) aligned);
      317 
      318 dcl	p ptr;
      319 dcl	i fixed bin(15);
      320 
      321 		/* extended 4-18-73 PAB
      322*		   to check that enough asterisks or isubs appear
      323*		   and to check that the two are not mixed
      324*		   and to check that the asterisks appear only at level 1 */
      325 
      326 
      327 	n = 0;
      328 
      329 	do i=1 to father_dims;
      330 	listdims(i)=0;
      331 	end;
      332 
      333 
      334 	if br->node.type=reference_node
      335 	then do;
      336 		p = br->reference.offset;
      337 		if p^=null
      338 		then do i = 1 to p->list.number;
      339 			call find(p->list.element(i));
      340 		end;
      341 	end;
      342 
      343 	if n=0 then return("0"b);
      344 	if father_dims=0 then return("1"b);		/* no isubs or asterisks expected */
      345 
      346 	if k>0 then if k^= father_dims then call print(181);	/* asterisks appear - there must be exactly enough of them */
      347 	if k>0 then
      348 		do i=1 to father_dims;		/* asterisks appear - no isubs may appear */
      349 		if listdims(i)^=0 then call print(181);
      350 		end;
      351 	else	do i=1 to father_dims;		/* no asterisks appear - exactly enough isubs must appear */
      352 		if listdims(i)=0 then call print(181);
      353 		end;
      354 
      355 	return("1"b);
      356 
      357 find: proc(p);
      358 
      359 dcl	p ptr unal,
      360 	(e,q) ptr;
      361 dcl	i fixed bin(15);
      362 dcl	recursif fixed bin(15);
      363 
      364 	recursif=1;
      365 	goto find_common;
      366 
      367 find_r:	entry(p);		/* recursive entrypoint - not allowed to "see" asterisks */
      368 	recursif=2;
      369 
      370 find_common:
      371 	e = p;
      372 
      373 	if e = null then return;
      374 
      375 	if e->node.type = operator_node
      376 	then do;
      377 		do i = 1 to e->operator.number;
      378 			call find_r(e->operand(i));
      379 		end;
      380 		return;
      381 	end;
      382 
      383 	if e->node.type = reference_node
      384 	then do;
      385 		call find_r(e->reference.qualifier);
      386 		call find_r(e->reference.offset);
      387 		call find_r(e->reference.length);
      388 		return;
      389 	end;
      390 
      391 	if e->node.type=list_node
      392 			/* subscripts and arguments in expressions in the
      393*			   subscripts of the base reference appear as
      394*			   refp->ref.offset->list   */
      395 	then do;
      396 		do i=1 to e->list.number;
      397 		call find_r(e->list.element(i));
      398 		end;
      399 		return;
      400 	end;
      401 
      402 	if e->node.type = token_node
      403 	then do;
      404 		if e->token.type = asterisk
      405 			then do;
      406 				if recursif=2 then return;	/* don't recognize
      407*							   an asterisk except at
      408*							   level 1 */
      409 				k = k+1;
      410 				n = k;
      411 			     end;
      412 			else do;
      413 				if e->token.type ^= isub then return;
      414 				n = decbin(substr(e->token.string,1,e->token.size-3));
      415 				listdims(n)=1;
      416 				s->symbol.isub = "1"b;
      417 			     end;
      418 
      419 		if n > father_dims then call print(181);
      420 		if substr(stmnt->statement.prefix,7,1)  /* subscriptrange */
      421 		|  subs=null
      422 		then do;
      423 			q = a->array.bounds;
      424 			do i = 1 to n-1;
      425 			q = q->bound.next;
      426 			end;
      427 			if q->bound.lower=null
      428 			then	q->bound.lower = declare_constant$integer((q->bound.c_lower));
      429 			if subs=null
      430 			then	e = q->bound.lower;
      431 			else do;
      432 				if q->bound.upper = null
      433 				then q->bound.upper = declare_constant$integer((q->bound.c_upper));
      434 				e = create_operator(bound_ck,4);
      435 				e->operand(1) = declare_temporary(integer_type,default_fix_bin_p,0,null);
      436 				e->operand(2) = subs->list.element(subs->list.number+1-n);
      437 				e->operand(3) = q->bound.lower;
      438 				e->operand(4) = q->bound.upper;
      439 			end;
      440 		end;
      441 		else	e = subs->list.element(subs->list.number+1-n);
      442 
      443 		/* if isub subscripts are not processed now they will be found	*/
      444 		/* hanging off of the base-reference as tokens, and processed within	*/
      445 		/* the block the base reference is declared in, rather than the 	*/
      446 		/* block in which they are found!!! (bug1395) -- RHS 8/75		*/
      447 
      448 		/* isub must be converted to integer!! -- RAB 6/77		*/
      449 
      450 		e = expression_semantics(blk,stmnt,e,this_context);
      451 		e = convert$to_integer(e,integer_type);
      452 	end;
      453 
      454 	p = e;
      455 
      456 	end find;
      457 
      458 	end isubs_or_stars;
      459 
      460 /* subroutine to print an error message and abort this statement.  */
      461 
      462 print: proc(m);
      463 
      464 dcl	m fixed bin(15);
      465 
      466 	call semantic_translator$abort(m,s);
      467 	end print;
      468 
  2     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  2     2 
  2     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  2     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  2     5 
  2     6 
  2     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  2     8 			/* parameter 1:	(input)	block node pointer		*/
  2     9 			/* parameter 2:	(input)	statement node pointer	*/
  2    10 			/* parameter 3:	(in/out)	tree pointer		*/
  2    11 
  2    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  2    13 			/* parameter 1:	(input)	qualifier pointer		*/
  2    14 			/* parameter 2:	(input)	statement node pointer	*/
  2    15 			/* parameter 3:	(input)	symbol node pointer		*/
  2    16 
  2    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  2    18 			returns(pointer);
  2    19 			/* parameter 1:	(input)	block node pointer		*/
  2    20 			/* parameter 2:	(input)	statement node pointer	*/
  2    21 			/* parameter 3:	(input)	tree pointer		*/
  2    22 			/* parameter 4:	(input)	subscript pointer		*/
  2    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  2    24 			/* parameter 6:	(in/out)	context			*/
  2    25 			/* return:	(output)	tree pointer		*/
  2    26 
  2    27 declare	check_star_extents	entry(pointer,pointer);
  2    28 			/* parameter 1:	(input) symbol node of procedure	*/
  2    29 			/* parameter 2:	(input) argument list pointer		*/
  2    30 
  2    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  2    32 			returns(bit(1) aligned);
  2    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  2    34 			/* parameter 2:	(input)	symbol node ptr	*/
  2    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  2    36 			/* return:	(output)	compare bit		*/
  2    37 
  2    38 declare	context_processor	entry(pointer,label);
  2    39 			/* parameter 1:	(input)	root block node pointer	*/
  2    40 
  2    41 declare	declare		entry(pointer);
  2    42 			/* parameter 1:	(input)	symbol node pointer		*/
  2    43 
  2    44 declare	declare_structure	entry(pointer);
  2    45 			/* parameter 1:	(input)	symbol node pointer		*/
  2    46 
  2    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  2    48 			returns(pointer);
  2    49 			/* parameter 1:	(input)	block node pointer		*/
  2    50 			/* parameter 2:	(input)	statement node pointer	*/
  2    51 			/* parameter 3:	(input)	tree pointer		*/
  2    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  2    53 			/* parameter 5:	(input)	symbol node pointer		*/
  2    54 			/* parameter 6:	(in/out)	context			*/
  2    55 			/* return:	(output)	tree pointer		*/
  2    56 
  2    57 declare	do_semantics	entry(pointer,pointer,pointer);
  2    58 			/* parameter 1:	(input)	block node pointer		*/
  2    59 			/* parameter 2:	(input)	statement node pointer	*/
  2    60 			/* parameter 3:	(input)	tree pointer		*/
  2    61 
  2    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  2    63 			returns(pointer);
  2    64 			/* parameter 1:	(input)	block node pointer		*/
  2    65 			/* parameter 2:	(input)	statement node pointer	*/
  2    66 			/* parameter 3:	(input)	tree pointer		*/
  2    67 			/* parameter 4:	(in/out)	context			*/
  2    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  2    69 			/* return:	(output)	tree pointer		*/
  2    70 
  2    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  2    72 			/* parameter 1:	(input)	block node pointer		*/
  2    73 			/* parameter 2:	(input)	statement node pointer	*/
  2    74 			/* parameter 3:	(input/output)	tree pointer		*/
  2    75 
  2    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  2    77 			returns(pointer);
  2    78 			/* parameter 1:	(input)	block node pointer		*/
  2    79 			/* parameter 2:	(input)	statement node pointer	*/
  2    80 			/* parameter 3:	(input)	tree pointer		*/
  2    81 			/* parameter 4:	(in/out)	context			*/
  2    82 			/* return:	(output)	tree pointer		*/
  2    83 
  2    84 declare	expand_initial	entry(pointer,pointer,pointer);
  2    85 			/* parameter 1:	(input)	symbol node pointer		*/
  2    86 			/* parameter 2:	(input)	statement node pointer	*/
  2    87 			/* parameter 3:	(input)	locator			*/
  2    88 
  2    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  2    90 			returns(pointer);
  2    91 			/* parameter 1:	(input)	block node pointer		*/
  2    92 			/* parameter 2:	(input)	statement node pointer	*/
  2    93 			/* parameter 3:	(input)	tree pointer		*/
  2    94 			/* parameter 4:	(in/out)	context			*/
  2    95 			/* return:	(output)	tree pointer		*/
  2    96 
  2    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  2    98 			returns(pointer);
  2    99 			/* parameter 1:	(input)	block node pointer		*/
  2   100 			/* parameter 2:	(input)	statement node pointer	*/
  2   101 			/* parameter 3:	(input)	tree pointer		*/
  2   102 			/* parameter 4:	(input)	context			*/
  2   103 			/* return:	(output)	tree pointer		*/
  2   104 
  2   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  2   106 			returns(pointer);
  2   107 			/* parameter 1:	(input)	block node pointer		*/
  2   108 			/* parameter 2:	(input)	statement node pointer	*/
  2   109 			/* parameter 3:	(input)	tree pointer		*/
  2   110 			/* parameter 4:	(in/out)	context			*/
  2   111 			/* return:	(output)	tree pointer		*/
  2   112 
  2   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  2   114 			returns(pointer);
  2   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  2   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  2   117 			/* parameter 3:	(input)	copy switch for param 2 */
  2   118 			/* return:	(output)	ptr to processed tree */
  2   119 
  2   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  2   121 			/* parameter 1:	(input)	block node pointer		*/
  2   122 			/* parameter 2:	(input)	statement node pointer	*/
  2   123 			/* parameter 3:	(in/out)	tree pointer		*/
  2   124 
  2   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   126 			returns(pointer);
  2   127 			/* parameter 1:	(input)	block node pointer		*/
  2   128 			/* parameter 2:	(input)	statement node pointer	*/
  2   129 			/* parameter 3:	(input)	tree pointer		*/
  2   130 			/* parameter 4:	(input)	symbol node pointer		*/
  2   131 			/* parameter 5:	(in/out)	context			*/
  2   132 			/* return:	(output)	tree pointer		*/
  2   133 
  2   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   135 			returns(pointer);
  2   136 			/* parameter 1:	(input)	block node pointer	*/
  2   137 			/* parameter 2:	(input)	statement node pointer	*/
  2   138 			/* parameter 3:	(input)	tree pointer	*/
  2   139 			/* parameter 4:	(input)	pointer to argument list	*/
  2   140 			/* parameter 5:	(in/out)	context		*/
  2   141 			/* return:	(output)	tree pointer	*/
  2   142 
  2   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  2   144 			/* parameter 1:	(input)	block node pointer		*/
  2   145 			/* parameter 2:	(input)	statement node pointer	*/
  2   146 			/* parameter 3:	(input)	operator node pointer	*/
  2   147 
  2   148 declare	io_semantics	entry(pointer,pointer,pointer);
  2   149 			/* parameter 1:	(input)	block node pointer		*/
  2   150 			/* parameter 2:	(input)	statement node pointer	*/
  2   151 			/* parameter 3:	(input)	tree pointer		*/
  2   152 
  2   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   154 			returns(bit(1) aligned);
  2   155 			/* parameter 1:	(input)	block node pointer		*/
  2   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  2   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  2   158 			/* parameter 4:	(output)	symbol node pointer		*/
  2   159 			/* parameter 5:	(in/out)	context			*/
  2   160 			/* return:	(output)	symbol found bit		*/
  2   161 
  2   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  2   163 			/* parameter 1:	(input)	tree pointer	*/
  2   164 			/* parameter 2:	(input)	reason why being made nonquick */
  2   165 
  2   166 declare	match_arguments	entry(pointer,pointer) reducible
  2   167 			returns(bit(1) aligned);
  2   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  2   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  2   170 			/* return:	(output)	compare bit		*/
  2   171 
  2   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  2   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  2   174 			/* parameter 1:	(in/out)	tree pointer		*/
  2   175 			/* parameter 2:	(in/out)	constant size		*/
  2   176 			/* parameter 3:	(in/out)	units			*/
  2   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  2   178 			/* parameter 5:	(input)	tree pointer		*/
  2   179 			/* parameter 6:	(input)	constant size		*/
  2   180 			/* parameter 7:	(input)	units			*/
  2   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  2   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  2   183 
  2   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	statement node pointer	*/
  2   188 			/* parameter 3:	(input)	tree pointer		*/
  2   189 			/* parameter 4:	(in/out)	context			*/
  2   190 			/* return:	(output)	tree pointer		*/
  2   191 
  2   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  2   193 			/* parameter 1:	(input)	symbol node pointer		*/
  2   194 			/* parameter 2:	(input)	attribute number		*/
  2   195 
  2   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  2   197 			returns(pointer);
  2   198 			/* parameter 1:	(input)	block ptr	*/
  2   199 			/* parameter 2:	(input)	statement ptr	*/
  2   200 			/* parameter 3:	(input)	tree ptr	*/
  2   201 			/* parameter 4:	(input)	failure label	*/
  2   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  2   203 			/* return:	(output)	tree ptr		*/
  2   204 
  2   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  2   206 			/* parameter 1:	(in/out)	tree pointer		*/
  2   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  2   208*						is simplified		*/
  2   209 			/* parameter 3:	(output)	bit indicating if the tree has
  2   210*						been simplified		*/
  2   211 
  2   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  2   213 			/* parameter 1:	(input)	reference node pointer	*/
  2   214 			/* parameter 2:	(input)	context			*/
  2   215 
  2   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  2   217 			returns(pointer);
  2   218 			/* parameter 1:	(input)	block node pointer		*/
  2   219 			/* parameter 2:	(input)	statement node pointer	*/
  2   220 			/* parameter 3:	(input)	tree pointer		*/
  2   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  2   222 			/* parameter 5:	(input)	symbol node pointer		*/
  2   223 			/* return:	(output)	reference node pointer	*/
  2   224 
  2   225 declare	validate		entry(pointer);
  2   226 			/* parameter 1:	(input)	symbol node pointer		*/
  2   227 
  3     1 /****^  *********************************************************
  3     2*        *                                                       *
  3     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  3     4*        *                                                       *
  3     5*        ********************************************************* */
  3     6 
  3     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  3     8 
  3     9 
  3    10 /****^  HISTORY COMMENTS:
  3    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  3    12*     install(89-07-31,MR12.3-1066):	
  3    13*     Removed the obsolete parameter source_line from the dcl of error_().
  3    14*                                                   END HISTORY COMMENTS */
  3    15 
  3    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  3    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  3    18* */
  3    19 
  3    20 declare	adjust_count	entry(pointer);
  3    21 			/* parameter 1:	(input)	any node pointer		*/
  3    22 
  3    23 declare	bindec		entry(fixed bin(31)) reducible
  3    24 			returns(character(12) aligned);
  3    25 			/* parameter 1:	(input)	bin value			*/
  3    26 			/* return:	(output)	character value with blanks	*/
  3    27 
  3    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  3    29 			returns(character(12) aligned varying);
  3    30 			/* parameter 1:	(input)	binary value		*/
  3    31 			/* return:	(output)	char value without blanks	*/
  3    32 
  3    33 declare	binoct		entry(fixed bin(31)) reducible
  3    34 			returns(char(12) aligned);
  3    35 			/* parameter 1:	(input)	binary value		*/
  3    36 			/* return:	(output)	char value with blanks	*/
  3    37 
  3    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  3    39 			returns(char(12) aligned);
  3    40 			/* parameter 1:	(input)	binary value		*/
  3    41 			/* return:	(output)	right-aligned char value	*/
  3    42 
  3    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  3    44 			returns(char(12) varying aligned);
  3    45 			/* parameter 1:	(input)	binary value		*/
  3    46 			/* returns:	(output)	char value without blanks	*/
  3    47 
  3    48 declare	compare_expression	entry(pointer,pointer) reducible
  3    49 			returns(bit(1) aligned);
  3    50 			/* parameter 1:	(input)	any node pointer		*/
  3    51 			/* parameter 2:	(input)	any node pointer		*/
  3    52 			/* return:	(output)	compare bit		*/
  3    53 
  3    54 declare	constant_length	entry (pointer, fixed bin (71))
  3    55 			returns (bit (1) aligned);
  3    56 			/* parameter 1:	(input)	reference node pointer	*/
  3    57 			/* parameter 2:	(input)	value of constant length	*/
  3    58 			/* return:	(output)	"1"b if constant length	*/
  3    59 
  3    60 declare	convert		entry(pointer,bit(36) aligned)
  3    61 			returns(pointer);
  3    62 			/* parameter 1:	(input)	any node pointer		*/
  3    63 			/* parameter 2:	(input)	target type		*/
  3    64 			/* return:	(output)	target value tree pointer	*/
  3    65 
  3    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  3    67 			returns(pointer);
  3    68 			/* parameter 1:	(input)	any node pointer		*/
  3    69 			/* parameter 2:	(input)	target type		*/
  3    70 			/* return:	(output)	target value tree pointer	*/
  3    71 
  3    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  3    73 			returns(pointer);
  3    74 			/* parameter 1:	(input)	any node pointer		*/
  3    75 			/* parameter 2:	(input)	target type		*/
  3    76 			/* return:	(output)	target value tree pointer	*/
  3    77 
  3    78 declare	convert$validate	entry(pointer,pointer);
  3    79 			/* parameter 1:	(input)	source value tree pointer	*/
  3    80 			/* parameter 2:	(input)	target reference node pointer	*/
  3    81 
  3    82 declare	convert$to_target_fb entry(pointer,pointer)
  3    83 			returns(pointer);
  3    84 			/* parameter 1:	(input)	source value tree pointer	*/
  3    85 			/* parameter 2:	(input)	target reference node pointer	*/
  3    86 			/* return:	(output)	target value tree pointer	*/
  3    87 
  3    88 declare	convert$to_target	entry(pointer,pointer)
  3    89 			returns(pointer);
  3    90 			/* parameter 1:	(input)	source value tree pointer	*/
  3    91 			/* parameter 2:	(input)	target reference node pointer	*/
  3    92 			/* return:	(output)	target value tree pointer	*/
  3    93 
  3    94 declare	copy_expression	entry(pointer unaligned)
  3    95 			returns(pointer);
  3    96 			/* parameter 1:	(input)	any node pointer		*/
  3    97 			/* return:	(output)	any node pointer		*/
  3    98 
  3    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  3   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  3   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  3   102 
  3   103 declare	copy_unique_expression entry(pointer)
  3   104 			returns(pointer);
  3   105 			/* parameter 1:	(input)	any node pointer		*/
  3   106 			/* return:	(output)	any node pointer		*/
  3   107 
  3   108 declare	create_array	entry()
  3   109 			returns(pointer);
  3   110 			/* return:	(output)	array node pointer		*/
  3   111 
  3   112 declare	create_block	entry(bit(9) aligned,pointer)
  3   113 			returns(pointer);
  3   114 			/* parameter 1:	(input)	block type		*/
  3   115 			/* parameter 2:	(input)	father block node pointer	*/
  3   116 			/* return:	(output)	block node pointer		*/
  3   117 
  3   118 declare	create_bound	entry()
  3   119 			returns(pointer);
  3   120 			/* return:	(output)	bound node pointer		*/
  3   121 
  3   122 declare	create_context	entry(pointer,pointer)
  3   123 			returns(pointer);
  3   124 			/* parameter 1:	(input)	block node pointer		*/
  3   125 			/* parameter 2:	(input)	token pointer		*/
  3   126 			/* return:	(output)	context node pointer	*/
  3   127 
  3   128 declare	create_cross_reference entry()
  3   129 			returns(pointer);
  3   130 			/* return:	(output)	cross reference node pointer	*/
  3   131 
  3   132 declare	create_default	entry
  3   133 			returns(pointer);
  3   134 			/* return:	(output)	default node pointer	*/
  3   135 
  3   136 declare	create_identifier	entry()
  3   137 			returns(pointer);
  3   138 			/* return:	(output)	token node pointer		*/
  3   139 
  3   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  3   141 			returns(pointer);
  3   142 			/* parameter 1:	(input)	block node pointer		*/
  3   143 			/* parameter 2:	(input)	token node pointer		*/
  3   144 			/* parameter 3:	(input)	declare type		*/
  3   145 			/* return:	(output)	label node pointer		*/
  3   146 
  3   147 declare	create_list	entry(fixed bin(15))
  3   148 			returns(pointer);
  3   149 			/* parameter 1:	(input)	number of list elements	*/
  3   150 			/* return:	(output)	list node pointer		*/
  3   151 
  3   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  3   153 			returns(pointer);
  3   154 			/* parameter 1:	(input)	operator type		*/
  3   155 			/* parameter 2:	(input)	number of operands		*/
  3   156 			/* return:	(output)	operator node pointer	*/
  3   157 
  3   158 declare	create_reference	entry(pointer)
  3   159 			returns(pointer);
  3   160 			/* parameter 1:	(input)	symbol node pointer		*/
  3   161 			/* return:	(output)	reference node pointer	*/
  3   162 
  3   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  3   164 			returns(pointer);
  3   165 			/* parameter 1:	(input)	statement type		*/
  3   166 			/* parameter 2:	(input)	block node pointer		*/
  3   167 			/* parameter 3:	(input)	label node pointer		*/
  3   168 			/* parameter 4:	(input)	conditions		*/
  3   169 			/* return:	(output)	statement node pointer	*/
  3   170 
  3   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  3   172 			returns(pointer);
  3   173 			/* parameter 1:	(input)	statement type		*/
  3   174 			/* parameter 2:	(input)	block node pointer		*/
  3   175 			/* parameter 3:	(input)	label node pointer		*/
  3   176 			/* parameter 4:	(input)	conditions		*/
  3   177 			/* return:	(output)	statement node pointer	*/
  3   178 
  3   179 declare	create_storage	entry(fixed bin(15))
  3   180 			returns(pointer);
  3   181 			/* parameter 1:	(input)	number of words		*/
  3   182 			/* return:	(output)	storage block pointer	*/
  3   183 
  3   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  3   185 			returns(pointer);
  3   186 			/* parameter 1:	(input)	block node pointer		*/
  3   187 			/* parameter 2:	(input)	token node pointer		*/
  3   188 			/* parameter 3:	(input)	declare type		*/
  3   189 			/* return:	(output)	symbol node pointer		*/
  3   190 
  3   191 declare	create_token	entry (character (*), bit (9) aligned)
  3   192 			returns (ptr);
  3   193 			/* parameter 1:	(input)	token string		*/
  3   194 			/* parameter 2:	(input)	token type		*/
  3   195 			/* return:	(output)	token node ptr		*/
  3   196 
  3   197 declare	create_token$init_hash_table entry ();
  3   198 
  3   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  3   200 			returns (ptr);
  3   201 			/* parameter 1:	(input)	token string		*/
  3   202 			/* parameter 2:	(input)	token type		*/
  3   203 			/* parameter 3:	(input)	protected flag		*/
  3   204 			/* return:	(output)	token node ptr		*/
  3   205 
  3   206 declare	decbin		entry(character(*) aligned) reducible
  3   207 			returns(fixed bin(31));
  3   208 			/* parameter 1:	(input)	decimal character string	*/
  3   209 			/* return:	(output)	binary value		*/
  3   210 
  3   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  3   212 			returns(pointer);
  3   213 			/* parameter 1:	(input)	value			*/
  3   214 			/* parameter 2:	(input)	type			*/
  3   215 			/* parameter 3:	(input)	size			*/
  3   216 			/* parameter 4:	(input)	scale			*/
  3   217 			/* return:	(output)	reference node pointer	*/
  3   218 
  3   219 declare	declare_constant$bit entry(bit(*) aligned)
  3   220 			returns(pointer);
  3   221 			/* parameter 1:	(input)	bit			*/
  3   222 			/* return:	(output)	reference node pointer	*/
  3   223 
  3   224 declare	declare_constant$char entry(character(*) aligned)
  3   225 			returns(pointer);
  3   226 			/* parameter 1:	(input)	character			*/
  3   227 			/* return:	(output)	reference node pointer	*/
  3   228 
  3   229 declare	declare_constant$desc entry(bit(*) aligned)
  3   230 			returns(pointer);
  3   231 			/* parameter 1:	(input)	descriptor bit value	*/
  3   232 			/* return:	(output)	reference node pointer	*/
  3   233 
  3   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  3   235 			returns(pointer);
  3   236 			/* parameter 1:	(input)	integer			*/
  3   237 			/* return:	(output)	reference node pointer	*/
  3   238 
  3   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   240 			returns(pointer);
  3   241 			/* parameter 1:	(input)	block node pointer		*/
  3   242 			/* parameter 2:	(input)	statement node pointer	*/
  3   243 			/* parameter 3:	(input)	symbol node pointer		*/
  3   244 			/* parameter 4:	(input)	loc pointer		*/
  3   245 			/* parameter 5:	(input)	array descriptor bit
  3   246*						cross_section bit	*/
  3   247 			/* return:	(output)	reference node pointer	*/
  3   248 
  3   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   250 			returns(pointer);
  3   251 			/* parameter 1:	(input)	block node pointer	*/
  3   252 			/* parameter 2:	(input)	statement node pointer 	*/
  3   253 			/* parameter 3:	(input)	symbol node pointer	*/
  3   254 			/* parameter 4:	(input)	loc pointer	*/
  3   255 			/* parameter 5:	(input)	array descriptor bit
  3   256*						cross_section bit	*/
  3   257 			/* return:	(output)	reference node pointer	*/
  3   258 
  3   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   260 			returns(pointer);
  3   261 			/* parameter 1:	(input)	block node pointer		*/
  3   262 			/* parameter 2:	(input)	statement node pointer	*/
  3   263 			/* parameter 3:	(input)	symbol node pointer		*/
  3   264 			/* parameter 4:	(input)	loc pointer		*/
  3   265 			/* parameter 5:	(input)	array descriptor bit
  3   266*						cross_section bit	*/
  3   267 			/* return:	(output)	reference node pointer	*/
  3   268 
  3   269 declare	declare_integer	entry(pointer)
  3   270 			returns(pointer);
  3   271 			/* parameter 1:	(input)	block node pointer		*/
  3   272 			/* return:	(output)	reference node pointer 	*/
  3   273 
  3   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  3   275 			/* parameter 1:	(input)	picture string		*/
  3   276 			/* parameter 2:	(input)	symbol node pointer		*/
  3   277 			/* parameter 3:	(output)	error code, if any		*/
  3   278 
  3   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  3   280 			returns(pointer);
  3   281 			/* parameter 1:	(input)	picture string		*/
  3   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  3   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  3   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  3   285 			/* return:	(output)	reference node pointer	*/
  3   286 
  3   287 declare	declare_pointer	entry(pointer)
  3   288 			returns(pointer);
  3   289 			/* parameter 1:	(input)	block node pointer		*/
  3   290 			/* return:	(output)	reference node pointer	*/
  3   291 
  3   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  3   293 			returns(pointer);
  3   294 			/* parameter 1:	(input)	type			*/
  3   295 			/* parameter 2:	(input)	precision			*/
  3   296 			/* parameter 3:	(input)	scale			*/
  3   297 			/* parameter 4:	(input)	length			*/
  3   298 			/* return:	(output)	reference node pointer	*/
  3   299 
  3   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  3   301 			returns(char(120) varying);
  3   302 			/* parameter 1:	(input)	node pointer		*/
  3   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  3   304 			/* return:	(output)	source line id		*/
  3   305 
  3   306 declare	decode_source_id	entry(
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  3   307 
  3   308 			bit(1) aligned)
  3   309 			returns(char(120) varying);
  3   310 			/* parameter 1:	(input)	source id			*/
  3   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  3   312 			/* return:	(output)	source line id		*/
  3   313 
  3   314 declare	error		entry(fixed bin(15),pointer,pointer);
  3   315 			/* parameter 1:	(input)	error number		*/
  3   316 			/* parameter 2:	(input)	statement node pointer or null*/
  3   317 			/* parameter 3:	(input)	token node pointer 		*/
  3   318 
  3   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  3   320 			/* parameter 1:	(input)	error number		*/
  3   321 			/* parameter 2:	(input)	statement node pointer or null*/
  3   322 			/* parameter 3:	(input)	token node pointer 		*/
  3   323 
  3   324 declare	error_		entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  3   325 
  3   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  3   327 			/* parameter 1:	(input)	error number		*/
  3   328 			/* parameter 2:	(input)	statement id		*/
  3   329 			/* parameter 3:	(input)	any node pointer		*/
  3   330 			/* parameter 4:	(input)	source segment		*/
  3   331 			/* parameter 5:	(input)	source starting character	*/
  3   332 			/* parameter 6:	(input)	source length		*/
  3   333 
  3   334 declare	error_$no_text	entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  3   335 
  3   336 			pointer);
  3   337 			/* parameter 1:	(input)	error number		*/
  3   338 			/* parameter 2:	(input)	statement id		*/
  3   339 			/* parameter 3:	(input)	any node pointer		*/
  3   340 
  3   341 declare	error_$initialize_error entry();
  3   342 
  3   343 declare	error_$finish	entry();
  3   344 
  3   345 declare	free_node		entry(pointer);
  3   346 			/* parameter 1:	any node pointer			*/
  3   347 
  3   348 declare	get_array_size	entry(pointer,fixed bin(3));
  3   349 			/* parameter 1:	(input)	symbol node pointer		*/
  3   350 			/* parameter 2:	(input)	units			*/
  3   351 
  3   352 declare	get_size		entry(pointer);
  3   353 			/* parameter 1:	(input)	symbol node pointer		*/
  3   354 
  3   355 declare	merge_attributes	external entry(pointer,pointer)
  3   356 			returns(bit(1) aligned);
  3   357 			/* parameter 1:	(input)	target symbol node pointer */
  3   358 			/* parameter 2:	(input)	source symbol node pointer */
  3   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  3   360 
  3   361 declare	optimizer		entry(pointer);
  3   362 			/* parameter 1:	(input)	root pointer		*/
  3   363 
  3   364 declare	parse_error	entry(fixed bin(15),pointer);
  3   365 			/* parameter 1:	(input)	error number		*/
  3   366 			/* parameter 2:	(input)	any node pointer		*/
  3   367 
  3   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  3   369 			/* parameter 1:	(input)	error number		*/
  3   370 			/* parameter 2:	(input)	any node pointer		*/
  3   371 
  3   372 declare	pl1_error_print$write_out
  3   373 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  3   374 
  3   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  3   376 			/* parameter 1:	(input)	error number		*/
  3   377 			/* parameter 2:	(input)	statement identification	*/
  3   378 			/* parameter 3:	(input)	any node pointer		*/
  3   379 			/* parameter 4:	(input)	source segment		*/
  3   380 			/* parameter 5:	(input)	source character index	*/
  3   381 			/* parameter 6:	(input)	source length		*/
  3   382 			/* parameter 7:	(input)	source line		*/
  3   383 
  3   384 declare	pl1_error_print$listing_segment
  3   385 			entry(fixed bin(15),
  8     1 			1 structure unaligned,
  8     2 			  2 /* file_number */	bit(8),
  8     3 			  2 /* line_number */	bit(14),
  8     4 			  2 /* stmt_number */	bit(5),
  3   386 
  3   387 			pointer);
  3   388 			/* parameter 1:	(input)	error number		*/
  3   389 			/* parameter 2:	(input)	statement identification	*/
  3   390 			/* parameter 3:	(input)	token node pointer		*/
  3   391 
  3   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  3   393 			/* parameter 1:	(input)	string			*/
  3   394 
  3   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  3   396 			/* parameter 1:	(input)	string			*/
  3   397 
  3   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  3   399 			/* parameter 1:	(input)	string			*/
  3   400 			/* parameter 2:	(input)	string length or 0		*/
  3   401 
  3   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  3   403 			/* parameter 1:	(input)	string			*/
  3   404 			/* parameter 2:	(input)	string length or 0		*/
  3   405 
  3   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  3   407 			/* parameter 1:	(input)	string pointer		*/
  3   408 			/* parameter 2:	(input)	string size		*/
  3   409 
  3   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  3   411 			/* parameter 1:	(input)	string pointer		*/
  3   412 			/* parameter 2:	(input)	string length or 0		*/
  3   413 
  3   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  3   415 			/* parameter 1:	(input)	string			*/
  3   416 			/* parameter 2:	(input)	length			*/
  3   417 
  3   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  3   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  3   420 			/* parameter 2:	(input)	line number		*/
  3   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  3   422 			/* parameter 4:	(input)	number of chars to copy	*/
  3   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  3   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  3   425 
  3   426 declare	refer_extent	entry(pointer,pointer);
  3   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  3   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  3   429 
  3   430 declare	reserve$clear	entry()
  3   431 			returns(pointer);
  3   432 			/* return:	(output)	pointer			*/
  3   433 
  3   434 declare	reserve$declare_lib	entry(fixed bin(15))
  3   435 			returns(pointer);
  3   436 			/* parameter 1:	(input)	builtin function number	*/
  3   437 			/* return:	(output)	pointer			*/
  3   438 
  3   439 declare	reserve$read_lib	entry(fixed bin(15))
  3   440 			returns(pointer);
  3   441 			/* parameter 1:	(input)	builtin function number	*/
  3   442 			/* return:	(output)	pointer			*/
  3   443 
  3   444 declare	semantic_translator	entry();
  3   445 
  3   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  3   447 			/* parameter 1:	(input)	error number		*/
  3   448 			/* parameter 2:	(input)	any node pointer		*/
  3   449 
  3   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  3   451 			/* parameter 1:	(input)	error number		*/
  3   452 			/* parameter 2:	(input)	any node pointer		*/
  3   453 
  3   454 declare	share_expression	entry(ptr)
  3   455 			returns(ptr);
  3   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  3   457 			/* return:	(output)	tree pointer or null	*/
  3   458 
  3   459 declare	token_to_binary	entry(ptr) reducible
  3   460 			returns(fixed bin(31));
  3   461 			/* parameter 1:	(input)	token node pointer		*/
  3   462 			/* return:	(output)	converted binary value	*/
  3   463 
  3   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  2   228 
  2   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      469 
  9     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  9     2 
  9     3 dcl	1 symbol			based aligned,
  9     4 	2 node_type		bit(9) unal,
  9     5 	2 source_id		structure unal,
  9     6 	  3 file_number		bit(8),
  9     7 	  3 line_number		bit(14),
  9     8 	  3 statement_number	bit(5),
  9     9 	2 location		fixed(18) unal unsigned,
  9    10 	2 allocated		bit(1) unal,
  9    11 	2 dcl_type		bit(3) unal,
  9    12 	2 reserved		bit(6) unal,
  9    13 	2 pix			unal,
  9    14 	  3 pic_fixed		bit(1) unal,
  9    15 	  3 pic_float		bit(1) unal,
  9    16 	  3 pic_char		bit(1) unal,
  9    17 	  3 pic_scale		fixed(7) unal,
  9    18 	  3 pic_size		fixed(7) unal,
  9    19 	2 level			fixed(8) unal,
  9    20 	2 boundary		fixed(3) unal,
  9    21 	2 size_units		fixed(3) unal,
  9    22 	2 scale			fixed(7) unal,
  9    23 	2 runtime			bit(18) unal,
  9    24 	2 runtime_offset		bit(18) unal,
  9    25 	2 block_node		ptr unal,
  9    26 	2 token			ptr unal,
  9    27 	2 next			ptr unal,
  9    28 	2 multi_use		ptr unal,
  9    29 	2 cross_references		ptr unal,
  9    30 	2 initial			ptr unal,
  9    31 	2 array			ptr unal,
  9    32 	2 descriptor		ptr unal,
  9    33 	2 equivalence		ptr unal,
  9    34 	2 reference		ptr unal,
  9    35 	2 general			ptr unal,
  9    36 	2 father			ptr unal,
  9    37 	2 brother			ptr unal,
  9    38 	2 son			ptr unal,
  9    39 	2 word_size		ptr unal,
  9    40 	2 bit_size		ptr unal,
  9    41 	2 dcl_size		ptr unal,
  9    42 	2 symtab_size		ptr unal,
  9    43 	2 c_word_size		fixed(24),
  9    44 	2 c_bit_size		fixed(24),
  9    45 	2 c_dcl_size		fixed(24),
  9    46 
  9    47 	2 attributes		structure aligned,
  9    48 	  3 data_type		structure unal,
  9    49 	    4 structure		bit(1) ,
  9    50 	    4 fixed		bit(1),
  9    51 	    4 float		bit(1),
  9    52 	    4 bit			bit(1),
  9    53 	    4 char		bit(1),
  9    54 	    4 ptr			bit(1),
  9    55 	    4 offset		bit(1),
  9    56 	    4 area		bit(1),
  9    57 	    4 label		bit(1),
  9    58 	    4 entry		bit(1),
  9    59 	    4 file		bit(1),
  9    60 	    4 arg_descriptor	bit(1),
  9    61 	    4 storage_block		bit(1),
  9    62 	    4 explicit_packed	bit(1), /* options(packed) */
  9    63 	    4 condition		bit(1),
  9    64 	    4 format		bit(1),
  9    65 	    4 builtin		bit(1),
  9    66 	    4 generic		bit(1),
  9    67 	    4 picture		bit(1),
  9    68 
  9    69 	  3 misc_attributes		structure unal,
  9    70 	    4 dimensioned		bit(1),
  9    71 	    4 initialed		bit(1),
  9    72 	    4 aligned		bit(1),
  9    73 	    4 unaligned		bit(1),
  9    74 	    4 signed		bit(1),
  9    75 	    4 unsigned		bit(1),
  9    76 	    4 precision		bit(1),
  9    77 	    4 varying		bit(1),
  9    78 	    4 local		bit(1),
  9    79 	    4 decimal		bit(1),
  9    80 	    4 binary		bit(1),
  9    81 	    4 real		bit(1),
  9    82 	    4 complex		bit(1),
  9    83 	    4 variable		bit(1),
  9    84 	    4 reducible		bit(1),
  9    85 	    4 irreducible		bit(1),
  9    86 	    4 returns		bit(1),
  9    87 	    4 position		bit(1),
  9    88 	    4 internal		bit(1),
  9    89 	    4 external		bit(1),
  9    90 	    4 like		bit(1),
  9    91 	    4 member		bit(1),
  9    92 	    4 non_varying		bit(1),
  9    93 	    4 options		bit(1),
  9    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  9    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  9    96 
  9    97 	  3 storage_class		structure unal,
  9    98 	    4 auto		bit(1),
  9    99 	    4 based		bit(1),
  9   100 	    4 static		bit(1),
  9   101 	    4 controlled		bit(1),
  9   102 	    4 defined		bit(1),
  9   103 	    4 parameter		bit(1),
  9   104 	    4 param_desc		bit(1),
  9   105 	    4 constant		bit(1),
  9   106 	    4 temporary		bit(1),
  9   107 	    4 return_value		bit(1),
  9   108 
  9   109 	  3 file_attributes		structure unal,
  9   110 	    4 print		bit(1),
  9   111 	    4 input		bit(1),
  9   112 	    4 output		bit(1),
  9   113 	    4 update		bit(1),
  9   114 	    4 stream		bit(1),
  9   115 	    4 reserved_1		bit(1),
  9   116 	    4 record		bit(1),
  9   117 	    4 sequential		bit(1),
  9   118 	    4 direct		bit(1),
  9   119 	    4 interactive		bit(1),		/* env(interactive) */
  9   120 	    4 reserved_2		bit(1),
  9   121 	    4 reserved_3		bit(1),
  9   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  9   123 	    4 keyed		bit(1),
  9   124 	    4 reserved_4		bit(1),
  9   125 	    4 environment		bit(1),
  9   126 
  9   127 	  3 compiler_developed	structure unal,
  9   128 	    4 aliasable		bit(1),
  9   129 	    4 packed		bit(1),
  9   130 	    4 passed_as_arg		bit(1),
  9   131 	    4 allocate		bit(1),
  9   132 	    4 set			bit(1),
  9   133 	    4 exp_extents		bit(1),
  9   134 	    4 refer_extents		bit(1),
  9   135 	    4 star_extents		bit(1),
  9   136 	    4 isub		bit(1),
  9   137 	    4 put_in_symtab		bit(1),
  9   138 	    4 contiguous		bit(1),
  9   139 	    4 put_data		bit(1),
  9   140 	    4 overlayed		bit(1),
  9   141 	    4 error		bit(1),
  9   142 	    4 symtab_processed	bit(1),
  9   143 	    4 overlayed_by_builtin	bit(1),
  9   144 	    4 defaulted		bit(1),
  9   145 	    4 connected		bit(1);
  9   146 
  9   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      470 
      471 
 10     1 /* BEGIN INCLUDE FILE ... symbol_bits.incl.pl1 */
 10     2 
 10     3 dcl (	aliasable_bit	initial (72),
 10     4 	passed_as_arg_bit	initial (74),
 10     5 	set_bit		initial (76),
 10     6 	overlayed_by_builtin_bit initial (87)) fixed bin (15) internal static options (constant);
 10     7 
 10     8 /* END INCLUDE FILE ... symbol_bits.incl.pl1 */
      472 
      473 
 11     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 11     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 11     3 /* format: style3,idind30 */
 11     4 
 11     5 declare	1 block			aligned based,
 11     6 	  2 node_type		bit (9) unaligned,
 11     7 	  2 source_id		structure unaligned,
 11     8 	    3 file_number		bit (8),
 11     9 	    3 line_number		bit (14),
 11    10 	    3 statement_number	bit (5),
 11    11 	  2 father		ptr unaligned,
 11    12 	  2 brother		ptr unaligned,
 11    13 	  2 son			ptr unaligned,
 11    14 	  2 declaration		ptr unaligned,
 11    15 	  2 end_declaration		ptr unaligned,
 11    16 	  2 default		ptr unaligned,
 11    17 	  2 end_default		ptr unaligned,
 11    18 	  2 context		ptr unaligned,
 11    19 	  2 prologue		ptr unaligned,
 11    20 	  2 end_prologue		ptr unaligned,
 11    21 	  2 main			ptr unaligned,
 11    22 	  2 end_main		ptr unaligned,
 11    23 	  2 return_values		ptr unaligned,
 11    24 	  2 return_count		ptr unaligned,
 11    25 	  2 plio_ps		ptr unaligned,
 11    26 	  2 plio_fa		ptr unaligned,
 11    27 	  2 plio_ffsb		ptr unaligned,
 11    28 	  2 plio_ssl		ptr unaligned,
 11    29 	  2 plio_fab2		ptr unaligned,
 11    30 	  2 block_type		bit (9) unaligned,
 11    31 	  2 prefix		bit (12) unaligned,
 11    32 	  2 like_attribute		bit (1) unaligned,
 11    33 	  2 no_stack		bit (1) unaligned,
 11    34 	  2 get_data		bit (1) unaligned,
 11    35 	  2 flush_at_call		bit (1) unaligned,
 11    36 	  2 processed		bit (1) unaligned,
 11    37 	  2 text_displayed		bit (1) unaligned,
 11    38 	  2 number		fixed bin (9) unsigned unaligned,
 11    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 11    40 	  2 temp_list		ptr,
 11    41 	  2 entry_list		ptr,
 11    42 	  2 o_and_s		ptr,
 11    43 	  2 why_nonquick		aligned,
 11    44 	    3 auto_adjustable_storage bit (1) unaligned,
 11    45 	    3 returns_star_extents	bit (1) unaligned,
 11    46 	    3 stack_extended_by_args	bit (1) unaligned,
 11    47 	    3 invoked_by_format	bit (1) unaligned,
 11    48 	    3 format_statement	bit (1) unaligned,
 11    49 	    3 io_statements		bit (1) unaligned,
 11    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 11    51 	    3 condition_statements	bit (1) unaligned,
 11    52 	    3 no_owner		bit (1) unaligned,
 11    53 	    3 recursive_call	bit (1) unaligned,
 11    54 	    3 options_non_quick	bit (1) unaligned,
 11    55 	    3 options_variable	bit (1) unaligned,
 11    56 	    3 never_referenced	bit (1) unaligned,
 11    57 	    3 pad_nonquick		bit (5) unaligned,
 11    58 	  2 prologue_flag		bit (1) unaligned,
 11    59 	  2 options_main		bit (1) unaligned,
 11    60 	  2 pad			bit (16) unaligned,
 11    61 	  2 number_of_entries	fixed bin (17),
 11    62 	  2 level			fixed bin (17),
 11    63 	  2 last_auto_loc		fixed bin (17),
 11    64 	  2 symbol_block		fixed bin (17),
 11    65 	  2 entry_info		fixed bin (18),
 11    66 	  2 enter			structure unaligned,
 11    67 	    3 start		fixed bin (17),
 11    68 	    3 end			fixed bin (17),
 11    69 	  2 leave			structure unaligned,
 11    70 	    3 start		fixed bin (17),
 11    71 	    3 end			fixed bin (17),
 11    72 	  2 owner			ptr;
 11    73 
 11    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 11    75 
 11    76 /* END INCLUDE FILE ... block.incl.pl1 */
      474 
      475 
 12     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 12     2 
 12     3 dcl	1 reference		based aligned,
 12     4 	2 node_type		bit(9) unaligned,
 12     5 	2 array_ref		bit(1) unaligned,
 12     6 	2 varying_ref		bit(1) unaligned,
 12     7 	2 shared			bit(1) unaligned,
 12     8 	2 put_data_sw		bit(1) unaligned,
 12     9 	2 processed		bit(1) unaligned,
 12    10 	2 units			fixed(3) unaligned,
 12    11 	2 ref_count		fixed(17) unaligned,
 12    12 	2 c_offset		fixed(24),
 12    13 	2 c_length		fixed(24),
 12    14 	2 symbol			ptr unaligned,
 12    15 	2 qualifier		ptr unaligned,
 12    16 	2 offset			ptr unaligned,
 12    17 	2 length			ptr unaligned,
 12    18 	2 subscript_list		ptr unaligned,
 12    19 						/* these fields are used by the 645 code generator */
 12    20 	2 address			structure unaligned,
 12    21 	  3 base			bit(3),
 12    22 	  3 offset		bit(15),
 12    23 	  3 op			bit(9),
 12    24 	  3 no_address		bit(1),
 12    25 	  3 inhibit		bit(1),
 12    26 	  3 ext_base		bit(1),
 12    27 	  3 tag			bit(6),
 12    28 	2 info			structure unaligned,
 12    29 	  3 address_in		structure,
 12    30 	    4 b			dimension(0:7) bit(1),
 12    31 	    4 storage		bit(1),
 12    32 	  3 value_in		structure,
 12    33 	    4 a			bit(1),
 12    34 	    4 q			bit(1),
 12    35 	    4 aq			bit(1),
 12    36 	    4 string_aq		bit(1),
 12    37 	    4 complex_aq		bit(1),
 12    38 	    4 decimal_aq		bit(1),
 12    39 	    4 b			dimension(0:7) bit(1),
 12    40 	    4 storage		bit(1),
 12    41 	    4 indicators		bit(1),
 12    42 	    4 x			dimension(0:7) bit(1),
 12    43 	  3 other			structure,
 12    44 	    4 big_offset		bit(1),
 12    45 	    4 big_length		bit(1),
 12    46 	    4 modword_in_offset	bit(1),
 12    47 	2 data_type		fixed(5) unaligned,
 12    48 	2 bits			structure unaligned,
 12    49 	  3 padded_ref		bit(1),
 12    50 	  3 aligned_ref		bit(1),
 12    51 	  3 long_ref		bit(1),
 12    52 	  3 forward_ref		bit(1),
 12    53 	  3 ic_ref		bit(1),
 12    54 	  3 temp_ref		bit(1),
 12    55 	  3 defined_ref		bit(1),
 12    56 	  3 evaluated		bit(1),
 12    57 	  3 allocate		bit(1),
 12    58 	  3 allocated		bit(1),
 12    59 	  3 aliasable		bit(1),
 12    60 	  3 even			bit(1),
 12    61 	  3 perm_address		bit(1),
 12    62 	  3 aggregate		bit(1),
 12    63 	  3 hit_zero		bit(1),
 12    64 	  3 dont_save		bit(1),
 12    65 	  3 fo_in_qual		bit(1),
 12    66 	  3 hard_to_load		bit(1),
 12    67 	2 relocation		bit(12) unaligned,
 12    68 	2 more_bits		structure unaligned,
 12    69 	  3 substr		bit(1),
 12    70 	  3 padded_for_store_ref	bit(1),
 12    71 	  3 aligned_for_store_ref	bit(1),
 12    72 	  3 mbz			bit(15),
 12    73 	2 store_ins		bit(18) unaligned;
 12    74 
 12    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      476 
 13     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 13     2 
 13     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 13     4 
 13     5 dcl	context aligned bit(36),
 13     6 	this_context aligned bit(36);
 13     7 
 13     8 dcl	1 def_context		aligned based(addr(context)),
 13     9 	2 aggregate		unaligned bit(1),
 13    10 	2 arg_list		unaligned bit(1),
 13    11 	2 left_side		unaligned bit(1),
 13    12 	2 return			unaligned bit(1),
 13    13 	2 evaluate_offset		unaligned bit(1),
 13    14 	2 top			unaligned bit(1),
 13    15 	2 RHS_aggregate		unaligned bit(1),
 13    16 	2 return_from_empty		unaligned bit(1),
 13    17 	2 ignore_based		unaligned bit(1),
 13    18 	2 ext_param		unaligned bit(1),
 13    19 	2 cross_section		unaligned bit(1),
 13    20 	2 string_unspec		unaligned bit(1),
 13    21 	2 f_offset_to_be_added	unaligned bit(1),
 13    22 	2 suppress_cross_ref	unaligned bit(1),
 13    23 	2 by_name_assignment	unaligned bit(1),
 13    24 	2 by_name_lookup		unaligned bit(1),
 13    25 	2 pad			unaligned bit(20);
 13    26 
 13    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 13    28 
 13    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
      477 
      478 
 14     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 14     2 
 14     3 dcl	1 token			based aligned,
 14     4 	2 node_type		bit(9) unaligned,
 14     5 	2 type			bit(9) unaligned,
 14     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 14     7 	2 declaration		ptr unaligned,
 14     8 	2 next			ptr unaligned,
 14     9 	2 size			fixed(9),
 14    10 	2 string			char(n refer(token.size));
 14    11 
 14    12 /* END INCLUDE FILE ... token.incl.pl1 */
      479 
      480 
 15     1 /* ***********************************************************
 15     2*   *                                                         *
 15     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 15     4*   *                                                         *
 15     5*   *********************************************************** */
 15     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 15     7 /* Internal interface of the PL/I compiler */
 15     8 
 15     9 dcl	1 statement		based aligned,
 15    10 	2 node_type		bit(9) unaligned,
 15    11 	2 source_id		structure unaligned,
 15    12 	  3 file_number		bit(8),
 15    13 	  3 line_number		bit(14),
 15    14 	  3 statement_number	bit(5),
 15    15 	2 next			ptr unaligned,
 15    16 	2 back			ptr unaligned,
 15    17 	2 root			ptr unaligned,
 15    18 	2 labels			ptr unaligned,
 15    19 	2 reference_list		ptr unaligned,
 15    20 	2 state_list		ptr unaligned,
 15    21 	2 reference_count		fixed(17) unaligned,
 15    22 	2 ref_count_copy		fixed(17) unaligned,
 15    23 	2 object			structure unaligned,
 15    24 	  3 start			fixed(17),
 15    25 	  3 finish		fixed(17),
 15    26 	2 source			structure unaligned,
 15    27 	  3 segment		fixed(11),
 15    28 	  3 start			fixed(23),
 15    29 	  3 length		fixed(11),
 15    30 	2 prefix			bit(12) unaligned,
 15    31 	2 optimized		bit(1) unaligned,
 15    32 	2 free_temps		bit(1) unaligned,
 15    33 	2 LHS_in_RHS		bit(1) unaligned,
 15    34 	2 statement_type		bit(9) unaligned,
 15    35 	2 bits			structure unaligned,
 15    36 	  3 processed		bit(1) unaligned,
 15    37 	  3 put_in_profile		bit(1) unaligned,
 15    38 	  3 generated		bit(1) unaligned,
 15    39 	  3 snap			bit(1) unaligned,
 15    40 	  3 system		bit(1) unaligned,
 15    41 	  3 irreducible		bit(1) unaligned,
 15    42 	  3 checked		bit(1) unaligned,
 15    43 	  3 save_temps		bit(1) unaligned,
 15    44 	  3 suppress_warnings	bit(1) unaligned,
 15    45 	  3 force_nonquick		bit(1) unaligned,
 15    46 	  3 expanded_by_name	bit(1) unaligned,
 15    47 	  3 begins_loop		bit(1) unaligned,
 15    48 	  3 pad			bit(24) unaligned;
 15    49 
 15    50 /* END INCLUDE FILE ... statement.incl.pl1 */
      481 
      482 
 16     1 dcl	1 array			based aligned,
 16     2 	2 node_type		bit(9) unaligned,
 16     3 	2 reserved		bit(34) unaligned,
 16     4 	2 number_of_dimensions	fixed(7) unaligned,
 16     5 	2 own_number_of_dimensions	fixed(7) unaligned,
 16     6 	2 element_boundary		fixed(3) unaligned,
 16     7 	2 size_units		fixed(3) unaligned,
 16     8 	2 offset_units		fixed(3) unaligned,
 16     9 	2 interleaved		bit(1) unaligned,
 16    10 	2 c_element_size		fixed(24),
 16    11 	2 c_element_size_bits	fixed(24),
 16    12 	2 c_virtual_origin		fixed(24),
 16    13 	2 element_size		ptr unaligned,
 16    14 	2 element_size_bits		ptr unaligned,
 16    15 	2 virtual_origin		ptr unaligned,
 16    16 	2 symtab_virtual_origin	ptr unaligned,
 16    17 	2 symtab_element_size	ptr unaligned,
 16    18 	2 bounds			ptr unaligned,
 16    19 	2 element_descriptor	ptr unaligned;
 16    20 
 16    21 dcl	1 bound			based aligned,
 16    22 	2 node_type		bit(9),
 16    23 	2 c_lower			fixed(24),
 16    24 	2 c_upper			fixed(24),
 16    25 	2 c_multiplier		fixed(24),
 16    26 	2 c_desc_multiplier		fixed(24),
 16    27 	2 lower			ptr unaligned,
 16    28 	2 upper			ptr unaligned,
 16    29 	2 multiplier		ptr unaligned,
 16    30 	2 desc_multiplier		ptr unaligned,
 16    31 	2 symtab_lower		ptr unaligned,
 16    32 	2 symtab_upper		ptr unaligned,
 16    33 	2 symtab_multiplier		ptr unaligned,
 16    34 	2 next			ptr unaligned;
      483 
      484 
 17     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 17     2 
 17     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 17     4 
 17     5 
 17     6 dcl	1 list		based aligned,
 17     7 	2 node_type	bit(9) unaligned,
 17     8 	2 reserved	bit(12) unaligned,
 17     9 	2 number		fixed(14) unaligned,
 17    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 17    11 
 17    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 17    13 	                    init(16383);
 17    14 
 17    15 /* END INCLUDE FILE ... list.incl.pl1 */
      485 
      486 
 18     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 18     2 
 18     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 18     4 
 18     5 /* format: style3 */
 18     6 dcl	1 operator	based aligned,
 18     7 	  2 node_type	bit (9) unaligned,
 18     8 	  2 op_code	bit (9) unaligned,
 18     9 	  2 shared	bit (1) unaligned,
 18    10 	  2 processed	bit (1) unaligned,
 18    11 	  2 optimized	bit (1) unaligned,
 18    12 	  2 number	fixed (14) unaligned,
 18    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 18    14 
 18    15 dcl	max_number_of_operands
 18    16 			fixed bin (15) int static options (constant) initial (32767);
 18    17 
 18    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      487 
      488 
 19     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 19     2 
 19     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 19     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 19     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 19     6 /* Modified: 26 July 82 BIM wordno, segno */
 19     7 
 19     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 19     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 19    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 19    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 19    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 19    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 19    14 
 19    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 19    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 19    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 19    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 19    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 19    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 19    21 
 19    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 19    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 19    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 19    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 19    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 19    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 19    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 19    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 19    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 19    31 
 19    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 19    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 19    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 19    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 19    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 19    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 19    38 
 19    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 19    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 19    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 19    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 19    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 19    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 19    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 19    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 19    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 19    48 
 19    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 19    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 19    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 19    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 19    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 19    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 19    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 19    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 19    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 19    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 19    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 19    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 19    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 19    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 19    63 
 19    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 19    65*						   opnd(2) <- opnd(3) / 36		*/
 19    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 19    67*						   opnd(2) <- opnd(3) / 4		*/
 19    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 19    69*						   opnd(2) <- opnd(3) / 2		*/
 19    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 19    71 
 19    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 19    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 19    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 19    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 19    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 19    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 19    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 19    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 19    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 19    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 19    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 19    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 19    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 19    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 19    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 19    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 19    88 
 19    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 19    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 19    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 19    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 19    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 19    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 19    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 19    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 19    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 19    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 19    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 19   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 19   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 19   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 19   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 19   104 
 19   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 19   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 19   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 19   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 19   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 19   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 19   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 19   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 19   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 19   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 19   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 19   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 19   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 19   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 19   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 19   120 
 19   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 19   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 19   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 19   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 19   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 19   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 19   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 19   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 19   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 19   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 19   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 19   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 19   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 19   134 
 19   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 19   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 19   137 
 19   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 19   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 19   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 19   141*						   opnd(2) is the file name
 19   142*						   opnd(3) is the block	*/
 19   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 19   144*						   opnd(2) is the file name	*/
 19   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 19   146*						   opnd(2) is the file name */
 19   147 
 19   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 19   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 19   150*						   opnd(3) is old value, (4) is new value. */
 19   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 19   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 19   153 
 19   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 19   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 19   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 19   157*						   opnd(5) is the list */
 19   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 19   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 19   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 19   161 
 19   162 	r_parn		initial("011110001"b),	/* format op code			*/
 19   163 	l_parn		initial("011110010"b),
 19   164 	r_format		initial("011110011"b),
 19   165 	c_format		initial("011110100"b),
 19   166 	f_format		initial("011110101"b),
 19   167 	e_format		initial("011110110"b),
 19   168 	b_format		initial("011110111"b),
 19   169 	a_format		initial("011111000"b),
 19   170 	x_format		initial("011111001"b),
 19   171 	skip_format	initial("011111010"b),
 19   172 	column_format	initial("011111011"b),
 19   173 	page_format	initial("011111100"b),
 19   174 	line_format	initial("011111101"b),
 19   175 	picture_format	initial("011111110"b),
 19   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 19   177 
 19   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 19   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 19   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 19   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 19   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 19   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 19   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 19   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 19   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 19   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 19   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 19   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 19   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 19   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 19   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 19   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 19   194 
 19   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 19   196 /* They are processed by the semantic translator.						*/
 19   197 
 19   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 19   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 19   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 19   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 19   202 						/* opnd(3) is skip, opnd(4) is list	*/
 19   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 19   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 19   205 						/* opnd(3) is skip,opnd(4) is line	*/
 19   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 19   207 	open_file		initial("100011001"b),
 19   208 	close_file	initial("100011010"b),
 19   209 	read_file		initial("100011011"b),
 19   210 	write_file	initial("100011100"b),
 19   211 	locate_file	initial("100011101"b),
 19   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 19   213 						/* opnd(2) is control variable ref	*/
 19   214 						/* opnd(3) is specification operator	*/
 19   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 19   216 						/* repeat opnd(4) while opnd(5)	*/
 19   217 						/* opnd(6) is next specification	*/
 19   218 
 19   219 	rewrite_file	initial("100100000"b),
 19   220 	delete_file	initial("100100001"b),
 19   221 	unlock_file	initial("100100010"b),
 19   222 	lock_file		initial("100100011"b),
 19   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 19   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 19   225 	nop		initial("100100111"b),	/* no-op */
 19   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 19   227 
 19   228 /* These operators are produced by the semantic translator in processing the math
 19   229*   builtin functions and are used as input to the code generator			*/
 19   230 
 19   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 19   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 19   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 19   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 19   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 19   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 19   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 19   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 19   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 19   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 19   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 19   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 19   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 19   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 19   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 19   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 19   247 
 19   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 19   249 
 19   250 			bit(9) aligned internal static options(constant);
 19   251 
 19   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      489 
      490 
 20     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 20     2 
 20     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 20     4 	identifier	initial("100000000"b),
 20     5 	isub		initial("010000000"b),
 20     6 	plus		initial("001000001"b),
 20     7 	minus		initial("001000010"b),
 20     8 	asterisk		initial("001000011"b),
 20     9 	slash		initial("001000100"b),
 20    10 	expon		initial("001000101"b),
 20    11 	not		initial("001000110"b),
 20    12 	and		initial("001000111"b),
 20    13 	or		initial("001001000"b),
 20    14 	cat		initial("001001001"b),
 20    15 	eq		initial("001001010"b),
 20    16 	ne		initial("001001011"b),
 20    17 	lt		initial("001001100"b),
 20    18 	gt		initial("001001101"b),
 20    19 	le		initial("001001110"b),
 20    20 	ge		initial("001001111"b),
 20    21 	ngt		initial("001010000"b),
 20    22 	nlt		initial("001010001"b),
 20    23 	assignment	initial("001010010"b),
 20    24 	colon		initial("001010011"b),
 20    25 	semi_colon	initial("001010100"b),
 20    26 	comma		initial("001010101"b),
 20    27 	period		initial("001010110"b),
 20    28 	arrow		initial("001010111"b),
 20    29 	left_parn		initial("001011000"b),
 20    30 	right_parn	initial("001011001"b),
 20    31 	percent		initial("001011100"b),
 20    32 	bit_string	initial("000100001"b),
 20    33 	char_string	initial("000100010"b),
 20    34 	bin_integer	initial("000110001"b),
 20    35 	dec_integer	initial("000110011"b),
 20    36 	fixed_bin		initial("000110000"b),
 20    37 	fixed_dec		initial("000110010"b),
 20    38 	float_bin		initial("000110100"b),
 20    39 	float_dec		initial("000110110"b),
 20    40 	i_bin_integer	initial("000111001"b),
 20    41 	i_dec_integer	initial("000111011"b),
 20    42 	i_fixed_bin	initial("000111000"b),
 20    43 	i_fixed_dec	initial("000111010"b),
 20    44 	i_float_bin	initial("000111100"b),
 20    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 20    46 
 20    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 20    48 	is_isub			initial ("010000000"b),
 20    49 	is_delimiter		initial ("001000000"b),
 20    50 	is_constant		initial ("000100000"b),
 20    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 20    52 	is_arithmetic_constant	initial ("000110000"b),
 20    53 	is_imaginary_constant	initial ("000111000"b),
 20    54 	is_float_constant		initial ("000110100"b),
 20    55 	is_decimal_constant		initial ("000110010"b),
 20    56 	is_integral_constant 	initial ("000110001"b)
 20    57 	) bit(9) internal static aligned options(constant);
 20    58 
 20    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      491 
      492 
 21     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 21     2 
 21     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 21     4 
 21     5 dcl (	block_node		initial("000000001"b),
 21     6 	statement_node		initial("000000010"b),
 21     7 	operator_node		initial("000000011"b),
 21     8 	reference_node		initial("000000100"b),
 21     9 	token_node		initial("000000101"b),
 21    10 	symbol_node		initial("000000110"b),
 21    11 	context_node		initial("000000111"b),
 21    12 	array_node		initial("000001000"b),
 21    13 	bound_node		initial("000001001"b),
 21    14 	format_value_node		initial("000001010"b),
 21    15 	list_node			initial("000001011"b),
 21    16 	default_node		initial("000001100"b),
 21    17 	machine_state_node		initial("000001101"b),
 21    18 	source_node		initial("000001110"b),
 21    19 	label_node		initial("000001111"b),
 21    20 	cross_reference_node	initial("000010000"b),
 21    21 	sf_par_node		initial("000010001"b),
 21    22 	temporary_node		initial("000010010"b),
 21    23 	label_array_element_node	initial("000010011"b),
 21    24 	by_name_agg_node		initial("000010100"b))
 21    25 				bit(9) internal static aligned options(constant);
 21    26 
 21    27 dcl	1 node			based aligned,
 21    28 	2 type			unal bit(9),
 21    29 	2 source_id		unal structure,
 21    30 	  3 file_number		bit(8),
 21    31 	  3 line_number		bit(14),
 21    32 	  3 statement_number	bit(5);
 21    33 
 21    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      493 
      494 
 22     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 22     2 
 22     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 22     4 
 22     5 dcl (	max_p_flt_bin_1			initial(27),
 22     6 	max_p_flt_bin_2			initial(63),
 22     7 	max_p_fix_bin_1			initial(35),
 22     8 	max_p_fix_bin_2			initial(71),
 22     9 
 22    10 	max_p_dec				initial(59),
 22    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 22    12 
 22    13 	min_scale				initial(-128),
 22    14 	max_scale				initial(+127),
 22    15 	max_bit_string			initial(9437184),
 22    16 	max_char_string			initial(1048576),
 22    17 	max_area_size			initial(262144),
 22    18 	min_area_size			initial(28),
 22    19 
 22    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 22    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 22    22 	max_identifier_length		initial (256),
 22    23 	max_number_of_dimensions		initial (127),
 22    24 
 22    25 	max_length_precision		initial(24),
 22    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 22    27 
 22    28 	max_words_per_variable		initial (262144),
 22    29 
 22    30 	bits_per_word			initial(36),
 22    31 	bits_per_double			initial(72),
 22    32 	packed_digits_per_character		initial(2),
 22    33 	characters_per_half			initial(2),
 22    34 	characters_per_word			initial(4),
 22    35 	characters_per_double		initial(8),
 22    36 
 22    37 	bits_per_character			initial(9),
 22    38 	bits_per_half			initial(18),
 22    39 	bits_per_decimal_digit		initial(9),
 22    40 	bits_per_binary_exponent		initial(8),
 22    41 	bits_per_packed_ptr			initial(36),
 22    42 	words_per_packed_pointer		initial(1),
 22    43 
 22    44 	words_per_fix_bin_1			initial(1),
 22    45 	words_per_fix_bin_2			initial(2),
 22    46 	words_per_flt_bin_1			initial(1),
 22    47 	words_per_flt_bin_2			initial(2),
 22    48 	words_per_varying_string_header	initial(1),
 22    49 	words_per_offset			initial(1),
 22    50 	words_per_pointer			initial(2),
 22    51 	words_per_label_var			initial(4),
 22    52 	words_per_entry_var			initial(4),
 22    53 	words_per_file_var			initial(4),
 22    54 	words_per_format			initial(4),
 22    55 	words_per_condition_var		initial(6),
 22    56 
 22    57 	max_index_register_value		initial(262143),
 22    58 	max_signed_index_register_value	initial(131071),
 22    59 
 22    60 	max_signed_xreg_precision		initial(17),
 22    61 	max_uns_xreg_precision		initial(18),
 22    62 
 22    63 	default_area_size			initial(1024),
 22    64 	default_flt_bin_p			initial(27),
 22    65 	default_fix_bin_p			initial(17),
 22    66 	default_flt_dec_p			initial(10),
 22    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 22    68 
 22    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 22    70 
 22    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 22    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 22    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 22    74 	real_type			initial("001000000000000000000100000001100000"b),
 22    75 	complex_type		initial("001000000000000000000100000001010000"b),
 22    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 22    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 22    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 22    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 22    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 22    81 	bit_type			initial("000100000000000000000000000000000000"b),
 22    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 22    83 									options(constant);
 22    84 
 22    85 /* END INCLUDE FILE ... system.incl.pl1 */
      495 
      496 
 23     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 23     2 
 23     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 23     4 
 23     5 dcl  (	by_declare	initial("001"b),
 23     6 	by_explicit_context initial("010"b),
 23     7 	by_context	initial("011"b),
 23     8 	by_implication	initial("100"b),
 23     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 23    10 
 23    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      497 
      498 
 24     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
 24     2 
 24     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
 24     4 
 24     5 dcl (	bit_		init(1),
 24     6 	digit_		init(2),
 24     7 	character_	init(3),
 24     8 	half_		init(4),
 24     9 	word_		init(5),
 24    10 	mod2_		init(6),
 24    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
 24    12 
 24    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
      499 
      500 
      501 	end defined_reference;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.5  defined_reference.pl1             >spec>install>MR12.3-1066>defined_reference.pl1
312          1    10/25/76  1558.8  string_overlay.incl.pl1           >ldd>include>string_overlay.incl.pl1
469          2    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
2-228        3    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
3-307        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
3-325        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
3-335        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
3-374        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
3-386        8    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
470          9    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
472         10    07/21/80  1546.3  symbol_bits.incl.pl1              >ldd>include>symbol_bits.incl.pl1
474         11    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
476         12    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
477         13    07/21/80  1546.3  semantic_bits.incl.pl1            >ldd>include>semantic_bits.incl.pl1
479         14    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
481         15    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
483         16    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
485         17    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
487         18    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
489         19    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
491         20    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
493         21    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
495         22    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
497         23    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
499         24    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                                      parameter       pointer                  dcl 242 in procedure "match" ref 240 250 253 256 259
                                                                                  261 264 268 271 273
a                               000112 automatic       pointer                  dcl 16 in procedure "defined_reference" set ref 85*
                                                                                  86 86 134* 135 136 137 423
addr                                                   builtin function         dcl 30 ref 83 139 170 171
address                  10            based           structure                level 2 packed packed unaligned dcl 12-3
aggregate                              based           bit(1)                   level 2 packed packed unaligned dcl 13-27 ref 139
aliasable_bit                   000005 constant        fixed bin(15,0)          initial dcl 10-3 set ref 82*
aligned                  31(21)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 253 253
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 60*
array                                  based           structure                level 1 dcl 16-1 in procedure "defined_reference"
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "defined_reference"
                                                                                  ref 48 85 261 264 279 280
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 12-3 set ref 96*
asterisk                               constant        bit(9)                   initial dcl 20-3 ref 404
attributes               31            based           structure                level 2 dcl 9-3
b                                      parameter       pointer                  dcl 242 ref 240 250 253 256 259 264 268 274
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 72
bit                      31(03)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 1-17
                                                                                  1-19 1-21
bit_                                   constant        fixed bin(3,0)           initial dcl 24-5 ref 1-19 1-24
bits                     12(06)        based           structure                level 2 packed packed unaligned dcl 12-3
blk                                    parameter       pointer                  dcl 16 set ref 11 101* 450*
block                                  based           structure                level 1 dcl 11-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 54 138
                                                                                  172
bound                                  based           structure                level 1 dcl 16-21
bound_ck                        000002 constant        bit(9)                   initial dcl 19-8 set ref 434*
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 16-1 ref 423
br                              000106 automatic       pointer                  dcl 16 set ref 41* 54* 54 57* 58* 63 65 66 67 68
                                                                                  172* 172* 173 173* 173 174 180 180 180 180 190 191
                                                                                  193 194 210 211 211 212 216 334 336
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 298 299
                                                                                  1-13
bs                              000110 automatic       pointer                  dcl 16 set ref 54* 58* 59* 60 65 71 72 75 75 81 82*
                                                                                  83* 119* 155* 157* 173
by_implication                  000011 constant        bit(3)                   initial dcl 23-5 set ref 58*
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 9-3 ref 259 259 264
c_element_size            2            based           fixed bin(24,0)          level 2 dcl 16-1 ref 264
c_lower                   1            based           fixed bin(24,0)          level 2 dcl 16-21 ref 427
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 12-3 set ref 143 149* 177 180 185* 211*
c_upper                   2            based           fixed bin(24,0)          level 2 dcl 16-21 ref 432
char                     31(04)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 1-17
character_                             constant        fixed bin(3,0)           initial dcl 24-5 ref 1-20 1-21
co                              000330 automatic       fixed bin(31,0)          dcl 19 set ref 125* 130* 146*
coff                            000331 automatic       fixed bin(31,0)          dcl 19 set ref 143* 146* 149 177* 180* 185
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 9-3
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 75
context                                parameter       bit(36)                  dcl 13-5 set ref 11 83
convert                         000032 constant        entry                    external dcl 3-60 ref 140
convert$to_integer              000034 constant        entry                    external dcl 3-66 ref 451
copy_expression                 000036 constant        entry                    external dcl 3-94 ref 40 41 66 67 68 131 173
create_list                     000040 constant        entry                    external dcl 3-147 ref 201
create_operator                 000042 constant        entry                    external dcl 3-152 ref 134 229 434
create_symbol                   000044 constant        entry                    external dcl 3-184 ref 58
cunits                          000332 automatic       fixed bin(3,0)           dcl 20 set ref 144* 146* 150 178* 180* 186
data_type                31            based           structure                level 3 packed packed unaligned dcl 9-3 ref 250 250
decbin                          000046 constant        entry                    external dcl 3-206 ref 414
declare                         000016 constant        entry                    external dcl 2-41 ref 59
declare_constant$integer        000050 constant        entry                    external dcl 3-234 ref 136 427 432
declare_temporary               000052 constant        entry                    external dcl 3-292 ref 435
def_context                            based           structure                level 1 dcl 13-8
def_this_context                       based           structure                level 1 dcl 13-27
default_fix_bin_p               000001 constant        fixed bin(31,0)          initial dcl 22-5 set ref 435*
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 75
defined_ref              12(12)        based           bit(1)                   level 3 packed packed unaligned dcl 12-3 set ref
                                                                                  192*
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 48 94
                                                                                  109
dims_processed                  000337 automatic       bit(1)                   dcl 23 set ref 90* 102* 196
e                               000100 automatic       pointer                  dcl 359 set ref 370* 373 375 377 378 383 385 386 387
                                                                                  391 396 397 402 404 413 414 414 414 414 429* 434*
                                                                                  435 436 437 438 441* 450* 450* 451* 451* 454
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 17-6 set
                                                                                  ref 203* 203 339* 397* 436 441
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 98
equivalence              14            based           pointer                  level 2 packed packed unaligned dcl 9-3 set ref 41*
                                                                                  66 67 68
evaluate_offset           0(04)        based           bit(1)                   level 2 packed packed unaligned dcl 13-27 set ref
                                                                                  170*
expression_semantics            000020 constant        entry                    external dcl 2-105 ref 138 172 450
f_offset_to_be_added      0(12)        based           bit(1)                   level 2 packed packed unaligned dcl 13-27 set ref
                                                                                  171*
father                   17            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 45
father_dims                     000127 automatic       fixed bin(15,0)          dcl 18 set ref 48* 49* 329 344 346 347 351 419
father_s                        000116 automatic       pointer                  dcl 16 set ref 43* 44 45* 45 48 48 115 119* 120 121
                                                                                  155* 157* 157
fo_in_qual               12(22)        based           bit(1)                   level 3 packed packed unaligned dcl 12-3 set ref
                                                                                  146* 180* 191* 191
i                               000104 automatic       fixed bin(15,0)          dcl 361 in procedure "find" set ref 377* 378* 396*
                                                                                  397* 424*
i                               000354 automatic       fixed bin(15,0)          dcl 319 in procedure "isubs_or_stars" set ref 329*
                                                                                  330* 337* 339* 347* 349* 351* 352*
i                               000123 automatic       fixed bin(15,0)          dcl 17 in procedure "defined_reference" set ref 202*
                                                                                  203 203*
info                     11            based           structure                level 2 packed packed unaligned dcl 12-3
inhibit                  10(28)        based           bit(1)                   level 3 packed packed unaligned dcl 12-3 set ref
                                                                                  216*
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 121
input_tree                             parameter       pointer                  dcl 16 ref 11 40
integer_type                    000000 constant        bit(36)                  initial dcl 22-71 set ref 140* 435* 451*
is_arith_constant                      constant        bit(9)                   initial dcl 20-47 ref 122
isub                     33(07)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "defined_reference"
                                                                                  set ref 416*
isub                                   constant        bit(9)                   initial dcl 20-3 in procedure "defined_reference"
                                                                                  ref 413
k                               000121 automatic       fixed bin(15,0)          dcl 17 set ref 33* 346 346 347 409* 409 410
left_side                 0(02)        based           bit(1)                   level 2 packed packed unaligned dcl 13-8 ref 83
length                    6            based           pointer                  level 2 packed packed unaligned dcl 12-3 set ref 66*
                                                                                  66* 387*
list                                   based           structure                level 1 dcl 17-6
list_node                              constant        bit(9)                   initial dcl 21-5 ref 391
listdims                        000130 automatic       fixed bin(15,0)          array dcl 18 set ref 330* 349 352 415*
lookup                          000022 constant        entry                    external dcl 2-153 ref 54
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 16-21 set ref
                                                                                  427 427* 429 437
m                                      parameter       fixed bin(15,0)          dcl 464 set ref 462 466*
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 44
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 9-3
mod_bit                                constant        bit(9)                   initial dcl 19-8 ref 22 223
mod_byte                               constant        bit(9)                   initial dcl 19-8 ref 22 223
mod_half                               constant        bit(9)                   initial dcl 19-8 ref 22 223
modword_in_offset        11(35)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 set ref 146
                                                                                  151* 180 180 187* 212*
n                               000122 automatic       fixed bin(15,0)          dcl 17 set ref 33* 118 156 327* 343 410* 414* 415
                                                                                  419 424 436 441
ndims                           000125 automatic       fixed bin(15,0)          dcl 17 set ref 86* 88* 97 98 198 200
new_subs                        000102 automatic       pointer                  dcl 16 set ref 201* 203 205
next                     14            based           pointer                  level 2 packed packed unaligned dcl 16-21 ref 425
node                                   based           structure                level 1 dcl 21-27
nsubs                           000124 automatic       fixed bin(15,0)          dcl 17 set ref 93* 97 98 108* 198 200
nsubs_minus_ndims               000126 automatic       fixed bin(15,0)          dcl 17 set ref 200* 201* 202
null                                                   builtin function         dcl 30 ref 86 91 126 207 210 218 261 276 277 281 281
                                                                                  283 286 302 1-11 337 373 420 427 429 432 435 435
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 18-6 in procedure
                                                                                  "defined_reference" ref 377
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "list" packed packed unaligned
                                                                                  dcl 17-6 in procedure "defined_reference" ref 93
                                                                                  337 396 436 441
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 16-1 ref 48 86
off                             000114 automatic       pointer                  dcl 16 set ref 141* 146* 148 176* 180* 184
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 12-3 set ref 67*
                                                                                  67* 141 148* 176 180 184* 210* 218 222 230 231*
                                                                                  336 386*
offset_adder                    000024 constant        entry                    external dcl 2-172 ref 146 180
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 18-6 ref 223 223
                                                                                  223
op_table                        000333 automatic       bit(9)                   initial array dcl 22 set ref 22* 22* 22* 22* 229*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 18-6 set
                                                                                  ref 135* 136* 230* 378* 435* 436* 437* 438*
operator                               based           structure                level 1 dcl 18-6
operator_node                          constant        bit(9)                   initial dcl 21-5 ref 223 375
other                    11(33)        based           structure                level 3 packed packed unaligned dcl 12-3
overlayed                33(11)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 120*
                                                                                  120* 157* 157*
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 16-1 ref 286 292
                                                                                  292
p                                      parameter       pointer                  packed unaligned dcl 359 in procedure "find" set ref
                                                                                  357 367 370 454*
p                               000104 automatic       pointer                  dcl 16 in procedure "defined_reference" set ref 121*
                                                                                  122 122 125* 126* 131* 131 135 137* 138* 138* 140*
                                                                                  140* 146* 222* 223 223 223 223 229* 230 231
p                               000100 automatic       pointer                  dcl 1-5 in procedure "string_overlay" set ref 1-10*
                                                                                  1-11 1-12* 1-13* 1-13
p                               000100 automatic       pointer                  dcl 242 in procedure "match" set ref 273* 276 279
                                                                                  286 297* 298* 298
p                               000352 automatic       pointer                  dcl 318 in procedure "isubs_or_stars" set ref 336*
                                                                                  337 337 339
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 1-7
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 1-17
pl1_stat_$check_ansi            000012 external static bit(1)                   dcl 25 ref 72 164
pl1_stat_$eis_mode              000010 external static bit(1)                   dcl 25 ref 218
pl1_stat_$root                  000014 external static pointer                  dcl 25 ref 58
position                 32            based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 115
pp                              000104 automatic       pointer                  dcl 247 set ref 279* 281 286 292
prefix                   12(12)        based           bit(12)                  level 2 packed packed unaligned dcl 15-9 ref 420
propagate_bit                   000026 constant        entry                    external dcl 2-192 ref 82 83
q                               000102 automatic       pointer                  dcl 242 in procedure "match" set ref 274* 277 280
                                                                                  297* 299* 299 302
q                               000102 automatic       pointer                  dcl 359 in procedure "find" set ref 423* 425* 425
                                                                                  427 427 427 429 432 432 432 437 438
qq                              000106 automatic       pointer                  dcl 247 set ref 280* 281 283 286 292
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 12-3 set ref 68*
                                                                                  68* 81* 190* 385*
recursif                        000105 automatic       fixed bin(15,0)          dcl 362 set ref 364* 368* 406
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  194* 194*
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "defined_reference"
                                                                                  ref 81 81 173
reference                              based           structure                level 1 dcl 12-3 in procedure "defined_reference"
reference_node                         constant        bit(9)                   initial dcl 21-5 ref 63 334 383
s                                      parameter       pointer                  dcl 1-5 in procedure "string_overlay" ref 1-3 1-7
                                                                                  1-8 1-10 1-17 1-17 1-17 1-19 1-21
s                                      parameter       pointer                  dcl 16 in procedure "defined_reference" set ref 11
                                                                                  41 43 54 66 67 68 72* 81 85 94 98 101* 109 120 138
                                                                                  157 164 164* 172 416 466*
scale                     2(28)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 9-3 ref 268 268
semantic_translator$abort       000054 constant        entry                    external dcl 3-446 ref 466
semantic_translator$error       000056 constant        entry                    external dcl 3-450 ref 57 72 164
set_bit                         000004 constant        fixed bin(15,0)          initial dcl 10-3 set ref 83*
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  193* 193*
size                      3            based           fixed bin(9,0)           level 2 dcl 14-3 ref 414 414 414 414
son                       3            based           pointer                  level 2 in structure "block" packed packed unaligned
                                                                                  dcl 11-5 in procedure "defined_reference" ref 58
son                      21            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "defined_reference"
                                                                                  ref 273 274 1-10
statement                              based           structure                level 1 dcl 15-9
stmnt                                  parameter       pointer                  dcl 16 set ref 11 54* 101* 138* 172* 420 450*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 9-3
string                    4            based           char                     level 2 in structure "token" dcl 14-3 in procedure
                                                                                  "defined_reference" ref 414 414
string                                                 builtin function         dcl 30 in procedure "defined_reference" ref 250 250
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 271 286
                                                                                  1-8
sub                             000003 constant        bit(9)                   initial dcl 19-8 set ref 134*
subs                                   parameter       pointer                  dcl 16 set ref 11 91 93 101* 203 205* 207* 420 429
                                                                                  436 436 441 441
subscripter                     000030 constant        entry                    external dcl 2-216 ref 101
substr                                                 builtin function         dcl 30 ref 414 414 420
symbol                                 based           structure                level 1 dcl 9-3 in procedure "defined_reference"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "defined_reference" set ref 65*
symbol_node                            constant        bit(9)                   initial dcl 21-5 ref 71
t                               000120 automatic       fixed bin(15,0)          dcl 17 set ref 33* 146 1-19 1-19* 1-20* 1-21 1-24
this_context                    000340 automatic       bit(36)                  dcl 13-5 set ref 32* 54* 133* 138* 139 169* 170 171
                                                                                  172* 450*
token                                  based           structure                level 1 dcl 14-3 in procedure "defined_reference"
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "defined_reference"
                                                                                  ref 65
token_node                             constant        bit(9)                   initial dcl 21-5 ref 54 122 402
token_to_binary                 000060 constant        entry                    external dcl 3-459 ref 125
tree                            000100 automatic       pointer                  dcl 16 set ref 40* 96 101* 101* 141 143 144 146 146
                                                                                  148 149 150 151 176 177 178 180 180 184 185 186
                                                                                  187 190 191 192 193 194 218 218 222 229 230 231
                                                                                  234
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 21-27 in procedure "defined_reference" ref 54
                                                                                  63 71 122 223 334 375 383 391 402
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 14-3 in procedure "defined_reference" ref 122
                                                                                  404 413
units                     0(14)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 12-3 set ref 144
                                                                                  150* 174 178 180 186* 211* 218 229
unsigned                 31(24)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 256 256
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 16-21 set ref
                                                                                  432 432* 438
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 ref 164
word_                                  constant        fixed bin(3,0)           initial dcl 24-5 ref 218

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 19-8
abs_fun                                internal static bit(9)                   initial dcl 19-8
acos_fun                               internal static bit(9)                   initial dcl 19-8
acosd_fun                              internal static bit(9)                   initial dcl 19-8
add                                    internal static bit(9)                   initial dcl 19-8
addbitno_fun                           internal static bit(9)                   initial dcl 19-8
addcharno_fun                          internal static bit(9)                   initial dcl 19-8
addr_fun                               internal static bit(9)                   initial dcl 19-8
addr_fun_bits                          internal static bit(9)                   initial dcl 19-8
addrel_fun                             internal static bit(9)                   initial dcl 19-8
adjust_count                    000000 constant        entry                    external dcl 3-20
alloc_semantics                 000000 constant        entry                    external dcl 2-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 2-12
allocation_fun                         internal static bit(9)                   initial dcl 19-8
allot_auto                             internal static bit(9)                   initial dcl 19-8
allot_based                            internal static bit(9)                   initial dcl 19-8
allot_ctl                              internal static bit(9)                   initial dcl 19-8
allot_var                              internal static bit(9)                   initial dcl 19-8
and                                    internal static bit(9)                   initial dcl 20-3
and_bits                               internal static bit(9)                   initial dcl 19-8
arg_desc_type                          internal static bit(36)                  initial dcl 22-71
array_node                             internal static bit(9)                   initial dcl 21-5
arrow                                  internal static bit(9)                   initial dcl 20-3
asin_fun                               internal static bit(9)                   initial dcl 19-8
asind_fun                              internal static bit(9)                   initial dcl 19-8
assign                                 internal static bit(9)                   initial dcl 19-8
assign_by_name                         internal static bit(9)                   initial dcl 19-8
assign_round                           internal static bit(9)                   initial dcl 19-8
assign_size_ck                         internal static bit(9)                   initial dcl 19-8
assign_zero                            internal static bit(9)                   initial dcl 19-8
assignment                             internal static bit(9)                   initial dcl 20-3
atan_fun                               internal static bit(9)                   initial dcl 19-8
atand_fun                              internal static bit(9)                   initial dcl 19-8
b_format                               internal static bit(9)                   initial dcl 19-8
baseno_fun                             internal static bit(9)                   initial dcl 19-8
baseptr_fun                            internal static bit(9)                   initial dcl 19-8
bin_integer                            internal static bit(9)                   initial dcl 20-3
binary_to_octal_string          000000 constant        entry                    external dcl 3-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 3-43
bindec                          000000 constant        entry                    external dcl 3-23
bindec$vs                       000000 constant        entry                    external dcl 3-28
binoct                          000000 constant        entry                    external dcl 3-33
bit_pointer                            internal static bit(9)                   initial dcl 19-8
bit_string                             internal static bit(9)                   initial dcl 20-3
bit_to_char                            internal static bit(9)                   initial dcl 19-8
bit_to_word                            internal static bit(9)                   initial dcl 19-8
bit_type                               internal static bit(36)                  initial dcl 22-71
bitno_fun                              internal static bit(9)                   initial dcl 19-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 22-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 22-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 22-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 22-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 22-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 22-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 22-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 22-5
block_node                             internal static bit(9)                   initial dcl 21-5
bn_format                              internal static bit(9)                   initial dcl 19-8
bool_fun                               internal static bit(9)                   initial dcl 19-8
bound_node                             internal static bit(9)                   initial dcl 21-5
builtin                         000000 constant        entry                    external dcl 2-17
builtin_type                           internal static bit(36)                  initial dcl 22-71
by_compiler                            internal static bit(3)                   initial dcl 23-5
by_context                             internal static bit(3)                   initial dcl 23-5
by_declare                             internal static bit(3)                   initial dcl 23-5
by_explicit_context                    internal static bit(3)                   initial dcl 23-5
by_name_agg_node                       internal static bit(9)                   initial dcl 21-5
byte_fun                               internal static bit(9)                   initial dcl 19-8
c_format                               internal static bit(9)                   initial dcl 19-8
cat                                    internal static bit(9)                   initial dcl 20-3
cat_string                             internal static bit(9)                   initial dcl 19-8
ceil_fun                               internal static bit(9)                   initial dcl 19-8
char_string                            internal static bit(9)                   initial dcl 20-3
char_to_word                           internal static bit(9)                   initial dcl 19-8
char_type                              internal static bit(36)                  initial dcl 22-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 22-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 22-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 22-5
charno_fun                             internal static bit(9)                   initial dcl 19-8
check_star_extents              000000 constant        entry                    external dcl 2-27
clock_fun                              internal static bit(9)                   initial dcl 19-8
close_file                             internal static bit(9)                   initial dcl 19-8
codeptr_fun                            internal static bit(9)                   initial dcl 19-8
colon                                  internal static bit(9)                   initial dcl 20-3
column_format                          internal static bit(9)                   initial dcl 19-8
comma                                  internal static bit(9)                   initial dcl 20-3
compare_declaration             000000 constant        entry                    external dcl 2-31
compare_expression              000000 constant        entry                    external dcl 3-48
complex_fun                            internal static bit(9)                   initial dcl 19-8
complex_type                           internal static bit(36)                  initial dcl 22-71
conjg_fun                              internal static bit(9)                   initial dcl 19-8
constant_length                 000000 constant        entry                    external dcl 3-54
context_node                           internal static bit(9)                   initial dcl 21-5
context_processor               000000 constant        entry                    external dcl 2-38
convert$from_builtin            000000 constant        entry                    external dcl 3-72
convert$to_target               000000 constant        entry                    external dcl 3-88
convert$to_target_fb            000000 constant        entry                    external dcl 3-82
convert$validate                000000 constant        entry                    external dcl 3-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 3-99
copy_string                            internal static bit(9)                   initial dcl 19-8
copy_unique_expression          000000 constant        entry                    external dcl 3-103
copy_words                             internal static bit(9)                   initial dcl 19-8
cos_fun                                internal static bit(9)                   initial dcl 19-8
cosd_fun                               internal static bit(9)                   initial dcl 19-8
create_array                    000000 constant        entry                    external dcl 3-108
create_block                    000000 constant        entry                    external dcl 3-112
create_bound                    000000 constant        entry                    external dcl 3-118
create_context                  000000 constant        entry                    external dcl 3-122
create_cross_reference          000000 constant        entry                    external dcl 3-128
create_default                  000000 constant        entry                    external dcl 3-132
create_identifier               000000 constant        entry                    external dcl 3-136
create_label                    000000 constant        entry                    external dcl 3-140
create_reference                000000 constant        entry                    external dcl 3-158
create_statement                000000 constant        entry                    external dcl 3-163
create_statement$prologue       000000 constant        entry                    external dcl 3-171
create_storage                  000000 constant        entry                    external dcl 3-179
create_token                    000000 constant        entry                    external dcl 3-191
create_token$init_hash_table    000000 constant        entry                    external dcl 3-197
create_token$protected          000000 constant        entry                    external dcl 3-199
cross_reference_node                   internal static bit(9)                   initial dcl 21-5
dec_integer                            internal static bit(9)                   initial dcl 20-3
dec_integer_type                       internal static bit(36)                  initial dcl 22-71
declare_constant                000000 constant        entry                    external dcl 3-211
declare_constant$bit            000000 constant        entry                    external dcl 3-219
declare_constant$char           000000 constant        entry                    external dcl 3-224
declare_constant$desc           000000 constant        entry                    external dcl 3-229
declare_descriptor              000000 constant        entry                    external dcl 3-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 3-249
declare_descriptor$param        000000 constant        entry                    external dcl 3-259
declare_integer                 000000 constant        entry                    external dcl 3-269
declare_picture                 000000 constant        entry                    external dcl 3-274
declare_picture_temp            000000 constant        entry                    external dcl 3-279
declare_pointer                 000000 constant        entry                    external dcl 3-287
declare_structure               000000 constant        entry                    external dcl 2-44
decode_node_id                  000000 constant        entry                    external dcl 3-300
decode_source_id                000000 constant        entry                    external dcl 3-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 22-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_node                           internal static bit(9)                   initial dcl 21-5
defined_reference               000000 constant        entry                    external dcl 2-47
delete_file                            internal static bit(9)                   initial dcl 19-8
desc_size                              internal static bit(9)                   initial dcl 19-8
digit_                                 internal static fixed bin(3,0)           initial dcl 24-5
digit_to_bit                           internal static bit(9)                   initial dcl 19-8
div                                    internal static bit(9)                   initial dcl 19-8
do_fun                                 internal static bit(9)                   initial dcl 19-8
do_semantics                    000000 constant        entry                    external dcl 2-57
do_spec                                internal static bit(9)                   initial dcl 19-8
e_format                               internal static bit(9)                   initial dcl 19-8
empty_area                             internal static bit(9)                   initial dcl 19-8
enable_on                              internal static bit(9)                   initial dcl 19-8
entry_var_type                         internal static bit(36)                  initial dcl 22-71
environmentptr_fun                     internal static bit(9)                   initial dcl 19-8
eq                                     internal static bit(9)                   initial dcl 20-3
equal                                  internal static bit(9)                   initial dcl 19-8
error                           000000 constant        entry                    external dcl 3-314
error$omit_text                 000000 constant        entry                    external dcl 3-319
error_                          000000 constant        entry                    external dcl 3-324
error_$finish                   000000 constant        entry                    external dcl 3-343
error_$initialize_error         000000 constant        entry                    external dcl 3-341
error_$no_text                  000000 constant        entry                    external dcl 3-334
ex_prologue                            internal static bit(9)                   initial dcl 19-8
exp                                    internal static bit(9)                   initial dcl 19-8
exp_fun                                internal static bit(9)                   initial dcl 19-8
expand_assign                   000000 constant        entry                    external dcl 2-62
expand_by_name                  000000 constant        entry                    external dcl 2-71
expand_infix                    000000 constant        entry                    external dcl 2-76
expand_initial                  000000 constant        entry                    external dcl 2-84
expand_prefix                   000000 constant        entry                    external dcl 2-89
expand_primitive                000000 constant        entry                    external dcl 2-97
expon                                  internal static bit(9)                   initial dcl 20-3
f_format                               internal static bit(9)                   initial dcl 19-8
fill_refer                      000000 constant        entry                    external dcl 2-113
fixed                                                  builtin function         dcl 30
fixed_bin                              internal static bit(9)                   initial dcl 20-3
fixed_dec                              internal static bit(9)                   initial dcl 20-3
float_bin                              internal static bit(9)                   initial dcl 20-3
float_dec                              internal static bit(9)                   initial dcl 20-3
floor_fun                              internal static bit(9)                   initial dcl 19-8
format_value_node                      internal static bit(9)                   initial dcl 21-5
fortran_read                           internal static bit(9)                   initial dcl 19-8
fortran_write                          internal static bit(9)                   initial dcl 19-8
free_based                             internal static bit(9)                   initial dcl 19-8
free_ctl                               internal static bit(9)                   initial dcl 19-8
free_node                       000000 constant        entry                    external dcl 3-345
free_var                               internal static bit(9)                   initial dcl 19-8
ftn_file_manip                         internal static bit(9)                   initial dcl 19-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 19-8
function                        000000 constant        entry                    external dcl 2-125
ge                                     internal static bit(9)                   initial dcl 20-3
generic_selector                000000 constant        entry                    external dcl 2-134
get_array_size                  000000 constant        entry                    external dcl 3-348
get_data_trans                         internal static bit(9)                   initial dcl 19-8
get_edit_trans                         internal static bit(9)                   initial dcl 19-8
get_file                               internal static bit(9)                   initial dcl 19-8
get_list_trans                         internal static bit(9)                   initial dcl 19-8
get_size                        000000 constant        entry                    external dcl 3-352
get_string                             internal static bit(9)                   initial dcl 19-8
greater_or_equal                       internal static bit(9)                   initial dcl 19-8
greater_than                           internal static bit(9)                   initial dcl 19-8
gt                                     internal static bit(9)                   initial dcl 20-3
half_                                  internal static fixed bin(3,0)           initial dcl 24-5
half_to_word                           internal static bit(9)                   initial dcl 19-8
i_bin_integer                          internal static bit(9)                   initial dcl 20-3
i_dec_integer                          internal static bit(9)                   initial dcl 20-3
i_fixed_bin                            internal static bit(9)                   initial dcl 20-3
i_fixed_dec                            internal static bit(9)                   initial dcl 20-3
i_float_bin                            internal static bit(9)                   initial dcl 20-3
i_float_dec                            internal static bit(9)                   initial dcl 20-3
identifier                             internal static bit(9)                   initial dcl 20-3
imag_fun                               internal static bit(9)                   initial dcl 19-8
index_after_fun                        internal static bit(9)                   initial dcl 19-8
index_before_fun                       internal static bit(9)                   initial dcl 19-8
index_fun                              internal static bit(9)                   initial dcl 19-8
index_rev_fun                          internal static bit(9)                   initial dcl 19-8
io_data_list_semantics          000000 constant        entry                    external dcl 2-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 2-120
io_semantics                    000000 constant        entry                    external dcl 2-148
is_arithmetic_constant                 internal static bit(9)                   initial dcl 20-47
is_constant                            internal static bit(9)                   initial dcl 20-47
is_decimal_constant                    internal static bit(9)                   initial dcl 20-47
is_delimiter                           internal static bit(9)                   initial dcl 20-47
is_float_constant                      internal static bit(9)                   initial dcl 20-47
is_identifier                          internal static bit(9)                   initial dcl 20-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 20-47
is_integral_constant                   internal static bit(9)                   initial dcl 20-47
is_isub                                internal static bit(9)                   initial dcl 20-47
join                                   internal static bit(9)                   initial dcl 19-8
jump                                   internal static bit(9)                   initial dcl 19-8
jump_false                             internal static bit(9)                   initial dcl 19-8
jump_if_eq                             internal static bit(9)                   initial dcl 19-8
jump_if_ge                             internal static bit(9)                   initial dcl 19-8
jump_if_gt                             internal static bit(9)                   initial dcl 19-8
jump_if_le                             internal static bit(9)                   initial dcl 19-8
jump_if_lt                             internal static bit(9)                   initial dcl 19-8
jump_if_ne                             internal static bit(9)                   initial dcl 19-8
jump_true                              internal static bit(9)                   initial dcl 19-8
l_parn                                 internal static bit(9)                   initial dcl 19-8
label_array_element_node               internal static bit(9)                   initial dcl 21-5
label_node                             internal static bit(9)                   initial dcl 21-5
le                                     internal static bit(9)                   initial dcl 20-3
left_parn                              internal static bit(9)                   initial dcl 20-3
length_fun                             internal static bit(9)                   initial dcl 19-8
less_or_equal                          internal static bit(9)                   initial dcl 19-8
less_than                              internal static bit(9)                   initial dcl 19-8
line_format                            internal static bit(9)                   initial dcl 19-8
local_label_var_type                   internal static bit(36)                  initial dcl 22-71
locate_file                            internal static bit(9)                   initial dcl 19-8
lock_file                              internal static bit(9)                   initial dcl 19-8
lock_fun                               internal static bit(9)                   initial dcl 19-8
log10_fun                              internal static bit(9)                   initial dcl 19-8
log2_fun                               internal static bit(9)                   initial dcl 19-8
log_fun                                internal static bit(9)                   initial dcl 19-8
loop                                   internal static bit(9)                   initial dcl 19-8
lt                                     internal static bit(9)                   initial dcl 20-3
machine_state_node                     internal static bit(9)                   initial dcl 21-5
make_desc                              internal static bit(9)                   initial dcl 19-8
make_non_quick                  000000 constant        entry                    external dcl 2-162
match_arguments                 000000 constant        entry                    external dcl 2-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 22-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 22-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 22-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 11-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 22-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 22-5
max_fun                                internal static bit(9)                   initial dcl 19-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 22-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 22-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 22-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 17-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 22-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 18-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 22-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 22-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 22-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 22-5
max_scale                              internal static fixed bin(31,0)          initial dcl 22-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 22-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 22-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 22-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 22-5
merge_attributes                000000 constant        entry                    external dcl 3-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 22-5
min_fun                                internal static bit(9)                   initial dcl 19-8
min_scale                              internal static fixed bin(31,0)          initial dcl 22-5
minus                                  internal static bit(9)                   initial dcl 20-3
mod2_                                  internal static fixed bin(3,0)           initial dcl 24-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 24-5
mod_fun                                internal static bit(9)                   initial dcl 19-8
mod_word                               internal static bit(9)                   initial dcl 19-8
mult                                   internal static bit(9)                   initial dcl 19-8
ne                                     internal static bit(9)                   initial dcl 20-3
negate                                 internal static bit(9)                   initial dcl 19-8
ngt                                    internal static bit(9)                   initial dcl 20-3
nlt                                    internal static bit(9)                   initial dcl 20-3
no_token                               internal static bit(9)                   initial dcl 20-3
nop                                    internal static bit(9)                   initial dcl 19-8
not                                    internal static bit(9)                   initial dcl 20-3
not_bits                               internal static bit(9)                   initial dcl 19-8
not_equal                              internal static bit(9)                   initial dcl 19-8
off_fun                                internal static bit(9)                   initial dcl 19-8
open_file                              internal static bit(9)                   initial dcl 19-8
operator_semantics              000000 constant        entry                    external dcl 2-184
optimizer                       000000 constant        entry                    external dcl 3-361
or                                     internal static bit(9)                   initial dcl 20-3
or_bits                                internal static bit(9)                   initial dcl 19-8
overlayed_by_builtin_bit               internal static fixed bin(15,0)          initial dcl 10-3
pack                                   internal static bit(9)                   initial dcl 19-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 22-5
page_format                            internal static bit(9)                   initial dcl 19-8
param_desc_ptr                         internal static bit(9)                   initial dcl 19-8
param_ptr                              internal static bit(9)                   initial dcl 19-8
parse_error                     000000 constant        entry                    external dcl 3-364
parse_error$no_text             000000 constant        entry                    external dcl 3-368
passed_as_arg_bit                      internal static fixed bin(15,0)          initial dcl 10-3
percent                                internal static bit(9)                   initial dcl 20-3
period                                 internal static bit(9)                   initial dcl 20-3
picture_format                         internal static bit(9)                   initial dcl 19-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 3-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 3-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 19-8
pl1_print$for_lex               000000 constant        entry                    external dcl 3-418
pl1_print$non_varying           000000 constant        entry                    external dcl 3-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 3-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 3-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 3-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 3-414
pl1_print$varying               000000 constant        entry                    external dcl 3-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 3-395
plus                                   internal static bit(9)                   initial dcl 20-3
pointer_type                           internal static bit(36)                  initial dcl 22-71
prefix_plus                            internal static bit(9)                   initial dcl 19-8
ptr_fun                                internal static bit(9)                   initial dcl 19-8
put_control                            internal static bit(9)                   initial dcl 19-8
put_data_trans                         internal static bit(9)                   initial dcl 19-8
put_edit_trans                         internal static bit(9)                   initial dcl 19-8
put_field                              internal static bit(9)                   initial dcl 19-8
put_field_chk                          internal static bit(9)                   initial dcl 19-8
put_file                               internal static bit(9)                   initial dcl 19-8
put_list_trans                         internal static bit(9)                   initial dcl 19-8
put_string                             internal static bit(9)                   initial dcl 19-8
r_format                               internal static bit(9)                   initial dcl 19-8
r_parn                                 internal static bit(9)                   initial dcl 19-8
range_ck                               internal static bit(9)                   initial dcl 19-8
rank_fun                               internal static bit(9)                   initial dcl 19-8
read_file                              internal static bit(9)                   initial dcl 19-8
real_fun                               internal static bit(9)                   initial dcl 19-8
real_type                              internal static bit(36)                  initial dcl 22-71
record_io                              internal static bit(9)                   initial dcl 19-8
refer                                  internal static bit(9)                   initial dcl 19-8
refer_extent                    000000 constant        entry                    external dcl 3-426
rel_fun                                internal static bit(9)                   initial dcl 19-8
repeat_fun                             internal static bit(9)                   initial dcl 19-8
reserve$clear                   000000 constant        entry                    external dcl 3-430
reserve$declare_lib             000000 constant        entry                    external dcl 3-434
reserve$read_lib                000000 constant        entry                    external dcl 3-439
return_bits                            internal static bit(9)                   initial dcl 19-8
return_string                          internal static bit(9)                   initial dcl 19-8
return_value                           internal static bit(9)                   initial dcl 19-8
return_words                           internal static bit(9)                   initial dcl 19-8
reverse_fun                            internal static bit(9)                   initial dcl 19-8
revert_on                              internal static bit(9)                   initial dcl 19-8
rewrite_file                           internal static bit(9)                   initial dcl 19-8
right_parn                             internal static bit(9)                   initial dcl 20-3
round_fun                              internal static bit(9)                   initial dcl 19-8
search_fun                             internal static bit(9)                   initial dcl 19-8
search_rev_fun                         internal static bit(9)                   initial dcl 19-8
segno_fun                              internal static bit(9)                   initial dcl 19-8
semantic_translator             000000 constant        entry                    external dcl 3-444
semantic_translator$call_es     000000 constant        entry                    external dcl 2-196
semi_colon                             internal static bit(9)                   initial dcl 20-3
setbitno_fun                           internal static bit(9)                   initial dcl 19-8
setcharno_fun                          internal static bit(9)                   initial dcl 19-8
sf_par_node                            internal static bit(9)                   initial dcl 21-5
share_expression                000000 constant        entry                    external dcl 3-454
sign_fun                               internal static bit(9)                   initial dcl 19-8
signal_on                              internal static bit(9)                   initial dcl 19-8
simplify_expression             000000 constant        entry                    external dcl 2-205
simplify_offset                 000000 constant        entry                    external dcl 2-212
sin_fun                                internal static bit(9)                   initial dcl 19-8
sind_fun                               internal static bit(9)                   initial dcl 19-8
skip_format                            internal static bit(9)                   initial dcl 19-8
slash                                  internal static bit(9)                   initial dcl 20-3
source_node                            internal static bit(9)                   initial dcl 21-5
sqrt_fun                               internal static bit(9)                   initial dcl 19-8
stack_ptr                              internal static bit(9)                   initial dcl 19-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 19-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 19-8
stacq_fun                              internal static bit(9)                   initial dcl 19-8
statement_node                         internal static bit(9)                   initial dcl 21-5
std_arg_list                           internal static bit(9)                   initial dcl 19-8
std_call                               internal static bit(9)                   initial dcl 19-8
std_entry                              internal static bit(9)                   initial dcl 19-8
std_return                             internal static bit(9)                   initial dcl 19-8
stop                                   internal static bit(9)                   initial dcl 19-8
storage_block_type                     internal static bit(36)                  initial dcl 22-71
stream_prep                            internal static bit(9)                   initial dcl 19-8
tan_fun                                internal static bit(9)                   initial dcl 19-8
tand_fun                               internal static bit(9)                   initial dcl 19-8
temporary_node                         internal static bit(9)                   initial dcl 21-5
terminate_trans                        internal static bit(9)                   initial dcl 19-8
translate_fun                          internal static bit(9)                   initial dcl 19-8
trunc_fun                              internal static bit(9)                   initial dcl 19-8
unlock_file                            internal static bit(9)                   initial dcl 19-8
unpack                                 internal static bit(9)                   initial dcl 19-8
validate                        000000 constant        entry                    external dcl 2-225
vclock_fun                             internal static bit(9)                   initial dcl 19-8
verify_fun                             internal static bit(9)                   initial dcl 19-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 19-8
verify_rev_fun                         internal static bit(9)                   initial dcl 19-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 19-8
word_to_mod2                           internal static bit(9)                   initial dcl 19-8
word_to_mod4                           internal static bit(9)                   initial dcl 19-8
word_to_mod8                           internal static bit(9)                   initial dcl 19-8
wordno_fun                             internal static bit(9)                   initial dcl 19-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 22-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 22-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 22-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 22-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 22-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 22-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 22-5
write_file                             internal static bit(9)                   initial dcl 19-8
x_format                               internal static bit(9)                   initial dcl 19-8
xor_bits                               internal static bit(9)                   initial dcl 19-8

NAMES DECLARED BY EXPLICIT CONTEXT.
build_ref                       001313 constant        label                    dcl 164 ref 155
defined_reference               000032 constant        entry                    external dcl 11
fail                            002107 constant        label                    dcl 307 in procedure "match" ref 250 253 256 261 264
                                                                                  268 277 283 286 292 297 302
fail                            002221 constant        label                    dcl 1-27 in procedure "string_overlay" ref 1-7 1-12
                                                                                  1-17 1-21 1-24
find                            002404 constant        entry                    internal dcl 357 ref 339
find_common                     002424 constant        label                    dcl 370 ref 365
find_r                          002415 constant        entry                    internal dcl 367 ref 378 385 386 387 397
isubs_or_stars                  002224 constant        entry                    internal dcl 316 ref 99 105 109
l1                              001125 constant        label                    dcl 141 set ref 127
match                           001675 constant        entry                    internal dcl 240 ref 155 297
print                           003125 constant        entry                    internal dcl 462 ref 62 71 75 97 98 105 109 118 119
                                                                                  139 156 159 346 349 352 419
ret                             001670 constant        label                    dcl 234 ref 223
string_overlay                  002113 constant        entry                    internal dcl 1-3 ref 119 119 157 157 1-12

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3452        3534    3153        3462
Length      4444    3153        62         674     277           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
defined_reference                   316 external procedure  is an external procedure.  
match                                84 internal procedure  calls itself recursively.  
string_overlay                       76 internal procedure  calls itself recursively.  
isubs_or_stars                          internal procedure  shares stack frame of external procedure defined_reference.  
find                                140 internal procedure  calls itself recursively.  
print                                70 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
defined_reference        000100 tree                        defined_reference
                         000102 new_subs                    defined_reference
                         000104 p                           defined_reference
                         000106 br                          defined_reference
                         000110 bs                          defined_reference
                         000112 a                           defined_reference
                         000114 off                         defined_reference
                         000116 father_s                    defined_reference
                         000120 t                           defined_reference
                         000121 k                           defined_reference
                         000122 n                           defined_reference
                         000123 i                           defined_reference
                         000124 nsubs                       defined_reference
                         000125 ndims                       defined_reference
                         000126 nsubs_minus_ndims           defined_reference
                         000127 father_dims                 defined_reference
                         000130 listdims                    defined_reference
                         000330 co                          defined_reference
                         000331 coff                        defined_reference
                         000332 cunits                      defined_reference
                         000333 op_table                    defined_reference
                         000337 dims_processed              defined_reference
                         000340 this_context                defined_reference
                         000352 p                           isubs_or_stars
                         000354 i                           isubs_or_stars
find                     000100 e                           find
                         000102 q                           find
                         000104 i                           find
                         000105 recursif                    find
match                    000100 p                           match
                         000102 q                           match
                         000104 pp                          match
                         000106 qq                          match
string_overlay           000100 p                           string_overlay

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     unpk_to_pk          call_ext_out_desc   call_ext_out        call_int_this       call_int_other
return_mac          shorten_stack       ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
convert                       convert$to_integer            copy_expression               create_list
create_operator               create_symbol                 decbin                        declare
declare_constant$integer      declare_temporary             expression_semantics          lookup
offset_adder                  propagate_bit                 semantic_translator$abort     semantic_translator$error
subscripter                   token_to_binary

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$check_ansi          pl1_stat_$eis_mode            pl1_stat_$root




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000024        22 000037        32 000057        33 000060        40 000063        41 000077        43 000113
     44 000117        45 000124        46 000126        48 000127        49 000140        54 000141        57 000176
     58 000211        59 000232        60 000241        61 000244        62 000245        63 000256        65 000262
     66 000266        67 000306        68 000326        71 000346        72 000362        75 000404        81 000420
     82 000427        83 000440        85 000455        86 000462        88 000473        90 000474        91 000475
     93 000501        94 000506        96 000511        97 000513        98 000525        99 000546       101 000557
    102 000601       104 000603       105 000604       106 000625       108 000626       109 000627       115 000661
    118 000665       119 000677       120 000736       121 000746       122 000750       125 000761       126 000775
    127 000777       130 001000       131 001001       133 001013       134 001014       135 001031       136 001034
    137 001052       138 001053       139 001077       140 001112       141 001125       143 001130       144 001133
    146 001137       148 001177       149 001202       150 001204       151 001211       152 001213       155 001214
    156 001231       157 001243       159 001303       164 001313       169 001336       170 001337       171 001341
    172 001343       173 001367       174 001407       176 001413       177 001416       178 001422       180 001426
    184 001475       185 001500       186 001502       187 001507       190 001511       191 001514       192 001520
    193 001522       194 001525       196 001531       198 001533       200 001536       201 001540       202 001551
    203 001561       204 001566       205 001570       206 001573       207 001574       210 001577       211 001602
    212 001607       216 001611       218 001613       222 001626       223 001630       229 001646       230 001663
    231 001667       234 001670       240 001674       250 001702       253 001716       256 001727       259 001740
    261 001743       264 001746       268 001752       271 001763       273 001766       274 001770       276 001772
    277 001776       279 002002       280 002005       281 002010       283 002020       286 002024       291 002040
    292 002041       297 002052       298 002070       299 002073       300 002076       302 002077       305 002103
    307 002107    1    3 002112    1    7 002120    1    8 002126    1   10 002131    1   11 002133    1   12 002140
 1   13 002154    1   14 002157    1   15 002160    1   17 002164    1   19 002174    1   20 002204    1   21 002207
 1   23 002213    1   24 002214    1   25 002216    1   27 002221       316 002224       327 002226       329 002227
    330 002237       331 002240       334 002242       336 002246       337 002251       339 002267       340 002275
    343 002277       344 002304       346 002312       347 002326       349 002337       350 002351       351 002354
    352 002363       353 002375       355 002377       357 002403       364 002411       365 002413       367 002414
    368 002422       370 002424       373 002433       375 002437       377 002444       378 002455       379 002464
    380 002466       383 002467       385 002471       386 002500       387 002510       388 002520       391 002521
    396 002523       397 002535       398 002544       399 002546       402 002547       404 002551       406 002557
    409 002562       410 002564       411 002566       413 002567       414 002571       415 002622       416 002626
    419 002633       420 002650       423 002663       424 002666       425 002677       426 002702       427 002704
    429 002726       432 002740       434 002762       435 002777       436 003024       437 003037       438 003043
    440 003047       441 003050       450 003060       451 003101       454 003114       456 003123       462 003124
    466 003132       467 003145


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
