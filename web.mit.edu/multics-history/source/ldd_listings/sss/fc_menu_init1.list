ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>fc_menu_init1.alm               
ASSEMBLED ON:	11/05/86  1033.5 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  " This routine is used by the FORTRAN and COBOL menu interface routines to
                                     7  " attach a cleanup handler to their caller's stack (sneaky, no?).  If there
                                     8  " already is a cleanup handler attached to the stack, it is subsumed and ours
                                     9  " is attached anyway.  However, the subsumed one will be called by the one we
                                    10  " attach.
                                    11  "
                                    12  " Written April 1982 by Chris Jones
                                    13  "
                                    14  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    15  	include	stack_frame
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   2-3  "
                                   2-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   2-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   2-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   2-7  "
                        000020     2-8  	equ	stack_frame.prev_sp,16
                        000020     2-9  	equ	stack_frame.condition_word,16
                        000022    2-10  	equ	stack_frame.next_sp,18
                        000022    2-11  	equ	stack_frame.signaller_word,18
                        000024    2-12  	equ	stack_frame.return_ptr,20
                        000026    2-13  	equ	stack_frame.entry_ptr,22
                        000030    2-14  	equ	stack_frame.operator_ptr,24
                        000030    2-15  	equ	stack_frame.lp_ptr,24
                        000032    2-16  	equ	stack_frame.arg_ptr,26
                        000034    2-17  	equ	stack_frame.static_ptr,28
                        000035    2-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    2-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    2-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    2-21  	equ	stack_frame.translator_id,31
                        000040    2-22  	equ	stack_frame.regs,32
                        000060    2-23  	equ	stack_frame.min_length,48
                        000020    2-24  	equ	stack_frame.flag_word,16
                        020000    2-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    2-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    2-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    2-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    2-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    2-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    2-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    2-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  2-33  
                                  2-34  "
                                  2-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  2-36  "
                                    16  	include	on_unit
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE --- on_unit.incl.alm	5/75 RAB
                                   3-3  "
                        000000     3-4  	equ	on_unit.name,0
                        000002     3-5  	equ	on_unit.body,2
                        000004     3-6  	equ	on_unit.size,4
                        000005     3-7  	equ	on_unit.next,5	upper	offset relative to stack FRAME
                        000005     3-8  	equ	on_unit.flags,5	lower
                        000006     3-9  	equ	on_unit.file,6
                        000010    3-10  	equ	on_unit.file_copy,8
                                  3-11  "
                                  3-12  "	END INCLUDE FILE --- on_unit.incl.alm
                                  3-13  "
                                    17  
    000000                          18  cleanup_name:
    000000  aa  143 154 145 141     19  	aci	"cleanup"
    000001  aa  156 165 160 000
                        000007      20  	equ	cleanup_length,7
                                    21  
                        000002      22  	entry	fc_menu_init1
                                    23  
    000002                          24  fc_menu_init1:
    000002  aa   000100 2350 07     25  	lda	stack_frame.condition_bit,dl
    000003  aa  6 00020 3151 00     26  	cana	sp|stack_frame.flag_word		" see if any conditions are enabled
    000004  0a   000021 6000 00     27  	tze	establish_handler			" -> none were set
                                    28  
                                    29  " Unfortunately, at least one condition handler exists.  We loop thru them,
                                    30  " looking for "cleanup".  Hopefully, we won't find one (stay tuned for details
                                    31  " if we do...).
                                    32  
    000005  aa  6 00036 2201 00     33  	ldx0	sp|stack_frame.on_unit_rel_ptrs	" relative to this stack frame
    000006                          34  check_for_cleanup:
    000006  0a   000021 6000 00     35  	tze	establish_handler			" -> no handlers left
    000007  aa  6 00000 3521 10     36  	epp2	sp|on_unit.name,x0			" pointer to the on unit name
    000010  aa  6 00004 2351 10     37  	lda	sp|on_unit.size,x0			" length of the on unit name
    000011  aa   040140 1064 00     38  	cmpc	(),(pr,rl),fill(040)		" is this a cleanup handler?
    000012  0a   000000 000007      39  	desc9a	cleanup_name,cleanup_length
    000013  aa   200000 000005      40  	desc9a	pr2|0,al
    000014  0a   000017 6000 00     41  	tze	found_cleanup_handler		" -> yes
    000015  aa  6 00005 2201 10     42  	ldx0	sp|on_unit.next,x0			" offset to next on unit
    000016  0a   000006 7100 00     43  	tra	check_for_cleanup			" keep looking
                                    44  "
                                    45  " Come here if there already is a cleanup handler on this frame.  Remember what
                                    46  " it is so that the terminate routine can call it.
                                    47  "
                                    48  " x0 is the offset into the stack frame of the on unit.
                                    49  "
    000017                          50  found_cleanup_handler:
    000017  aa  6 00002 3521 30     51  	epp2	sp|on_unit.body,x0*
    000020  4a  4 00010 2521 20     52  	spri2	fc_menu_data_$original_cleanup_handler
                                    53  "
                                    54  "	fall thru...
                                    55  "
                                    56  " Here we call establish_cleanup_proc_ to actually establish the handler.  Note
                                    57  " that establish_cleanup_proc_ attaches its handler to its CALLER's stack frame.
                                    58  " Notice also that we haven't pushed a frame, so we are running on our caller's
                                    59  " frame.  Thus, when we call establish_cleanup_proc_, the handler will get
                                    60  " attached to our caller's frame, and when establish_cleanup_proc_ returns, it
                                    61  " returns not to us, but to our caller.
                                    62  "
    000021                          63  establish_handler:
                                    64  "
                                    65  " The first thing we do is extend the stack by 16 words to make room for the
                                    66  " argument list.  This code was cribbed from condition_.alm.
                                    67  "
    000021  aa  0 00000 2351 00     68  	lda	ap|0				" see if this is a pl1 frame
    000022  aa  7 00024 3501 20     69  	eppap	sb|stack_header.stack_end_ptr,*	" remember where it was
    000023  aa   000020 6200 00     70  	eax0	16				" the increment we are extending the stack by
    000024  aa  7 00025 0201 00     71  	adlx0	sb|stack_header.stack_end_ptr+1	" add in offset part of stack_end
    000025  aa  7 00025 7401 00     72  	stx0	sb|stack_header.stack_end_ptr+1	" put it back
    000026  aa  6 00023 7401 00     73  	stx0	sp|stack_frame.next_sp+1		" reset current frame's idea of end
    000027  aa   000014 3150 07     74  	cana	=o14,dl				" Z<>0 => pl1 frame
    000030  0a   000032 6000 00     75  	tze	build_arg_list
    000031  aa  6 00005 7401 00     76  	stx0	sp|5				" record growth in pl1 frame
    000032                          77  build_arg_list:
    000032  aa   000002 2750 03     78  	ora	2,du				" 1 argument
    000033  aa  0 00000 7551 00     79  	sta	ap|0
    000034  aa  0 00001 4501 00     80  	stz	ap|1				" no descriptors
    000035  4a  4 00012 3521 20     81  	epp2	fc_menu_utils$terminate
    000036  aa  0 00004 2521 00     82  	spri2	ap|4				" the argument
    000037  aa  0 00004 3521 00     83  	epp2	ap|4
    000040  aa  0 00002 2521 00     84  	spri2	ap|2				" the pointer to it
                                    85  "
                                    86  " Now (at last), call and have the handler attached.
                                    87  "
    000041  aa   400000 2350 03     88  	lda	=o400000,du
    000042  4a  4 00014 7551 20     89  	sta	fc_menu_data_$initialized
    000043  4a  4 00016 7101 20     90  	tra	establish_cleanup_proc_$establish_cleanup_proc_
                                    91  "
                                    92  "	there is no return...
                                    93  "
                                    94  	end
ENTRY SEQUENCES
     
    000044  5a   000012 0000 00
    000045  aa  7 00046 2721 20
    000046  0a   000002 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000050  5a   000003 000000 
    000051  5a   000030 600000 
    000052  aa   000000 000000 
    000053  55   000012 000002 
    000054  5a   000002 400003 
    000055  55   000006 000012 
    000056  aa  015 146 143 137
    000057  aa  155 145 156 165
    000060  aa  137 151 156 151
    000061  aa  164 061 000 000
    000062  55   000021 000003 
    000063  0a   000045 500000 
    000064  55   000015 000003 
    000065  aa  015 146 143 137         fc_menu_init1
    000066  aa  155 145 156 165
    000067  aa  137 151 156 151
    000070  aa  164 061 000 000
    000071  55   000002 000012 
    000072  6a   000000 400002 
    000073  55   000024 000003 
    000074  aa  014 163 171 155         symbol_table
    000075  aa  142 157 154 137
    000076  aa  164 141 142 154
    000077  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000100  aa   000000 000015 
    000101  aa   000000 000000 
    000102  aa   000000 000000 
    000103  aa   000000 000000 
    000104  aa   000000 000000 
    000105  aa   000000 000000 
    000106  aa   000000 000000 
    000107  5a   000021 000000 
    000110  5a   000012 000000 
    000111  aa   000000 000000 
    000112  aa   000000 000000 
    000113  aa   000000 000000 
    000114  aa   000000 000000 
    000115  aa   000000 000000 

EXTERNAL NAMES

    000116  aa  027 145 163 164         establish_cleanup_proc_
    000117  aa  141 142 154 151
    000120  aa  163 150 137 143
    000121  aa  154 145 141 156
    000122  aa  165 160 137 160
    000123  aa  162 157 143 137
    000124  aa  013 151 156 151         initialized
    000125  aa  164 151 141 154
    000126  aa  151 172 145 144
    000127  aa  011 164 145 162         terminate
    000130  aa  155 151 156 141
    000131  aa  164 145 000 000
    000132  aa  015 146 143 137         fc_menu_utils
    000133  aa  155 145 156 165
    000134  aa  137 165 164 151
    000135  aa  154 163 000 000
    000136  aa  030 157 162 151         original_cleanup_handler
    000137  aa  147 151 156 141
    000140  aa  154 137 143 154
    000141  aa  145 141 156 165
    000142  aa  160 137 150 141
    000143  aa  156 144 154 145
    000144  aa  162 000 000 000
    000145  aa  015 146 143 137         fc_menu_data_
    000146  aa  155 145 156 165
    000147  aa  137 144 141 164
    000150  aa  141 137 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000151  aa   000004 000000 
    000152  55   000046 000046 
    000153  aa   000004 000000 
    000154  55   000075 000054 
    000155  aa   000004 000000 
    000156  55   000062 000057 
    000157  aa   000004 000000 
    000160  55   000075 000066 
    000161  aa   000001 000000 
    000162  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000163  5a   000101 000000 
    000164  5a   000103 000000 
    000165  5a   000105 000000 
    000166  5a   000107 000000 
    000167  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000050 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000020 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         fc_menu_data_|original_cleanup_handler
    000011  5a   000116 0000 00
    000012  9a   777766 0000 46         fc_menu_utils|terminate
    000013  5a   000115 0000 00
    000014  9a   777764 0000 46         fc_menu_data_|initialized
    000015  5a   000114 0000 00
    000016  9a   777762 0000 46         establish_cleanup_proc_|establish_cleanup_proc_
    000017  5a   000113 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   662421 540167 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000206 
    000020  aa   000000 000162 
    000021  aa   000000 000170 
    000022  aa   000175 000162 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000062 
    000067  aa   147740 446174 
    000070  aa   000000 114774 
    000071  aa   460747 400000 
    000072  aa   000123 000066 
    000073  aa   147714 750316 
    000074  aa   000000 114774 
    000075  aa   453561 000000 
    000076  aa   000141 000041 
    000077  aa   052721 247134 
    000100  aa   000000 105272 
    000101  aa   317215 400000 
    000102  aa   000152 000035 
    000103  aa   043243 130223 
    000104  aa   000000 102727 
    000105  aa   712743 600000 
    000106  aa   076163 160145          >special_ldd>install>MR12.0-1206>fc_menu_init1.alm
    000107  aa   143151 141154 
    000110  aa   137154 144144 
    000111  aa   076151 156163 
    000112  aa   164141 154154 
    000113  aa   076115 122061 
    000114  aa   062056 060055 
    000115  aa   061062 060066 
    000116  aa   076146 143137 
    000117  aa   155145 156165 
    000120  aa   137151 156151 
    000121  aa   164061 056141 
    000122  aa   154155 040040 
    000123  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000124  aa   143151 141154 
    000125  aa   137154 144144 
    000126  aa   076151 156163 
    000127  aa   164141 154154 
    000130  aa   076115 122061 
    000131  aa   062056 060055 
    000132  aa   061062 060066 
    000133  aa   076163 164141 
    000134  aa   143153 137150 
    000135  aa   145141 144145 
    000136  aa   162056 151156 
    000137  aa   143154 056141 
    000140  aa   154155 040040 
    000141  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000142  aa   076151 156143 
    000143  aa   154165 144145 
    000144  aa   076163 164141 
    000145  aa   143153 137146 
    000146  aa   162141 155145 
    000147  aa   056151 156143 
    000150  aa   154056 141154 
    000151  aa   155040 040040 
    000152  aa   076154 144144          >ldd>include>on_unit.incl.alm
    000153  aa   076151 156143 
    000154  aa   154165 144145 
    000155  aa   076157 156137 
    000156  aa   165156 151164 
    000157  aa   056151 156143 
    000160  aa   154056 141154 
    000161  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          32    build_arg_list           fc_menu_init1:       75,   77.
        1170    call_offset              stack_header:        80.
           6    check_for_cleanup        fc_menu_init1:       34,   43.
           7    cleanup_length           fc_menu_init1:       20,   39.
           0    cleanup_name             fc_menu_init1:       18,   39.
        1174    entry_offset             stack_header:        84.
                establish_cleanup_proc_  fc_menu_init1:       90.
          21    establish_handler        fc_menu_init1:       27,   35,   63.
                fc_menu_data_            fc_menu_init1:       52,   89.
           2    fc_menu_init1            fc_menu_init1:       22,   24.
                fc_menu_utils            fc_menu_init1:       81.
          17    found_cleanup_handler    fc_menu_init1:       41,   50.
                initialized              fc_menu_init1:       89.
           2    on_unit.body             fc_menu_init1:       51,
                                         on_unit:        5.
           6    on_unit.file             on_unit:        9.
          10    on_unit.file_copy        on_unit:       10.
           5    on_unit.flags            on_unit:        8.
           0    on_unit.name             fc_menu_init1:       36,
                                         on_unit:        4.
           5    on_unit.next             fc_menu_init1:       42,
                                         on_unit:        7.
           4    on_unit.size             fc_menu_init1:       37,
                                         on_unit:        6.
                original_cleanup_handler       fc_menu_init1:       52.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      fc_menu_init1:       25,
                                               stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    fc_menu_init1:       26,
                                         stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      fc_menu_init1:       73,
                                         stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   fc_menu_init1:       33,
                                               stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     fc_menu_init1:       69,   71,   72,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
                terminate                fc_menu_init1:       81.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
