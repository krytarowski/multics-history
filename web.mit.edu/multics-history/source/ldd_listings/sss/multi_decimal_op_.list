	COMPILATION LISTING OF SEGMENT multi_decimal_op_
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1439.2 mst Mon
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 multi_decimal_op_:
       11 	procedure(poperation,pop3,pdesc3,pop1,pdesc1);
       12 
       13 dcl	poperation fixed bin,
       14 	(pop3,pop1)	char(1) unal,
       15 	(pdesc1,pdesc3)	bit(36) aligned;
       16 
       17 dcl	cu_$arg_count entry(fixed bin),
       18 	cu_$arg_ptr entry(fixed bin,ptr,fixed bin,fixed bin),
       19 	decimal_op_ entry(fixed bin,char(1) unal, bit(36) aligned,
       20 		char(1) unal, bit(36) aligned, char(1) unal, bit(36) aligned);
       21 
       22 dcl	desc bit(36) aligned,
       23 	desc_fix bit(36) aligned static init("100101000000000000000000000000111111"b),
       24 	desc_flt bit(36) aligned static init("100100100000000000000000000000111111"b);
       25 
       26 dcl	t char(1) unal defined(t1),
       27 	t1 char(65) unaligned static init((65)"0");
       28 
       29 dcl	op2 char(1) unal based(op2_ptr),
       30 	desc2 bit(36) aligned based(desc2_ptr),
       31 	(op2_ptr,desc2_ptr) ptr;
       32 
       33 dcl	(code,i,junk,n) fixed bin;
       34 
       35 dcl	addition fixed bin static init(1);
       36 
       37 dcl	zero char(1) unal defined(z),
       38 	z char(3) unal static init("+0"),
       39 	zero_desc bit(36) aligned static init("100100100000000000000000000000000001"b);
       40 
       41 	call cu_$arg_count(n);
       42 
       43 	if substr(pdesc3,5,3) = "001"b		/* real fixed dec */
       44 	then desc = desc_fix;
       45 	else desc = desc_flt;
       46 
       47 	call cu_$arg_ptr(6,op2_ptr,junk,code);
       48 	call cu_$arg_ptr(7,desc2_ptr,junk,code);
       49 
       50 	call decimal_op_(poperation,t,desc,pop1,pdesc1,op2,desc2);
       51 
       52 	do i = 8 to n-1 by 2;
       53 
       54 		call cu_$arg_ptr(i,op2_ptr,junk,code);
       55 		call cu_$arg_ptr(i+1,desc2_ptr,junk,code);
       56 
       57 		call decimal_op_(poperation,t,desc,t,desc,op2,desc2);
       58 
       59 	end;
       60 
       61 	call decimal_op_(addition,pop3,pdesc3,t,desc,zero,zero_desc);
       62 
       63 end multi_decimal_op_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1005.9  multi_decimal_op_.pl1             >spec>on>pl128d>multi_decimal_op_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addition                        000031 internal static fixed bin(17,0)          initial dcl 35 set ref 61*
code                            000106 automatic       fixed bin(17,0)          dcl 33 set ref 47* 48* 54* 55*
cu_$arg_count                   000034 constant        entry                    external dcl 17 ref 41
cu_$arg_ptr                     000036 constant        entry                    external dcl 17 ref 47 48 54 55
decimal_op_                     000040 constant        entry                    external dcl 17 ref 50 57 61
desc                            000100 automatic       bit(36)                  dcl 22 set ref 43* 45* 50* 57* 57* 61*
desc2                                  based           bit(36)                  dcl 29 set ref 50* 57*
desc2_ptr                       000104 automatic       pointer                  dcl 29 set ref 48* 50 55* 57
desc_fix                        000001 constant        bit(36)                  initial dcl 22 ref 43
desc_flt                        000000 constant        bit(36)                  initial dcl 22 ref 45
i                               000107 automatic       fixed bin(17,0)          dcl 33 set ref 52* 54* 55*
junk                            000110 automatic       fixed bin(17,0)          dcl 33 set ref 47* 48* 54* 55*
n                               000111 automatic       fixed bin(17,0)          dcl 33 set ref 41* 52
op2                                    based           char(1)                  unaligned dcl 29 set ref 50* 57*
op2_ptr                         000102 automatic       pointer                  dcl 29 set ref 47* 50 54* 57
pdesc1                                 parameter       bit(36)                  dcl 13 set ref 10 50*
pdesc3                                 parameter       bit(36)                  dcl 13 set ref 10 43 61*
pop1                                   parameter       char(1)                  unaligned dcl 13 set ref 10 50*
pop3                                   parameter       char(1)                  unaligned dcl 13 set ref 10 61*
poperation                             parameter       fixed bin(17,0)          dcl 13 set ref 10 50* 57*
t                                      defined         char(1)                  unaligned dcl 26 set ref 50* 57* 57* 61*
t1                              000010 internal static char(65)                 initial unaligned dcl 26 ref 50 50 57 57 57 57 61 61
z                               000032 internal static char(3)                  initial unaligned dcl 37 ref 61 61
zero                                   defined         char(1)                  unaligned dcl 37 set ref 61*
zero_desc                       000033 internal static bit(36)                  initial dcl 37 set ref 61*

NAME DECLARED BY EXPLICIT CONTEXT.
multi_decimal_op_               000012 constant        entry                    external dcl 10

NAME DECLARED BY CONTEXT OR IMPLICATION.
substr                                                 builtin function         ref 43

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       314         356     244         324
Length       534     244        42         142      50          24

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
multi_decimal_op_                   106 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 t1                          multi_decimal_op_
000031 addition                    multi_decimal_op_
000032 z                           multi_decimal_op_
000033 zero_desc                   multi_decimal_op_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
multi_decimal_op_        000100 desc                        multi_decimal_op_
                         000102 op2_ptr                     multi_decimal_op_
                         000104 desc2_ptr                   multi_decimal_op_
                         000106 code                        multi_decimal_op_
                         000107 i                           multi_decimal_op_
                         000110 junk                        multi_decimal_op_
                         000111 n                           multi_decimal_op_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_count                 cu_$arg_ptr                   decimal_op_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000005        41 000017        43 000025        45 000036        47 000040        48 000057        50 000076
     52 000122        54 000133        55 000150        57 000170        59 000214        61 000217        63 000243


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
