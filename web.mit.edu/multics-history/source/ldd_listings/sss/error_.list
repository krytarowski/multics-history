	COMPILATION LISTING OF SEGMENT error_
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1412.6 mst Mon
	    Options: optimize map

        1 /****^  *********************************************************
        2*        *                                                       *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
        4*        *                                                       *
        5*        * Copyright (c) 1972 by Massachusetts Institute of      *
        6*        * Technology and Honeywell Information Systems, Inc.    *
        7*        *                                                       *
        8*        ********************************************************* */
        9 
       10 
       11 
       12 /****^  HISTORY COMMENTS:
       13*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
       14*     install(89-07-31,MR12.3-1066):
       15*     Removed the obsolete parameter source_line.
       16*                                                   END HISTORY COMMENTS */
       17 
       18 
       19 /*	Error buffering program.				*/
       20 /* If the listing option is on it saves up to 100 error message numbers
       21* * and related information in an array.  It then calls
       22* * pll_error_print$write_out which constructs the error message and
       23* * prints it on the user's console.  Later error$finish is called to sort
       24* * the error array by statement id and print all of the messages on the
       25* * listing.
       26**/
       27 /*	Written by:	J.D. Mills
       28* *	On:		18 January 1969
       29* *	Rewritten in pl1 on 28 JULY 1969 by the author.
       30* *	Modified on:	11 August 1970 by P. Green for Version II
       31* *	Modified on:	20 April 1979 by R. Barnes to prevent a
       32* *			fault if source_seg < 0
       33* *        Modified on:        830909 BIM to signal error if in debug mode
       34* *	Modified on	020889 RW reformatted and removed
       35* *			obsolete parameter "source_line"
       36**/
       37 /* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
       38 error_:
       39      procedure (en, source_id, tp, source_seg, source_start, source_length);
       40 
       41 dcl      en fixed bin (15) parameter;
       42 dcl      source_seg fixed bin (8) parameter;
       43 dcl      source_start fixed bin (23) parameter;
       44 dcl      source_length fixed bin (11) parameter;
       45 dcl      tp pointer parameter;
       46 
       47 dcl      n fixed bin (17),
       48          sg fixed bin (11),
       49          (ss, sl) fixed bin (31),
       50          (p, q) ptr;
       51 
       52 dcl      pl1_stat_$listing_on bit (1) aligned external static;
       53 dcl      ei fixed bin (17) internal static;
       54 dcl      ei_max fixed bin (17) internal static options (constant) initial (100);
       55 
       56 dcl      (addr, divide, null, string) builtin;
       57 
       58 dcl      1 error_info (100) internal static,
       59 	 2 token_pt ptr,
       60 	 2 error_number fixed bin (17),
       61 	 2 statement_id like source_id;
       62 
       63 dcl      1 image based,				/* image of error_info array */
       64 	 2 token_pt ptr,
       65 	 2 error_number fixed bin (15),
       66 	 2 statement_id like source_id;
       67 
       68 declare	cg_static_$debug bit (1) aligned external static;
       69 declare	cu_$cl entry;
       70 
       71 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       72 
       73 
  7     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  7     2 
  7     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  7     4 
  7     5 dcl (	block_node		initial("000000001"b),
  7     6 	statement_node		initial("000000010"b),
  7     7 	operator_node		initial("000000011"b),
  7     8 	reference_node		initial("000000100"b),
  7     9 	token_node		initial("000000101"b),
  7    10 	symbol_node		initial("000000110"b),
  7    11 	context_node		initial("000000111"b),
  7    12 	array_node		initial("000001000"b),
  7    13 	bound_node		initial("000001001"b),
  7    14 	format_value_node		initial("000001010"b),
  7    15 	list_node			initial("000001011"b),
  7    16 	default_node		initial("000001100"b),
  7    17 	machine_state_node		initial("000001101"b),
  7    18 	source_node		initial("000001110"b),
  7    19 	label_node		initial("000001111"b),
  7    20 	cross_reference_node	initial("000010000"b),
  7    21 	sf_par_node		initial("000010001"b),
  7    22 	temporary_node		initial("000010010"b),
  7    23 	label_array_element_node	initial("000010011"b),
  7    24 	by_name_agg_node		initial("000010100"b))
  7    25 				bit(9) internal static aligned options(constant);
  7    26 
  7    27 dcl	1 node			based aligned,
  7    28 	2 type			unal bit(9),
  7    29 	2 source_id		unal structure,
  7    30 	  3 file_number		bit(8),
  7    31 	  3 line_number		bit(14),
  7    32 	  3 statement_number	bit(5);
  7    33 
  7    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       74 
       75 
  8     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  8     2 
  8     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  8     4 
  8     5 /* format: style3 */
  8     6 dcl	1 operator	based aligned,
  8     7 	  2 node_type	bit (9) unaligned,
  8     8 	  2 op_code	bit (9) unaligned,
  8     9 	  2 shared	bit (1) unaligned,
  8    10 	  2 processed	bit (1) unaligned,
  8    11 	  2 optimized	bit (1) unaligned,
  8    12 	  2 number	fixed (14) unaligned,
  8    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  8    14 
  8    15 dcl	max_number_of_operands
  8    16 			fixed bin (15) int static options (constant) initial (32767);
  8    17 
  8    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       76 
       77 
  9     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
  9     2 
  9     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
  9     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
  9     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
  9     6 /* Modified: 26 July 82 BIM wordno, segno */
  9     7 
  9     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
  9     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
  9    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
  9    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
  9    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
  9    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
  9    14 
  9    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
  9    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
  9    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
  9    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
  9    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
  9    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
  9    21 
  9    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
  9    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
  9    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
  9    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
  9    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
  9    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
  9    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
  9    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
  9    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
  9    31 
  9    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
  9    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
  9    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
  9    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
  9    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
  9    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
  9    38 
  9    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
  9    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
  9    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
  9    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
  9    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
  9    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
  9    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
  9    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
  9    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
  9    48 
  9    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
  9    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
  9    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
  9    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
  9    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
  9    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
  9    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
  9    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
  9    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
  9    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
  9    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
  9    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
  9    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
  9    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
  9    63 
  9    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
  9    65*						   opnd(2) <- opnd(3) / 36		*/
  9    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
  9    67*						   opnd(2) <- opnd(3) / 4		*/
  9    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
  9    69*						   opnd(2) <- opnd(3) / 2		*/
  9    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
  9    71 
  9    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
  9    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
  9    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
  9    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
  9    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
  9    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
  9    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
  9    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
  9    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
  9    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
  9    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
  9    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
  9    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
  9    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
  9    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
  9    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
  9    88 
  9    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
  9    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
  9    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
  9    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
  9    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
  9    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
  9    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
  9    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
  9    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
  9    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
  9    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
  9   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
  9   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
  9   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
  9   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
  9   104 
  9   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
  9   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
  9   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
  9   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
  9   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
  9   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
  9   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
  9   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
  9   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
  9   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
  9   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
  9   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
  9   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
  9   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
  9   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
  9   120 
  9   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
  9   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
  9   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
  9   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
  9   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
  9   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
  9   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
  9   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
  9   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
  9   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
  9   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
  9   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
  9   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
  9   134 
  9   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
  9   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
  9   137 
  9   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
  9   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
  9   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
  9   141*						   opnd(2) is the file name
  9   142*						   opnd(3) is the block	*/
  9   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
  9   144*						   opnd(2) is the file name	*/
  9   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
  9   146*						   opnd(2) is the file name */
  9   147 
  9   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
  9   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
  9   150*						   opnd(3) is old value, (4) is new value. */
  9   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
  9   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
  9   153 
  9   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  9   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  9   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
  9   157*						   opnd(5) is the list */
  9   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
  9   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
  9   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
  9   161 
  9   162 	r_parn		initial("011110001"b),	/* format op code			*/
  9   163 	l_parn		initial("011110010"b),
  9   164 	r_format		initial("011110011"b),
  9   165 	c_format		initial("011110100"b),
  9   166 	f_format		initial("011110101"b),
  9   167 	e_format		initial("011110110"b),
  9   168 	b_format		initial("011110111"b),
  9   169 	a_format		initial("011111000"b),
  9   170 	x_format		initial("011111001"b),
  9   171 	skip_format	initial("011111010"b),
  9   172 	column_format	initial("011111011"b),
  9   173 	page_format	initial("011111100"b),
  9   174 	line_format	initial("011111101"b),
  9   175 	picture_format	initial("011111110"b),
  9   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
  9   177 
  9   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
  9   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
  9   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
  9   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
  9   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
  9   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
  9   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
  9   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
  9   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
  9   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
  9   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
  9   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
  9   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
  9   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
  9   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
  9   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
  9   194 
  9   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
  9   196 /* They are processed by the semantic translator.						*/
  9   197 
  9   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
  9   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
  9   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
  9   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
  9   202 						/* opnd(3) is skip, opnd(4) is list	*/
  9   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
  9   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
  9   205 						/* opnd(3) is skip,opnd(4) is line	*/
  9   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
  9   207 	open_file		initial("100011001"b),
  9   208 	close_file	initial("100011010"b),
  9   209 	read_file		initial("100011011"b),
  9   210 	write_file	initial("100011100"b),
  9   211 	locate_file	initial("100011101"b),
  9   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
  9   213 						/* opnd(2) is control variable ref	*/
  9   214 						/* opnd(3) is specification operator	*/
  9   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
  9   216 						/* repeat opnd(4) while opnd(5)	*/
  9   217 						/* opnd(6) is next specification	*/
  9   218 
  9   219 	rewrite_file	initial("100100000"b),
  9   220 	delete_file	initial("100100001"b),
  9   221 	unlock_file	initial("100100010"b),
  9   222 	lock_file		initial("100100011"b),
  9   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
  9   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
  9   225 	nop		initial("100100111"b),	/* no-op */
  9   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
  9   227 
  9   228 /* These operators are produced by the semantic translator in processing the math
  9   229*   builtin functions and are used as input to the code generator			*/
  9   230 
  9   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
  9   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
  9   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
  9   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
  9   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
  9   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
  9   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
  9   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
  9   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
  9   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
  9   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
  9   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
  9   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
  9   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
  9   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
  9   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
  9   247 
  9   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
  9   249 
  9   250 			bit(9) aligned internal static options(constant);
  9   251 
  9   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       78 
       79 
 10     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 10     2 
 10     3 dcl	1 reference		based aligned,
 10     4 	2 node_type		bit(9) unaligned,
 10     5 	2 array_ref		bit(1) unaligned,
 10     6 	2 varying_ref		bit(1) unaligned,
 10     7 	2 shared			bit(1) unaligned,
 10     8 	2 put_data_sw		bit(1) unaligned,
 10     9 	2 processed		bit(1) unaligned,
 10    10 	2 units			fixed(3) unaligned,
 10    11 	2 ref_count		fixed(17) unaligned,
 10    12 	2 c_offset		fixed(24),
 10    13 	2 c_length		fixed(24),
 10    14 	2 symbol			ptr unaligned,
 10    15 	2 qualifier		ptr unaligned,
 10    16 	2 offset			ptr unaligned,
 10    17 	2 length			ptr unaligned,
 10    18 	2 subscript_list		ptr unaligned,
 10    19 						/* these fields are used by the 645 code generator */
 10    20 	2 address			structure unaligned,
 10    21 	  3 base			bit(3),
 10    22 	  3 offset		bit(15),
 10    23 	  3 op			bit(9),
 10    24 	  3 no_address		bit(1),
 10    25 	  3 inhibit		bit(1),
 10    26 	  3 ext_base		bit(1),
 10    27 	  3 tag			bit(6),
 10    28 	2 info			structure unaligned,
 10    29 	  3 address_in		structure,
 10    30 	    4 b			dimension(0:7) bit(1),
 10    31 	    4 storage		bit(1),
 10    32 	  3 value_in		structure,
 10    33 	    4 a			bit(1),
 10    34 	    4 q			bit(1),
 10    35 	    4 aq			bit(1),
 10    36 	    4 string_aq		bit(1),
 10    37 	    4 complex_aq		bit(1),
 10    38 	    4 decimal_aq		bit(1),
 10    39 	    4 b			dimension(0:7) bit(1),
 10    40 	    4 storage		bit(1),
 10    41 	    4 indicators		bit(1),
 10    42 	    4 x			dimension(0:7) bit(1),
 10    43 	  3 other			structure,
 10    44 	    4 big_offset		bit(1),
 10    45 	    4 big_length		bit(1),
 10    46 	    4 modword_in_offset	bit(1),
 10    47 	2 data_type		fixed(5) unaligned,
 10    48 	2 bits			structure unaligned,
 10    49 	  3 padded_ref		bit(1),
 10    50 	  3 aligned_ref		bit(1),
 10    51 	  3 long_ref		bit(1),
 10    52 	  3 forward_ref		bit(1),
 10    53 	  3 ic_ref		bit(1),
 10    54 	  3 temp_ref		bit(1),
 10    55 	  3 defined_ref		bit(1),
 10    56 	  3 evaluated		bit(1),
 10    57 	  3 allocate		bit(1),
 10    58 	  3 allocated		bit(1),
 10    59 	  3 aliasable		bit(1),
 10    60 	  3 even			bit(1),
 10    61 	  3 perm_address		bit(1),
 10    62 	  3 aggregate		bit(1),
 10    63 	  3 hit_zero		bit(1),
 10    64 	  3 dont_save		bit(1),
 10    65 	  3 fo_in_qual		bit(1),
 10    66 	  3 hard_to_load		bit(1),
 10    67 	2 relocation		bit(12) unaligned,
 10    68 	2 more_bits		structure unaligned,
 10    69 	  3 substr		bit(1),
 10    70 	  3 padded_for_store_ref	bit(1),
 10    71 	  3 aligned_for_store_ref	bit(1),
 10    72 	  3 mbz			bit(15),
 10    73 	2 store_ins		bit(18) unaligned;
 10    74 
 10    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       80 
       81 
 11     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 11     2 
 11     3 dcl	1 symbol			based aligned,
 11     4 	2 node_type		bit(9) unal,
 11     5 	2 source_id		structure unal,
 11     6 	  3 file_number		bit(8),
 11     7 	  3 line_number		bit(14),
 11     8 	  3 statement_number	bit(5),
 11     9 	2 location		fixed(18) unal unsigned,
 11    10 	2 allocated		bit(1) unal,
 11    11 	2 dcl_type		bit(3) unal,
 11    12 	2 reserved		bit(6) unal,
 11    13 	2 pix			unal,
 11    14 	  3 pic_fixed		bit(1) unal,
 11    15 	  3 pic_float		bit(1) unal,
 11    16 	  3 pic_char		bit(1) unal,
 11    17 	  3 pic_scale		fixed(7) unal,
 11    18 	  3 pic_size		fixed(7) unal,
 11    19 	2 level			fixed(8) unal,
 11    20 	2 boundary		fixed(3) unal,
 11    21 	2 size_units		fixed(3) unal,
 11    22 	2 scale			fixed(7) unal,
 11    23 	2 runtime			bit(18) unal,
 11    24 	2 runtime_offset		bit(18) unal,
 11    25 	2 block_node		ptr unal,
 11    26 	2 token			ptr unal,
 11    27 	2 next			ptr unal,
 11    28 	2 multi_use		ptr unal,
 11    29 	2 cross_references		ptr unal,
 11    30 	2 initial			ptr unal,
 11    31 	2 array			ptr unal,
 11    32 	2 descriptor		ptr unal,
 11    33 	2 equivalence		ptr unal,
 11    34 	2 reference		ptr unal,
 11    35 	2 general			ptr unal,
 11    36 	2 father			ptr unal,
 11    37 	2 brother			ptr unal,
 11    38 	2 son			ptr unal,
 11    39 	2 word_size		ptr unal,
 11    40 	2 bit_size		ptr unal,
 11    41 	2 dcl_size		ptr unal,
 11    42 	2 symtab_size		ptr unal,
 11    43 	2 c_word_size		fixed(24),
 11    44 	2 c_bit_size		fixed(24),
 11    45 	2 c_dcl_size		fixed(24),
 11    46 
 11    47 	2 attributes		structure aligned,
 11    48 	  3 data_type		structure unal,
 11    49 	    4 structure		bit(1) ,
 11    50 	    4 fixed		bit(1),
 11    51 	    4 float		bit(1),
 11    52 	    4 bit			bit(1),
 11    53 	    4 char		bit(1),
 11    54 	    4 ptr			bit(1),
 11    55 	    4 offset		bit(1),
 11    56 	    4 area		bit(1),
 11    57 	    4 label		bit(1),
 11    58 	    4 entry		bit(1),
 11    59 	    4 file		bit(1),
 11    60 	    4 arg_descriptor	bit(1),
 11    61 	    4 storage_block		bit(1),
 11    62 	    4 explicit_packed	bit(1), /* options(packed) */
 11    63 	    4 condition		bit(1),
 11    64 	    4 format		bit(1),
 11    65 	    4 builtin		bit(1),
 11    66 	    4 generic		bit(1),
 11    67 	    4 picture		bit(1),
 11    68 
 11    69 	  3 misc_attributes		structure unal,
 11    70 	    4 dimensioned		bit(1),
 11    71 	    4 initialed		bit(1),
 11    72 	    4 aligned		bit(1),
 11    73 	    4 unaligned		bit(1),
 11    74 	    4 signed		bit(1),
 11    75 	    4 unsigned		bit(1),
 11    76 	    4 precision		bit(1),
 11    77 	    4 varying		bit(1),
 11    78 	    4 local		bit(1),
 11    79 	    4 decimal		bit(1),
 11    80 	    4 binary		bit(1),
 11    81 	    4 real		bit(1),
 11    82 	    4 complex		bit(1),
 11    83 	    4 variable		bit(1),
 11    84 	    4 reducible		bit(1),
 11    85 	    4 irreducible		bit(1),
 11    86 	    4 returns		bit(1),
 11    87 	    4 position		bit(1),
 11    88 	    4 internal		bit(1),
 11    89 	    4 external		bit(1),
 11    90 	    4 like		bit(1),
 11    91 	    4 member		bit(1),
 11    92 	    4 non_varying		bit(1),
 11    93 	    4 options		bit(1),
 11    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 11    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 11    96 
 11    97 	  3 storage_class		structure unal,
 11    98 	    4 auto		bit(1),
 11    99 	    4 based		bit(1),
 11   100 	    4 static		bit(1),
 11   101 	    4 controlled		bit(1),
 11   102 	    4 defined		bit(1),
 11   103 	    4 parameter		bit(1),
 11   104 	    4 param_desc		bit(1),
 11   105 	    4 constant		bit(1),
 11   106 	    4 temporary		bit(1),
 11   107 	    4 return_value		bit(1),
 11   108 
 11   109 	  3 file_attributes		structure unal,
 11   110 	    4 print		bit(1),
 11   111 	    4 input		bit(1),
 11   112 	    4 output		bit(1),
 11   113 	    4 update		bit(1),
 11   114 	    4 stream		bit(1),
 11   115 	    4 reserved_1		bit(1),
 11   116 	    4 record		bit(1),
 11   117 	    4 sequential		bit(1),
 11   118 	    4 direct		bit(1),
 11   119 	    4 interactive		bit(1),		/* env(interactive) */
 11   120 	    4 reserved_2		bit(1),
 11   121 	    4 reserved_3		bit(1),
 11   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 11   123 	    4 keyed		bit(1),
 11   124 	    4 reserved_4		bit(1),
 11   125 	    4 environment		bit(1),
 11   126 
 11   127 	  3 compiler_developed	structure unal,
 11   128 	    4 aliasable		bit(1),
 11   129 	    4 packed		bit(1),
 11   130 	    4 passed_as_arg		bit(1),
 11   131 	    4 allocate		bit(1),
 11   132 	    4 set			bit(1),
 11   133 	    4 exp_extents		bit(1),
 11   134 	    4 refer_extents		bit(1),
 11   135 	    4 star_extents		bit(1),
 11   136 	    4 isub		bit(1),
 11   137 	    4 put_in_symtab		bit(1),
 11   138 	    4 contiguous		bit(1),
 11   139 	    4 put_data		bit(1),
 11   140 	    4 overlayed		bit(1),
 11   141 	    4 error		bit(1),
 11   142 	    4 symtab_processed	bit(1),
 11   143 	    4 overlayed_by_builtin	bit(1),
 11   144 	    4 defaulted		bit(1),
 11   145 	    4 connected		bit(1);
 11   146 
 11   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       82 
       83 
 12     1 dcl	1 source_id		structure unaligned,
 12     2 	  2  file_number 		bit(8),
 12     3 	  2  line_number 		bit(14),
 12     4 	  2  statement_number	bit(5);
       84 
       85 
       86 /* start */
       87 	sg = source_seg;
       88 	ss = source_start;
       89 	sl = source_length;
       90 
       91 common:
       92 	p = tp;
       93 
       94 /* traverse the node pointer until we can get a token_node */
       95 	do while (p ^= null);
       96 	     if p -> node.type = token_node then
       97 		goto found_token_node;
       98 	     else if p -> node.type = symbol_node then do;
       99 		p = p -> symbol.token;
      100 		goto found_token_node;
      101 	     end;
      102 	     else if p -> node.type = label_node then do;
      103 		p = p -> symbol.token;
      104 		goto found_token_node;
      105 	     end;
      106 	     else if p -> node.type = reference_node then
      107 		p = p -> reference.symbol;
      108 	     else if p -> node.type = operator_node then do;
      109 		if p -> operator.op_code = std_call then
      110 		     p = p -> operator.operand (1);
      111 		else
      112 		     p = null;
      113 	     end;
      114 	     else /* bizzare type of node */
      115 		p = null;
      116 	end;
      117 
      118 found_token_node:
      119 	if pl1_stat_$listing_on then
      120 	     if ei <= ei_max then do;
      121 
      122 		q = addr (error_info (ei));
      123 		q -> image.token_pt = p;
      124 		q -> image.error_number = en;
      125 		if sg >= 0 then
      126 		     string (q -> image.statement_id) = string (source_id);
      127 		else
      128 		     string (q -> image.statement_id) = "0"b;
      129 		ei = ei + 1;
      130 
      131 	     end;
      132 
      133 	call pl1_error_print$write_out (en, source_id, p, sg, ss, sl, 0);
      134 
      135 	if cg_static_$debug then
      136 	     call cu_$cl;
      137 	return;
      138 
      139 error_$no_text:
      140      entry (en, source_id, tp);
      141 
      142 	sg, ss, sl = 0;
      143 	goto common;
      144 
      145 /* error_$finish entry.
      146* *	Sort the error messages by error number and then dump them
      147* *	into the source listing
      148**/
      149 error_$finish:
      150      entry;
      151 
      152 dcl      (i, j, k, d) fixed bin (17),
      153          (buff_pt, pj, pk) ptr,
      154          temp_id bit (27),
      155          buffer (8);				/* for temp storage during interchange */
      156 dcl      pl1_stat_$error_width fixed bin ext static;
      157 
      158 	pl1_stat_$error_width = 120;
      159 	buff_pt = addr (buffer);
      160 
      161 	if ei > ei_max then do;
      162 	     ei = ei_max;
      163 	     call pl1_print$non_varying_nl (
      164 		"Implementation restriction - Only 100 error messages may be printed in the listing.", 0);
      165 	end;
      166 
      167 	ei = ei - 1;
      168 
      169 /* Sort the error messages using Shell sort */
      170 	d = ei;
      171 down:
      172 	d = 2 * divide (d, 4, 17, 0) + 1;
      173 	do i = 1 to ei - d;
      174 	     k = i + d;
      175 	     pk = addr (error_info (k));
      176 	     temp_id = string (pk -> image.statement_id);
      177 up:
      178 	     j = k - d;
      179 	     pj = addr (error_info (j));
      180 
      181 	     if string (pj -> image.statement_id) > temp_id then do;
      182 		buff_pt -> image = pk -> image;
      183 		pk -> image = pj -> image;
      184 		pj -> image = buff_pt -> image;
      185 
      186 		if j > d then do;
      187 		     k = j;
      188 		     goto up;
      189 		end;
      190 	     end;
      191 	end;
      192 
      193 	if d > 1 then
      194 	     goto down;
      195 
      196 
      197 /* The error messages are sorted, now write them onto listing segment. */
      198 
      199 	do j = 1 to ei;
      200 	     pj = addr (error_info (j));
      201 	     call pl1_error_print$listing_segment (pj -> image.error_number, pj -> image.statement_id,
      202 		pj -> image.token_pt);
      203 	end;
      204 
      205 error_$initialize_error:
      206      entry;
      207 
      208 	ei = 1;
      209 
      210      end error_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1329.4  error_.pl1                        >spec>install>MR12.3-1066>error_.pl1
72           1    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
1-307        2    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
74           7    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
76           8    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
78           9    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
80          10    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
82          11    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
84          12    05/06/74  1745.0  source_id.incl.pl1                >ldd>include>source_id.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 56 ref 122 159 175 179 200
buff_pt                         000114 automatic       pointer                  dcl 152 set ref 159* 182 184
buffer                          000123 automatic       fixed bin(17,0)          array dcl 152 set ref 159
cg_static_$debug                000634 external static bit(1)                   dcl 68 ref 135
cu_$cl                          000636 constant        entry                    external dcl 69 ref 135
d                               000113 automatic       fixed bin(17,0)          dcl 152 set ref 170* 171* 171 173 174 177 186 193
divide                                                 builtin function         dcl 56 ref 171
ei                              000010 internal static fixed bin(17,0)          dcl 53 set ref 118 122 129* 129 161 162* 167* 167
                                                                                  170 173 199 208*
ei_max                                 constant        fixed bin(17,0)          initial dcl 54 ref 118 161 162
en                                     parameter       fixed bin(15,0)          dcl 41 set ref 38 124 133* 139
error_info                      000012 internal static structure                array level 1 unaligned dcl 58 set ref 122 175 179
                                                                                  200
error_number              2            based           fixed bin(15,0)          level 2 dcl 63 set ref 124* 201*
i                               000110 automatic       fixed bin(17,0)          dcl 152 set ref 173* 174*
image                                  based           structure                level 1 unaligned dcl 63 set ref 182* 182 183* 183
                                                                                  184* 184
j                               000111 automatic       fixed bin(17,0)          dcl 152 set ref 177* 179 186 187 199* 200*
k                               000112 automatic       fixed bin(17,0)          dcl 152 set ref 174* 175 177 187*
label_node                             constant        bit(9)                   initial dcl 7-5 ref 102
node                                   based           structure                level 1 dcl 7-27
null                                                   builtin function         dcl 56 ref 95 111 114
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 8-6 ref 109
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 8-6 ref
                                                                                  109
operator                               based           structure                level 1 dcl 8-6
operator_node                          constant        bit(9)                   initial dcl 7-5 ref 108
p                               000104 automatic       pointer                  dcl 47 set ref 91* 95 96 98 99* 99 102 103* 103 106
                                                                                  106* 106 108 109 109* 109 111* 114* 123 133*
pj                              000116 automatic       pointer                  dcl 152 set ref 179* 181 183 184 200* 201 201 201
pk                              000120 automatic       pointer                  dcl 152 set ref 175* 176 182 183
pl1_error_print$listing_segment 000642 constant        entry                    external dcl 1-384 ref 201
pl1_error_print$write_out       000640 constant        entry                    external dcl 1-372 ref 133
pl1_print$non_varying_nl        000644 constant        entry                    external dcl 1-402 ref 163
pl1_stat_$error_width           000646 external static fixed bin(17,0)          dcl 156 set ref 158*
pl1_stat_$listing_on            000632 external static bit(1)                   dcl 52 ref 118
q                               000106 automatic       pointer                  dcl 47 set ref 122* 123 124 125 127
reference                              based           structure                level 1 dcl 10-3
reference_node                         constant        bit(9)                   initial dcl 7-5 ref 106
sg                              000100 automatic       fixed bin(11,0)          dcl 47 set ref 87* 125 133* 142*
sl                              000102 automatic       fixed bin(31,0)          dcl 47 set ref 89* 133* 142*
source_id                              parameter       structure                level 1 packed packed unaligned dcl 12-1 set ref 38
                                                                                  125 133* 139
source_length                          parameter       fixed bin(11,0)          dcl 44 ref 38 89
source_seg                             parameter       fixed bin(8,0)           dcl 42 ref 38 87
source_start                           parameter       fixed bin(23,0)          dcl 43 ref 38 88
ss                              000101 automatic       fixed bin(31,0)          dcl 47 set ref 88* 133* 142*
statement_id              3            based           structure                level 2 packed packed unaligned dcl 63 set ref 125*
                                                                                  127* 176 181 201*
std_call                               constant        bit(9)                   initial dcl 9-8 ref 109
string                                                 builtin function         dcl 56 set ref 125* 125 127* 176 181
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 10-3 in procedure "error_" ref 106
symbol                                 based           structure                level 1 dcl 11-3 in procedure "error_"
symbol_node                            constant        bit(9)                   initial dcl 7-5 ref 98
temp_id                         000122 automatic       bit(27)                  packed unaligned dcl 152 set ref 176* 181
token                     5            based           pointer                  level 2 packed packed unaligned dcl 11-3 ref 99 103
token_node                             constant        bit(9)                   initial dcl 7-5 ref 96
token_pt                               based           pointer                  level 2 dcl 63 set ref 123* 201*
tp                                     parameter       pointer                  dcl 45 ref 38 91 139
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 7-27 ref 96 98
                                                                                  102 106 108

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 9-8
abs_fun                                internal static bit(9)                   initial dcl 9-8
acos_fun                               internal static bit(9)                   initial dcl 9-8
acosd_fun                              internal static bit(9)                   initial dcl 9-8
add                                    internal static bit(9)                   initial dcl 9-8
addbitno_fun                           internal static bit(9)                   initial dcl 9-8
addcharno_fun                          internal static bit(9)                   initial dcl 9-8
addr_fun                               internal static bit(9)                   initial dcl 9-8
addr_fun_bits                          internal static bit(9)                   initial dcl 9-8
addrel_fun                             internal static bit(9)                   initial dcl 9-8
adjust_count                    000000 constant        entry                    external dcl 1-20
allocation_fun                         internal static bit(9)                   initial dcl 9-8
allot_auto                             internal static bit(9)                   initial dcl 9-8
allot_based                            internal static bit(9)                   initial dcl 9-8
allot_ctl                              internal static bit(9)                   initial dcl 9-8
allot_var                              internal static bit(9)                   initial dcl 9-8
and_bits                               internal static bit(9)                   initial dcl 9-8
array_node                             internal static bit(9)                   initial dcl 7-5
asin_fun                               internal static bit(9)                   initial dcl 9-8
asind_fun                              internal static bit(9)                   initial dcl 9-8
assign                                 internal static bit(9)                   initial dcl 9-8
assign_by_name                         internal static bit(9)                   initial dcl 9-8
assign_round                           internal static bit(9)                   initial dcl 9-8
assign_size_ck                         internal static bit(9)                   initial dcl 9-8
assign_zero                            internal static bit(9)                   initial dcl 9-8
atan_fun                               internal static bit(9)                   initial dcl 9-8
atand_fun                              internal static bit(9)                   initial dcl 9-8
b_format                               internal static bit(9)                   initial dcl 9-8
baseno_fun                             internal static bit(9)                   initial dcl 9-8
baseptr_fun                            internal static bit(9)                   initial dcl 9-8
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
bit_pointer                            internal static bit(9)                   initial dcl 9-8
bit_to_char                            internal static bit(9)                   initial dcl 9-8
bit_to_word                            internal static bit(9)                   initial dcl 9-8
bitno_fun                              internal static bit(9)                   initial dcl 9-8
block_node                             internal static bit(9)                   initial dcl 7-5
bn_format                              internal static bit(9)                   initial dcl 9-8
bool_fun                               internal static bit(9)                   initial dcl 9-8
bound_ck                               internal static bit(9)                   initial dcl 9-8
bound_node                             internal static bit(9)                   initial dcl 7-5
by_name_agg_node                       internal static bit(9)                   initial dcl 7-5
byte_fun                               internal static bit(9)                   initial dcl 9-8
c_format                               internal static bit(9)                   initial dcl 9-8
cat_string                             internal static bit(9)                   initial dcl 9-8
ceil_fun                               internal static bit(9)                   initial dcl 9-8
char_to_word                           internal static bit(9)                   initial dcl 9-8
charno_fun                             internal static bit(9)                   initial dcl 9-8
clock_fun                              internal static bit(9)                   initial dcl 9-8
close_file                             internal static bit(9)                   initial dcl 9-8
codeptr_fun                            internal static bit(9)                   initial dcl 9-8
column_format                          internal static bit(9)                   initial dcl 9-8
compare_expression              000000 constant        entry                    external dcl 1-48
complex_fun                            internal static bit(9)                   initial dcl 9-8
conjg_fun                              internal static bit(9)                   initial dcl 9-8
constant_length                 000000 constant        entry                    external dcl 1-54
context_node                           internal static bit(9)                   initial dcl 7-5
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
copy_expression                 000000 constant        entry                    external dcl 1-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_string                            internal static bit(9)                   initial dcl 9-8
copy_unique_expression          000000 constant        entry                    external dcl 1-103
copy_words                             internal static bit(9)                   initial dcl 9-8
cos_fun                                internal static bit(9)                   initial dcl 9-8
cosd_fun                               internal static bit(9)                   initial dcl 9-8
create_array                    000000 constant        entry                    external dcl 1-108
create_block                    000000 constant        entry                    external dcl 1-112
create_bound                    000000 constant        entry                    external dcl 1-118
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_label                    000000 constant        entry                    external dcl 1-140
create_list                     000000 constant        entry                    external dcl 1-147
create_operator                 000000 constant        entry                    external dcl 1-152
create_reference                000000 constant        entry                    external dcl 1-158
create_statement                000000 constant        entry                    external dcl 1-163
create_statement$prologue       000000 constant        entry                    external dcl 1-171
create_storage                  000000 constant        entry                    external dcl 1-179
create_symbol                   000000 constant        entry                    external dcl 1-184
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
cross_reference_node                   internal static bit(9)                   initial dcl 7-5
decbin                          000000 constant        entry                    external dcl 1-206
declare_constant                000000 constant        entry                    external dcl 1-211
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_constant$integer        000000 constant        entry                    external dcl 1-234
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_integer                 000000 constant        entry                    external dcl 1-269
declare_picture                 000000 constant        entry                    external dcl 1-274
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
default_node                           internal static bit(9)                   initial dcl 7-5
delete_file                            internal static bit(9)                   initial dcl 9-8
desc_size                              internal static bit(9)                   initial dcl 9-8
digit_to_bit                           internal static bit(9)                   initial dcl 9-8
div                                    internal static bit(9)                   initial dcl 9-8
do_fun                                 internal static bit(9)                   initial dcl 9-8
do_spec                                internal static bit(9)                   initial dcl 9-8
e_format                               internal static bit(9)                   initial dcl 9-8
empty_area                             internal static bit(9)                   initial dcl 9-8
enable_on                              internal static bit(9)                   initial dcl 9-8
environmentptr_fun                     internal static bit(9)                   initial dcl 9-8
equal                                  internal static bit(9)                   initial dcl 9-8
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_                          000000 constant        entry                    external dcl 1-324
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
error_$no_text                  000000 constant        entry                    external dcl 1-334
ex_prologue                            internal static bit(9)                   initial dcl 9-8
exp                                    internal static bit(9)                   initial dcl 9-8
exp_fun                                internal static bit(9)                   initial dcl 9-8
f_format                               internal static bit(9)                   initial dcl 9-8
floor_fun                              internal static bit(9)                   initial dcl 9-8
format_value_node                      internal static bit(9)                   initial dcl 7-5
fortran_read                           internal static bit(9)                   initial dcl 9-8
fortran_write                          internal static bit(9)                   initial dcl 9-8
free_based                             internal static bit(9)                   initial dcl 9-8
free_ctl                               internal static bit(9)                   initial dcl 9-8
free_node                       000000 constant        entry                    external dcl 1-345
free_var                               internal static bit(9)                   initial dcl 9-8
ftn_file_manip                         internal static bit(9)                   initial dcl 9-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 9-8
get_array_size                  000000 constant        entry                    external dcl 1-348
get_data_trans                         internal static bit(9)                   initial dcl 9-8
get_edit_trans                         internal static bit(9)                   initial dcl 9-8
get_file                               internal static bit(9)                   initial dcl 9-8
get_list_trans                         internal static bit(9)                   initial dcl 9-8
get_size                        000000 constant        entry                    external dcl 1-352
get_string                             internal static bit(9)                   initial dcl 9-8
greater_or_equal                       internal static bit(9)                   initial dcl 9-8
greater_than                           internal static bit(9)                   initial dcl 9-8
half_to_word                           internal static bit(9)                   initial dcl 9-8
imag_fun                               internal static bit(9)                   initial dcl 9-8
index_after_fun                        internal static bit(9)                   initial dcl 9-8
index_before_fun                       internal static bit(9)                   initial dcl 9-8
index_fun                              internal static bit(9)                   initial dcl 9-8
index_rev_fun                          internal static bit(9)                   initial dcl 9-8
join                                   internal static bit(9)                   initial dcl 9-8
jump                                   internal static bit(9)                   initial dcl 9-8
jump_false                             internal static bit(9)                   initial dcl 9-8
jump_if_eq                             internal static bit(9)                   initial dcl 9-8
jump_if_ge                             internal static bit(9)                   initial dcl 9-8
jump_if_gt                             internal static bit(9)                   initial dcl 9-8
jump_if_le                             internal static bit(9)                   initial dcl 9-8
jump_if_lt                             internal static bit(9)                   initial dcl 9-8
jump_if_ne                             internal static bit(9)                   initial dcl 9-8
jump_true                              internal static bit(9)                   initial dcl 9-8
l_parn                                 internal static bit(9)                   initial dcl 9-8
label_array_element_node               internal static bit(9)                   initial dcl 7-5
length_fun                             internal static bit(9)                   initial dcl 9-8
less_or_equal                          internal static bit(9)                   initial dcl 9-8
less_than                              internal static bit(9)                   initial dcl 9-8
line_format                            internal static bit(9)                   initial dcl 9-8
list_node                              internal static bit(9)                   initial dcl 7-5
locate_file                            internal static bit(9)                   initial dcl 9-8
lock_file                              internal static bit(9)                   initial dcl 9-8
lock_fun                               internal static bit(9)                   initial dcl 9-8
log10_fun                              internal static bit(9)                   initial dcl 9-8
log2_fun                               internal static bit(9)                   initial dcl 9-8
log_fun                                internal static bit(9)                   initial dcl 9-8
loop                                   internal static bit(9)                   initial dcl 9-8
machine_state_node                     internal static bit(9)                   initial dcl 7-5
make_desc                              internal static bit(9)                   initial dcl 9-8
max_fun                                internal static bit(9)                   initial dcl 9-8
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 8-15
merge_attributes                000000 constant        entry                    external dcl 1-355
min_fun                                internal static bit(9)                   initial dcl 9-8
mod_bit                                internal static bit(9)                   initial dcl 9-8
mod_byte                               internal static bit(9)                   initial dcl 9-8
mod_fun                                internal static bit(9)                   initial dcl 9-8
mod_half                               internal static bit(9)                   initial dcl 9-8
mod_word                               internal static bit(9)                   initial dcl 9-8
mult                                   internal static bit(9)                   initial dcl 9-8
n                                      automatic       fixed bin(17,0)          dcl 47
negate                                 internal static bit(9)                   initial dcl 9-8
nop                                    internal static bit(9)                   initial dcl 9-8
not_bits                               internal static bit(9)                   initial dcl 9-8
not_equal                              internal static bit(9)                   initial dcl 9-8
off_fun                                internal static bit(9)                   initial dcl 9-8
open_file                              internal static bit(9)                   initial dcl 9-8
optimizer                       000000 constant        entry                    external dcl 1-361
or_bits                                internal static bit(9)                   initial dcl 9-8
pack                                   internal static bit(9)                   initial dcl 9-8
page_format                            internal static bit(9)                   initial dcl 9-8
param_desc_ptr                         internal static bit(9)                   initial dcl 9-8
param_ptr                              internal static bit(9)                   initial dcl 9-8
parse_error                     000000 constant        entry                    external dcl 1-364
parse_error$no_text             000000 constant        entry                    external dcl 1-368
picture_format                         internal static bit(9)                   initial dcl 9-8
pl1_mod_fun                            internal static bit(9)                   initial dcl 9-8
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
prefix_plus                            internal static bit(9)                   initial dcl 9-8
ptr_fun                                internal static bit(9)                   initial dcl 9-8
put_control                            internal static bit(9)                   initial dcl 9-8
put_data_trans                         internal static bit(9)                   initial dcl 9-8
put_edit_trans                         internal static bit(9)                   initial dcl 9-8
put_field                              internal static bit(9)                   initial dcl 9-8
put_field_chk                          internal static bit(9)                   initial dcl 9-8
put_file                               internal static bit(9)                   initial dcl 9-8
put_list_trans                         internal static bit(9)                   initial dcl 9-8
put_string                             internal static bit(9)                   initial dcl 9-8
r_format                               internal static bit(9)                   initial dcl 9-8
r_parn                                 internal static bit(9)                   initial dcl 9-8
range_ck                               internal static bit(9)                   initial dcl 9-8
rank_fun                               internal static bit(9)                   initial dcl 9-8
read_file                              internal static bit(9)                   initial dcl 9-8
real_fun                               internal static bit(9)                   initial dcl 9-8
record_io                              internal static bit(9)                   initial dcl 9-8
refer                                  internal static bit(9)                   initial dcl 9-8
refer_extent                    000000 constant        entry                    external dcl 1-426
rel_fun                                internal static bit(9)                   initial dcl 9-8
repeat_fun                             internal static bit(9)                   initial dcl 9-8
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
return_bits                            internal static bit(9)                   initial dcl 9-8
return_string                          internal static bit(9)                   initial dcl 9-8
return_value                           internal static bit(9)                   initial dcl 9-8
return_words                           internal static bit(9)                   initial dcl 9-8
reverse_fun                            internal static bit(9)                   initial dcl 9-8
revert_on                              internal static bit(9)                   initial dcl 9-8
rewrite_file                           internal static bit(9)                   initial dcl 9-8
round_fun                              internal static bit(9)                   initial dcl 9-8
search_fun                             internal static bit(9)                   initial dcl 9-8
search_rev_fun                         internal static bit(9)                   initial dcl 9-8
segno_fun                              internal static bit(9)                   initial dcl 9-8
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
setbitno_fun                           internal static bit(9)                   initial dcl 9-8
setcharno_fun                          internal static bit(9)                   initial dcl 9-8
sf_par_node                            internal static bit(9)                   initial dcl 7-5
share_expression                000000 constant        entry                    external dcl 1-454
sign_fun                               internal static bit(9)                   initial dcl 9-8
signal_on                              internal static bit(9)                   initial dcl 9-8
sin_fun                                internal static bit(9)                   initial dcl 9-8
sind_fun                               internal static bit(9)                   initial dcl 9-8
skip_format                            internal static bit(9)                   initial dcl 9-8
source_node                            internal static bit(9)                   initial dcl 7-5
sqrt_fun                               internal static bit(9)                   initial dcl 9-8
stack_ptr                              internal static bit(9)                   initial dcl 9-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 9-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 9-8
stacq_fun                              internal static bit(9)                   initial dcl 9-8
statement_node                         internal static bit(9)                   initial dcl 7-5
std_arg_list                           internal static bit(9)                   initial dcl 9-8
std_entry                              internal static bit(9)                   initial dcl 9-8
std_return                             internal static bit(9)                   initial dcl 9-8
stop                                   internal static bit(9)                   initial dcl 9-8
stream_prep                            internal static bit(9)                   initial dcl 9-8
sub                                    internal static bit(9)                   initial dcl 9-8
tan_fun                                internal static bit(9)                   initial dcl 9-8
tand_fun                               internal static bit(9)                   initial dcl 9-8
temporary_node                         internal static bit(9)                   initial dcl 7-5
terminate_trans                        internal static bit(9)                   initial dcl 9-8
token_to_binary                 000000 constant        entry                    external dcl 1-459
translate_fun                          internal static bit(9)                   initial dcl 9-8
trunc_fun                              internal static bit(9)                   initial dcl 9-8
unlock_file                            internal static bit(9)                   initial dcl 9-8
unpack                                 internal static bit(9)                   initial dcl 9-8
vclock_fun                             internal static bit(9)                   initial dcl 9-8
verify_fun                             internal static bit(9)                   initial dcl 9-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 9-8
verify_rev_fun                         internal static bit(9)                   initial dcl 9-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 9-8
word_to_mod2                           internal static bit(9)                   initial dcl 9-8
word_to_mod4                           internal static bit(9)                   initial dcl 9-8
word_to_mod8                           internal static bit(9)                   initial dcl 9-8
wordno_fun                             internal static bit(9)                   initial dcl 9-8
write_file                             internal static bit(9)                   initial dcl 9-8
x_format                               internal static bit(9)                   initial dcl 9-8
xor_bits                               internal static bit(9)                   initial dcl 9-8

NAMES DECLARED BY EXPLICIT CONTEXT.
common                          000071 constant        label                    dcl 91 ref 143
down                            000320 constant        label                    dcl 171 ref 193
error_                          000055 constant        entry                    external dcl 38
error_$finish                   000254 constant        entry                    external dcl 149
error_$initialize_error         000447 constant        entry                    external dcl 205
error_$no_text                  000242 constant        entry                    external dcl 139
found_token_node                000152 constant        label                    dcl 118 ref 96 100 104
up                              000350 constant        label                    dcl 177 ref 188

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       644        1514     460         654
Length      2144     460       650         414     163         622

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
error_                              131 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 ei                          error_
000012 error_info                  error_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
error_                   000100 sg                          error_
                         000101 ss                          error_
                         000102 sl                          error_
                         000104 p                           error_
                         000106 q                           error_
                         000110 i                           error_
                         000111 j                           error_
                         000112 k                           error_
                         000113 d                           error_
                         000114 buff_pt                     error_
                         000116 pj                          error_
                         000120 pk                          error_
                         000122 temp_id                     error_
                         000123 buffer                      error_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$cl                        pl1_error_print$listing_segment                             pl1_error_print$write_out
pl1_print$non_varying_nl

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cg_static_$debug              pl1_stat_$error_width         pl1_stat_$listing_on




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     38 000047        87 000062        88 000065        89 000067        91 000071        95 000075        96 000102
     98 000106        99 000111       100 000114       102 000115       103 000117       104 000122       106 000123
    108 000131       109 000133       111 000144       113 000146       114 000147       116 000151       118 000152
    122 000160       123 000163       124 000165       125 000170       127 000177       129 000201       133 000202
    135 000226       137 000235       139 000236       142 000247       143 000252       149 000253       158 000261
    159 000264       161 000266       162 000271       163 000273       167 000313       170 000316       171 000320
    173 000325       174 000337       175 000341       176 000345       177 000350       179 000353       181 000357
    182 000364       183 000372       184 000376       186 000402       187 000405       188 000406       191 000407
    193 000411       199 000414       200 000425       201 000431       203 000443       205 000445       208 000454
    210 000457


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
