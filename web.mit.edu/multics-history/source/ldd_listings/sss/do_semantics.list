	COMPILATION LISTING OF SEGMENT do_semantics
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1825.38_Fri_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* No journal comments present previous to 1983 !*/
       12 /* Modified 830106 BIM to note beginning of loop in statement so */
       13 /*		   compile_statement can align it to Y-pair. */
       14 do_semantics:	proc(blk,stmnt,tree);
       15 
       16 dcl	(blk,stmnt,tree) ptr,
       17 	(cv,cvref,o,o1,o2,o3,o4,p,q,ref,s,spec,v) ptr,
       18 	(first,last,next,label1,label2) ptr,
       19 	(first_statement,last_statement,next_statement,label1_statement,prof) ptr,
       20 	label_variable ptr,
       21 
       22 	e(3) ptr,
       23 
       24 	i fixed bin(15),
       25 	sign_of_by fixed bin(15),
       26 
       27 	(first_spec,first_time,multiple_spec) bit(1) aligned,
       28 	opcode bit(9) aligned;
       29 
       30 dcl	pl1_stat_$profile bit(1) aligned ext static;
       31 
       32 /* builtins */
       33 
       34 dcl	(null, string, substr) builtin;
       35 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
       36 
       37 
  8     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  8     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  8     3 /* format: style3,idind30 */
  8     4 
  8     5 declare	1 block			aligned based,
  8     6 	  2 node_type		bit (9) unaligned,
  8     7 	  2 source_id		structure unaligned,
  8     8 	    3 file_number		bit (8),
  8     9 	    3 line_number		bit (14),
  8    10 	    3 statement_number	bit (5),
  8    11 	  2 father		ptr unaligned,
  8    12 	  2 brother		ptr unaligned,
  8    13 	  2 son			ptr unaligned,
  8    14 	  2 declaration		ptr unaligned,
  8    15 	  2 end_declaration		ptr unaligned,
  8    16 	  2 default		ptr unaligned,
  8    17 	  2 end_default		ptr unaligned,
  8    18 	  2 context		ptr unaligned,
  8    19 	  2 prologue		ptr unaligned,
  8    20 	  2 end_prologue		ptr unaligned,
  8    21 	  2 main			ptr unaligned,
  8    22 	  2 end_main		ptr unaligned,
  8    23 	  2 return_values		ptr unaligned,
  8    24 	  2 return_count		ptr unaligned,
  8    25 	  2 plio_ps		ptr unaligned,
  8    26 	  2 plio_fa		ptr unaligned,
  8    27 	  2 plio_ffsb		ptr unaligned,
  8    28 	  2 plio_ssl		ptr unaligned,
  8    29 	  2 plio_fab2		ptr unaligned,
  8    30 	  2 block_type		bit (9) unaligned,
  8    31 	  2 prefix		bit (12) unaligned,
  8    32 	  2 like_attribute		bit (1) unaligned,
  8    33 	  2 no_stack		bit (1) unaligned,
  8    34 	  2 get_data		bit (1) unaligned,
  8    35 	  2 flush_at_call		bit (1) unaligned,
  8    36 	  2 processed		bit (1) unaligned,
  8    37 	  2 text_displayed		bit (1) unaligned,
  8    38 	  2 number		fixed bin (9) unsigned unaligned,
  8    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  8    40 	  2 temp_list		ptr,
  8    41 	  2 entry_list		ptr,
  8    42 	  2 o_and_s		ptr,
  8    43 	  2 why_nonquick		aligned,
  8    44 	    3 auto_adjustable_storage bit (1) unaligned,
  8    45 	    3 returns_star_extents	bit (1) unaligned,
  8    46 	    3 stack_extended_by_args	bit (1) unaligned,
  8    47 	    3 invoked_by_format	bit (1) unaligned,
  8    48 	    3 format_statement	bit (1) unaligned,
  8    49 	    3 io_statements		bit (1) unaligned,
  8    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  8    51 	    3 condition_statements	bit (1) unaligned,
  8    52 	    3 no_owner		bit (1) unaligned,
  8    53 	    3 recursive_call	bit (1) unaligned,
  8    54 	    3 options_non_quick	bit (1) unaligned,
  8    55 	    3 options_variable	bit (1) unaligned,
  8    56 	    3 never_referenced	bit (1) unaligned,
  8    57 	    3 pad_nonquick		bit (5) unaligned,
  8    58 	  2 prologue_flag		bit (1) unaligned,
  8    59 	  2 options_main		bit (1) unaligned,
  8    60 	  2 pad			bit (16) unaligned,
  8    61 	  2 number_of_entries	fixed bin (17),
  8    62 	  2 level			fixed bin (17),
  8    63 	  2 last_auto_loc		fixed bin (17),
  8    64 	  2 symbol_block		fixed bin (17),
  8    65 	  2 entry_info		fixed bin (18),
  8    66 	  2 enter			structure unaligned,
  8    67 	    3 start		fixed bin (17),
  8    68 	    3 end			fixed bin (17),
  8    69 	  2 leave			structure unaligned,
  8    70 	    3 start		fixed bin (17),
  8    71 	    3 end			fixed bin (17),
  8    72 	  2 owner			ptr;
  8    73 
  8    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  8    75 
  8    76 /* END INCLUDE FILE ... block.incl.pl1 */
       38 
  9     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
  9     2 
  9     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  9     4 
  9     5 dcl  (	by_declare	initial("001"b),
  9     6 	by_explicit_context initial("010"b),
  9     7 	by_context	initial("011"b),
  9     8 	by_implication	initial("100"b),
  9     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
  9    10 
  9    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       39 
 10     1 dcl	1 label			based aligned,
 10     2 	2 node_type		bit(9) unaligned,
 10     3 	2 source_id		structure unaligned,
 10     4 	  3 file_number		bit(8),
 10     5 	  3 line_number		bit(14),
 10     6 	  3 statement_number	bit(5),
 10     7 	2 location		fixed(17) unaligned,
 10     8 	2 allocated		bit(1) unaligned,
 10     9 	2 dcl_type		bit(3) unaligned,
 10    10 	2 reserved		bit(29) unaligned,
 10    11 	2 array			bit(1) unaligned,
 10    12 	2 used_as_format		bit(1) unaligned,
 10    13 	2 used_in_goto		bit(1) unaligned,
 10    14 	2 symbol_table		bit(18) unaligned,
 10    15 	2 low_bound		fixed(17) unaligned,
 10    16 	2 high_bound		fixed(17) unaligned,
 10    17 	2 block_node		ptr unaligned,
 10    18 	2 token			ptr unaligned,
 10    19 	2 next			ptr unaligned,
 10    20 	2 multi_use		ptr unaligned,
 10    21 	2 cross_reference		ptr unaligned,
 10    22 	2 statement		ptr unaligned;
       40 
 11     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 11     2 
 11     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 11     4 
 11     5 
 11     6 dcl	1 list		based aligned,
 11     7 	2 node_type	bit(9) unaligned,
 11     8 	2 reserved	bit(12) unaligned,
 11     9 	2 number		fixed(14) unaligned,
 11    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 11    11 
 11    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 11    13 	                    init(16383);
 11    14 
 11    15 /* END INCLUDE FILE ... list.incl.pl1 */
       41 
 12     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 12     2 
 12     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 12     4 
 12     5 dcl (	block_node		initial("000000001"b),
 12     6 	statement_node		initial("000000010"b),
 12     7 	operator_node		initial("000000011"b),
 12     8 	reference_node		initial("000000100"b),
 12     9 	token_node		initial("000000101"b),
 12    10 	symbol_node		initial("000000110"b),
 12    11 	context_node		initial("000000111"b),
 12    12 	array_node		initial("000001000"b),
 12    13 	bound_node		initial("000001001"b),
 12    14 	format_value_node		initial("000001010"b),
 12    15 	list_node			initial("000001011"b),
 12    16 	default_node		initial("000001100"b),
 12    17 	machine_state_node		initial("000001101"b),
 12    18 	source_node		initial("000001110"b),
 12    19 	label_node		initial("000001111"b),
 12    20 	cross_reference_node	initial("000010000"b),
 12    21 	sf_par_node		initial("000010001"b),
 12    22 	temporary_node		initial("000010010"b),
 12    23 	label_array_element_node	initial("000010011"b),
 12    24 	by_name_agg_node		initial("000010100"b))
 12    25 				bit(9) internal static aligned options(constant);
 12    26 
 12    27 dcl	1 node			based aligned,
 12    28 	2 type			unal bit(9),
 12    29 	2 source_id		unal structure,
 12    30 	  3 file_number		bit(8),
 12    31 	  3 line_number		bit(14),
 12    32 	  3 statement_number	bit(5);
 12    33 
 12    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       42 
 13     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 13     2 
 13     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 13     4 
 13     5 /* format: style3 */
 13     6 dcl	1 operator	based aligned,
 13     7 	  2 node_type	bit (9) unaligned,
 13     8 	  2 op_code	bit (9) unaligned,
 13     9 	  2 shared	bit (1) unaligned,
 13    10 	  2 processed	bit (1) unaligned,
 13    11 	  2 optimized	bit (1) unaligned,
 13    12 	  2 number	fixed (14) unaligned,
 13    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 13    14 
 13    15 dcl	max_number_of_operands
 13    16 			fixed bin (15) int static options (constant) initial (32767);
 13    17 
 13    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       43 
 14     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 14     2 
 14     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 14     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 14     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 14     6 /* Modified: 26 July 82 BIM wordno, segno */
 14     7 
 14     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 14     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 14    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 14    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 14    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 14    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 14    14 
 14    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 14    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 14    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 14    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 14    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 14    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 14    21 
 14    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 14    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 14    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 14    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 14    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 14    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 14    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 14    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 14    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 14    31 
 14    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 14    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 14    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 14    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 14    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 14    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 14    38 
 14    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 14    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 14    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 14    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 14    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 14    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 14    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 14    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 14    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 14    48 
 14    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 14    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 14    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 14    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 14    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 14    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 14    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 14    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 14    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 14    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 14    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 14    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 14    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 14    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 14    63 
 14    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 14    65*						   opnd(2) <- opnd(3) / 36		*/
 14    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 14    67*						   opnd(2) <- opnd(3) / 4		*/
 14    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 14    69*						   opnd(2) <- opnd(3) / 2		*/
 14    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 14    71 
 14    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 14    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 14    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 14    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 14    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 14    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 14    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 14    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 14    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 14    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 14    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 14    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 14    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 14    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 14    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 14    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 14    88 
 14    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 14    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 14    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 14    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 14    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 14    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 14    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 14    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 14    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 14    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 14    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 14   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 14   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 14   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 14   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 14   104 
 14   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 14   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 14   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 14   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 14   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 14   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 14   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 14   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 14   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 14   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 14   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 14   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 14   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 14   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 14   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 14   120 
 14   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 14   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 14   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 14   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 14   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 14   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 14   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 14   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 14   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 14   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 14   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 14   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 14   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 14   134 
 14   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 14   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 14   137 
 14   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 14   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 14   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 14   141*						   opnd(2) is the file name
 14   142*						   opnd(3) is the block	*/
 14   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 14   144*						   opnd(2) is the file name	*/
 14   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 14   146*						   opnd(2) is the file name */
 14   147 
 14   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 14   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 14   150*						   opnd(3) is old value, (4) is new value. */
 14   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 14   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 14   153 
 14   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 14   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 14   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 14   157*						   opnd(5) is the list */
 14   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 14   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 14   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 14   161 
 14   162 	r_parn		initial("011110001"b),	/* format op code			*/
 14   163 	l_parn		initial("011110010"b),
 14   164 	r_format		initial("011110011"b),
 14   165 	c_format		initial("011110100"b),
 14   166 	f_format		initial("011110101"b),
 14   167 	e_format		initial("011110110"b),
 14   168 	b_format		initial("011110111"b),
 14   169 	a_format		initial("011111000"b),
 14   170 	x_format		initial("011111001"b),
 14   171 	skip_format	initial("011111010"b),
 14   172 	column_format	initial("011111011"b),
 14   173 	page_format	initial("011111100"b),
 14   174 	line_format	initial("011111101"b),
 14   175 	picture_format	initial("011111110"b),
 14   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 14   177 
 14   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 14   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 14   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 14   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 14   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 14   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 14   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 14   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 14   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 14   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 14   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 14   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 14   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 14   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 14   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 14   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 14   194 
 14   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 14   196 /* They are processed by the semantic translator.						*/
 14   197 
 14   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 14   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 14   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 14   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 14   202 						/* opnd(3) is skip, opnd(4) is list	*/
 14   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 14   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 14   205 						/* opnd(3) is skip,opnd(4) is line	*/
 14   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 14   207 	open_file		initial("100011001"b),
 14   208 	close_file	initial("100011010"b),
 14   209 	read_file		initial("100011011"b),
 14   210 	write_file	initial("100011100"b),
 14   211 	locate_file	initial("100011101"b),
 14   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 14   213 						/* opnd(2) is control variable ref	*/
 14   214 						/* opnd(3) is specification operator	*/
 14   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 14   216 						/* repeat opnd(4) while opnd(5)	*/
 14   217 						/* opnd(6) is next specification	*/
 14   218 
 14   219 	rewrite_file	initial("100100000"b),
 14   220 	delete_file	initial("100100001"b),
 14   221 	unlock_file	initial("100100010"b),
 14   222 	lock_file		initial("100100011"b),
 14   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 14   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 14   225 	nop		initial("100100111"b),	/* no-op */
 14   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 14   227 
 14   228 /* These operators are produced by the semantic translator in processing the math
 14   229*   builtin functions and are used as input to the code generator			*/
 14   230 
 14   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 14   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 14   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 14   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 14   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 14   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 14   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 14   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 14   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 14   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 14   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 14   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 14   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 14   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 14   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 14   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 14   247 
 14   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 14   249 
 14   250 			bit(9) aligned internal static options(constant);
 14   251 
 14   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       44 
 15     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 15     2 
 15     3 dcl	1 reference		based aligned,
 15     4 	2 node_type		bit(9) unaligned,
 15     5 	2 array_ref		bit(1) unaligned,
 15     6 	2 varying_ref		bit(1) unaligned,
 15     7 	2 shared			bit(1) unaligned,
 15     8 	2 put_data_sw		bit(1) unaligned,
 15     9 	2 processed		bit(1) unaligned,
 15    10 	2 units			fixed(3) unaligned,
 15    11 	2 ref_count		fixed(17) unaligned,
 15    12 	2 c_offset		fixed(24),
 15    13 	2 c_length		fixed(24),
 15    14 	2 symbol			ptr unaligned,
 15    15 	2 qualifier		ptr unaligned,
 15    16 	2 offset			ptr unaligned,
 15    17 	2 length			ptr unaligned,
 15    18 	2 subscript_list		ptr unaligned,
 15    19 						/* these fields are used by the 645 code generator */
 15    20 	2 address			structure unaligned,
 15    21 	  3 base			bit(3),
 15    22 	  3 offset		bit(15),
 15    23 	  3 op			bit(9),
 15    24 	  3 no_address		bit(1),
 15    25 	  3 inhibit		bit(1),
 15    26 	  3 ext_base		bit(1),
 15    27 	  3 tag			bit(6),
 15    28 	2 info			structure unaligned,
 15    29 	  3 address_in		structure,
 15    30 	    4 b			dimension(0:7) bit(1),
 15    31 	    4 storage		bit(1),
 15    32 	  3 value_in		structure,
 15    33 	    4 a			bit(1),
 15    34 	    4 q			bit(1),
 15    35 	    4 aq			bit(1),
 15    36 	    4 string_aq		bit(1),
 15    37 	    4 complex_aq		bit(1),
 15    38 	    4 decimal_aq		bit(1),
 15    39 	    4 b			dimension(0:7) bit(1),
 15    40 	    4 storage		bit(1),
 15    41 	    4 indicators		bit(1),
 15    42 	    4 x			dimension(0:7) bit(1),
 15    43 	  3 other			structure,
 15    44 	    4 big_offset		bit(1),
 15    45 	    4 big_length		bit(1),
 15    46 	    4 modword_in_offset	bit(1),
 15    47 	2 data_type		fixed(5) unaligned,
 15    48 	2 bits			structure unaligned,
 15    49 	  3 padded_ref		bit(1),
 15    50 	  3 aligned_ref		bit(1),
 15    51 	  3 long_ref		bit(1),
 15    52 	  3 forward_ref		bit(1),
 15    53 	  3 ic_ref		bit(1),
 15    54 	  3 temp_ref		bit(1),
 15    55 	  3 defined_ref		bit(1),
 15    56 	  3 evaluated		bit(1),
 15    57 	  3 allocate		bit(1),
 15    58 	  3 allocated		bit(1),
 15    59 	  3 aliasable		bit(1),
 15    60 	  3 even			bit(1),
 15    61 	  3 perm_address		bit(1),
 15    62 	  3 aggregate		bit(1),
 15    63 	  3 hit_zero		bit(1),
 15    64 	  3 dont_save		bit(1),
 15    65 	  3 fo_in_qual		bit(1),
 15    66 	  3 hard_to_load		bit(1),
 15    67 	2 relocation		bit(12) unaligned,
 15    68 	2 more_bits		structure unaligned,
 15    69 	  3 substr		bit(1),
 15    70 	  3 padded_for_store_ref	bit(1),
 15    71 	  3 aligned_for_store_ref	bit(1),
 15    72 	  3 mbz			bit(15),
 15    73 	2 store_ins		bit(18) unaligned;
 15    74 
 15    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       45 
 16     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 16     2 
 16     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 16     4 
 16     5 dcl	context aligned bit(36),
 16     6 	this_context aligned bit(36);
 16     7 
 16     8 dcl	1 def_context		aligned based(addr(context)),
 16     9 	2 aggregate		unaligned bit(1),
 16    10 	2 arg_list		unaligned bit(1),
 16    11 	2 left_side		unaligned bit(1),
 16    12 	2 return			unaligned bit(1),
 16    13 	2 evaluate_offset		unaligned bit(1),
 16    14 	2 top			unaligned bit(1),
 16    15 	2 RHS_aggregate		unaligned bit(1),
 16    16 	2 return_from_empty		unaligned bit(1),
 16    17 	2 ignore_based		unaligned bit(1),
 16    18 	2 ext_param		unaligned bit(1),
 16    19 	2 cross_section		unaligned bit(1),
 16    20 	2 string_unspec		unaligned bit(1),
 16    21 	2 f_offset_to_be_added	unaligned bit(1),
 16    22 	2 suppress_cross_ref	unaligned bit(1),
 16    23 	2 by_name_assignment	unaligned bit(1),
 16    24 	2 by_name_lookup		unaligned bit(1),
 16    25 	2 pad			unaligned bit(20);
 16    26 
 16    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 16    28 
 16    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
       46 
 17     1 /* ***********************************************************
 17     2*   *                                                         *
 17     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 17     4*   *                                                         *
 17     5*   *********************************************************** */
 17     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 17     7 /* Internal interface of the PL/I compiler */
 17     8 
 17     9 dcl	1 statement		based aligned,
 17    10 	2 node_type		bit(9) unaligned,
 17    11 	2 source_id		structure unaligned,
 17    12 	  3 file_number		bit(8),
 17    13 	  3 line_number		bit(14),
 17    14 	  3 statement_number	bit(5),
 17    15 	2 next			ptr unaligned,
 17    16 	2 back			ptr unaligned,
 17    17 	2 root			ptr unaligned,
 17    18 	2 labels			ptr unaligned,
 17    19 	2 reference_list		ptr unaligned,
 17    20 	2 state_list		ptr unaligned,
 17    21 	2 reference_count		fixed(17) unaligned,
 17    22 	2 ref_count_copy		fixed(17) unaligned,
 17    23 	2 object			structure unaligned,
 17    24 	  3 start			fixed(17),
 17    25 	  3 finish		fixed(17),
 17    26 	2 source			structure unaligned,
 17    27 	  3 segment		fixed(11),
 17    28 	  3 start			fixed(23),
 17    29 	  3 length		fixed(11),
 17    30 	2 prefix			bit(12) unaligned,
 17    31 	2 optimized		bit(1) unaligned,
 17    32 	2 free_temps		bit(1) unaligned,
 17    33 	2 LHS_in_RHS		bit(1) unaligned,
 17    34 	2 statement_type		bit(9) unaligned,
 17    35 	2 bits			structure unaligned,
 17    36 	  3 processed		bit(1) unaligned,
 17    37 	  3 put_in_profile		bit(1) unaligned,
 17    38 	  3 generated		bit(1) unaligned,
 17    39 	  3 snap			bit(1) unaligned,
 17    40 	  3 system		bit(1) unaligned,
 17    41 	  3 irreducible		bit(1) unaligned,
 17    42 	  3 checked		bit(1) unaligned,
 17    43 	  3 save_temps		bit(1) unaligned,
 17    44 	  3 suppress_warnings	bit(1) unaligned,
 17    45 	  3 force_nonquick		bit(1) unaligned,
 17    46 	  3 expanded_by_name	bit(1) unaligned,
 17    47 	  3 begins_loop		bit(1) unaligned,
 17    48 	  3 pad			bit(24) unaligned;
 17    49 
 17    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       47 
 18     1 	/* statement types */
 18     2 
 18     3 dcl (	unknown_statement		initial("000000000"b),
 18     4 	allocate_statement		initial("000000001"b),
 18     5 	assignment_statement	initial("000000010"b),
 18     6 	begin_statement		initial("000000011"b),
 18     7 	call_statement		initial("000000100"b),
 18     8 	close_statement		initial("000000101"b),
 18     9 	declare_statement		initial("000000110"b),
 18    10 	lock_statement		initial("000000111"b),
 18    11 	delete_statement		initial("000001000"b),
 18    12 	display_statement		initial("000001001"b),
 18    13 	do_statement		initial("000001010"b),
 18    14 	else_clause		initial("000001011"b),
 18    15 	end_statement		initial("000001100"b),
 18    16 	entry_statement		initial("000001101"b),
 18    17 	exit_statement		initial("000001110"b),
 18    18 	format_statement		initial("000001111"b),
 18    19 	free_statement		initial("000010000"b),
 18    20 	get_statement		initial("000010001"b),
 18    21 	goto_statement		initial("000010010"b),
 18    22 	if_statement		initial("000010011"b),
 18    23 	locate_statement		initial("000010100"b),
 18    24 	null_statement		initial("000010101"b),
 18    25 	on_statement		initial("000010110"b),
 18    26 	open_statement		initial("000010111"b),
 18    27 	procedure_statement 	initial("000011000"b),
 18    28 	put_statement		initial("000011001"b),
 18    29 	read_statement		initial("000011010"b),
 18    30 	return_statement		initial("000011011"b),
 18    31 	revert_statement		initial("000011100"b),
 18    32 	rewrite_statement		initial("000011101"b),
 18    33 	signal_statement		initial("000011110"b),
 18    34 	stop_statement		initial("000011111"b),
 18    35 	system_on_unit		initial("000100000"b),
 18    36 	unlock_statement		initial("000100001"b),
 18    37 	wait_statement		initial("000100010"b),
 18    38 	write_statement		initial("000100011"b),
 18    39 	default_statement		initial("000100100"b),
 18    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
       48 
 19     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 19     2 
 19     3 dcl	1 symbol			based aligned,
 19     4 	2 node_type		bit(9) unal,
 19     5 	2 source_id		structure unal,
 19     6 	  3 file_number		bit(8),
 19     7 	  3 line_number		bit(14),
 19     8 	  3 statement_number	bit(5),
 19     9 	2 location		fixed(18) unal unsigned,
 19    10 	2 allocated		bit(1) unal,
 19    11 	2 dcl_type		bit(3) unal,
 19    12 	2 reserved		bit(6) unal,
 19    13 	2 pix			unal,
 19    14 	  3 pic_fixed		bit(1) unal,
 19    15 	  3 pic_float		bit(1) unal,
 19    16 	  3 pic_char		bit(1) unal,
 19    17 	  3 pic_scale		fixed(7) unal,
 19    18 	  3 pic_size		fixed(7) unal,
 19    19 	2 level			fixed(8) unal,
 19    20 	2 boundary		fixed(3) unal,
 19    21 	2 size_units		fixed(3) unal,
 19    22 	2 scale			fixed(7) unal,
 19    23 	2 runtime			bit(18) unal,
 19    24 	2 runtime_offset		bit(18) unal,
 19    25 	2 block_node		ptr unal,
 19    26 	2 token			ptr unal,
 19    27 	2 next			ptr unal,
 19    28 	2 multi_use		ptr unal,
 19    29 	2 cross_references		ptr unal,
 19    30 	2 initial			ptr unal,
 19    31 	2 array			ptr unal,
 19    32 	2 descriptor		ptr unal,
 19    33 	2 equivalence		ptr unal,
 19    34 	2 reference		ptr unal,
 19    35 	2 general			ptr unal,
 19    36 	2 father			ptr unal,
 19    37 	2 brother			ptr unal,
 19    38 	2 son			ptr unal,
 19    39 	2 word_size		ptr unal,
 19    40 	2 bit_size		ptr unal,
 19    41 	2 dcl_size		ptr unal,
 19    42 	2 symtab_size		ptr unal,
 19    43 	2 c_word_size		fixed(24),
 19    44 	2 c_bit_size		fixed(24),
 19    45 	2 c_dcl_size		fixed(24),
 19    46 
 19    47 	2 attributes		structure aligned,
 19    48 	  3 data_type		structure unal,
 19    49 	    4 structure		bit(1) ,
 19    50 	    4 fixed		bit(1),
 19    51 	    4 float		bit(1),
 19    52 	    4 bit			bit(1),
 19    53 	    4 char		bit(1),
 19    54 	    4 ptr			bit(1),
 19    55 	    4 offset		bit(1),
 19    56 	    4 area		bit(1),
 19    57 	    4 label		bit(1),
 19    58 	    4 entry		bit(1),
 19    59 	    4 file		bit(1),
 19    60 	    4 arg_descriptor	bit(1),
 19    61 	    4 storage_block		bit(1),
 19    62 	    4 explicit_packed	bit(1), /* options(packed) */
 19    63 	    4 condition		bit(1),
 19    64 	    4 format		bit(1),
 19    65 	    4 builtin		bit(1),
 19    66 	    4 generic		bit(1),
 19    67 	    4 picture		bit(1),
 19    68 
 19    69 	  3 misc_attributes		structure unal,
 19    70 	    4 dimensioned		bit(1),
 19    71 	    4 initialed		bit(1),
 19    72 	    4 aligned		bit(1),
 19    73 	    4 unaligned		bit(1),
 19    74 	    4 signed		bit(1),
 19    75 	    4 unsigned		bit(1),
 19    76 	    4 precision		bit(1),
 19    77 	    4 varying		bit(1),
 19    78 	    4 local		bit(1),
 19    79 	    4 decimal		bit(1),
 19    80 	    4 binary		bit(1),
 19    81 	    4 real		bit(1),
 19    82 	    4 complex		bit(1),
 19    83 	    4 variable		bit(1),
 19    84 	    4 reducible		bit(1),
 19    85 	    4 irreducible		bit(1),
 19    86 	    4 returns		bit(1),
 19    87 	    4 position		bit(1),
 19    88 	    4 internal		bit(1),
 19    89 	    4 external		bit(1),
 19    90 	    4 like		bit(1),
 19    91 	    4 member		bit(1),
 19    92 	    4 non_varying		bit(1),
 19    93 	    4 options		bit(1),
 19    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 19    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 19    96 
 19    97 	  3 storage_class		structure unal,
 19    98 	    4 auto		bit(1),
 19    99 	    4 based		bit(1),
 19   100 	    4 static		bit(1),
 19   101 	    4 controlled		bit(1),
 19   102 	    4 defined		bit(1),
 19   103 	    4 parameter		bit(1),
 19   104 	    4 param_desc		bit(1),
 19   105 	    4 constant		bit(1),
 19   106 	    4 temporary		bit(1),
 19   107 	    4 return_value		bit(1),
 19   108 
 19   109 	  3 file_attributes		structure unal,
 19   110 	    4 print		bit(1),
 19   111 	    4 input		bit(1),
 19   112 	    4 output		bit(1),
 19   113 	    4 update		bit(1),
 19   114 	    4 stream		bit(1),
 19   115 	    4 reserved_1		bit(1),
 19   116 	    4 record		bit(1),
 19   117 	    4 sequential		bit(1),
 19   118 	    4 direct		bit(1),
 19   119 	    4 interactive		bit(1),		/* env(interactive) */
 19   120 	    4 reserved_2		bit(1),
 19   121 	    4 reserved_3		bit(1),
 19   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 19   123 	    4 keyed		bit(1),
 19   124 	    4 reserved_4		bit(1),
 19   125 	    4 environment		bit(1),
 19   126 
 19   127 	  3 compiler_developed	structure unal,
 19   128 	    4 aliasable		bit(1),
 19   129 	    4 packed		bit(1),
 19   130 	    4 passed_as_arg		bit(1),
 19   131 	    4 allocate		bit(1),
 19   132 	    4 set			bit(1),
 19   133 	    4 exp_extents		bit(1),
 19   134 	    4 refer_extents		bit(1),
 19   135 	    4 star_extents		bit(1),
 19   136 	    4 isub		bit(1),
 19   137 	    4 put_in_symtab		bit(1),
 19   138 	    4 contiguous		bit(1),
 19   139 	    4 put_data		bit(1),
 19   140 	    4 overlayed		bit(1),
 19   141 	    4 error		bit(1),
 19   142 	    4 symtab_processed	bit(1),
 19   143 	    4 overlayed_by_builtin	bit(1),
 19   144 	    4 defaulted		bit(1),
 19   145 	    4 connected		bit(1);
 19   146 
 19   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       49 
 20     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 20     2 
 20     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 20     4 
 20     5 dcl (	max_p_flt_bin_1			initial(27),
 20     6 	max_p_flt_bin_2			initial(63),
 20     7 	max_p_fix_bin_1			initial(35),
 20     8 	max_p_fix_bin_2			initial(71),
 20     9 
 20    10 	max_p_dec				initial(59),
 20    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 20    12 
 20    13 	min_scale				initial(-128),
 20    14 	max_scale				initial(+127),
 20    15 	max_bit_string			initial(9437184),
 20    16 	max_char_string			initial(1048576),
 20    17 	max_area_size			initial(262144),
 20    18 	min_area_size			initial(28),
 20    19 
 20    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 20    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 20    22 	max_identifier_length		initial (256),
 20    23 	max_number_of_dimensions		initial (127),
 20    24 
 20    25 	max_length_precision		initial(24),
 20    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 20    27 
 20    28 	max_words_per_variable		initial (262144),
 20    29 
 20    30 	bits_per_word			initial(36),
 20    31 	bits_per_double			initial(72),
 20    32 	packed_digits_per_character		initial(2),
 20    33 	characters_per_half			initial(2),
 20    34 	characters_per_word			initial(4),
 20    35 	characters_per_double		initial(8),
 20    36 
 20    37 	bits_per_character			initial(9),
 20    38 	bits_per_half			initial(18),
 20    39 	bits_per_decimal_digit		initial(9),
 20    40 	bits_per_binary_exponent		initial(8),
 20    41 	bits_per_packed_ptr			initial(36),
 20    42 	words_per_packed_pointer		initial(1),
 20    43 
 20    44 	words_per_fix_bin_1			initial(1),
 20    45 	words_per_fix_bin_2			initial(2),
 20    46 	words_per_flt_bin_1			initial(1),
 20    47 	words_per_flt_bin_2			initial(2),
 20    48 	words_per_varying_string_header	initial(1),
 20    49 	words_per_offset			initial(1),
 20    50 	words_per_pointer			initial(2),
 20    51 	words_per_label_var			initial(4),
 20    52 	words_per_entry_var			initial(4),
 20    53 	words_per_file_var			initial(4),
 20    54 	words_per_format			initial(4),
 20    55 	words_per_condition_var		initial(6),
 20    56 
 20    57 	max_index_register_value		initial(262143),
 20    58 	max_signed_index_register_value	initial(131071),
 20    59 
 20    60 	max_signed_xreg_precision		initial(17),
 20    61 	max_uns_xreg_precision		initial(18),
 20    62 
 20    63 	default_area_size			initial(1024),
 20    64 	default_flt_bin_p			initial(27),
 20    65 	default_fix_bin_p			initial(17),
 20    66 	default_flt_dec_p			initial(10),
 20    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 20    68 
 20    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 20    70 
 20    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 20    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 20    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 20    74 	real_type			initial("001000000000000000000100000001100000"b),
 20    75 	complex_type		initial("001000000000000000000100000001010000"b),
 20    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 20    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 20    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 20    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 20    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 20    81 	bit_type			initial("000100000000000000000000000000000000"b),
 20    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 20    83 									options(constant);
 20    84 
 20    85 /* END INCLUDE FILE ... system.incl.pl1 */
       50 
 21     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 21     2 
 21     3 dcl	1 token			based aligned,
 21     4 	2 node_type		bit(9) unaligned,
 21     5 	2 type			bit(9) unaligned,
 21     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 21     7 	2 declaration		ptr unaligned,
 21     8 	2 next			ptr unaligned,
 21     9 	2 size			fixed(9),
 21    10 	2 string			char(n refer(token.size));
 21    11 
 21    12 /* END INCLUDE FILE ... token.incl.pl1 */
       51 
 22     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 22     2 
 22     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 22     4 	identifier	initial("100000000"b),
 22     5 	isub		initial("010000000"b),
 22     6 	plus		initial("001000001"b),
 22     7 	minus		initial("001000010"b),
 22     8 	asterisk		initial("001000011"b),
 22     9 	slash		initial("001000100"b),
 22    10 	expon		initial("001000101"b),
 22    11 	not		initial("001000110"b),
 22    12 	and		initial("001000111"b),
 22    13 	or		initial("001001000"b),
 22    14 	cat		initial("001001001"b),
 22    15 	eq		initial("001001010"b),
 22    16 	ne		initial("001001011"b),
 22    17 	lt		initial("001001100"b),
 22    18 	gt		initial("001001101"b),
 22    19 	le		initial("001001110"b),
 22    20 	ge		initial("001001111"b),
 22    21 	ngt		initial("001010000"b),
 22    22 	nlt		initial("001010001"b),
 22    23 	assignment	initial("001010010"b),
 22    24 	colon		initial("001010011"b),
 22    25 	semi_colon	initial("001010100"b),
 22    26 	comma		initial("001010101"b),
 22    27 	period		initial("001010110"b),
 22    28 	arrow		initial("001010111"b),
 22    29 	left_parn		initial("001011000"b),
 22    30 	right_parn	initial("001011001"b),
 22    31 	percent		initial("001011100"b),
 22    32 	bit_string	initial("000100001"b),
 22    33 	char_string	initial("000100010"b),
 22    34 	bin_integer	initial("000110001"b),
 22    35 	dec_integer	initial("000110011"b),
 22    36 	fixed_bin		initial("000110000"b),
 22    37 	fixed_dec		initial("000110010"b),
 22    38 	float_bin		initial("000110100"b),
 22    39 	float_dec		initial("000110110"b),
 22    40 	i_bin_integer	initial("000111001"b),
 22    41 	i_dec_integer	initial("000111011"b),
 22    42 	i_fixed_bin	initial("000111000"b),
 22    43 	i_fixed_dec	initial("000111010"b),
 22    44 	i_float_bin	initial("000111100"b),
 22    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 22    46 
 22    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 22    48 	is_isub			initial ("010000000"b),
 22    49 	is_delimiter		initial ("001000000"b),
 22    50 	is_constant		initial ("000100000"b),
 22    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 22    52 	is_arithmetic_constant	initial ("000110000"b),
 22    53 	is_imaginary_constant	initial ("000111000"b),
 22    54 	is_float_constant		initial ("000110100"b),
 22    55 	is_decimal_constant		initial ("000110010"b),
 22    56 	is_integral_constant 	initial ("000110001"b)
 22    57 	) bit(9) internal static aligned options(constant);
 22    58 
 22    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       52 
       53 
       54 			/*      */
       55 
       56 	first_time = "1"b;
       57 	last = tree->operand(1);
       58 	spec = tree->operand(3);
       59 	s = stmnt;
       60 	last_statement = last->label.statement;
       61 	if spec = null			/* "do;" statement */
       62 	then do;
       63 		last_statement->statement.reference_count = last_statement->statement.reference_count - 1;
       64 		go to ret;
       65 	     end;
       66 
       67 	first_spec = "1"b;
       68 	multiple_spec = spec->operand(6)^=null;
       69 
       70 	if multiple_spec
       71 	then do;
       72 /* first: ; */
       73 		first_statement = make_statement(s,null_statement,first);
       74 		first->label.statement->statement.reference_count = 1;
       75 
       76 		label_variable = declare_pointer(blk);
       77 		label_variable->reference.symbol->symbol.set = "1"b;
       78 
       79 		o = make_operator(jump,1,label_variable,null,null);
       80 /* goto label_variable; */
       81 		label1_statement = make_statement(last_statement,goto_statement,o);
       82 		label1_statement->statement.reference_count = 2;
       83 		label1_statement->statement.processed ="1"b;
       84 	end;
       85 
       86 	cv = tree->operand(2);
       87 
       88 	if cv^=null
       89 	then do;
       90 		v = cv;
       91 
       92 		if cv->node.type ^= reference_node
       93 		then do;
       94 			call semantic_translator$abort(145,cv);
       95 			go to ret;
       96 		end;
       97 
       98 		if cv->reference.symbol->node.type ^= symbol_node
       99 		then do;
      100 			call semantic_translator$abort(145,cv);
      101 			go to ret;
      102 		end;
      103 
      104 		if cv->reference.symbol->symbol.based
      105 		then do;
      106 			p = declare_pointer(blk);
      107 			q = v->reference.qualifier;
      108 			o = make_operator(assign,2,p,q,null);
      109 /* v->R.qualifier=cv->R.qualifier */
      110 			s = make_statement(s,assignment_statement,o);
      111 			v->reference.qualifier = p;
      112 		end;
      113 
      114 		if v->reference.offset^=null
      115 		then do;
      116 			p = declare_integer(blk);
      117 			q = v->reference.offset;
      118 			o = make_operator(assign,2,p,q,null);
      119 /* v->R.offset=cv->R.offset */
      120 			s = make_statement(s,assignment_statement,o);
      121 			v->reference.offset = p;
      122 		end;
      123 
      124 		if v->reference.length^=null
      125 		then do;
      126 			p = declare_integer(blk);
      127 			q = v->reference.length;
      128 			o = make_operator(assign,2,p,q,null);
      129 /* v->R.length=cv->R.length */
      130 			s = make_statement(s,assignment_statement,o);
      131 			v->reference.length = p;
      132 		end;
      133 	end;
      134 
      135 			/*      */
      136 
      137 	do while(spec^=null);
      138 		if multiple_spec
      139 		then do;
      140 /* label1: ; */
      141 			label1_statement = make_statement(label1_statement,null_statement,label1);
      142 			label1_statement->statement.reference_count = 2;
      143 
      144 			o = make_operator(assign,2,label_variable,label1,null);
      145 /* label_variable=label1; */
      146 			s = make_statement(s,assignment_statement,o);
      147 			s->statement.processed ="1"b;
      148 		end;
      149 		else do;
      150 			label1_statement = last_statement;
      151 			last_statement -> statement.reference_count = last_statement -> statement.reference_count - 1;
      152 		end;
      153 
      154 		e(1), e(2), e(3) = null;
      155 
      156 		sign_of_by = 0;
      157 
      158 		do i=1 to 3;
      159 			if spec->operand(i)^=null
      160 			then	if spec->operand(i)->node.type=token_node
      161 				then do;
      162 					e(i) = spec->operand(i);
      163 
      164 					if i=3
      165 					then	if spec->operand(3)->token.type & is_constant
      166 						then	if substr(spec->operand(3)->token.string,1,1)="-"
      167 							then	sign_of_by = -1;
      168 							else	sign_of_by =  1;
      169 				end;
      170 				else do;
      171 					if spec->operand(i)->node.type=operator_node
      172 					then	if spec->operand(i)->operator.op_code=loop
      173 						|  spec->operand(i)->operator.op_code=join
      174 						then	call semantic_translator$abort(140,null);
      175 						else	p = spec->operand(i)->operand(1);
      176 					else	p = spec->operand(i);
      177 
      178 					ref = p;
      179 
      180 					if p->node.type = reference_node
      181 					then do;
      182 						if p->reference.array_ref
      183 						then	call semantic_translator$abort(140,null);
      184 
      185 						p = p->reference.symbol;
      186 
      187 						if p->node.type = symbol_node
      188 						then do;
      189 							if p->symbol.area & spec->operand(4)=null
      190 							then	call semantic_translator$abort(143,p);
      191 
      192 							if p->symbol.dcl_size^=null & spec->operand(4)=null
      193 							then	call semantic_translator$abort(144,p);
      194 						end;
      195 					end;
      196 
      197 					if i=1
      198 					then	e(1) = spec->operand(1);
      199 
      200 					else	if p->symbol.constant & ref->reference.shared & i=2
      201 						/* by is too complicated for this optimization */
      202 					then	e(i) = spec->operand(i);
      203 
      204 					else do;
      205 /* e(i)=expr(i) */
      206 						q = create_symbol(blk,null,by_compiler);
      207 
      208 						if spec->operand(i)->node.type=operator_node
      209 						then do;
      210 							if spec->operand(i)->op_code^=std_call
      211 							then do;
      212 								q->symbol = p->symbol;
      213 								q->symbol.next = null;
      214 								q->symbol.block_node = blk;
      215 								e(i)  ,
      216 								spec->operand(i)->operand(1)  ,
      217 								q->symbol.reference = copy_expression(p->symbol.reference);
      218 								e(i)->reference.symbol = q;
      219 							end;
      220 							else do;
      221 								e(i) = spec->operand(i)->operand(1);
      222 								e(i)->reference.ref_count = e(i)->reference.ref_count+1;
      223 							end;
      224 
      225 							s = make_statement(s,assignment_statement,(spec->operand(i)));
      226 						end;
      227 						else do;
      228 							e(i) = q->symbol.reference;
      229 							q->symbol.temporary = "1"b;
      230 							o = make_operator(assign,2,e(i),(spec->operand(i)),null);
      231 
      232 							s = make_statement(s,assignment_statement,o);
      233 
      234 							context = "0"b;
      235 
      236 							s->statement.root = operator_semantics(blk,s,o,context);
      237 						end;
      238 
      239 						q->symbol.temporary = "0"b;
      240 						q->symbol.auto  ,
      241 						q->symbol.allocate  ,
      242 						s->statement.processed = "1"b;
      243 					end;
      244 				end;
      245 		end;
      246 
      247 		if e(1)^=null
      248 		then do;
      249 			o = make_operator(assign,2,copy_ref(v),e(1),null);
      250 /* v=e1; */
      251 			s = make_statement(s,assignment_statement,o);
      252 		end;
      253 
      254 		if e(2)=null & e(3)=null & spec->operand(4)=null & spec->operand(5)=null
      255 		then do;
      256 			next_statement = label1_statement;
      257 			goto next_spec;
      258 		end;
      259 /* next: ; */
      260 		next_statement = make_statement(label1_statement,null_statement,next);
      261 		next_statement->statement.reference_count = 1;
      262 		string(next_statement->statement.source_id) = string(last_statement->statement.source_id);
      263 
      264 		if spec->operand(2)^=null
      265 		|  spec->operand(3)^=null
      266 		|  spec->operand(4)^=null
      267 		|  spec->operand(5)^=null & cv=null
      268 		then do;
      269 /* label2: ; */
      270 			s = make_statement(s,null_statement,label2);
      271 		          s->statement.begins_loop = "1"b;
      272 			s->statement.reference_count = 2;
      273 
      274 		end;
      275 
      276 		if cv^=null
      277 		then do;
      278 			if e(2)^=null & e(3)=null
      279 			then do;
      280 				sign_of_by = 1;
      281 				e(3) = create_token("1",dec_integer);
      282 			end;
      283 
      284 			if e(3)^=null
      285 			then do;
      286 				o = make_operator(add,3,null,copy_ref(v),share_expression(e(3)));
      287 				o = make_operator(assign,2,copy_ref(v),o,null);
      288 /* v=v+e3; */
      289 				label1_statement = make_statement(label1_statement,assignment_statement,o);
      290 				string(label1_statement->statement.source_id) = string(last_statement->statement.source_id);
      291 			end;
      292 
      293 			if spec->operand(4)^=null
      294 			then do;
      295 				o = make_operator(assign,2,copy_ref(v),(spec->operand(4)),null);
      296 				label1_statement = make_statement(label1_statement,assignment_statement,o);
      297 				string(label1_statement->statement.source_id) = string(last_statement->statement.source_id);
      298 				o->operand(2) = expression_semantics(blk,label1_statement,(o->operand(2)),"0"b);
      299 			end;
      300 
      301 			if e(2)^=null
      302 			then	if sign_of_by=0
      303 				then do;
      304 					cvref = copy_ref(v);
      305 					if ^ cvref -> reference.shared
      306 					     then cvref -> reference.ref_count = 2;
      307 
      308 					o3 = make_operator(greater_or_equal,3,null,share_expression(e(3)),create_token("0",dec_integer));
      309 					o4 = make_operator(greater_than,3,null,cvref,share_expression(e(2)));
      310 					o1 = make_operator(and_bits,3,null,o3,o4);
      311 
      312 					o3 = make_operator(less_than,3,null,share_expression(e(3)),create_token("0",dec_integer));
      313 					o4 = make_operator(less_than,3,null,cvref,share_expression(e(2)));
      314 					o2 = make_operator(and_bits,3,null,o3,o4);
      315 
      316 					o = make_operator(or_bits,3,null,o1,o2);
      317 					o = make_operator(jump_true,2,next,o,null);
      318 
      319 
      320 /* if (e3>=0) & (v>e2) | (e3<0) & (v<e2) then goto next; */
      321 					s = make_statement(s,if_statement,o);
      322 				end;
      323 				else do;
      324 					if sign_of_by>0
      325 					then	opcode = jump_if_gt;
      326 					else	opcode = jump_if_lt;
      327 					o = make_operator(opcode,3,next,copy_ref(v),share_expression(e(2)));
      328 
      329 /* if v>e2 [v<e2] then goto next; */
      330 					s = make_statement(s,if_statement,o);
      331 				end;
      332 		end;
      333 	
      334 		if spec->operand(5)^=null
      335 		then do;
      336 			if spec->operand(5)->node.type^=operator_node
      337 			then	goto create_jump_operator;
      338 
      339 			opcode = spec->operand(5)->operator.op_code;
      340 
      341 			if opcode<less_than | opcode>greater_or_equal
      342 			then	goto create_jump_operator;
      343 
      344 			if opcode=equal
      345 			then	opcode = jump_if_ne;	else
      346 			if opcode=not_equal
      347 			then	opcode = jump_if_eq;	else
      348 			if opcode=less_than
      349 			then	opcode = jump_if_ge;	else
      350 			if opcode=greater_than
      351 			then	opcode = jump_if_le;	else
      352 			if opcode=less_or_equal
      353 			then	opcode = jump_if_gt;
      354 			else	opcode = jump_if_lt;
      355 
      356 			o = spec->operand(5);
      357 			o->operator.op_code = opcode;
      358 			o->operand(1) = next;
      359 
      360 			goto create_while_statement;
      361 
      362 create_jump_operator:
      363 			o = make_operator(jump_false,2,next,(spec->operand(5)),null);
      364 /* if ^e5 then goto next; */
      365 create_while_statement:
      366 			s = make_statement(s,if_statement,o);
      367 			o = expression_semantics(blk,s,o,"0"b);
      368 		end;
      369 
      370 		if e(3)^=null
      371 		|  spec->operand(4)^=null
      372 		|  spec->operand(5)^=null & cv=null
      373 		then do;
      374 			o = make_operator(jump,1,label2,null,null);
      375 /* goto label2; */
      376 			label1_statement = make_statement(label1_statement,goto_statement,o);
      377 			string(label1_statement->statement.source_id) = string(last_statement->statement.source_id);
      378 			label1_statement->statement.processed ="1"b;
      379 
      380 			if pl1_stat_$profile
      381 			then do;
      382 
      383 				/* we want 2 profile entries for do statement, so put
      384*				   out a statement with 0 id */
      385 
      386 				prof = label2->label.statement;
      387 				prof = create_statement(null_statement,prof,null,(prof->statement.prefix));
      388 				string(prof->statement.source_id) = "0"b;
      389 			end;
      390 		end;
      391 
      392 next_spec:
      393 		if ^first_spec
      394 		then do;
      395 			o = make_operator(jump,1,first,null,null);
      396 /* goto first */
      397 			s = make_statement(s,goto_statement,o);
      398 			first->label.statement->statement.reference_count = first->label.statement->statement.reference_count+1;
      399 			s->statement.processed ="1"b;
      400 		end;
      401 
      402 		else do;
      403 		     first_spec = "0"b;
      404 		end;
      405 		label1_statement  ,
      406 		s = next_statement;
      407 		spec = spec->operand(6);
      408 	end;
      409 
      410 	goto ret;
      411 
      412 
      413 			/*      */
      414 
      415 make_operator:	proc(opcode,number,opnd1,opnd2,opnd3) returns(ptr);
      416 
      417 dcl	opcode bit(9) aligned,
      418 
      419 	number fixed bin(15),
      420 
      421 	(op,opnd1,opnd2,opnd3) ptr;
      422 
      423 	op = create_operator(opcode,number);
      424 
      425 	if number >= 1
      426 	then do;
      427 		op -> operator.operand (1) = opnd1;
      428 
      429 		if number >= 2
      430 		then do;
      431 			op -> operator.operand (2) = opnd2;
      432 
      433 			if number >= 3
      434 			then op -> operator.operand (3) = opnd3;
      435 		     end;
      436 	     end;
      437 
      438 	return(op);
      439 
      440 	end make_operator;
      441 
      442 make_statement:	proc(st,type,opnd) returns(ptr);
      443 
      444 dcl	type bit(9) aligned,
      445 
      446 	(opnd,st,stp) ptr;
      447 
      448 	stp = create_statement(type,st,null,(st->statement.prefix));
      449 	stp->statement.generated = "1"b;
      450 
      451 	if type=null_statement
      452 	then do;
      453 		opnd = create_label(blk,null,by_compiler);
      454 		opnd->label.statement = stp;
      455 		stp->statement.labels = create_list(2);
      456 		stp->statement.labels->list.element(2) = opnd;
      457 
      458 		stp->statement.processed ="1"b;
      459 	end;
      460 	else	stp->statement.root = opnd;
      461 
      462 	return(stp);
      463 
      464 	end make_statement;
      465 
      466 copy_ref:	proc(pt) returns(ptr);
      467 
      468 dcl	(p,pt) ptr;
      469 
      470 	if first_time
      471 	then do;
      472 	     first_time = "0"b;
      473 	     return(pt);
      474 	     end;
      475 
      476 	if pt -> reference.shared
      477 	     then return(pt);
      478 
      479 	p = create_reference(null);
      480 	p -> reference = pt -> reference;
      481 
      482 	/* offset and length are known to be null or shared auto
      483*	   variables, so only check qualifier */
      484 
      485 	if p -> reference.qualifier ^= null
      486 	     then p -> reference.qualifier = share_expression((p -> reference.qualifier));
      487 
      488 	return(p);
      489 
      490 	end copy_ref;
      491 
      492 			/*      */
      493 
      494 ret:
      495 	call free_node(tree);
      496 
      497 	end do_semantics;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1825.3  do_semantics.pl1                  >udd>sm>ds>w>ml>do_semantics.pl1
36           1    07/21/80  1646.3  semant.incl.pl1                   >ldd>incl>semant.incl.pl1
1-228        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
38           8    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
39           9    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
40          10    05/06/74  1842.1  label.incl.pl1                    >ldd>incl>label.incl.pl1
41          11    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
42          12    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
43          13    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
44          14    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
45          15    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
46          16    07/21/80  1646.3  semantic_bits.incl.pl1            >ldd>incl>semantic_bits.incl.pl1
47          17    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
48          18    05/03/76  1420.4  statement_types.incl.pl1          >ldd>incl>statement_types.incl.pl1
49          19    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
50          20    12/07/83  1801.7  system.incl.pl1                   >ldd>incl>system.incl.pl1
51          21    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
52          22    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
add                             000015 constant        bit(9)                   initial dcl 14-8 set ref 286*
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref
                                                                                  240*
and_bits                        000014 constant        bit(9)                   initial dcl 14-8 set ref 310* 314*
area                     31(07)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref 189
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 15-3 set ref 182
assign                          000022 constant        bit(9)                   initial dcl 14-8 set ref 108* 118* 128* 144* 230*
                                                                                  249* 287* 295*
assignment_statement            000004 constant        bit(9)                   initial dcl 18-3 set ref 110* 120* 130* 146* 225*
                                                                                  232* 251* 289* 296*
attributes               31            based           structure                level 2 dcl 19-3
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref
                                                                                  240*
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref 104
begins_loop              13(11)        based           bit(1)                   level 3 packed packed unaligned dcl 17-9 set ref
                                                                                  271*
bits                     13            based           structure                level 2 packed packed unaligned dcl 17-9
blk                                    parameter       pointer                  dcl 16 set ref 14 76* 106* 116* 126* 206* 214 236*
                                                                                  298* 367* 453*
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 19-3 set ref
                                                                                  214*
by_compiler                     000016 constant        bit(3)                   initial dcl 9-5 set ref 206* 453*
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 19-3
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref 200
context                         000174 automatic       bit(36)                  dcl 16-5 set ref 234* 236*
copy_expression                 000016 constant        entry                    external dcl 2-94 ref 215
create_label                    000020 constant        entry                    external dcl 2-140 ref 453
create_list                     000022 constant        entry                    external dcl 2-147 ref 455
create_operator                 000024 constant        entry                    external dcl 2-152 ref 423
create_reference                000026 constant        entry                    external dcl 2-158 ref 479
create_statement                000030 constant        entry                    external dcl 2-163 ref 387 448
create_symbol                   000032 constant        entry                    external dcl 2-184 ref 206
create_token                    000034 constant        entry                    external dcl 2-191 ref 281 308 308 312 312
cv                              000100 automatic       pointer                  dcl 16 set ref 86* 88 90 92 94* 98 100* 104 264 276
                                                                                  370
cvref                           000102 automatic       pointer                  dcl 16 set ref 304* 305 305 309* 313*
data_type                31            based           structure                level 3 packed packed unaligned dcl 19-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 19-3 set ref 192
dec_integer                     000000 constant        bit(9)                   initial dcl 22-3 set ref 281* 308* 308* 312* 312*
declare_integer                 000036 constant        entry                    external dcl 2-269 ref 116 126
declare_pointer                 000040 constant        entry                    external dcl 2-287 ref 76 106
def_context                            based           structure                level 1 dcl 16-8
e                               000160 automatic       pointer                  array dcl 16 set ref 154* 154* 154* 162* 197* 200*
                                                                                  215* 218 221* 222 222 228* 230* 247 249* 254 254
                                                                                  278 278 281* 284 286* 286* 301 308* 308* 309* 309*
                                                                                  312* 312* 313* 313* 327* 327* 370
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 11-6 set
                                                                                  ref 456*
equal                                  constant        bit(9)                   initial dcl 14-8 ref 344
expression_semantics            000012 constant        entry                    external dcl 1-105 ref 298 367
first                           000132 automatic       pointer                  dcl 16 set ref 73* 74 395* 398 398
first_spec                      000170 automatic       bit(1)                   dcl 16 set ref 67* 392 403*
first_statement                 000144 automatic       pointer                  dcl 16 set ref 73*
first_time                      000171 automatic       bit(1)                   dcl 16 set ref 56* 470 472*
free_node                       000042 constant        entry                    external dcl 2-345 ref 494
generated                13(02)        based           bit(1)                   level 3 packed packed unaligned dcl 17-9 set ref
                                                                                  449*
goto_statement                  000003 constant        bit(9)                   initial dcl 18-3 set ref 81* 376* 397*
greater_or_equal                000010 constant        bit(9)                   initial dcl 14-8 set ref 308* 341
greater_than                    000011 constant        bit(9)                   initial dcl 14-8 set ref 309* 349
i                               000166 automatic       fixed bin(15,0)          dcl 16 set ref 158* 159 159 162 162 164 171 171 171
                                                                                  175 176 197 200 200 200 208 210 215 215 218 221
                                                                                  221 222 222 225 228 230 230*
if_statement                    000002 constant        bit(9)                   initial dcl 18-3 set ref 321* 330* 365*
is_constant                            constant        bit(9)                   initial dcl 22-47 ref 164
join                                   constant        bit(9)                   initial dcl 14-8 ref 171
jump                            000007 constant        bit(9)                   initial dcl 14-8 set ref 79* 374* 395*
jump_false                      000005 constant        bit(9)                   initial dcl 14-8 set ref 362*
jump_if_eq                             constant        bit(9)                   initial dcl 14-8 ref 345
jump_if_ge                             constant        bit(9)                   initial dcl 14-8 ref 347
jump_if_gt                             constant        bit(9)                   initial dcl 14-8 ref 324 351
jump_if_le                             constant        bit(9)                   initial dcl 14-8 ref 349
jump_if_lt                             constant        bit(9)                   initial dcl 14-8 ref 326 354
jump_if_ne                             constant        bit(9)                   initial dcl 14-8 ref 344
jump_true                       000006 constant        bit(9)                   initial dcl 14-8 set ref 317*
label                                  based           structure                level 1 dcl 10-1
label1                          000140 automatic       pointer                  dcl 16 set ref 141* 144*
label1_statement                000152 automatic       pointer                  dcl 16 set ref 81* 82 83 141* 141* 142 150* 256 260*
                                                                                  289* 289* 290 296* 296* 297 298* 376* 376* 377 378
                                                                                  405*
label2                          000142 automatic       pointer                  dcl 16 set ref 270* 374* 386
label_variable                  000156 automatic       pointer                  dcl 16 set ref 76* 77 79* 144*
labels                    4            based           pointer                  level 2 packed packed unaligned dcl 17-9 set ref
                                                                                  455* 456
last                            000134 automatic       pointer                  dcl 16 set ref 57* 60
last_statement                  000146 automatic       pointer                  dcl 16 set ref 60* 63 63 81* 150 151 151 262 290 297
                                                                                  377
length                    6            based           pointer                  level 2 packed packed unaligned dcl 15-3 set ref 124
                                                                                  127 131*
less_or_equal                          constant        bit(9)                   initial dcl 14-8 ref 351
less_than                       000012 constant        bit(9)                   initial dcl 14-8 set ref 312* 313* 341 347
list                                   based           structure                level 1 dcl 11-6
loop                                   constant        bit(9)                   initial dcl 14-8 ref 171
multiple_spec                   000172 automatic       bit(1)                   dcl 16 set ref 68* 70 138
next                      6            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 19-3 in procedure "do_semantics" set
                                                                                  ref 213*
next                            000136 automatic       pointer                  dcl 16 in procedure "do_semantics" set ref 260* 317*
                                                                                  327* 358 362*
next_statement                  000150 automatic       pointer                  dcl 16 set ref 256* 260* 261 262 405
node                                   based           structure                level 1 dcl 12-27
not_equal                              constant        bit(9)                   initial dcl 14-8 ref 345
null                                                   builtin function         dcl 34 ref 61 68 79 79 79 79 88 108 108 114 118 118
                                                                                  124 128 128 137 144 144 154 159 171 171 182 182
                                                                                  189 192 192 206 206 213 230 230 247 249 249 254
                                                                                  254 254 254 264 264 264 264 264 276 278 278 284
                                                                                  286 286 287 287 293 295 295 301 308 308 309 309
                                                                                  310 310 312 312 313 313 314 314 316 316 317 317
                                                                                  334 362 362 370 370 370 370 374 374 374 374 387
                                                                                  387 395 395 395 395 448 448 453 453 479 479 485
null_statement                  000001 constant        bit(9)                   initial dcl 18-3 set ref 73* 141* 260* 270* 387* 451
number                                 parameter       fixed bin(15,0)          dcl 417 set ref 415 423* 425 429 433
o                               000104 automatic       pointer                  dcl 16 set ref 79* 81* 108* 110* 118* 120* 128* 130*
                                                                                  144* 146* 230* 232* 236* 249* 251* 286* 287* 287*
                                                                                  289* 295* 296* 298 298 316* 317* 317* 321* 327*
                                                                                  330* 356* 357 358 362* 365* 367* 367* 374* 376*
                                                                                  395* 397*
o1                              000106 automatic       pointer                  dcl 16 set ref 310* 316*
o2                              000110 automatic       pointer                  dcl 16 set ref 314* 316*
o3                              000112 automatic       pointer                  dcl 16 set ref 308* 310* 312* 314*
o4                              000114 automatic       pointer                  dcl 16 set ref 309* 310* 313* 314*
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 15-3 set ref 114
                                                                                  117 121*
op                              000204 automatic       pointer                  dcl 417 set ref 423* 427 431 433 438
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 13-6 set ref 171
                                                                                  171 210 339 357*
opcode                          000173 automatic       bit(9)                   dcl 16 in procedure "do_semantics" set ref 324* 326*
                                                                                  327* 339* 341 341 344 344* 345 345* 347 347* 349
                                                                                  349* 351 351* 354* 357
opcode                                 parameter       bit(9)                   dcl 417 in procedure "make_operator" set ref 415
                                                                                  423*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 13-6 set
                                                                                  ref 57 58 68 86 159 159 162 164 164 171 171 171
                                                                                  175 175 176 189 192 197 200 208 210 215* 215 221
                                                                                  221 225 230 254 254 264 264 264 264 293 295 298*
                                                                                  298 334 336 339 356 358* 362 370 370 407 427* 431*
                                                                                  433*
operator                               based           structure                level 1 dcl 13-6
operator_node                          constant        bit(9)                   initial dcl 12-5 ref 171 208 336
operator_semantics              000014 constant        entry                    external dcl 1-184 ref 236
opnd                                   parameter       pointer                  dcl 444 set ref 442 453* 454 456 460
opnd1                                  parameter       pointer                  dcl 417 ref 415 427
opnd2                                  parameter       pointer                  dcl 417 ref 415 431
opnd3                                  parameter       pointer                  dcl 417 ref 415 433
or_bits                         000013 constant        bit(9)                   initial dcl 14-8 set ref 316*
p                               000224 automatic       pointer                  dcl 468 in procedure "copy_ref" set ref 479* 480 485
                                                                                  485 485 488
p                               000116 automatic       pointer                  dcl 16 in procedure "do_semantics" set ref 106* 108*
                                                                                  111 116* 118* 121 126* 128* 131 175* 176* 178 180
                                                                                  182 185* 185 187 189 189* 192 192* 200 212 215
pl1_stat_$profile               000010 external static bit(1)                   dcl 30 ref 380
prefix                   12(12)        based           bit(12)                  level 2 packed packed unaligned dcl 17-9 ref 387 448
processed                13            based           bit(1)                   level 3 packed packed unaligned dcl 17-9 set ref 83*
                                                                                  147* 240* 378* 399* 458*
prof                            000154 automatic       pointer                  dcl 16 set ref 386* 387* 387* 387 388
pt                                     parameter       pointer                  dcl 468 ref 466 473 476 476 480
q                               000120 automatic       pointer                  dcl 16 set ref 107* 108* 117* 118* 127* 128* 206*
                                                                                  212 213 214 215 218 228 229 239 240 240
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 15-3 set ref 107
                                                                                  111* 485 485* 485
ref                             000122 automatic       pointer                  dcl 16 set ref 178* 200
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 15-3 set ref
                                                                                  222* 222 305*
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 19-3 in procedure "do_semantics" set
                                                                                  ref 215* 215* 228
reference                              based           structure                level 1 dcl 15-3 in procedure "do_semantics" set ref
                                                                                  480* 480
reference_count           7            based           fixed bin(17,0)          level 2 packed packed unaligned dcl 17-9 set ref 63*
                                                                                  63 74* 82* 142* 151* 151 261* 272* 398* 398
reference_node                         constant        bit(9)                   initial dcl 12-5 ref 92 180
root                      3            based           pointer                  level 2 packed packed unaligned dcl 17-9 set ref
                                                                                  236* 460*
s                               000124 automatic       pointer                  dcl 16 set ref 59* 73* 110* 110* 120* 120* 130* 130*
                                                                                  146* 146* 147 225* 225* 232* 232* 236 236* 240
                                                                                  251* 251* 270* 270* 271 272 321* 321* 330* 330*
                                                                                  365* 365* 367* 397* 397* 399 405*
semantic_translator$abort       000044 constant        entry                    external dcl 2-446 ref 94 100 171 182 189 192
set                      33(03)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref 77*
share_expression                000046 constant        entry                    external dcl 2-454 ref 286 286 308 308 309 309 312
                                                                                  312 313 313 327 327 485
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 15-3 set ref 200
                                                                                  305 476
sign_of_by                      000167 automatic       fixed bin(15,0)          dcl 16 set ref 156* 164* 168* 280* 301 324
size                      3            based           fixed bin(9,0)           level 2 dcl 21-3 ref 164
source_id                 0(09)        based           structure                level 2 packed packed unaligned dcl 17-9 set ref
                                                                                  262* 262 290* 290 297* 297 377* 377 388*
spec                            000126 automatic       pointer                  dcl 16 set ref 58* 61 68 137 159 159 162 164 164 171
                                                                                  171 171 175 176 189 192 197 200 208 210 215 221
                                                                                  225 230 254 254 264 264 264 264 293 295 334 336
                                                                                  339 356 362 370 370 407* 407
st                                     parameter       pointer                  dcl 444 set ref 442 448* 448
statement                              based           structure                level 1 dcl 17-9 in procedure "do_semantics"
statement                11            based           pointer                  level 2 in structure "label" packed packed unaligned
                                                                                  dcl 10-1 in procedure "do_semantics" set ref 60 74
                                                                                  386 398 398 454*
std_call                               constant        bit(9)                   initial dcl 14-8 ref 210
stmnt                                  parameter       pointer                  dcl 16 ref 14 59
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 19-3
stp                             000214 automatic       pointer                  dcl 444 set ref 448* 449 454 455 456 458 460 462
string                    4            based           char                     level 2 in structure "token" dcl 21-3 in procedure
                                                                                  "do_semantics" ref 164
string                                                 builtin function         dcl 34 in procedure "do_semantics" set ref 262* 262
                                                                                  290* 290 297* 297 377* 377 388*
substr                                                 builtin function         dcl 34 ref 164
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 15-3 in procedure "do_semantics" set
                                                                                  ref 77 98 104 185 218*
symbol                                 based           structure                level 1 dcl 19-3 in procedure "do_semantics" set ref
                                                                                  212* 212
symbol_node                            constant        bit(9)                   initial dcl 12-5 ref 98 187
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 19-3 set ref
                                                                                  229* 239*
token                                  based           structure                level 1 dcl 21-3
token_node                             constant        bit(9)                   initial dcl 12-5 ref 159
tree                                   parameter       pointer                  dcl 16 set ref 14 57 58 86 494*
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 12-27 in procedure "do_semantics" ref 92 98
                                                                                  159 171 180 187 208 336
type                                   parameter       bit(9)                   dcl 444 in procedure "make_statement" set ref 442
                                                                                  448* 451
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 21-3 in procedure "do_semantics" ref 164
v                               000130 automatic       pointer                  dcl 16 set ref 90* 107 111 114 117 121 124 127 131
                                                                                  249* 249* 286* 286* 287* 287* 295* 295* 304* 327*
                                                                                  327*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 14-8
abs_fun                                internal static bit(9)                   initial dcl 14-8
acos_fun                               internal static bit(9)                   initial dcl 14-8
acosd_fun                              internal static bit(9)                   initial dcl 14-8
addbitno_fun                           internal static bit(9)                   initial dcl 14-8
addcharno_fun                          internal static bit(9)                   initial dcl 14-8
addr_fun                               internal static bit(9)                   initial dcl 14-8
addr_fun_bits                          internal static bit(9)                   initial dcl 14-8
addrel_fun                             internal static bit(9)                   initial dcl 14-8
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocate_statement                     internal static bit(9)                   initial dcl 18-3
allocation_fun                         internal static bit(9)                   initial dcl 14-8
allot_auto                             internal static bit(9)                   initial dcl 14-8
allot_based                            internal static bit(9)                   initial dcl 14-8
allot_ctl                              internal static bit(9)                   initial dcl 14-8
allot_var                              internal static bit(9)                   initial dcl 14-8
and                                    internal static bit(9)                   initial dcl 22-3
arg_desc_type                          internal static bit(36)                  initial dcl 20-71
array_node                             internal static bit(9)                   initial dcl 12-5
arrow                                  internal static bit(9)                   initial dcl 22-3
asin_fun                               internal static bit(9)                   initial dcl 14-8
asind_fun                              internal static bit(9)                   initial dcl 14-8
assign_by_name                         internal static bit(9)                   initial dcl 14-8
assign_round                           internal static bit(9)                   initial dcl 14-8
assign_size_ck                         internal static bit(9)                   initial dcl 14-8
assign_zero                            internal static bit(9)                   initial dcl 14-8
assignment                             internal static bit(9)                   initial dcl 22-3
asterisk                               internal static bit(9)                   initial dcl 22-3
atan_fun                               internal static bit(9)                   initial dcl 14-8
atand_fun                              internal static bit(9)                   initial dcl 14-8
b_format                               internal static bit(9)                   initial dcl 14-8
baseno_fun                             internal static bit(9)                   initial dcl 14-8
baseptr_fun                            internal static bit(9)                   initial dcl 14-8
begin_statement                        internal static bit(9)                   initial dcl 18-3
bin_integer                            internal static bit(9)                   initial dcl 22-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_pointer                            internal static bit(9)                   initial dcl 14-8
bit_string                             internal static bit(9)                   initial dcl 22-3
bit_to_char                            internal static bit(9)                   initial dcl 14-8
bit_to_word                            internal static bit(9)                   initial dcl 14-8
bit_type                               internal static bit(36)                  initial dcl 20-71
bitno_fun                              internal static bit(9)                   initial dcl 14-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 20-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 20-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 20-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 20-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 20-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 20-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 20-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 20-5
block                                  based           structure                level 1 dcl 8-5
block_node                             internal static bit(9)                   initial dcl 12-5
bn_format                              internal static bit(9)                   initial dcl 14-8
bool_fun                               internal static bit(9)                   initial dcl 14-8
bound_ck                               internal static bit(9)                   initial dcl 14-8
bound_node                             internal static bit(9)                   initial dcl 12-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 20-71
by_context                             internal static bit(3)                   initial dcl 9-5
by_declare                             internal static bit(3)                   initial dcl 9-5
by_explicit_context                    internal static bit(3)                   initial dcl 9-5
by_implication                         internal static bit(3)                   initial dcl 9-5
by_name_agg_node                       internal static bit(9)                   initial dcl 12-5
byte_fun                               internal static bit(9)                   initial dcl 14-8
c_format                               internal static bit(9)                   initial dcl 14-8
call_statement                         internal static bit(9)                   initial dcl 18-3
cat                                    internal static bit(9)                   initial dcl 22-3
cat_string                             internal static bit(9)                   initial dcl 14-8
ceil_fun                               internal static bit(9)                   initial dcl 14-8
char_string                            internal static bit(9)                   initial dcl 22-3
char_to_word                           internal static bit(9)                   initial dcl 14-8
char_type                              internal static bit(36)                  initial dcl 20-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 20-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 20-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 20-5
charno_fun                             internal static bit(9)                   initial dcl 14-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 14-8
close_file                             internal static bit(9)                   initial dcl 14-8
close_statement                        internal static bit(9)                   initial dcl 18-3
codeptr_fun                            internal static bit(9)                   initial dcl 14-8
colon                                  internal static bit(9)                   initial dcl 22-3
column_format                          internal static bit(9)                   initial dcl 14-8
comma                                  internal static bit(9)                   initial dcl 22-3
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 14-8
complex_type                           internal static bit(36)                  initial dcl 20-71
conjg_fun                              internal static bit(9)                   initial dcl 14-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 12-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 18-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 14-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 14-8
cos_fun                                internal static bit(9)                   initial dcl 14-8
cosd_fun                               internal static bit(9)                   initial dcl 14-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 12-5
dec_integer_type                       internal static bit(36)                  initial dcl 20-71
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_statement                      internal static bit(9)                   initial dcl 18-3
declare_structure               000000 constant        entry                    external dcl 1-44
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
def_this_context                       based           structure                level 1 dcl 16-27
default_area_size                      internal static fixed bin(31,0)          initial dcl 20-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 20-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 20-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 20-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 20-5
default_node                           internal static bit(9)                   initial dcl 12-5
default_statement                      internal static bit(9)                   initial dcl 18-3
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 14-8
delete_statement                       internal static bit(9)                   initial dcl 18-3
desc_size                              internal static bit(9)                   initial dcl 14-8
digit_to_bit                           internal static bit(9)                   initial dcl 14-8
display_statement                      internal static bit(9)                   initial dcl 18-3
div                                    internal static bit(9)                   initial dcl 14-8
do_fun                                 internal static bit(9)                   initial dcl 14-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 14-8
do_statement                           internal static bit(9)                   initial dcl 18-3
e_format                               internal static bit(9)                   initial dcl 14-8
else_clause                            internal static bit(9)                   initial dcl 18-3
empty_area                             internal static bit(9)                   initial dcl 14-8
enable_on                              internal static bit(9)                   initial dcl 14-8
end_statement                          internal static bit(9)                   initial dcl 18-3
entry_statement                        internal static bit(9)                   initial dcl 18-3
entry_var_type                         internal static bit(36)                  initial dcl 20-71
environmentptr_fun                     internal static bit(9)                   initial dcl 14-8
eq                                     internal static bit(9)                   initial dcl 22-3
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 14-8
exit_statement                         internal static bit(9)                   initial dcl 18-3
exp                                    internal static bit(9)                   initial dcl 14-8
exp_fun                                internal static bit(9)                   initial dcl 14-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expon                                  internal static bit(9)                   initial dcl 22-3
f_format                               internal static bit(9)                   initial dcl 14-8
fill_refer                      000000 constant        entry                    external dcl 1-113
fixed_bin                              internal static bit(9)                   initial dcl 22-3
fixed_dec                              internal static bit(9)                   initial dcl 22-3
float_bin                              internal static bit(9)                   initial dcl 22-3
float_dec                              internal static bit(9)                   initial dcl 22-3
floor_fun                              internal static bit(9)                   initial dcl 14-8
format_statement                       internal static bit(9)                   initial dcl 18-3
format_value_node                      internal static bit(9)                   initial dcl 12-5
fortran_read                           internal static bit(9)                   initial dcl 14-8
fortran_write                          internal static bit(9)                   initial dcl 14-8
free_based                             internal static bit(9)                   initial dcl 14-8
free_ctl                               internal static bit(9)                   initial dcl 14-8
free_statement                         internal static bit(9)                   initial dcl 18-3
free_var                               internal static bit(9)                   initial dcl 14-8
ftn_file_manip                         internal static bit(9)                   initial dcl 14-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 14-8
function                        000000 constant        entry                    external dcl 1-125
ge                                     internal static bit(9)                   initial dcl 22-3
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 14-8
get_edit_trans                         internal static bit(9)                   initial dcl 14-8
get_file                               internal static bit(9)                   initial dcl 14-8
get_list_trans                         internal static bit(9)                   initial dcl 14-8
get_size                        000000 constant        entry                    external dcl 2-352
get_statement                          internal static bit(9)                   initial dcl 18-3
get_string                             internal static bit(9)                   initial dcl 14-8
gt                                     internal static bit(9)                   initial dcl 22-3
half_to_word                           internal static bit(9)                   initial dcl 14-8
i_bin_integer                          internal static bit(9)                   initial dcl 22-3
i_dec_integer                          internal static bit(9)                   initial dcl 22-3
i_fixed_bin                            internal static bit(9)                   initial dcl 22-3
i_fixed_dec                            internal static bit(9)                   initial dcl 22-3
i_float_bin                            internal static bit(9)                   initial dcl 22-3
i_float_dec                            internal static bit(9)                   initial dcl 22-3
identifier                             internal static bit(9)                   initial dcl 22-3
imag_fun                               internal static bit(9)                   initial dcl 14-8
index_after_fun                        internal static bit(9)                   initial dcl 14-8
index_before_fun                       internal static bit(9)                   initial dcl 14-8
index_fun                              internal static bit(9)                   initial dcl 14-8
index_rev_fun                          internal static bit(9)                   initial dcl 14-8
integer_type                           internal static bit(36)                  initial dcl 20-71
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
is_arith_constant                      internal static bit(9)                   initial dcl 22-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 22-47
is_decimal_constant                    internal static bit(9)                   initial dcl 22-47
is_delimiter                           internal static bit(9)                   initial dcl 22-47
is_float_constant                      internal static bit(9)                   initial dcl 22-47
is_identifier                          internal static bit(9)                   initial dcl 22-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 22-47
is_integral_constant                   internal static bit(9)                   initial dcl 22-47
is_isub                                internal static bit(9)                   initial dcl 22-47
isub                                   internal static bit(9)                   initial dcl 22-3
l_parn                                 internal static bit(9)                   initial dcl 14-8
label_array_element_node               internal static bit(9)                   initial dcl 12-5
label_node                             internal static bit(9)                   initial dcl 12-5
le                                     internal static bit(9)                   initial dcl 22-3
left_parn                              internal static bit(9)                   initial dcl 22-3
length_fun                             internal static bit(9)                   initial dcl 14-8
line_format                            internal static bit(9)                   initial dcl 14-8
list_node                              internal static bit(9)                   initial dcl 12-5
local_label_var_type                   internal static bit(36)                  initial dcl 20-71
locate_file                            internal static bit(9)                   initial dcl 14-8
locate_statement                       internal static bit(9)                   initial dcl 18-3
lock_file                              internal static bit(9)                   initial dcl 14-8
lock_fun                               internal static bit(9)                   initial dcl 14-8
lock_statement                         internal static bit(9)                   initial dcl 18-3
log10_fun                              internal static bit(9)                   initial dcl 14-8
log2_fun                               internal static bit(9)                   initial dcl 14-8
log_fun                                internal static bit(9)                   initial dcl 14-8
lookup                          000000 constant        entry                    external dcl 1-153
lt                                     internal static bit(9)                   initial dcl 22-3
machine_state_node                     internal static bit(9)                   initial dcl 12-5
make_desc                              internal static bit(9)                   initial dcl 14-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 20-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 20-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 20-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 8-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 20-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 20-5
max_fun                                internal static bit(9)                   initial dcl 14-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 20-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 20-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 20-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 11-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 20-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 13-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 20-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 20-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 20-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 20-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 20-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 20-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 20-5
max_scale                              internal static fixed bin(31,0)          initial dcl 20-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 20-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 20-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 20-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 20-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 20-5
min_fun                                internal static bit(9)                   initial dcl 14-8
min_scale                              internal static fixed bin(31,0)          initial dcl 20-5
minus                                  internal static bit(9)                   initial dcl 22-3
mod_bit                                internal static bit(9)                   initial dcl 14-8
mod_byte                               internal static bit(9)                   initial dcl 14-8
mod_fun                                internal static bit(9)                   initial dcl 14-8
mod_half                               internal static bit(9)                   initial dcl 14-8
mod_word                               internal static bit(9)                   initial dcl 14-8
mult                                   internal static bit(9)                   initial dcl 14-8
ne                                     internal static bit(9)                   initial dcl 22-3
negate                                 internal static bit(9)                   initial dcl 14-8
ngt                                    internal static bit(9)                   initial dcl 22-3
nlt                                    internal static bit(9)                   initial dcl 22-3
no_token                               internal static bit(9)                   initial dcl 22-3
nop                                    internal static bit(9)                   initial dcl 14-8
not                                    internal static bit(9)                   initial dcl 22-3
not_bits                               internal static bit(9)                   initial dcl 14-8
off_fun                                internal static bit(9)                   initial dcl 14-8
offset_adder                    000000 constant        entry                    external dcl 1-172
on_statement                           internal static bit(9)                   initial dcl 18-3
open_file                              internal static bit(9)                   initial dcl 14-8
open_statement                         internal static bit(9)                   initial dcl 18-3
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 22-3
pack                                   internal static bit(9)                   initial dcl 14-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 20-5
page_format                            internal static bit(9)                   initial dcl 14-8
param_desc_ptr                         internal static bit(9)                   initial dcl 14-8
param_ptr                              internal static bit(9)                   initial dcl 14-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 22-3
period                                 internal static bit(9)                   initial dcl 22-3
picture_format                         internal static bit(9)                   initial dcl 14-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 14-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 22-3
pointer_type                           internal static bit(36)                  initial dcl 20-71
prefix_plus                            internal static bit(9)                   initial dcl 14-8
procedure_statement                    internal static bit(9)                   initial dcl 18-3
propagate_bit                   000000 constant        entry                    external dcl 1-192
ptr_fun                                internal static bit(9)                   initial dcl 14-8
put_control                            internal static bit(9)                   initial dcl 14-8
put_data_trans                         internal static bit(9)                   initial dcl 14-8
put_edit_trans                         internal static bit(9)                   initial dcl 14-8
put_field                              internal static bit(9)                   initial dcl 14-8
put_field_chk                          internal static bit(9)                   initial dcl 14-8
put_file                               internal static bit(9)                   initial dcl 14-8
put_list_trans                         internal static bit(9)                   initial dcl 14-8
put_statement                          internal static bit(9)                   initial dcl 18-3
put_string                             internal static bit(9)                   initial dcl 14-8
r_format                               internal static bit(9)                   initial dcl 14-8
r_parn                                 internal static bit(9)                   initial dcl 14-8
range_ck                               internal static bit(9)                   initial dcl 14-8
rank_fun                               internal static bit(9)                   initial dcl 14-8
read_file                              internal static bit(9)                   initial dcl 14-8
read_statement                         internal static bit(9)                   initial dcl 18-3
real_fun                               internal static bit(9)                   initial dcl 14-8
real_type                              internal static bit(36)                  initial dcl 20-71
record_io                              internal static bit(9)                   initial dcl 14-8
refer                                  internal static bit(9)                   initial dcl 14-8
refer_extent                    000000 constant        entry                    external dcl 2-426
rel_fun                                internal static bit(9)                   initial dcl 14-8
repeat_fun                             internal static bit(9)                   initial dcl 14-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 14-8
return_statement                       internal static bit(9)                   initial dcl 18-3
return_string                          internal static bit(9)                   initial dcl 14-8
return_value                           internal static bit(9)                   initial dcl 14-8
return_words                           internal static bit(9)                   initial dcl 14-8
reverse_fun                            internal static bit(9)                   initial dcl 14-8
revert_on                              internal static bit(9)                   initial dcl 14-8
revert_statement                       internal static bit(9)                   initial dcl 18-3
rewrite_file                           internal static bit(9)                   initial dcl 14-8
rewrite_statement                      internal static bit(9)                   initial dcl 18-3
right_parn                             internal static bit(9)                   initial dcl 22-3
round_fun                              internal static bit(9)                   initial dcl 14-8
search_fun                             internal static bit(9)                   initial dcl 14-8
search_rev_fun                         internal static bit(9)                   initial dcl 14-8
segno_fun                              internal static bit(9)                   initial dcl 14-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
semi_colon                             internal static bit(9)                   initial dcl 22-3
setbitno_fun                           internal static bit(9)                   initial dcl 14-8
setcharno_fun                          internal static bit(9)                   initial dcl 14-8
sf_par_node                            internal static bit(9)                   initial dcl 12-5
sign_fun                               internal static bit(9)                   initial dcl 14-8
signal_on                              internal static bit(9)                   initial dcl 14-8
signal_statement                       internal static bit(9)                   initial dcl 18-3
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 14-8
sind_fun                               internal static bit(9)                   initial dcl 14-8
skip_format                            internal static bit(9)                   initial dcl 14-8
slash                                  internal static bit(9)                   initial dcl 22-3
source_node                            internal static bit(9)                   initial dcl 12-5
sqrt_fun                               internal static bit(9)                   initial dcl 14-8
stack_ptr                              internal static bit(9)                   initial dcl 14-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 14-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 14-8
stacq_fun                              internal static bit(9)                   initial dcl 14-8
statement_node                         internal static bit(9)                   initial dcl 12-5
std_arg_list                           internal static bit(9)                   initial dcl 14-8
std_entry                              internal static bit(9)                   initial dcl 14-8
std_return                             internal static bit(9)                   initial dcl 14-8
stop                                   internal static bit(9)                   initial dcl 14-8
stop_statement                         internal static bit(9)                   initial dcl 18-3
storage_block_type                     internal static bit(36)                  initial dcl 20-71
stream_prep                            internal static bit(9)                   initial dcl 14-8
sub                                    internal static bit(9)                   initial dcl 14-8
subscripter                     000000 constant        entry                    external dcl 1-216
system_on_unit                         internal static bit(9)                   initial dcl 18-3
tan_fun                                internal static bit(9)                   initial dcl 14-8
tand_fun                               internal static bit(9)                   initial dcl 14-8
temporary_node                         internal static bit(9)                   initial dcl 12-5
terminate_trans                        internal static bit(9)                   initial dcl 14-8
this_context                           automatic       bit(36)                  dcl 16-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 14-8
trunc_fun                              internal static bit(9)                   initial dcl 14-8
unknown_statement                      internal static bit(9)                   initial dcl 18-3
unlock_file                            internal static bit(9)                   initial dcl 14-8
unlock_statement                       internal static bit(9)                   initial dcl 18-3
unpack                                 internal static bit(9)                   initial dcl 14-8
validate                        000000 constant        entry                    external dcl 1-225
vclock_fun                             internal static bit(9)                   initial dcl 14-8
verify_fun                             internal static bit(9)                   initial dcl 14-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 14-8
verify_rev_fun                         internal static bit(9)                   initial dcl 14-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 14-8
wait_statement                         internal static bit(9)                   initial dcl 18-3
word_to_mod2                           internal static bit(9)                   initial dcl 14-8
word_to_mod4                           internal static bit(9)                   initial dcl 14-8
word_to_mod8                           internal static bit(9)                   initial dcl 14-8
wordno_fun                             internal static bit(9)                   initial dcl 14-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 20-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 20-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 20-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 20-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 20-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 20-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 20-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 20-5
write_file                             internal static bit(9)                   initial dcl 14-8
write_statement                        internal static bit(9)                   initial dcl 18-3
x_format                               internal static bit(9)                   initial dcl 14-8
xor_bits                               internal static bit(9)                   initial dcl 14-8

NAMES DECLARED BY EXPLICIT CONTEXT.
copy_ref                        002257 constant        entry                    internal dcl 466 ref 249 249 286 286 287 287 295 295
                                                                                  304 327 327
create_jump_operator            001671 constant        label                    dcl 362 ref 336 341
create_while_statement          001701 constant        label                    dcl 365 ref 360
do_semantics                    000040 constant        entry                    external dcl 14
make_operator                   002067 constant        entry                    internal dcl 415 ref 79 108 118 128 144 230 249 286
                                                                                  287 295 308 309 310 312 313 314 316 317 327 362
                                                                                  374 395
make_statement                  002132 constant        entry                    internal dcl 442 ref 73 81 110 120 130 141 146 225
                                                                                  232 251 260 270 289 296 321 330 365 376 397
next_spec                       002017 constant        label                    dcl 392 ref 257
ret                             002056 constant        label                    dcl 494 ref 64 95 101 410

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3406        3456    3171        3416
Length      4302    3171        50         610     215           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
do_semantics                        230 external procedure  is an external procedure.  
make_operator                           internal procedure  shares stack frame of external procedure do_semantics.  
make_statement                          internal procedure  shares stack frame of external procedure do_semantics.  
copy_ref                                internal procedure  shares stack frame of external procedure do_semantics.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
do_semantics             000100 cv                          do_semantics
                         000102 cvref                       do_semantics
                         000104 o                           do_semantics
                         000106 o1                          do_semantics
                         000110 o2                          do_semantics
                         000112 o3                          do_semantics
                         000114 o4                          do_semantics
                         000116 p                           do_semantics
                         000120 q                           do_semantics
                         000122 ref                         do_semantics
                         000124 s                           do_semantics
                         000126 spec                        do_semantics
                         000130 v                           do_semantics
                         000132 first                       do_semantics
                         000134 last                        do_semantics
                         000136 next                        do_semantics
                         000140 label1                      do_semantics
                         000142 label2                      do_semantics
                         000144 first_statement             do_semantics
                         000146 last_statement              do_semantics
                         000150 next_statement              do_semantics
                         000152 label1_statement            do_semantics
                         000154 prof                        do_semantics
                         000156 label_variable              do_semantics
                         000160 e                           do_semantics
                         000166 i                           do_semantics
                         000167 sign_of_by                  do_semantics
                         000170 first_spec                  do_semantics
                         000171 first_time                  do_semantics
                         000172 multiple_spec               do_semantics
                         000173 opcode                      do_semantics
                         000174 context                     do_semantics
                         000204 op                          make_operator
                         000214 stp                         make_statement
                         000224 p                           copy_ref

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_label                  create_list                   create_operator
create_reference              create_statement              create_symbol                 create_token
declare_integer               declare_pointer               expression_semantics          free_node
operator_semantics            semantic_translator$abort     share_expression

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$profile




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000034        56 000045        57 000047        58 000054        59 000056        60 000061        61 000063
     63 000067        64 000074        67 000075        68 000077        70 000104        73 000105        74 000107
     76 000113        77 000125        79 000131        81 000140        82 000142        83 000145        86 000147
     88 000154        90 000160        92 000161        94 000165        95 000200        98 000201       100 000207
    101 000222       104 000223       106 000226       107 000237       108 000242       110 000250       111 000252
    114 000255       116 000261       117 000273       118 000276       120 000304       121 000306       124 000311
    126 000315       127 000327       128 000332       130 000340       131 000342       137 000345       138 000352
    141 000354       142 000356       144 000361       146 000367       147 000371       148 000374       150 000375
    151 000377       154 000404       156 000410       158 000411       159 000417       162 000432       164 000436
    168 000460       169 000462       171 000463       175 000513       176 000516       178 000520       180 000522
    182 000526       185 000546       187 000551       189 000555       192 000577       197 000622       200 000631
    206 000647       208 000667       210 000676       212 000703       213 000710       214 000712       215 000716
    218 000741       219 000743       221 000744       222 000750       225 000756       226 000762       228 000763
    229 000770       230 000773       232 001022       234 001024       236 001025       239 001050       240 001053
    245 001062       247 001064       249 001070       251 001100       254 001102       256 001121       257 001123
    260 001124       261 001126       262 001131       264 001133       270 001154       271 001156       272 001161
    276 001163       278 001167       280 001177       281 001201       284 001224       286 001230       287 001251
    289 001261       290 001263       293 001266       295 001272       296 001305       297 001307       298 001312
    301 001342       304 001350       305 001352       308 001360       309 001422       310 001441       312 001447
    313 001511       314 001530       316 001536       317 001544       321 001552       322 001554       324 001555
    326 001561       327 001563       330 001602       334 001604       336 001610       339 001616       341 001622
    344 001627       345 001634       347 001641       349 001646       351 001653       354 001660       356 001662
    357 001664       358 001666       360 001670       362 001671       365 001701       367 001703       370 001725
    374 001744       376 001753       377 001755       378 001760       380 001763       386 001766       387 001771
    388 002015       392 002017       395 002021       397 002030       398 002032       399 002041       400 002044
    403 002045       405 002046       407 002051       408 002054       410 002055       494 002056       497 002066
    415 002067       423 002071       425 002105       427 002111       429 002115       431 002117       433 002122
    438 002127       442 002132       448 002134       449 002164       451 002167       453 002174       454 002214
    455 002221       456 002237       458 002244       459 002247       460 002250       462 002253       466 002257
    470 002261       472 002263       473 002264       476 002270       479 002277       480 002312       485 002321
    488 002342


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
