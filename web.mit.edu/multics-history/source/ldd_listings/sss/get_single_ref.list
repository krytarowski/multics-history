	COMPILATION LISTING OF SEGMENT get_single_ref
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1826.36_Fri_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*        *                                                         *
        5*        * Copyright (c) 1972 by Massachusetts Institute of        *
        6*        * Technology and Honeywell Information Systems, Inc.      *
        7*        *                                                         *
        8*        *********************************************************** */
        9 
       10 
       11 
       12 
       13 /****^  HISTORY COMMENTS:
       14*  1) change(86-07-16,Ginter), approve(86-07-16,MCR7287), audit(86-07-16,Mabey),
       15*     install(86-07-28,MR12.0-1105):
       16*     Bug fixes for the MR12.0 release of the compiler.
       17*                                                   END HISTORY COMMENTS */
       18 
       19 
       20 /* Initial Version:	7 July 1975 by R. A. Barnes
       21*	Modified:	28 May 1979 by RAB to update reference.address.offset if
       22*		perm_address is on.
       23*	Modified: 17 June 1985 by MM to fix 2110 by calling m_a if
       24*		perm_address isn't on.  Now the perm_address bit will
       25*		always be set after this routine is called.  */
       26 
       27 get_single_ref:	proc(p) returns(ptr);
       28 
       29 /* this procedure produces a reference to the right half of a double precision
       30*   fixed binary variable so that it can be used with single precision instructions.
       31*   It is called by aq_man, assign_op, and xr_man. */
       32 
       33 dcl	(p,q) ptr;
       34 dcl	mod builtin;
       35 
       36 dcl	get_reference entry() returns(ptr);
       37 dcl	adjust_ref_count entry(ptr,fixed bin);
       38 dcl	m_a entry (ptr, bit(2) aligned);
       39 
  1     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  1     2 
  1     3 dcl	1 reference		based aligned,
  1     4 	2 node_type		bit(9) unaligned,
  1     5 	2 array_ref		bit(1) unaligned,
  1     6 	2 varying_ref		bit(1) unaligned,
  1     7 	2 shared			bit(1) unaligned,
  1     8 	2 put_data_sw		bit(1) unaligned,
  1     9 	2 processed		bit(1) unaligned,
  1    10 	2 units			fixed(3) unaligned,
  1    11 	2 ref_count		fixed(17) unaligned,
  1    12 	2 c_offset		fixed(24),
  1    13 	2 c_length		fixed(24),
  1    14 	2 symbol			ptr unaligned,
  1    15 	2 qualifier		ptr unaligned,
  1    16 	2 offset			ptr unaligned,
  1    17 	2 length			ptr unaligned,
  1    18 	2 subscript_list		ptr unaligned,
  1    19 						/* these fields are used by the 645 code generator */
  1    20 	2 address			structure unaligned,
  1    21 	  3 base			bit(3),
  1    22 	  3 offset		bit(15),
  1    23 	  3 op			bit(9),
  1    24 	  3 no_address		bit(1),
  1    25 	  3 inhibit		bit(1),
  1    26 	  3 ext_base		bit(1),
  1    27 	  3 tag			bit(6),
  1    28 	2 info			structure unaligned,
  1    29 	  3 address_in		structure,
  1    30 	    4 b			dimension(0:7) bit(1),
  1    31 	    4 storage		bit(1),
  1    32 	  3 value_in		structure,
  1    33 	    4 a			bit(1),
  1    34 	    4 q			bit(1),
  1    35 	    4 aq			bit(1),
  1    36 	    4 string_aq		bit(1),
  1    37 	    4 complex_aq		bit(1),
  1    38 	    4 decimal_aq		bit(1),
  1    39 	    4 b			dimension(0:7) bit(1),
  1    40 	    4 storage		bit(1),
  1    41 	    4 indicators		bit(1),
  1    42 	    4 x			dimension(0:7) bit(1),
  1    43 	  3 other			structure,
  1    44 	    4 big_offset		bit(1),
  1    45 	    4 big_length		bit(1),
  1    46 	    4 modword_in_offset	bit(1),
  1    47 	2 data_type		fixed(5) unaligned,
  1    48 	2 bits			structure unaligned,
  1    49 	  3 padded_ref		bit(1),
  1    50 	  3 aligned_ref		bit(1),
  1    51 	  3 long_ref		bit(1),
  1    52 	  3 forward_ref		bit(1),
  1    53 	  3 ic_ref		bit(1),
  1    54 	  3 temp_ref		bit(1),
  1    55 	  3 defined_ref		bit(1),
  1    56 	  3 evaluated		bit(1),
  1    57 	  3 allocate		bit(1),
  1    58 	  3 allocated		bit(1),
  1    59 	  3 aliasable		bit(1),
  1    60 	  3 even			bit(1),
  1    61 	  3 perm_address		bit(1),
  1    62 	  3 aggregate		bit(1),
  1    63 	  3 hit_zero		bit(1),
  1    64 	  3 dont_save		bit(1),
  1    65 	  3 fo_in_qual		bit(1),
  1    66 	  3 hard_to_load		bit(1),
  1    67 	2 relocation		bit(12) unaligned,
  1    68 	2 more_bits		structure unaligned,
  1    69 	  3 substr		bit(1),
  1    70 	  3 padded_for_store_ref	bit(1),
  1    71 	  3 aligned_for_store_ref	bit(1),
  1    72 	  3 mbz			bit(15),
  1    73 	2 store_ins		bit(18) unaligned;
  1    74 
  1    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       40 
       41 
       42 	q = get_reference();
       43 	q -> reference = p -> reference;
       44 
       45 	if ^q -> reference.perm_address
       46 	then do;
       47 	     call m_a (q, "00"b);			/* fixes 2110 */
       48 	     q -> reference.perm_address = "1"b;
       49 	     end;
       50 
       51 	if mod(q->reference.c_offset,2) = 0
       52 	then do;
       53 	     q -> reference.c_offset = q -> reference.c_offset + 1;
       54 	     q -> reference.address.offset = bit(fixed(fixed(q -> reference.address.offset,15) + 1,15),15);
       55 	     end;
       56 
       57 	if ^ p -> reference.shared
       58 	     then call adjust_ref_count(p,-1);
       59 	return(q);
       60 
       61 end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1826.3  get_single_ref.pl1                >udd>sm>ds>w>ml>get_single_ref.pl1
40           1    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
address                  10            based           structure                level 2 packed packed unaligned dcl 1-3
adjust_ref_count                000012 constant        entry                    external dcl 37 ref 57
bits                     12(06)        based           structure                level 2 packed packed unaligned dcl 1-3
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 1-3 set ref 51 53* 53
get_reference                   000010 constant        entry                    external dcl 36 ref 42
m_a                             000014 constant        entry                    external dcl 38 ref 47
mod                                                    builtin function         dcl 34 ref 51
offset                   10(03)        based           bit(15)                  level 3 packed packed unaligned dcl 1-3 set ref 54*
                                                                                  54
p                                      parameter       pointer                  dcl 33 set ref 27 43 57 57*
perm_address             12(18)        based           bit(1)                   level 3 packed packed unaligned dcl 1-3 set ref 45
                                                                                  48*
q                               000100 automatic       pointer                  dcl 33 set ref 42* 43 45 47* 48 51 53 53 54 54 59
reference                              based           structure                level 1 dcl 1-3 set ref 43* 43
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 1-3 set ref 57

NAME DECLARED BY EXPLICIT CONTEXT.
get_single_ref                  000005 constant        entry                    external dcl 27

NAMES DECLARED BY CONTEXT OR IMPLICATION.
bit                                                    builtin function         ref 54
fixed                                                  builtin function         ref 54 54

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       166         204     116         176
Length       364     116        16         143      50           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
get_single_ref                       78 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
get_single_ref           000100 q                           get_single_ref

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          mdfx1               ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
adjust_ref_count              get_reference                 m_a

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     27 000001        42 000012        43 000020        45 000027        47 000032        48 000045        51 000050
     53 000054        54 000055        57 000071        59 000111


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
