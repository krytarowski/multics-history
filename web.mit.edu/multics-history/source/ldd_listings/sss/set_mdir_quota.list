	COMPILATION LISTING OF SEGMENT set_mdir_quota
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/19/84  1020.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 /* format: style2,indcomtxt */
       11 
       12 /* SET_MDIR_QUOTA: Command to set quota on a master directory. */
       13 
       14 /* Written March 1976 by Larry Johnson */
       15 /* Modified 83-12-07 BIM for correct quota precision */
       16 
       17 set_mdir_quota:
       18 smdq:
       19      procedure options (variable);
       20 
       21 	dcl     name		 char (14) int static options (constant) init ("set_mdir_quota");
       22 	dcl     code		 fixed bin (35);
       23 	dcl     arg_ptr		 ptr;
       24 	dcl     arg_len		 fixed bin;
       25 	dcl     arg		 char (arg_len) based (arg_ptr);
       26 	dcl     dir		 char (168);
       27 	dcl     ename		 char (32);
       28 	dcl     quota		 fixed bin (18);
       29 	dcl     i			 fixed bin;
       30 	dcl     sw		 bit (1) aligned;
       31 	dcl     nargs		 fixed bin;
       32 	dcl     j			 fixed bin;
       33 
       34 	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
       35 	dcl     ioa_		 entry options (variable);
       36 	dcl     com_err_		 entry options (variable);
       37 	dcl     expand_path_	 entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
       38 	dcl     mdc_$set_mdir_quota	 entry (char (*), char (*), bit (1) aligned, fixed bin (18), fixed bin (35));
       39 	dcl     cv_dec_check_	 entry (char (*), fixed bin) returns (fixed bin (35));
       40 	dcl     cu_$arg_count	 entry (fixed bin);
       41 	dcl     pathname_		 entry (character (*), character (*)) returns (character (168));
       42 
       43 	dcl     (addr, bin, substr)	 builtin;
       44 
       45 	call cu_$arg_count (nargs);
       46 	if nargs = 0
       47 	then do;
       48 		call ioa_ ("Usage: ^a path quota", name);
       49 		return;
       50 	     end;
       51 
       52 	do j = 1 to nargs by 2;
       53 	     call cu_$arg_ptr (j, arg_ptr, arg_len, code);/* Path name */
       54 	     if code ^= 0
       55 	     then do;
       56 		     call com_err_ (code, name);	/* Should not happen */
       57 		     return;
       58 		end;
       59 	     call expand_path_ (arg_ptr, arg_len, addr (dir), addr (ename), code);
       60 	     if code ^= 0
       61 	     then do;
       62 		     call com_err_ (code, name, "^a", arg);
       63 		     go to next;
       64 		end;
       65 
       66 	     call cu_$arg_ptr (j + 1, arg_ptr, arg_len, code);
       67 						/* Get new quota */
       68 	     if code ^= 0
       69 	     then do;
       70 		     call com_err_ (code, name, "Quota for ^a.", pathname_ (dir, ename));
       71 		     return;
       72 		end;
       73 	     quota = cv_dec_check_ (arg, i);
       74 	     if i ^= 0
       75 	     then do;
       76 		     call com_err_ (0, name, "Quota for ^a must be numeric: ^a", pathname_ (dir, ename), arg);
       77 		     go to next;
       78 		end;
       79 
       80 	     if substr (arg, 1, 1) = "+" | substr (arg, 1, 1) = "-"
       81 	     then sw = "1"b;
       82 	     else sw = "0"b;
       83 
       84 	     call mdc_$set_mdir_quota (dir, ename, sw, quota, code);
       85 	     if code ^= 0
       86 	     then call com_err_ (code, name, "^a", pathname_ (dir, ename));
       87 next:
       88 	end;
       89 	return;
       90 
       91      end set_mdir_quota;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/18/84  1430.0  set_mdir_quota.pl1                >spec>on>40-16>set_mdir_quota.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 43 ref 59 59 59 59
arg                                    based           char                     unaligned dcl 25 set ref 62* 73* 76* 80 80
arg_len                         000104 automatic       fixed bin(17,0)          dcl 24 set ref 53* 59* 62 62 66* 73 73 76 76 80 80
arg_ptr                         000102 automatic       pointer                  dcl 23 set ref 53* 59* 62 66* 73 76 80 80
code                            000100 automatic       fixed bin(35,0)          dcl 22 set ref 53* 54 56* 59* 60 62* 66* 68 70* 84*
                                                                                  85 85*
com_err_                        000014 constant        entry                    external dcl 36 ref 56 62 70 76 85
cu_$arg_count                   000024 constant        entry                    external dcl 40 ref 45
cu_$arg_ptr                     000010 constant        entry                    external dcl 34 ref 53 66
cv_dec_check_                   000022 constant        entry                    external dcl 39 ref 73
dir                             000105 automatic       char(168)                unaligned dcl 26 set ref 59 59 70* 70* 76* 76* 84*
                                                                                  85* 85*
ename                           000157 automatic       char(32)                 unaligned dcl 27 set ref 59 59 70* 70* 76* 76* 84*
                                                                                  85* 85*
expand_path_                    000016 constant        entry                    external dcl 37 ref 59
i                               000170 automatic       fixed bin(17,0)          dcl 29 set ref 73* 74
ioa_                            000012 constant        entry                    external dcl 35 ref 48
j                               000173 automatic       fixed bin(17,0)          dcl 32 set ref 52* 53* 66*
mdc_$set_mdir_quota             000020 constant        entry                    external dcl 38 ref 84
name                            000000 constant        char(14)                 initial unaligned dcl 21 set ref 48* 56* 62* 70* 76*
                                                                                  85*
nargs                           000172 automatic       fixed bin(17,0)          dcl 31 set ref 45* 46 52
pathname_                       000026 constant        entry                    external dcl 41 ref 70 70 76 76 85 85
quota                           000167 automatic       fixed bin(18,0)          dcl 28 set ref 73* 84*
substr                                                 builtin function         dcl 43 ref 80 80
sw                              000171 automatic       bit(1)                   dcl 30 set ref 80* 82* 84*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
bin                                                    builtin function         dcl 43

NAMES DECLARED BY EXPLICIT CONTEXT.
next                            000564 constant        label                    dcl 87 ref 63 77
set_mdir_quota                  000053 constant        entry                    external dcl 17
smdq                            000044 constant        entry                    external dcl 17

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       702         732     570         712
Length      1114     570        30         146     112           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
smdq                                244 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
smdq                     000100 code                        smdq
                         000102 arg_ptr                     smdq
                         000104 arg_len                     smdq
                         000105 dir                         smdq
                         000157 ename                       smdq
                         000167 quota                       smdq
                         000170 i                           smdq
                         000171 sw                          smdq
                         000172 nargs                       smdq
                         000173 j                           smdq

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_ptr                   cv_dec_check_
expand_path_                  ioa_                          mdc_$set_mdir_quota           pathname_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     17 000043        45 000060        46 000066        48 000070        49 000113        52 000114        53 000123
     54 000140        56 000142        57 000157        59 000160        60 000203        62 000205        63 000237
     66 000240        68 000260        70 000262        71 000333        73 000334        74 000362        76 000364
     77 000444        80 000445        82 000461        84 000462        85 000513        87 000564        89 000567


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
