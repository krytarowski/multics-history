ASSEMBLY LISTING OF SEGMENT >spec>install>1079>mail_table_priv_.alm                                                                                                                                 
ASSEMBLED ON:	10/02/89  0818.3 mst Mon
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1002.3 mst Fri

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1989                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1983 *
                                     6  " *                                                         *
                                     7  " ***********************************************************
                                     8  
                                     9  " HISTORY COMMENTS:
                                    10  "  1) change(88-12-14,Parisek), approve(89-01-11,MCR8044),
                                    11  "     audit(89-01-16,Farley), install(89-01-19,MR12.3-1006):
                                    12  "     Removed the get_aliases entry so it could be placed in the
                                    13  "     non-privileged mail_table_ gate for non-privileged use.
                                    14  "  2) change(89-08-02,Lee), approve(89-08-22,MCR8128),
                                    15  "     audit(89-09-25,LZimmerman), install(89-10-02,MR12.3-1079):
                                    16  "     phx20967 (Mail 445) - added the delete_alias_case_ins entry for
                                    17  "     case-insensitive alias entry deletions.
                                    18  "                                                      END HISTORY COMMENTS
                                    19  
                                    20  
                                    21  "	mail_table_priv_ gate, entrypoints privileged users.
                                    22  "
                                    23  "
                                    24  " 	Modified 1984-08-03 by E. Swenson for conversion to V3 MSTBs.
                                    25  
    000000                          26  	name mail_table_priv_
                                    27  
                                    28  	include gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    29  	include stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    30  	include stack_frame
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   3-3  "
                                   3-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   3-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   3-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   3-7  "
                        000020     3-8  	equ	stack_frame.prev_sp,16
                        000020     3-9  	equ	stack_frame.condition_word,16
                        000022    3-10  	equ	stack_frame.next_sp,18
                        000022    3-11  	equ	stack_frame.signaller_word,18
                        000024    3-12  	equ	stack_frame.return_ptr,20
                        000026    3-13  	equ	stack_frame.entry_ptr,22
                        000030    3-14  	equ	stack_frame.operator_ptr,24
                        000030    3-15  	equ	stack_frame.lp_ptr,24
                        000032    3-16  	equ	stack_frame.arg_ptr,26
                        000034    3-17  	equ	stack_frame.static_ptr,28
                        000035    3-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    3-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    3-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    3-21  	equ	stack_frame.translator_id,31
                        000040    3-22  	equ	stack_frame.regs,32
                        000060    3-23  	equ	stack_frame.min_length,48
                        000020    3-24  	equ	stack_frame.flag_word,16
                        020000    3-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    3-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    3-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    3-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    3-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    3-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    3-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    3-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  3-33  
                                  3-34  "
                                  3-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  3-36  "
                                    31  
                                    32  	gate_info
                                        	use	transfer_vector
    000000  0a   000020 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000020  aa  7 00046 2721 20         .actor:	getlp
    000021  aa  0 00002 3521 20         	eppbp	ap|2,*
    000022  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000023  0a   000037 6000 00         	tze	.return_name	zero length => get name
                                        
    000024  aa   000001 0350 07         	adla	1,dl		include length of acc
    000025  aa  0 00004 4501 20         	stz	ap|4,*
    000026  0a   000052 7000 00         	tsx0	.search_defs
                                        
    000027  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000030  aa   277777 600005          	desc9a	bp|-1(3),al
    000031  aa   300000 000005          	desc9a	bb|0,al
    000032  0a   000062 6010 00         	tnz	.next_def
                                        
    000033  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000034  aa   000022 7710 00         	arl	18
    000035  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000036  aa  7 00044 7101 20         	short_return
                                        
    000037                              .return_name:
    000037  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000040  0a   000052 7000 00         	tsx0	.search_defs
                                        
    000041  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000042  0a   000062 6010 00         	tnz	.next_def
                                        
    000043  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000044  aa   000033 7710 00         	arl	27
    000045  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000046  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000047  aa   300000 200005          	desc9a	bb|0(1),al
    000050  aa   200000 000005          	desc9a	bp|0,al
                                        
    000051  aa  7 00044 7101 20         	short_return
                                        
    000052                              .search_defs:
    000052  aa   000000 6220 00         	eax2	0
    000053  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000054                              .defs_loop:
    000054  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000055  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000056  0a   000062 6010 00         	tnz	.next_def
                                        
    000057  aa  1 00002 2271 12         	ldx7	ab|2,2
    000060  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000061  aa   000000 7100 10         	tra	0,0		test definition
    000062                              .next_def:
    000062  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000063  0a   000054 6010 00         	tnz	.defs_loop
                                        
    000064  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000065  aa   000060 6270 00         .setup:	push
    000066  aa  7 00040 2721 20
    000067  aa  7 00046 2721 20         	getlp
    000070  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000071  0a   000116 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000072  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000073  0a   000116 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000074  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000075  0a   000104 3500 00
    000076  4a  4 00010 3521 20
    000077  aa  6 00040 7531 00
    000100  aa  7 00036 6701 20
    000101  aa  6 00000 1731 00
    000102  aa  6 00040 0731 00
    000103  aa   000000 000000          	oct	0
                                        
                                        	even
    000104                              signal_arglist:
    000104  aa   000002 000004          	zero	2,4
    000105  aa   000002 000000          	zero	2,0
    000106  0a   000112 0000 00         	arg	.gate_errorname
    000107  aa   000000 0000 00         	arg
    000110  0a   000115 0000 00         	arg	.gate_errordesc
    000111  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000112                              .gate_errorname:
    000112  aa  147 141 164 145         	aci	"gate_error"
    000113  aa  137 145 162 162
    000114  aa  157 162 000 000
    000115                              .gate_errordesc:
    000115  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000116                              .no_gate_error:
    000116  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    33  
                                    34  	gate	add,mail_table_mgr_,add,3
                        000001          	segdef	add
    000001                              add:
    000001  0a   000120 7100 00         	tra	add.e
    000117  aa   000006 000000          	zero	3*2,0
    000120                              add.e:
    000120  0a   000065 7020 00         	tsx2	.setup
    000121  aa   000000 6340 07         	ldi	=0,dl
    000122  4a  4 00012 3521 20         	short_call mail_table_mgr_$add(ap|0)
    000123  aa  7 00036 6701 20
    000124  aa  6 00030 3701 20
    000125  aa  7 00042 7101 20         	return
                                        
                                    35  	gate	add_alias,mail_table_mgr_,add_alias,4
                        000002          	segdef	add_alias
    000002                              add_alias:
    000002  0a   000127 7100 00         	tra	add_alias.e
    000126  aa   000010 000000          	zero	4*2,0
    000127                              add_alias.e:
    000127  0a   000065 7020 00         	tsx2	.setup
    000130  aa   000000 6340 07         	ldi	=0,dl
    000131  4a  4 00014 3521 20         	short_call mail_table_mgr_$add_alias(ap|0)
    000132  aa  7 00036 6701 20
    000133  aa  6 00030 3701 20
    000134  aa  7 00042 7101 20         	return
                                        
                                    36  	gate	convert_v2_mail_table,convert_v2_mail_table_,convert_v2_mail_table_,3
                        000003          	segdef	convert_v2_mail_table
    000003                              convert_v2_mail_table:
    000003  0a   000136 7100 00         	tra	convert_v2_mail_table.e
    000135  aa   000006 000000          	zero	3*2,0
    000136                              convert_v2_mail_table.e:
    000136  0a   000065 7020 00         	tsx2	.setup
    000137  aa   000000 6340 07         	ldi	=0,dl
    000140  4a  4 00016 3521 20         	short_call convert_v2_mail_table_$convert_v2_mail_table_(ap|0)
    000141  aa  7 00036 6701 20
    000142  aa  6 00030 3701 20
    000143  aa  7 00042 7101 20         	return
                                        
                                    37  	gate	count_entries,mail_table_mgr_,count_entries,2
                        000004          	segdef	count_entries
    000004                              count_entries:
    000004  0a   000145 7100 00         	tra	count_entries.e
    000144  aa   000004 000000          	zero	2*2,0
    000145                              count_entries.e:
    000145  0a   000065 7020 00         	tsx2	.setup
    000146  aa   000000 6340 07         	ldi	=0,dl
    000147  4a  4 00020 3521 20         	short_call mail_table_mgr_$count_entries(ap|0)
    000150  aa  7 00036 6701 20
    000151  aa  6 00030 3701 20
    000152  aa  7 00042 7101 20         	return
                                        
                                    38  	gate	create,mail_table_mgr_,create_table,2
                        000005          	segdef	create
    000005                              create:
    000005  0a   000154 7100 00         	tra	create.e
    000153  aa   000004 000000          	zero	2*2,0
    000154                              create.e:
    000154  0a   000065 7020 00         	tsx2	.setup
    000155  aa   000000 6340 07         	ldi	=0,dl
    000156  4a  4 00022 3521 20         	short_call mail_table_mgr_$create_table(ap|0)
    000157  aa  7 00036 6701 20
    000160  aa  6 00030 3701 20
    000161  aa  7 00042 7101 20         	return
                                        
                                    39  	gate	delete,mail_table_mgr_,delete,3
                        000006          	segdef	delete
    000006                              delete:
    000006  0a   000163 7100 00         	tra	delete.e
    000162  aa   000006 000000          	zero	3*2,0
    000163                              delete.e:
    000163  0a   000065 7020 00         	tsx2	.setup
    000164  aa   000000 6340 07         	ldi	=0,dl
    000165  4a  4 00024 3521 20         	short_call mail_table_mgr_$delete(ap|0)
    000166  aa  7 00036 6701 20
    000167  aa  6 00030 3701 20
    000170  aa  7 00042 7101 20         	return
                                        
                                    40  	gate	delete_alias,mail_table_mgr_,delete_alias,3
                        000007          	segdef	delete_alias
    000007                              delete_alias:
    000007  0a   000172 7100 00         	tra	delete_alias.e
    000171  aa   000006 000000          	zero	3*2,0
    000172                              delete_alias.e:
    000172  0a   000065 7020 00         	tsx2	.setup
    000173  aa   000000 6340 07         	ldi	=0,dl
    000174  4a  4 00026 3521 20         	short_call mail_table_mgr_$delete_alias(ap|0)
    000175  aa  7 00036 6701 20
    000176  aa  6 00030 3701 20
    000177  aa  7 00042 7101 20         	return
                                        
                                    41  	gate	delete_alias_case_ins,mail_table_mgr_,delete_alias_case_ins,3
                        000010          	segdef	delete_alias_case_ins
    000010                              delete_alias_case_ins:
    000010  0a   000201 7100 00         	tra	delete_alias_case_ins.e
    000200  aa   000006 000000          	zero	3*2,0
    000201                              delete_alias_case_ins.e:
    000201  0a   000065 7020 00         	tsx2	.setup
    000202  aa   000000 6340 07         	ldi	=0,dl
    000203  4a  4 00030 3521 20         	short_call mail_table_mgr_$delete_alias_case_ins(ap|0)
    000204  aa  7 00036 6701 20
    000205  aa  6 00030 3701 20
    000206  aa  7 00042 7101 20         	return
                                        
                                    42  	gate	get,mail_table_mgr_,priv_get,3
                        000011          	segdef	get
    000011                              get:
    000011  0a   000210 7100 00         	tra	get.e
    000207  aa   000006 000000          	zero	3*2,0
    000210                              get.e:
    000210  0a   000065 7020 00         	tsx2	.setup
    000211  aa   000000 6340 07         	ldi	=0,dl
    000212  4a  4 00032 3521 20         	short_call mail_table_mgr_$priv_get(ap|0)
    000213  aa  7 00036 6701 20
    000214  aa  6 00030 3701 20
    000215  aa  7 00042 7101 20         	return
                                        
                                    43  	gate	get_raw_by_index,mail_table_mgr_,get_raw_by_index,3
                        000012          	segdef	get_raw_by_index
    000012                              get_raw_by_index:
    000012  0a   000217 7100 00         	tra	get_raw_by_index.e
    000216  aa   000006 000000          	zero	3*2,0
    000217                              get_raw_by_index.e:
    000217  0a   000065 7020 00         	tsx2	.setup
    000220  aa   000000 6340 07         	ldi	=0,dl
    000221  4a  4 00034 3521 20         	short_call mail_table_mgr_$get_raw_by_index(ap|0)
    000222  aa  7 00036 6701 20
    000223  aa  6 00030 3701 20
    000224  aa  7 00042 7101 20         	return
                                        
                                    44  	gate	get_raw_by_name,mail_table_mgr_,get_raw_by_name,3
                        000013          	segdef	get_raw_by_name
    000013                              get_raw_by_name:
    000013  0a   000226 7100 00         	tra	get_raw_by_name.e
    000225  aa   000006 000000          	zero	3*2,0
    000226                              get_raw_by_name.e:
    000226  0a   000065 7020 00         	tsx2	.setup
    000227  aa   000000 6340 07         	ldi	=0,dl
    000230  4a  4 00036 3521 20         	short_call mail_table_mgr_$get_raw_by_name(ap|0)
    000231  aa  7 00036 6701 20
    000232  aa  6 00030 3701 20
    000233  aa  7 00042 7101 20         	return
                                        
                                    45  	gate	salvage,mail_table_mgr_,salvage,3
                        000014          	segdef	salvage
    000014                              salvage:
    000014  0a   000235 7100 00         	tra	salvage.e
    000234  aa   000006 000000          	zero	3*2,0
    000235                              salvage.e:
    000235  0a   000065 7020 00         	tsx2	.setup
    000236  aa   000000 6340 07         	ldi	=0,dl
    000237  4a  4 00040 3521 20         	short_call mail_table_mgr_$salvage(ap|0)
    000240  aa  7 00036 6701 20
    000241  aa  6 00030 3701 20
    000242  aa  7 00042 7101 20         	return
                                        
                                    46  	gate	test,mail_table_mgr_,test,1
                        000015          	segdef	test
    000015                              test:
    000015  0a   000244 7100 00         	tra	test.e
    000243  aa   000002 000000          	zero	1*2,0
    000244                              test.e:
    000244  0a   000065 7020 00         	tsx2	.setup
    000245  aa   000000 6340 07         	ldi	=0,dl
    000246  4a  4 00042 3521 20         	short_call mail_table_mgr_$test(ap|0)
    000247  aa  7 00036 6701 20
    000250  aa  6 00030 3701 20
    000251  aa  7 00042 7101 20         	return
                                        
                                    47  	gate	update,mail_table_mgr_,update,3
                        000016          	segdef	update
    000016                              update:
    000016  0a   000253 7100 00         	tra	update.e
    000252  aa   000006 000000          	zero	3*2,0
    000253                              update.e:
    000253  0a   000065 7020 00         	tsx2	.setup
    000254  aa   000000 6340 07         	ldi	=0,dl
    000255  4a  4 00044 3521 20         	short_call mail_table_mgr_$update(ap|0)
    000256  aa  7 00036 6701 20
    000257  aa  6 00030 3701 20
    000260  aa  7 00042 7101 20         	return
                                        
                                    48  
                                    49  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000262  5a   000003 000000 
    000263  5a   000150 600000 
    000264  aa   000000 000000 
    000265  55   000013 000002 
    000266  5a   000002 400003 
    000267  55   000006 000013 
    000270  aa  020 155 141 151
    000271  aa  154 137 164 141
    000272  aa  142 154 145 137
    000273  aa  160 162 151 166
    000274  aa  137 000 000 000
    000275  55   000020 000003 
    000276  0a   000016 400000 
    000277  55   000016 000003 
    000300  aa  006 165 160 144         update
    000301  aa  141 164 145 000
    000302  55   000025 000013 
    000303  0a   000015 400000 
    000304  55   000023 000003 
    000305  aa  004 164 145 163         test
    000306  aa  164 000 000 000
    000307  55   000032 000020 
    000310  0a   000014 400000 
    000311  55   000030 000003 
    000312  aa  007 163 141 154         salvage
    000313  aa  166 141 147 145
    000314  55   000041 000025 
    000315  0a   000013 400000 
    000316  55   000035 000003 
    000317  aa  017 147 145 164         get_raw_by_name
    000320  aa  137 162 141 167
    000321  aa  137 142 171 137
    000322  aa  156 141 155 145
    000323  55   000051 000032 
    000324  0a   000012 400000 
    000325  55   000044 000003 
    000326  aa  020 147 145 164         get_raw_by_index
    000327  aa  137 162 141 167
    000330  aa  137 142 171 137
    000331  aa  151 156 144 145
    000332  aa  170 000 000 000
    000333  55   000055 000041 
    000334  0a   000011 400000 
    000335  55   000054 000003 
    000336  aa  003 147 145 164         get
    000337  55   000066 000051 
    000340  0a   000010 400000 
    000341  55   000060 000003 
    000342  aa  025 144 145 154         delete_alias_case_ins
    000343  aa  145 164 145 137
    000344  aa  141 154 151 141
    000345  aa  163 137 143 141
    000346  aa  163 145 137 151
    000347  aa  156 163 000 000
    000350  55   000075 000055 
    000351  0a   000007 400000 
    000352  55   000071 000003 
    000353  aa  014 144 145 154         delete_alias
    000354  aa  145 164 145 137
    000355  aa  141 154 151 141
    000356  aa  163 000 000 000
    000357  55   000102 000066 
    000360  0a   000006 400000 
    000361  55   000100 000003 
    000362  aa  006 144 145 154         delete
    000363  aa  145 164 145 000
    000364  55   000107 000075 
    000365  0a   000005 400000 
    000366  55   000105 000003 
    000367  aa  006 143 162 145         create
    000370  aa  141 164 145 000
    000371  55   000116 000102 
    000372  0a   000004 400000 
    000373  55   000112 000003 
    000374  aa  015 143 157 165         count_entries
    000375  aa  156 164 137 145
    000376  aa  156 164 162 151
    000377  aa  145 163 000 000
    000400  55   000127 000107 
    000401  0a   000003 400000 
    000402  55   000121 000003 
    000403  aa  025 143 157 156         convert_v2_mail_table
    000404  aa  166 145 162 164
    000405  aa  137 166 062 137
    000406  aa  155 141 151 154
    000407  aa  137 164 141 142
    000410  aa  154 145 000 000
    000411  55   000135 000116 
    000412  0a   000002 400000 
    000413  55   000132 000003 
    000414  aa  011 141 144 144         add_alias
    000415  aa  137 141 154 151
    000416  aa  141 163 000 000
    000417  55   000141 000127 
    000420  0a   000001 400000 
    000421  55   000140 000003 
    000422  aa  003 141 144 144         add
    000423  55   000002 000135 
    000424  6a   000000 400002 
    000425  55   000144 000003 
    000426  aa  014 163 171 155         symbol_table
    000427  aa  142 157 154 137
    000430  aa  164 141 142 154
    000431  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000432  aa   000000 000033 
    000433  aa   000000 000000 
    000434  aa   000000 000000 
    000435  aa   000000 000000 
    000436  aa   000000 000000 
    000437  aa   000000 000000 
    000440  5a   000055 000000 
    000441  aa   000000 000000 
    000442  5a   000051 000000 
    000443  5a   000127 000000 
    000444  aa   000000 000000 
    000445  5a   000141 000000 
    000446  5a   000025 000000 
    000447  5a   000107 000000 
    000450  5a   000135 000000 
    000451  5a   000066 000000 
    000452  aa   000000 000000 
    000453  aa   000000 000000 
    000454  aa   000000 000000 
    000455  5a   000013 000000 
    000456  5a   000020 000000 
    000457  5a   000075 000000 
    000460  5a   000041 000000 
    000461  5a   000032 000000 
    000462  5a   000116 000000 
    000463  aa   000000 000000 
    000464  aa   000000 000000 
    000465  5a   000102 000000 

EXTERNAL NAMES

    000466  aa  010 160 162 151         priv_get
    000467  aa  166 137 147 145
    000470  aa  164 000 000 000
    000471  aa  014 143 162 145         create_table
    000472  aa  141 164 145 137
    000473  aa  164 141 142 154
    000474  aa  145 000 000 000
    000475  aa  026 143 157 156         convert_v2_mail_table_
    000476  aa  166 145 162 164
    000477  aa  137 166 062 137
    000500  aa  155 141 151 154
    000501  aa  137 164 141 142
    000502  aa  154 145 137 000
    000503  aa  017 155 141 151         mail_table_mgr_
    000504  aa  154 137 164 141
    000505  aa  142 154 145 137
    000506  aa  155 147 162 137
    000507  aa  007 163 151 147         signal_
    000510  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000511  aa   000004 000000 
    000512  55   000221 000016 
    000513  aa   000004 000000 
    000514  55   000221 000023 
    000515  aa   000004 000000 
    000516  55   000221 000030 
    000517  aa   000004 000000 
    000520  55   000221 000035 
    000521  aa   000004 000000 
    000522  55   000221 000044 
    000523  aa   000004 000000 
    000524  55   000221 000204 
    000525  aa   000004 000000 
    000526  55   000221 000060 
    000527  aa   000004 000000 
    000530  55   000221 000071 
    000531  aa   000004 000000 
    000532  55   000221 000100 
    000533  aa   000004 000000 
    000534  55   000221 000207 
    000535  aa   000004 000000 
    000536  55   000221 000112 
    000537  aa   000004 000000 
    000540  55   000213 000213 
    000541  aa   000004 000000 
    000542  55   000221 000132 
    000543  aa   000004 000000 
    000544  55   000221 000140 
    000545  aa   000004 000000 
    000546  55   000225 000225 
    000547  aa   000001 000000 
    000550  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000551  5a   000227 000000 
    000552  5a   000231 000000 
    000553  5a   000233 000000 
    000554  5a   000235 000000 
    000555  5a   000237 000000 
    000556  5a   000241 000000 
    000557  5a   000243 000000 
    000560  5a   000245 000000 
    000561  5a   000247 000000 
    000562  5a   000251 000000 
    000563  5a   000253 000000 
    000564  5a   000255 000000 
    000565  5a   000257 000000 
    000566  5a   000261 000000 
    000567  5a   000263 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000262 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000046 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000305 0000 00
    000012  9a   777766 0000 46         mail_table_mgr_|add
    000013  5a   000304 0000 00
    000014  9a   777764 0000 46         mail_table_mgr_|add_alias
    000015  5a   000303 0000 00
    000016  9a   777762 0000 46         convert_v2_mail_table_|convert_v2_mail_table_
    000017  5a   000302 0000 00
    000020  9a   777760 0000 46         mail_table_mgr_|count_entries
    000021  5a   000301 0000 00
    000022  9a   777756 0000 46         mail_table_mgr_|create_table
    000023  5a   000300 0000 00
    000024  9a   777754 0000 46         mail_table_mgr_|delete
    000025  5a   000277 0000 00
    000026  9a   777752 0000 46         mail_table_mgr_|delete_alias
    000027  5a   000276 0000 00
    000030  9a   777750 0000 46         mail_table_mgr_|delete_alias_case_ins
    000031  5a   000275 0000 00
    000032  9a   777746 0000 46         mail_table_mgr_|priv_get
    000033  5a   000274 0000 00
    000034  9a   777744 0000 46         mail_table_mgr_|get_raw_by_index
    000035  5a   000273 0000 00
    000036  9a   777742 0000 46         mail_table_mgr_|get_raw_by_name
    000037  5a   000272 0000 00
    000040  9a   777740 0000 46         mail_table_mgr_|salvage
    000041  5a   000271 0000 00
    000042  9a   777736 0000 46         mail_table_mgr_|test
    000043  5a   000270 0000 00
    000044  9a   777734 0000 46         mail_table_mgr_|update
    000045  5a   000267 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 117464 
    000007  aa   757410 347466 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000253 
    000020  aa   000000 000153 
    000021  aa   000206 000176 
    000022  aa   000243 000153 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000047 
    000067  aa   174604 573644 
    000070  aa   000000 117464 
    000071  aa   757411 200000 
    000072  aa   000120 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   000131 000042 
    000077  aa   147777 464111 
    000100  aa   000000 115000 
    000101  aa   507463 000000 
    000102  aa   000142 000041 
    000103  aa   052721 247134 
    000104  aa   000000 105272 
    000105  aa   317215 400000 
    000106  aa   076163 160145          >spec>install>1079>mail_table_priv_.alm
    000107  aa   143076 151156 
    000110  aa   163164 141154 
    000111  aa   154076 061060 
    000112  aa   067071 076155 
    000113  aa   141151 154137 
    000114  aa   164141 142154 
    000115  aa   145137 160162 
    000116  aa   151166 137056 
    000117  aa   141154 155040 
    000120  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000121  aa   076151 156143 
    000122  aa   154165 144145 
    000123  aa   076147 141164 
    000124  aa   145137 155141 
    000125  aa   143162 157163 
    000126  aa   056151 156143 
    000127  aa   154056 141154 
    000130  aa   155040 040040 
    000131  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000132  aa   076151 156143 
    000133  aa   154165 144145 
    000134  aa   076163 164141 
    000135  aa   143153 137150 
    000136  aa   145141 144145 
    000137  aa   162056 151156 
    000140  aa   143154 056141 
    000141  aa   154155 040040 
    000142  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000143  aa   076151 156143 
    000144  aa   154165 144145 
    000145  aa   076163 164141 
    000146  aa   143153 137146 
    000147  aa   162141 155145 
    000150  aa   056151 156143 
    000151  aa   154056 141154 
    000152  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          20    .actor                   mail_table_priv_:    32.
          54    .defs_loop               mail_table_priv_:    32.
         115    .gate_errordesc          mail_table_priv_:    32.
         112    .gate_errorname          mail_table_priv_:    32.
          62    .next_def                mail_table_priv_:    32.
         116    .no_gate_error           mail_table_priv_:    32.
          37    .return_name             mail_table_priv_:    32.
          52    .search_defs             mail_table_priv_:    32.
          65    .setup                   mail_table_priv_:    32,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
                                                              44,   45,   46,   47.
           1    add                      mail_table_priv_:    34.
         120    add.e                    mail_table_priv_:    34.
           2    add_alias                mail_table_priv_:    35.
         127    add_alias.e              mail_table_priv_:    35.
        1170    call_offset              stack_header:        80.
           3    convert_v2_mail_table    mail_table_priv_:    36.
         136    convert_v2_mail_table.e  mail_table_priv_:    36.
                convert_v2_mail_table_   mail_table_priv_:    36.
           4    count_entries            mail_table_priv_:    37.
         145    count_entries.e          mail_table_priv_:    37.
           5    create                   mail_table_priv_:    38.
         154    create.e                 mail_table_priv_:    38.
                create_table             mail_table_priv_:    38.
           6    delete                   mail_table_priv_:    39.
         163    delete.e                 mail_table_priv_:    39.
           7    delete_alias             mail_table_priv_:    40.
         172    delete_alias.e           mail_table_priv_:    40.
          10    delete_alias_case_ins    mail_table_priv_:    41.
         201    delete_alias_case_ins.e  mail_table_priv_:    41.
        1174    entry_offset             stack_header:        84.
          11    get                      mail_table_priv_:    42.
         210    get.e                    mail_table_priv_:    42.
          12    get_raw_by_index         mail_table_priv_:    43.
         217    get_raw_by_index.e       mail_table_priv_:    43.
          13    get_raw_by_name          mail_table_priv_:    44.
         226    get_raw_by_name.e        mail_table_priv_:    44.
                mail_table_mgr_          mail_table_priv_:    34,   35,   37,   38,   39,   40,   41,   42,   43,   44,   45,
                                                              46,   47.
          20    main                     mail_table_priv_:    32,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
                                                              44,   45,   46,   47.
                priv_get                 mail_table_priv_:    42.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          14    salvage                  mail_table_priv_:    45.
         235    salvage.e                mail_table_priv_:    45.
                signal_                  mail_table_priv_:    32.
         104    signal_arglist           mail_table_priv_:    32.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          15    test                     mail_table_priv_:    46.
         244    test.e                   mail_table_priv_:    46.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
           0    transfer_vector          mail_table_priv_:    32,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
                                                              44,   45,   46,   47.
          17    tv_end                   mail_table_priv_:    32.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          16    update                   mail_table_priv_:    47.
         253    update.e                 mail_table_priv_:    47.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
